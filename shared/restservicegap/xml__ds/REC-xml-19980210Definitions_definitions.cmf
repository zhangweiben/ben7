<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:9a838d93-cc29-4da0-bfde-049c0f613306 -->
<metadata name="REC-xml-19980210Definitions" path="/shared/restservicegap/xml_ds/REC-xml-19980210Definitions" type="DEFINITION_SET" subtype="XML_SCHEMA_DEFINITION_SET" changeToken="0">
  <definitions>
    <definition name="spec" type="ELEMENT">
      <attribute name="creationDate" type="LONG">0</attribute>
      <attribute name="creatorUserDomain" type="STRING"/>
      <attribute name="creatorUserId" type="INTEGER">0</attribute>
      <attribute name="creatorUserName" type="STRING"/>
      <attribute name="lastModifiedDate" type="LONG">0</attribute>
      <attribute name="lastModifiedUserDomain" type="STRING"/>
      <attribute name="lastModifiedUserId" type="INTEGER">0</attribute>
      <attribute name="lastModifiedUserName" type="STRING"/>
      <attribute name="resourceModifiedDateOnSourceCISSite" type="LONG">0</attribute>
    </definition>
  </definitions>
  <security>
    <owner user="admin" domain="composite"/>
  </security>
  <attribute name="XMLFilePath" type="OBJECT">rO0ABXNyACZjb20uY29tcG9zaXRlc3cuY29tbW9uLnJlcG9zaXRvcnkuUGF0aEAIAgnmFDg4AgACWgAIYWJzb2x1dGVMAAVwYXJ0c3QAEExqYXZhL3V0aWwvTGlzdDt4cAFzcgATamF2YS51dGlsLkFycmF5TGlzdHiB0h2Zx2GdAwABSQAEc2l6ZXhwAAAABHcEAAAABHQABnNoYXJlZHQADnJlc3RzZXJ2aWNlZ2FwdAAGeG1sX2RzdAAUUkVDLXhtbC0xOTk4MDIxMC54bWx4</attribute>
  <attribute name="charset" type="STRING">&lt;auto detect&gt;</attribute>
  <attribute name="creationDate" type="LONG">1494825941862</attribute>
  <attribute name="creatorUserDomain" type="STRING">composite</attribute>
  <attribute name="creatorUserId" type="INTEGER">-1973</attribute>
  <attribute name="creatorUserName" type="STRING">admin</attribute>
  <attribute name="lastModifiedDate" type="LONG">1494825941862</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserId" type="INTEGER">-1973</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="resourceModifiedDateOnSourceCISSite" type="LONG">1494825941862</attribute>
  <attribute name="sources" type="LIST">
    <list type="OBJECT">rO0ABXNyADVjb20uY29tcG9zaXRlc3cuY29tbW9uLnJlcG9zaXRvcnkuRGVmaW5pdGlvblNldFNvdXJjZVYpv6Zr2hqJAgACTAAIbG9jYXRpb250ABJMamF2YS9sYW5nL1N0cmluZztMAApzb3VyY2VUZXh0cQB+AAF4cHQACHNjaGVtYV8xdAGHPD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48eHM6c2NoZW1hIHhtbG5zOnhzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSIgYXR0cmlidXRlRm9ybURlZmF1bHQ9InVucXVhbGlmaWVkIiBlbGVtZW50Rm9ybURlZmF1bHQ9InF1YWxpZmllZCIgdGFyZ2V0TmFtZXNwYWNlPSJ4bGluayI+DQogIDx4czppbXBvcnQgc2NoZW1hTG9jYXRpb249InNjaGVtYV9iYXNlIi8+DQogIDx4czphdHRyaWJ1dGUgbmFtZT0ic2hvdyIgdHlwZT0ieHM6c3RyaW5nIi8+DQogIDx4czphdHRyaWJ1dGUgbmFtZT0idHlwZSIgdHlwZT0ieHM6c3RyaW5nIi8+DQogIDx4czphdHRyaWJ1dGUgbmFtZT0iYWN0dWF0ZSIgdHlwZT0ieHM6c3RyaW5nIi8+DQo8L3hzOnNjaGVtYT4NCg==</list>
    <list type="OBJECT">rO0ABXNyADVjb20uY29tcG9zaXRlc3cuY29tbW9uLnJlcG9zaXRvcnkuRGVmaW5pdGlvblNldFNvdXJjZVYpv6Zr2hqJAgACTAAIbG9jYXRpb250ABJMamF2YS9sYW5nL1N0cmluZztMAApzb3VyY2VUZXh0cQB+AAF4cHQACHNjaGVtYV8ydAEjPD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48eHM6c2NoZW1hIHhtbG5zOnhzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSIgYXR0cmlidXRlRm9ybURlZmF1bHQ9InVucXVhbGlmaWVkIiBlbGVtZW50Rm9ybURlZmF1bHQ9InF1YWxpZmllZCIgdGFyZ2V0TmFtZXNwYWNlPSJ4bWwiPg0KICA8eHM6aW1wb3J0IHNjaGVtYUxvY2F0aW9uPSJzY2hlbWFfYmFzZSIvPg0KICA8eHM6YXR0cmlidXRlIG5hbWU9InNwYWNlIiB0eXBlPSJ4czpzdHJpbmciLz4NCjwveHM6c2NoZW1hPg0K</list>
    <list type="OBJECT"></list>
  </attribute>
</metadata>