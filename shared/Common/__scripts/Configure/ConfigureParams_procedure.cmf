<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:e931daa6-7fda-456a-badf-4cdb1c228a1a -->
<metadata name="ConfigureParams" path="/shared/Common/_scripts/Configure/ConfigureParams" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>&lt;![CDATA[ConfigureParamsXML:
&#x9;-- Data Virtualization Best Practices --

&#x9;These settings are &quot;DEFAULT&quot; configuration settings used by the generation scripts.

   &#x9;The following parameters can be changed on invocation to generateViews and generateDatasourceList.
   &#x9;generateViews, caseRule, useAliasRule, generateWithSourceColumn
   &#x9;
&#x9;There is **ALWAYS ONLY** 1 row of values returned:
 
&#x9;Input: none
&#x9;Output:
&#x9;&#x9;ConfigParamsPipe &#x9;&#x9;&#x9;- a row containing the default configuration settings.
&#x9;&#x9;&#x9;PIPE (
&#x9;&#x9;&#x9;    &#x9;-- &#x9;G=Generate the resource names 
&#x9;&#x9;&#x9;    &#x9;-- &#x9;R=Retrieve the resource name,  (resources include PATH names, VIEW names AND COLUMN names)
   &#x9;&#x9;&#x9;&#x9;generateMode,
 &#x9;&#x9;&#x9;   &#x9;&#x9;-- &#x9;A=Return All abstract columns, 
&#x9;&#x9;&#x9;    &#x9;-- &#x9;U=Return ONLY Unchanged/Dropped columns that were NOT found.
&#x9;&#x9;&#x9;&#x9;outputMode,
&#x9;&#x9;&#x9;&#x9;&#x9;--     0=Do not generate - (browse only) print out what will happen but don&apos;t perform the generation
&#x9;&#x9;&#x9;&#x9;&#x9;--     1=Do generate - Perform the VIEW Generation, 
&#x9;&#x9;&#x9;&#x9;generateViews
&#x9;&#x9;&#x9;&#x9;&#x9;--  TABLES only.  This caseRule is only used for tables.
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9; &#x9;Assumption:  The original table name has to have separators (_) for this to work properly.
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;&#x9;     If the original word has no separators then the case rule gets applied to the single word
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;j=javaCase - 1st word part is lower case, following word parts are 1st is letter is upper and remaining word part is lower with no separators
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;C=CamelCase - 1st letter of each word part is upper case and remaining word part is lower with no separators
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;T=Title_Case - 1st letter of each word part is upper case and remaining word part is lower with separators retained
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;U=UPPER_CASE - All word parts are UPPER case with separtors retained
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;l=lower_case - All word parts are lower case with separators retained
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;O=Original_case - The word is not changed at all -- just pass it through as is
&#x9;&#x9;&#x9;&#x9;resourceCaseRule (used when generateMode=&apos;G&apos;) 
&#x9;&#x9;&#x9;&#x9;&#x9;--  COLUMNS only.  This caseRule is only used for columns.
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9; &#x9;Assumption:  The original column name has to have separators (_) for this to work properly.
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;&#x9;     If the original word has no separators then the case rule gets applied to the single word
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;j=javaCase - 1st word part is lower case, following word parts are 1st is letter is upper and remaining word part is lower with no separators
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;C=CamelCase - 1st letter of each word part is upper case and remaining word part is lower with no separators
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;T=Title_Case - 1st letter of each word part is upper case and remaining word part is lower with separators retained
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;U=UPPER_CASE - All word parts are UPPER case with separtors retained
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;l=lower_case - All word parts are lower case with separators retained
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;O=Original_case - The word is not changed at all -- just pass it through as is
&#x9;&#x9;&#x9;&#x9;columnCaseRule (used when generateMode=&apos;G&apos;) 
&#x9;&#x9;&#x9;&#x9;&#x9;--     Word part separator consisting of a 1 character value such as &apos;_&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;which is used to separate the word parts within a column.  Spaces ARE NOT allowed IN COLUMN NAMES.
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;Example MY_COLUMN_NAME
&#x9;&#x9;&#x9;&#x9;separator (used when generateMode=&apos;G&apos;)
&#x9;&#x9;&#x9;&#x9;&#x9;-- &#x9;When generating the logical name from the data source, use the &quot;AliasNameRuleSet&quot; as a lookup procedure
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;  to match a word part against the Alias table.  For exmaple:
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;word part=ds&#x9;&#x9;table alias=DS&#x9;&#x9;table rule=DataSource
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;0=DO NOT perform alias rule lookup at all.  Word Part is passed through
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;result=ds
&#x9;&#x9;&#x9;&#x9;&#x9;--  1=Use alias rule and MATCH CASE exactly
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;result=ds (the original word part &apos;ds&apos; is returned as no match is found becuase &apos;ds&apos; is not equal to &apos;DS&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;2=Use alias rule and DO NOT MATCH CASE
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;result=DataSource (UPPER(&apos;ds&apos;) = UPPER(&apos;DS&apos;), therefore DataSource is returned&#x9;
&#x9;&#x9;&#x9;&#x9;useAliasRule (used when generateMode=&apos;G&apos;)
&#x9;&#x9;&#x9;&#x9;&#x9;--  Any set of characters used to prefix a table or procedure name.  Include underscores with the suffix if applicable.
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;Example: V_ MY_TABLE or V_MY_TABLE &#x9;
&#x9;&#x9;&#x9;&#x9;resourcePrefix (used when generateMode=&apos;G&apos;)
&#x9;&#x9;&#x9;&#x9;&#x9;--  Any set of characters used to suffix a table or procedure name.  Include underscores with the suffix if applicable.
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;Example: _APP MY_TABLE or MY_TABLE_APP &#x9;
&#x9;&#x9;&#x9;&#x9;resourceSuffix (used when generateMode=&apos;G&apos;)
&#x9;&#x9;&#x9;&#x9;&#x9;-- &#x9;This parameter allows the user to control whether to generate the view with the original data source
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;   column or not.  It adds a level of control and flexibility into this automation process.
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;Regarding the retrieved logicalColumn from the mapping spreadsheet.
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;   When logicalColumn IS blank OR NULL then
&#x9;&#x9;&#x9;&#x9;&#x9;-- &#x9;   1=Generate the view with the source column (pass through)-logical status is UNCHANGED
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;   0=Do NOT generate the view with the source column (no pass through)-logical status is DROPPED
&#x9;&#x9;&#x9;&#x9;generateWithSourceColumn (used when generateMode=&apos;R&apos;)
&#x9;&#x9;&#x9;&#x9;&#x9;-- &#x9;This parameter allows the user to control whether to generate the cast statement around the generated
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;   column or not.  It uses the column type from the source view.
&#x9;&#x9;&#x9;&#x9;&#x9;-- &#x9;1=Generate the CAST statement around the column
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;0=Do not generate CAST statement.  Pass through column as is.  Default behavior.
&#x9;&#x9;&#x9;&#x9;generateCast (used when generateMode=&apos;G&apos;)
&#x9;&#x9;&#x9;&#x9;debug  - Debug level 1: &apos;Y&apos;=print to log and console window, &apos;F&apos;=no debug output to log or console
&#x9;&#x9;&#x9;&#x9;debug2 - Debug level 2: &apos;Y&apos;=print to log and console window, &apos;F&apos;=no debug output to log or console
&#x9;&#x9;&#x9;&#x9;debug3 - Debug level 3: &apos;Y&apos;=print to log and console window, &apos;F&apos;=no debug output to log or console
&#x9;&#x9;&#x9;&#x9;&#x9;-- basePath gets SET dynamically so it is initially set to NULL.
&#x9;&#x9;&#x9;&#x9;basePath - Path to the base project directory. 
&#x9;&#x9;&#x9;&#x9;&#x9;-- scriptsPath gets SET dynamically so it is initially set to NULL.
&#x9;&#x9;&#x9;&#x9;scriptsPath - Path to the scripts folder
&#x9;&#x9;&#x9;&#x9;padAmount - The amount of padding to use when printing out the columnName (in the example below padding of 30 is used)
&#x9;&#x9;&#x9;)
&#x9;Exceptions:  none

&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;CSW Version:&#x9;Reason:
&#x9;08/20/2010&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.1.0&#x9;&#x9;&#x9;Created new
&#x9;01/24/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;8.0.0&#x9;&#x9;&#x9;B.P. 2019.1: Added the ability to handle columnCaseRule, resourcePrefix, resourceSuffix and newColumnList for generateMode=&apos;G&apos;. 
&#x9;06/12/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;B.P. 2019.200: Modified to use XML based procedures in order to eliminate vector usage.
&#x9;
&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.]]&gt;</annotation>
  <parameters>
    <parameter name="ConfigParamsXML" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <attribute name="Script" type="STRING">/* 
&#x9;ConfigureParamsXML:
&#x9;-- Data Virtualization Best Practices --

&#x9;These settings are &quot;DEFAULT&quot; configuration settings used by the generation scripts.

   &#x9;The following parameters can be changed on invocation to generateViews and generateDatasourceList.
   &#x9;generateViews, caseRule, useAliasRule, generateWithSourceColumn
   &#x9;
&#x9;There is **ALWAYS ONLY** 1 row of values returned:
 
&#x9;Input: none
&#x9;Output:
&#x9;&#x9;ConfigParamsPipe &#x9;&#x9;&#x9;- a row containing the default configuration settings.
&#x9;&#x9;&#x9;PIPE (
&#x9;&#x9;&#x9;    &#x9;-- &#x9;G=Generate the resource names 
&#x9;&#x9;&#x9;    &#x9;-- &#x9;R=Retrieve the resource name,  (resources include PATH names, VIEW names AND COLUMN names)
   &#x9;&#x9;&#x9;&#x9;generateMode,

 &#x9;&#x9;&#x9;   &#x9;&#x9;-- &#x9;A=Return All abstract columns, 
&#x9;&#x9;&#x9;    &#x9;-- &#x9;U=Return ONLY Unchanged/Dropped columns that were NOT found.
&#x9;&#x9;&#x9;&#x9;outputMode,

&#x9;&#x9;&#x9;&#x9;&#x9;--     0=Do not generate - (browse only) print out what will happen but don&apos;t perform the generation
&#x9;&#x9;&#x9;&#x9;&#x9;--     1=Do generate - Perform the VIEW Generation, 
&#x9;&#x9;&#x9;&#x9;generateViews

&#x9;&#x9;&#x9;&#x9;&#x9;--  TABLES only.  This caseRule is only used for tables.
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9; &#x9;Assumption:  The original table name has to have separators (_) for this to work properly.
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;&#x9;     If the original word has no separators then the case rule gets applied to the single word
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;j=javaCase - 1st word part is lower case, following word parts are 1st is letter is upper and remaining word part is lower with no separators
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;C=CamelCase - 1st letter of each word part is upper case and remaining word part is lower with no separators
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;T=Title_Case - 1st letter of each word part is upper case and remaining word part is lower with separators retained
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;U=UPPER_CASE - All word parts are UPPER case with separtors retained
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;l=lower_case - All word parts are lower case with separators retained
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;O=Original_case - The word is not changed at all -- just pass it through as is
&#x9;&#x9;&#x9;&#x9;resourceCaseRule (used when generateMode=&apos;G&apos;) 

&#x9;&#x9;&#x9;&#x9;&#x9;--  COLUMNS only.  This caseRule is only used for columns.
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9; &#x9;Assumption:  The original column name has to have separators (_) for this to work properly.
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;&#x9;     If the original word has no separators then the case rule gets applied to the single word
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;j=javaCase - 1st word part is lower case, following word parts are 1st is letter is upper and remaining word part is lower with no separators
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;C=CamelCase - 1st letter of each word part is upper case and remaining word part is lower with no separators
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;T=Title_Case - 1st letter of each word part is upper case and remaining word part is lower with separators retained
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;U=UPPER_CASE - All word parts are UPPER case with separtors retained
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;l=lower_case - All word parts are lower case with separators retained
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;O=Original_case - The word is not changed at all -- just pass it through as is
&#x9;&#x9;&#x9;&#x9;columnCaseRule (used when generateMode=&apos;G&apos;) 

&#x9;&#x9;&#x9;&#x9;&#x9;--     Word part separator consisting of a 1 character value such as &apos;_&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;which is used to separate the word parts within a column.  Spaces ARE NOT allowed IN COLUMN NAMES.
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;Example MY_COLUMN_NAME
&#x9;&#x9;&#x9;&#x9;separator (used when generateMode=&apos;G&apos;)

&#x9;&#x9;&#x9;&#x9;&#x9;-- &#x9;When generating the logical name from the data source, use the &quot;AliasNameRuleSet&quot; as a lookup procedure
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;  to match a word part against the Alias table.  For exmaple:
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;word part=ds&#x9;&#x9;table alias=DS&#x9;&#x9;table rule=DataSource
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;0=DO NOT perform alias rule lookup at all.  Word Part is passed through
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;result=ds
&#x9;&#x9;&#x9;&#x9;&#x9;--  1=Use alias rule and MATCH CASE exactly
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;result=ds (the original word part &apos;ds&apos; is returned as no match is found becuase &apos;ds&apos; is not equal to &apos;DS&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;2=Use alias rule and DO NOT MATCH CASE
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;result=DataSource (UPPER(&apos;ds&apos;) = UPPER(&apos;DS&apos;), therefore DataSource is returned&#x9;
&#x9;&#x9;&#x9;&#x9;useAliasRule (used when generateMode=&apos;G&apos;)

&#x9;&#x9;&#x9;&#x9;&#x9;--  Any set of characters used to prefix a table or procedure name.  Include underscores with the suffix if applicable.
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;Example: V_ MY_TABLE or V_MY_TABLE &#x9;
&#x9;&#x9;&#x9;&#x9;resourcePrefix (used when generateMode=&apos;G&apos;)

&#x9;&#x9;&#x9;&#x9;&#x9;--  Any set of characters used to suffix a table or procedure name.  Include underscores with the suffix if applicable.
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;Example: _APP MY_TABLE or MY_TABLE_APP &#x9;
&#x9;&#x9;&#x9;&#x9;resourceSuffix (used when generateMode=&apos;G&apos;)

&#x9;&#x9;&#x9;&#x9;&#x9;-- &#x9;This parameter allows the user to control whether to generate the view with the original data source
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;   column or not.  It adds a level of control and flexibility into this automation process.
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;Regarding the retrieved logicalColumn from the mapping spreadsheet.
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;   When logicalColumn IS blank OR NULL then
&#x9;&#x9;&#x9;&#x9;&#x9;-- &#x9;   1=Generate the view with the source column (pass through)-logical status is UNCHANGED
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;   0=Do NOT generate the view with the source column (no pass through)-logical status is DROPPED
&#x9;&#x9;&#x9;&#x9;generateWithSourceColumn (used when generateMode=&apos;R&apos;)

&#x9;&#x9;&#x9;&#x9;&#x9;-- &#x9;This parameter allows the user to control whether to generate the cast statement around the generated
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;   column or not.  It uses the column type from the source view.
&#x9;&#x9;&#x9;&#x9;&#x9;-- &#x9;1=Generate the CAST statement around the column
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;0=Do not generate CAST statement.  Pass through column as is.  Default behavior.
&#x9;&#x9;&#x9;&#x9;generateCast (used when generateMode=&apos;G&apos;)

&#x9;&#x9;&#x9;&#x9;debug  - Debug level 1: &apos;Y&apos;=print to log and console window, &apos;F&apos;=no debug output to log or console
&#x9;&#x9;&#x9;&#x9;debug2 - Debug level 2: &apos;Y&apos;=print to log and console window, &apos;F&apos;=no debug output to log or console
&#x9;&#x9;&#x9;&#x9;debug3 - Debug level 3: &apos;Y&apos;=print to log and console window, &apos;F&apos;=no debug output to log or console

&#x9;&#x9;&#x9;&#x9;&#x9;-- basePath gets SET dynamically so it is initially set to NULL.
&#x9;&#x9;&#x9;&#x9;basePath - Path to the base project directory. 

&#x9;&#x9;&#x9;&#x9;&#x9;-- scriptsPath gets SET dynamically so it is initially set to NULL.
&#x9;&#x9;&#x9;&#x9;scriptsPath - Path to the scripts folder

&#x9;&#x9;&#x9;&#x9;&#x9;-- The amount of padding to use when printing out the columnName (in the example below padding of 30 is used)
&#x9;&#x9;&#x9;&#x9;padAmount 
&#x9;&#x9;&#x9;)
&#x9;Exceptions:  none

&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;CSW Version:&#x9;Reason:
&#x9;08/20/2010&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.1.0&#x9;&#x9;&#x9;Created new
&#x9;01/24/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;8.0.0&#x9;&#x9;&#x9;B.P. 2019.1: Added the ability to handle columnCaseRule, resourcePrefix, resourceSuffix and newColumnList for generateMode=&apos;G&apos;. 
&#x9;06/12/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;B.P. 2019.200: Modified to use XML based procedures in order to eliminate vector usage.
&#x9;
&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

*/
PROCEDURE ConfigureParams(
&#x9;OUT ConfigParamsXML&#x9;&#x9;LONGVARCHAR
)
BEGIN
&#x9;-- Set default values
&#x9;SET ConfigParamsXML = 
&apos;&lt;ConfigParamsType&gt;
    &lt;generateMode&gt;G&lt;/generateMode&gt;
    &lt;outputMode&gt;A&lt;/outputMode&gt;
    &lt;generateViews&gt;1&lt;/generateViews&gt;
    &lt;resourceCaseRule&gt;T&lt;/resourceCaseRule&gt;
    &lt;columnCaseRule&gt;l&lt;/columnCaseRule&gt;
    &lt;separator&gt;_&lt;/separator&gt;
    &lt;useAliasRule&gt;2&lt;/useAliasRule&gt;
    &lt;resourcePrefix&gt;null&lt;/resourcePrefix&gt;
    &lt;resourceSuffix&gt;null&lt;/resourceSuffix&gt;
    &lt;generateWithSourceColumn&gt;1&lt;/generateWithSourceColumn&gt;
    &lt;generateCast&gt;0&lt;/generateCast&gt;
    &lt;generateIndexes&gt;1&lt;/generateIndexes&gt;
    &lt;debug&gt;N&lt;/debug&gt;
    &lt;debug2&gt;N&lt;/debug2&gt;
    &lt;debug3&gt;N&lt;/debug3&gt;
    &lt;basePath&gt;null&lt;/basePath&gt;
    &lt;scriptsPath&gt;null&lt;/scriptsPath&gt;
    &lt;padAmount&gt;40&lt;/padAmount&gt;
&lt;/ConfigParamsType&gt;&apos;;
/* Default Values
   &#x9;&apos;G&apos;,&#x9;-- generateMode,
&#x9;    &#x9;--&#x9; &#x9;G=Generate the resource names 
&#x9;    &#x9;--&#x9; &#x9;R=Retrieve the resource name,  (resources include PATH names, VIEW names AND COLUMN names)
   &#x9;&apos;A&apos;,&#x9;-- outputMode,
 &#x9;   &#x9;&#x9;--&#x9; &#x9;A=Return All abstract columns, 
&#x9;    &#x9;--&#x9; &#x9;U=Return ONLY Unchanged/Dropped columns that were NOT found.
&#x9;1,&#x9;&#x9;-- generateViews
&#x9; &#x9;&#x9;-- &#x9;&#x9;0=Do not generate - (browse only) print out what will happen but don&apos;t perform the generation.
&#x9;&#x9;&#x9;-- &#x9;&#x9;1=Do generate [DEFAULT] - Perform the VIEW Generation with a column projection.
&#x9;&#x9;&#x9;-- &#x9;&#x9;2= Do generate          - Perform the VIEW Generation with a select * projection.
&#x9;&apos;O&apos;,&#x9;-- resourceCaseRule (used when generateMode=&apos;G&apos;) 
&#x9;&#x9;&#x9;--  TABLES only.  This caseRule is only used for tables.
&#x9;&#x9;&#x9;--&#x9; &#x9;Assumption:  The original table name has to have separators (_) for this to work properly.
&#x9;&#x9;&#x9;--&#x9;&#x9;&#x9;     If the original word has no separators then the case rule gets applied to the single word
&#x9;&#x9;&#x9;--&#x9;&#x9;j=javaCase - 1st word part is lower case, following word parts are 1st is letter is upper and remaining word part is lower with no separators
&#x9;&#x9;&#x9;--&#x9;&#x9;C=CamelCase - 1st letter of each word part is upper case and remaining word part is lower with no separators
&#x9;&#x9;&#x9;--&#x9;&#x9;T=Title_Case - 1st letter of each word part is upper case and remaining word part is lower with separators retained
&#x9;&#x9;&#x9;--&#x9;&#x9;U=UPPER_CASE - All word parts are UPPER case with separtors retained
&#x9;&#x9;&#x9;--&#x9;&#x9;l=lower_case - All word parts are lower case with separators retained
&#x9;&#x9;&#x9;--&#x9;&#x9;O=Original_case - The word is not changed at all -- just pass it through as is
&#x9;&apos;O&apos;,&#x9;-- columnCaseRule (used when generateMode=&apos;G&apos;) 
&#x9;&#x9;&#x9;--  COLUMNS only.  This caseRule is only used for columns.
&#x9;&#x9;&#x9;--&#x9; &#x9;Assumption:  The original column name has to have separators (_) for this to work properly.
&#x9;&#x9;&#x9;--&#x9;&#x9;&#x9;     If the original word has no separators then the case rule gets applied to the single word
&#x9;&#x9;&#x9;--&#x9;&#x9;j=javaCase - 1st word part is lower case, following word parts are 1st is letter is upper and remaining word part is lower with no separators
&#x9;&#x9;&#x9;--&#x9;&#x9;C=CamelCase - 1st letter of each word part is upper case and remaining word part is lower with no separators
&#x9;&#x9;&#x9;--&#x9;&#x9;T=Title_Case - 1st letter of each word part is upper case and remaining word part is lower with separators retained
&#x9;&#x9;&#x9;--&#x9;&#x9;U=UPPER_CASE - All word parts are UPPER case with separtors retained
&#x9;&#x9;&#x9;--&#x9;&#x9;l=lower_case - All word parts are lower case with separators retained
&#x9;&#x9;&#x9;--&#x9;&#x9;O=Original_case - The word is not changed at all -- just pass it through as is
&#x9;&apos;_&apos;,&#x9;-- separator (used when generateMode=&apos;G&apos;)
&#x9;&#x9;&#x9;--&#x9;    Word part separator consisting of a 1 character value such as &apos;_&apos;
&#x9;&#x9;&#x9;--&#x9;&#x9;which is used to separate the word parts within a column.  Spaces ARE NOT allowed IN COLUMN NAMES.
&#x9;&#x9;&#x9;--&#x9;&#x9;Example MY_COLUMN_NAME
&#x9;2,&#x9;&#x9;-- useAliasRule (used when generateMode=&apos;G&apos;)
&#x9;&#x9;&#x9;--&#x9; &#x9;When generating the logical name from the data source, use the &quot;AliasNameRuleSet&quot; as a lookup procedure
&#x9;&#x9;&#x9;--&#x9;&#x9;  to match a word part against the Alias table.  For exmaple:
&#x9;&#x9;&#x9;--&#x9;&#x9;&#x9;word part=ds&#x9;&#x9;table alias=DS&#x9;&#x9;table rule=DataSource
&#x9;&#x9;&#x9;--&#x9;&#x9;0=DO NOT perform alias rule lookup at all.  Word Part is passed through
&#x9;&#x9;&#x9;--&#x9;&#x9;&#x9;result=ds
&#x9;&#x9;&#x9;--&#x9;&#x9;1=Use alias rule and MATCH CASE exactly
&#x9;&#x9;&#x9;--&#x9;&#x9;&#x9;result=ds (the original word part &apos;ds&apos; is returned as no match is found becuase &apos;ds&apos; is not equal to &apos;DS&apos;
&#x9;&#x9;&#x9;--&#x9;&#x9;2=Use alias rule and DO NOT MATCH CASE
&#x9;&#x9;&#x9;--&#x9;&#x9;&#x9;result=DataSource (UPPER(&apos;ds&apos;) = UPPER(&apos;DS&apos;), therefore DataSource is returned&#x9;
&#x9;null,&#x9;-- resourcePrefix (used when generateMode=&apos;G&apos;)
&#x9;&#x9;&#x9;--  Any set of characters used to prefix a table or procedure name.  Include underscores with the suffix if applicable.
&#x9;&#x9;&#x9;--&#x9;Example: V_ MY_TABLE or V_MY_TABLE &#x9;
&#x9;null,&#x9;-- resourceSuffix (used when generateMode=&apos;G&apos;)
&#x9;&#x9;&#x9;--  Any set of characters used to suffix a table or procedure name.  Include underscores with the suffix if applicable.
&#x9;&#x9;&#x9;--&#x9;Example: _APP MY_TABLE or MY_TABLE_APP &#x9;
&#x9;1,&#x9;&#x9;-- generateWithSourceColumn (used when generateMode=&apos;R&apos;)
&#x9;&#x9;&#x9;--&#x9; &#x9;This parameter allows the user to control whether to generate the view with the original data source
&#x9;&#x9;&#x9;--&#x9;&#x9;   column or not.  It adds a level of control and flexibility into this automation process.
&#x9;&#x9;&#x9;--&#x9;&#x9;Regarding the retrieved logicalColumn from the mapping spreadsheet.
&#x9;&#x9;&#x9;--&#x9;&#x9;   When logicalColumn IS blank OR NULL then
&#x9;&#x9;&#x9;--&#x9; &#x9;   1=Generate the view with the source column (pass through)-logical status is UNCHANGED
&#x9;&#x9;&#x9;--&#x9;&#x9;   0=Do NOT generate the view with the source column (no pass through)-logical status is DROPPED

&#x9;0,&#x9;&#x9;--&#x9;generateCast (used when generateMode=&apos;G&apos;)
&#x9;&#x9;&#x9;-- &#x9;&#x9;This parameter allows the user to control whether to generate the cast statement around the generated
&#x9;&#x9;&#x9;--&#x9;   &#x9;&#x9;column or not.  It uses the column type from the source view.
&#x9;&#x9;&#x9;--&#x9;&#x9;0=Do not generate CAST statement.  Pass through column as is.  Default behavior.
&#x9;&#x9;&#x9;-- &#x9;&#x9;1=Generate the CAST statement around the column
&#x9;&#x9;&#x9;--&#x9;&#x9;2-Generate the CAST statement around the non-index columns only (No CAST on index columns)
&#x9;&#x9;&#x9;--&#x9;&#x9;3-Generate the CAST statement around the non-index columns only and generate a &quot;display&quot; CAST column for each index column.  (No CAST o nindex columns)
&#x9;&#x9;&#x9;--&#x9;&#x9;4-Generate the CAST statement around the non-index columns and non-primary key index columns only (No CAST on primary key index columns)
&#x9;&#x9;&#x9;--&#x9;&#x9;5-Generate the CAST statement around the non-index columns and non-primary key index columns only and generate a &quot;display&quot; CAST column for each primary key index column.  (No CAST on primary key index columns)
&#x9;1,&#x9;&#x9;--&#x9;generateIndexes
&#x9;&#x9;&#x9;-- &#x9;&#x9;This parameter allows the user to control whether to generate indexes on the target views 
&#x9;&#x9;&#x9;--&#x9;&#x9;   as derived from the underlying resources
&#x9;&#x9;&#x9;-- &#x9;&#x9;1=(default) Generate indexes
&#x9;&#x9;&#x9;--&#x9;&#x9;0=Do not generate indexes
&#x9;&apos;N&apos;,&#x9;-- Debug level 1: &apos;Y&apos;=print to log and console window, &apos;F&apos;=no debug output to log or console
&#x9;&apos;N&apos;,&#x9;-- Debug level 2: &apos;Y&apos;=print to log and console window, &apos;F&apos;=no debug output to log or console
&#x9;&apos;N&apos;,&#x9;-- Debug level 3: &apos;Y&apos;=print to log and console window, &apos;F&apos;=no debug output to log or console
&#x9;NULL, &#x9;-- Path to the base project directory.  Path gets SET dynamically so it is initially set to NULL.
&#x9;NULL, &#x9;-- Path to the scripts subfolder of the project directory.  Path gets SET dynamically so it is initially set to NULL.
&#x9;40&#x9;-- padAmount - The amount of padding to use when printing out the columnName (in the example below padding of 30 is used)
--&#x9;** View Generator ** generateViews() : resource=inventorytransactions  column=TransactionID        logical=TransactionID
--&#x9;** View Generator ** generateViews() : resource=inventorytransactions  column=TransactionDate      logical=TransactionDate 
*/

END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1570169355264</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">na</attribute>
  <attribute name="lastModifiedUserName" type="STRING">asp5665</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
</metadata>