<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:e931daa6-7fda-456a-badf-4cdb1c228a1a -->
<metadata name="generateDatasourceList" path="/shared/Common/_scripts/Generate/generateDatasourceList" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>&lt;![CDATA[generateDatasourceList:
&#x9;-- Data Virtualization Best Practices --

&#x9;This procedure is used for generating a list of columns either from a folder of views or from data sources (Physical/Metadata). 
&#x9;This can be very useful when you need to understand what all the columns are in your datasource.  This file can then be used 
&#x9;as the basis for sorting, removing duplicates and then assigning logical/canonical names to the physical names.  It is also 
&#x9;possible to generate the logical names using various case sensitivity rules and alias rules.  This could be done if you 
&#x9;do not already have a data dictionary defined for your physical to logical mappings.  This is one way to begin a data 
&#x9;dictionary for the phyiscal to logical mapping.  

&#x9;It should be noted that this procedure uses the &quot;Target&quot; folder in the ConfigureStartingFolders().
&#x9;
&#x9;This procedure is meant to be executed by a Data Architect within studio.

&#x9;-------
&#x9;Usage:
&#x9;-------
&#x9;1) Edit the /&lt;project-name&gt;/_scripts/Configure/ConfigureParams and ConfigureStartingFolders file to set up the processing
&#x9;&#x9;startingFolderVector - 
&#x9;&#x9;&#x9;defines which data source folders to process, 
&#x9;&#x9;&#x9;where the views get generated, 
&#x9;&#x9;&#x9;and whether the sub-folders are derived from the source or defined absolutely
&#x9;----------
&#x9;Cautions:
&#x9;----------
&#x9;   CAUTION(1): Overlapping sourceFolderPath definitions will result in duplicated views being produced
&#x9;&#x9;Take the 2 example source folder paths expressed below.  The 2nd one is a sub-directory of the first one.
&#x9;&#x9;This will result in the same source folders being processed twice which generates the same mapping views
&#x9;&#x9;but in different target folders.
&#x9;&#x9;(1,&apos;PV&apos;,&apos;A&apos;,&apos;/shared/BestPractices/DataAbstraction_GENERIC_Template/Physical/Metadata&apos;,null,&apos;/shared/BestPractices/DataAbstraction_GENERIC_Template/Physical/Physical&apos;);
&#x9;&#x9;(1,&apos;PV&apos;,&apos;A&apos;,&apos;/shared/BestPractices/DataAbstraction_GENERIC_Template/Physical/Metadata/OracleSource/cisOraDemoDS/CISORADEMO&apos;,null,&apos;/shared/BestPractices/DataAbstraction_GENERIC_Template/Physical/Physical/CISORADEMO&apos;);

&#x9;    CAUTION(2): Source Folder Path definitions are case sensitive and must match the actual source path that you
&#x9;&#x9;want to introspect to create mapping views from.

&#x9;    CAUTION(3): Only views and procedures that produces a cursor output is supported.  Procedures include, parameterized or customer procedures
&#x9;&#x9;&#x9;with cursor output, XSLT with cursor output, packaged queries with cursor output.

&#x9;Input:
   &#x9;&#x9;Explanation:  The actual input are defined as local variables with DEFAULT values.  Adjust those variables accordingly.

&#x9;&#x9;&#x9;-- generate the logical names or physical names only
&#x9;    &#x9;-- 1 (TRUE) - generate datasource list with logical names
&#x9;&#x9;&#x9;-- 0 (FALSE) - generate datasource list only with no logical names, 
&#x9;&#x9;&#x9;-- Generally this parameter is true.  However, it may be useful to set to generateLogicalNames=0 and layerType=&apos;PM&apos; which allows
&#x9;&#x9;&#x9;--  the user to generate just the physical names for the physical metadata in the spreadsheet format as a way of initializing
&#x9;&#x9;&#x9;--  the physical names only.
  &#x9;&#x9;generateLogicalNames

&#x9;&#x9;&#x9;-- Determines whether to retrieve names from the Common_Model_v2_file[1-3].xls spreadsheets or generate them and
&#x9;&#x9;&#x9;--   is only meaninfful when generateLogicalNames=1
&#x9;&#x9; &#x9;-- G=Generate the resource names 
&#x9;&#x9;&#x9;--   use &apos;G&apos; in conjunctionwith layerType=&apos;PM&apos; to generate the physical metadata names to the spreadsheet.
&#x9;&#x9;&#x9;--   This would be the strategy for initializing the Common_Model_v2_file[1-3].xls spreadsheet.  
&#x9;&#x9;&#x9;--   It is often useful to set the caseRule parameter to establish the type of logical names that you want to start with.
&#x9;&#x9;&#x9;-- R=Retrieve the resource name from a spreadsheet. (resources include PATH names, VIEW names AND COLUMN names)
&#x9;&#x9;&#x9;--   use &apos;R&apos; in conjunction with layerType=&apos;FV&apos;
&#x9;&#x9;generateMode 

&#x9;&#x9;&#x9;--  TABLES/PROCEDURES only.  This resourceCaseRule is only used for tables or procedures.
&#x9;&#x9;&#x9;-- &#x9;&#x9;used when generateMode=&apos;G&apos;
&#x9;&#x9;&#x9;--&#x9; &#x9;Assumption:  The original table name has to have separators (_) for this to work properly.
&#x9;&#x9;&#x9;--&#x9;&#x9;&#x9;     If the original word has no separators then the case rule gets applied to the single word
&#x9;&#x9;&#x9;-- &#x9;&#x9;j=javaCase - 1st word part is lower case, following word parts are 1st is letter is upper and remaining word part is lower with no separators
&#x9;&#x9;&#x9;-- &#x9;&#x9;C=CamelCase - 1st letter of each word part is upper case and remaining word part is lower with no separators
&#x9;&#x9;&#x9;-- &#x9;&#x9;T=Title_Case - 1st letter of each word part is upper case and remaining word part is lower with separators retained
&#x9;&#x9;&#x9;-- &#x9;&#x9;U=UPPER_CASE - All word parts are UPPER case with separtors retained
&#x9;&#x9;&#x9;-- &#x9;&#x9;l=lower_case - All word parts are lower case with separators retained
&#x9;&#x9;&#x9;-- &#x9;&#x9;O=Original_case - The word is not changed at all -- just pass it through as is
&#x9;&#x9;resourceCaseRule

&#x9;&#x9;&#x9;--  COLUMNS only.  This caseRule is only used for columns.
&#x9;&#x9;&#x9;--&#x9;&#x9;used when generateMode=&apos;G&apos;
&#x9;&#x9;&#x9;--&#x9; &#x9;Assumption:  The original column name has to have separators (_) for this to work properly.
&#x9;&#x9;&#x9;--&#x9;&#x9;&#x9;     If the original word has no separators then the case rule gets applied to the single word
&#x9;&#x9;&#x9;--&#x9;&#x9;j=javaCase - 1st word part is lower case, following word parts are 1st is letter is upper and remaining word part is lower with no separators
&#x9;&#x9;&#x9;--&#x9;&#x9;C=CamelCase - 1st letter of each word part is upper case and remaining word part is lower with no separators
&#x9;&#x9;&#x9;--&#x9;&#x9;T=Title_Case - 1st letter of each word part is upper case and remaining word part is lower with separators retained
&#x9;&#x9;&#x9;--&#x9;&#x9;U=UPPER_CASE - All word parts are UPPER case with separtors retained
&#x9;&#x9;&#x9;--&#x9;&#x9;l=lower_case - All word parts are lower case with separators retained
&#x9;&#x9;&#x9;--&#x9;&#x9;O=Original_case - The word is not changed at all -- just pass it through as is
&#x9;&#x9;columnCaseRule

&#x9;&#x9;&#x9;-- determines how to use the word part alias rules.
&#x9;&#x9;&#x9;-- used when generateMode=&apos;G&apos;
&#x9;&#x9;&#x9;-- 0=[default] DO NOT perform alias rule lookup at all.  Word Part is passed through (default is 0)
&#x9;&#x9;&#x9;-- 1=Use alias rule and MATCH CASE exactly
&#x9;&#x9;&#x9;-- 2=Use alias rule and DO NOT MATCH CASE
&#x9;&#x9;&#x9;-- The &quot;AliasNameRuleSet()&quot; procedure is found in the folder /shared/&lt;project-folder&gt;/_scripts/Configure.
&#x9;&#x9;useAliasRule

&#x9;&#x9;&#x9;-- used when generateMode=&apos;G&apos;
&#x9;&#x9;&#x9;--  Any set of characters used to prefix a table or procedure name.  Include underscores with the suffix if applicable.
&#x9;&#x9;&#x9;--&#x9;Example: V_ MY_TABLE or V_MY_TABLE &#x9;
&#x9;&#x9;resourcePrefix

&#x9;&#x9;&#x9;-- used when generateMode=&apos;G&apos;
&#x9;&#x9;&#x9;--  Any set of characters used to suffix a table or procedure name.  Include underscores with the suffix if applicable.
&#x9;&#x9;&#x9;--&#x9;Example: _APP MY_TABLE or MY_TABLE_APP &#x9;
&#x9;&#x9;resourceSuffix

&#x9;&#x9;&#x9;-- flag indicating whether to ignore or generate unsupported column types.  For example in Oracle an SDO spatial type gets imported into Composite at &apos;OTHER&apos;.
&#x9;&#x9;&#x9;-- 0/null (default) - ignore column type = &apos;OTHER&apos; and do not generate that column
&#x9;&#x9;&#x9;-- 1 - generate columns where the column type = &apos;OTHER&apos;
&#x9;&#x9;generateUnsupportedColumnType

&#x9;&#x9;&#x9;-- specifies how the source resource will be matched against the resource being interrogated
&#x9;&#x9;&#x9;--&#x9;0=fuzzy match - sourcePath + derivedFilterPath must simply be contained within resourcePath
&#x9;&#x9;&#x9;--&#x9;1 (default)=exact match - sourcePath + derivedFilterPath must match exactly in resourcePath
&#x9;&#x9;exactMatch

&#x9;&#x9;&#x9;-- The list &quot;derivedFilterPath&quot; is a comma-separated list of resources and may be used with either generateToFolder (option 1) to groupId (option 2) 
&#x9;&#x9;&#x9;-- The path is derived by concatenating the partial filter path with the source path either from the sourceResource or of the designated layer type and groupId.
&#x9;&#x9;&#x9;-- The layerType and the groupId are used to filter the rows from the configureStartingFolders.  The source path is
&#x9;&#x9;&#x9;--    defined in configureStartingFolders per the layerType and groupId combination.
&#x9;&#x9;&#x9;--   e.g. layerType=CP and sourceFolderPath=/shared/BestPractices/DataAbstractionAbstractionSample/Application/Views
&#x9;&#x9;&#x9;--        The derivedFilterPath list=&quot;Orders_Closed,/Orders/Customers,Orders/Product&quot;
&#x9;&#x9;&#x9;--        Even though there are several other views in the /Orders folder under the /Application/Views only the ones specified
&#x9;&#x9;&#x9;--&#x9;      will be generated to the Application/Published.  Views directly under the source path do not require any qualifying path except the view name.
&#x9;&#x9;&#x9;--        Lastly, a leading &apos;/&apos; is not required but may be present if desired.
&#x9;&#x9;&#x9;-- Correlate the groupId position with the derivedFilterPath position
&#x9;&#x9;&#x9;--&#x9;&#x9;derivedFilterPath=&quot;customers,orders&quot;,shippingmethods
&#x9;&#x9;&#x9;--                         |                     |
&#x9;&#x9;&#x9;--                         v                     v
&#x9;&#x9;&#x9;--&#x9;&#x9;          groupId=ds_inventory.tutorial,ds_orders.tutorial
&#x9;&#x9;&#x9;-- If null, generate views from all source folders as directed by the sourceResource or &quot;configure starting folders&quot; and the designated layer type.
&#x9;&#x9;derivedFilterPath

&#x9;&#x9;&#x9;-- comma separated list of resource paths or partials paths to exclude.  This may be useful when a data source has been moved and it&apos;s index or foreign keys
&#x9;&#x9;&#x9;--&#x9;are pointing to another data source that does not exist anymore.  It may be necessary to exclude that path or paths.  If an exception is thrown during 
&#x9;&#x9;&#x9;--&#x9;execution, try excluding those paths.
&#x9;&#x9;&#x9;--&#x9;Values: /shared/MyPath/Physical/Metadata/MyDatasource
&#x9;&#x9;excludeDsPathsList

&#x9;&#x9;-- OPTION 1
&#x9;&#x9;&#x9;-- The source folder in CIS to begin searching for views to generate the view list or
&#x9;&#x9;&#x9;-- a source view (exact path) to generate for.
&#x9;&#x9;&#x9;-- If this is set it supercedes layerType, groupIds with derivedFilterPath being optional
&#x9; &#x9;sourceResource

&#x9;&#x9;-- OPTION 2
  &#x9;&#x9;&#x9;-- If sourceResource is blank, then layerType, groupIds must be set with derivedFilterPath being optional
&#x9;&#x9;&#x9;-- PM=Physical Metadata - used by generateDasourceList
&#x9;&#x9;&#x9;-- CR=CRUD Target Folder Path - generateTypeDefinitions and generateCRUDOperations invokes generateViews
&#x9;&#x9;&#x9;-- PV=Physical Views - generatePhysicalViews invokes generateViews
&#x9;&#x9;&#x9;-- FV=Formatting Views - generateFormattingViews invokes generateViews
&#x9;&#x9;&#x9;-- BV=Business Views - generateBusinessViews invokes generateViews
&#x9;&#x9;&#x9;-- LV=Logical Views - generateLoicalViews invokes generateViews
&#x9;&#x9;&#x9;-- CV=Client Views - generateClientViews invokes generateViews
&#x9;&#x9;&#x9;-- CP=Client Published - generateClientPublished invokes generateViews
&#x9;&#x9;&#x9;-- DB=Database published link - generatePublishedResource invokes generateViews
&#x9;   &#x9;layerType

&#x9;&#x9;&#x9;-- This is a comma separate list group ids to process. 
&#x9;&#x9;&#x9;-- This is a filter that allows the user to only generate for a specific group or list of groups
&#x9;&#x9;&#x9;--   found in the /_scripts/Configure/ConfigureStartingFolders.
&#x9;&#x9;&#x9;--   Pass in null to select all groupIds.
&#x9;&#x9;groupIds

    &#x9;Configuration files:
    &#x9;&#x9;&#x9;&quot;ConfigureParams&quot; - General parameters that affect execution.
    &#x9;&#x9;&#x9;&quot;ConfigureStartingFolders&quot; - Instructs this procedure what data source folders to process
    &#x9;&#x9;&#x9;&quot;AliasNameRuleSet&quot; - Provides a user-defined list of aliases and rules to apply to word parts
    &#x9;&#x9;&#x9;&quot;ConfigureReservedList&quot; - Provides a list of Composite reserved words that must be double-quoted in views

&#x9;&#x9;&#x9;-- This variable indicates whether you want to display a logical name or not.
&#x9;&#x9;&#x9;-- 0 (FALSE) - generate datasource list only with no logical names, 
     &#x9;&#x9;&#x9;This is useful if you want to create a starting list of physical columns 
    &#x9;&#x9;&#x9;and their container names so that you can fill in the logical column name &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;
&#x9;&#x9;&#x9;-- 1 (TRUE) - generate datasource list with logical names either retrieved from a spreadsheet or generated.
   &#x9;&#x9;generateLogicalNames&#x9;BIT, 
&#x9;&#x9;&#x9;&#x9;&#x9;If you want to generate logical names which are derived from the physical names, 
&#x9;&#x9;&#x9;&#x9;&#x9;then pay attention to these parameters as well:
&#x9;&#x9;&#x9;&#x9;&#x9;(1) The generateMode is set to &apos;G&apos;
     &#x9;&#x9;&#x9;&#x9;&#x9;DECLARE generateMode&#x9;&#x9;CHAR(1) DEFAULT &apos;G&apos;;
    &#x9;&#x9;&#x9;&#x9;&#x9;-- G=Generate the resource names 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- R=Retrieve the resource name from a spreadsheet. (resources include PATH names, VIEW names AND COLUMN names)
   &#x9;&#x9;&#x9;&#x9;&#x9;(2) Use _ as a separator to detect word parts
    &#x9;&#x9;&#x9;&#x9;(3) Apply Case rules to the word parts by setting these to parmaters in the ConfigurationFile
  &#x9;&#x9;&#x9;&#x9;   &#x9;&#x9;DECLARE caseRule&#x9;&#x9;&#x9;CHAR(1) DEFAULT &apos;C&apos;; -- (used when generateMode=&apos;G&apos;) 
    &#x9;&#x9;&#x9;&#x9;&#x9;-- j=javaCase - 1st word part is lower case, following word parts are 1st is letter is upper and remaining word part is lower with no separators
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- C=CamelCase - 1st letter of each word part is upper case and remaining word part is lower with no separators
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- T=Title_Case - 1st letter of each word part is upper case and remaining word part is lower with separators retained
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- U=UPPER_CASE - All word parts are UPPER case with separtors retained
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- l=lower_case - All word parts are lower case with separators retained
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- O=Original_case - The word is not changed at all -- just pass it through as is
&#x9;&#x9;&#x9;&#x9;&#x9;(4) Apply alias rules to the word parts
&#x9;&#x9;&#x9;&#x9;&#x9;    DECLARE useAliasRule&#x9;&#x9;SMALLINT DEFAULT 1;-- (used when generateMode=&apos;G&apos;)
 &#x9;&#x9;&#x9;&#x9;&#x9;   &#x9;-- 0=DO NOT perform alias rule lookup at all.  Word Part is passed through
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- 1=Use alias rule and MATCH CASE exactly
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- 2=Use alias rule and DO NOT MATCH CASE&#x9;
&#x9;Output:
&#x9;&#x9;&#x9;result CommonModelV2Row ROW (
&#x9;&#x9;&#x9;&#x9;&quot;Data Source&quot; &#x9;&#x9;&#x9;&#x9;VARCHAR(255), -- The name of the data source in composite (data lineage-used resources)
--[NOT CURRENTLY IMPLEMENTED] Published&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(255), -- Indicates whether this element is published in composite (data lineage-dependent resources)
&#x9;&#x9;&#x9;&#x9;&quot;Parent Name&quot; &#x9;&#x9;&#x9;&#x9;VARCHAR(255), -- The name of the parent container - parent to the parent (a.k.a. grandparent)
&#x9;&#x9;&#x9;&#x9;&quot;Container Name&quot; &#x9;&#x9;&#x9;VARCHAR(255), -- The name of the container - parent to the resource
&#x9;&#x9;&#x9;&#x9;&quot;Physical Name&quot;&#x9;&#x9;&#x9;&#x9;VARCHAR(255), -- The physical column name (a.k.a. source column name)
&#x9;&#x9;&#x9;&#x9;&quot;Physical Type&quot;&#x9;&#x9;&#x9;&#x9;VARCHAR(255), -- The physical type (a.k.a. source column native type)
&#x9;&#x9;&#x9;&#x9;&quot;Logical Name&quot;&#x9;&#x9;&#x9;&#x9;VARCHAR(255), -- The logical column name (a.k.a. table/view alias)
&#x9;&#x9;&#x9;&#x9;&quot;Logical Type&quot; &#x9;&#x9;&#x9;&#x9;VARCHAR(255), -- The logical column type
&#x9;&#x9;&#x9;&#x9;&quot;Logical Transformation&quot;&#x9;LONGVARCHAR,  -- The logical column transformation excluding outer cast statement
&#x9;&#x9;&#x9;&#x9;&quot;Logical Definition&quot;&#x9;&#x9;LONGVARCHAR,  -- The logical resource definition (a.k.a. view/table/column annotation)
&#x9;&#x9;&#x9;&#x9;&quot;Logical Path&quot;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR   -- The logical Path (this is not dumped to the spreadsheet)
&#x9;&#x9;&#x9;)

&#x9;Exceptions:  none

&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;CSW Version:&#x9;Reason:
&#x9;08/20/2010&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.1.0&#x9;&#x9;&#x9;Created new
&#x9;03/15/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.2.0&#x9;&#x9;&#x9;Modified for Best Practices v7.0
&#x9;04/15/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.2.0&#x9;&#x9;&#x9;Updated for Best Practices 7.0
&#x9;04/22/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.2.0&#x9;&#x9;&#x9;Updated for Best Practices 7.1
&#x9;11/07/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.1.0&#x9;&#x9;&#x9;B.P. 8.0: Added variable excludeDsPathsList and better formatted output.
&#x9;01/24/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;8.0.0&#x9;&#x9;&#x9;B.P. 2019.1: Added the ability to handle columnCaseRule, resourcePrefix, resourceSuffix and newColumnList for generateMode=&apos;G&apos;. 
&#x9;01/29/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;8.0.0&#x9;&#x9;&#x9;B.P. 2019.101: Fix bug so derivedFilterPath could be used with generateToFolder.
&#x9;03/14/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;B.P. 2019.102: Added scriptsPath for flexibility of the location of the _scripts folder.
&#x9;06/12/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;B.P. 2019.200: Modified to use XML based procedures in order to eliminate vector usage.

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.]]&gt;</annotation>
  <parameters>
    <parameter name="generateLogicalNames" direction="IN" nullable="true">
      <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
    </parameter>
    <parameter name="generateMode" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="resourceCaseRule" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="columnCaseRule" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="useAliasRule" direction="IN" nullable="true">
      <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
    </parameter>
    <parameter name="resourcePrefix" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="resourceSuffix" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="newColumnList" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="generateUnsupportedColumnType" direction="IN" nullable="true">
      <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
    </parameter>
    <parameter name="exactMatch" direction="IN" nullable="true">
      <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
    </parameter>
    <parameter name="derivedFilterPath" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="excludeDsPathsList" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="sourceResource" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="layerType" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="groupIds" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="result" direction="OUT" nullable="true">
      <datatype name="result" type="TABLE" refId="256">
        <element name="Data Source">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="Project Folder Name">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="Great Grand Parent Name">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="Grand Parent Name">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="Parent Name">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="Container Name">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="Physical Name">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="Physical Type">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="Logical Name">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="Logical Type">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="Logical Transformation">
          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
        </element>
        <element name="Logical Definition">
          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
        </element>
        <element name="Logical Path">
          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
        </element>
        <element name="Duration">
          <datatype name="IntervalDay" type="INTERVAL_DAY" intervalMode="INTERVAL_HOUR_TO_SECOND" intervalPrecision="2" fractionalSecondPrecision="6"/>
        </element>
      </datatype>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/util/SetEnvironment" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="variableName" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="PropertyName" type="STRING" maxLength="255"/>
      </element>
      <element name="value" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="PropertyValue" type="STRING" maxLength="4096"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/generateDatasourceListXML" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="sourceResource" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="generateLogicalNames" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="layerType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inGroupIds" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inDerivedFilterPath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inStartingFolderExtendedXML" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="ConfigParamsXML" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="resultPipe" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="DataSource">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ProjectFolderName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="GreatGrandParentName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="GrandParentName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ParentName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ContainerName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="PhysicalName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="NativeType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="LogicalName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="LogicalType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="LogicalTransformation">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="LogicalDefinition">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="LogicalPath">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="Duration">
            <datatype type="INTERVAL_DAY" intervalMode="INTERVAL_HOUR_TO_SECOND" intervalPrecision="2" fractionalSecondPrecision="6"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/getConfigureParamsXML" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="basePath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="generateMode" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="outputMode" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="generateViews" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="resourceCaseRule" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="columnCaseRule" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="useAliasRule" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="resourcePrefix" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceSuffix" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="generateWithSourceColumn" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="generateCast" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="generateIndexes" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="ConfigParamsXML" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Common/_scripts/Constants/defaultValues" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="bestPracticesVersion_" direction="OUT">
        <datatype type="FLOAT" minValue="2.2250738585072014E-308" maxValue="1.7976931348623157E308"/>
      </element>
      <element name="basePath_" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="scriptsPath_" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="configureScriptsPath_" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="constantsScriptsPath_" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="generationScriptsPath_" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="documentationScriptsPath_" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="compositeDatabasePath_" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="applicationPublishedPath_" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="applicationServicesPath_" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="applicationViewsPath_" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="applicationViewsSubFolder_" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="crudPath_" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="typeDefinitionPath_" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="typeDefinitionProcName_" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="businessBusinessPath_" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="businessLogicalPath_" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="physicalFormattingPath_" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="physicalFormattingTransformationPath_" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="physicalViewsPath_" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="physicalMetadataPath_" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="genUniqueIDPath_" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="debugTime_" direction="OUT">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* 
&#x9;generateDatasourceList:
&#x9;-- Data Virtualization Best Practices --

&#x9;This procedure is used for generating a list of columns either from a folder of views or from data sources (Physical/Metadata). 
&#x9;This can be very useful when you need to understand what all the columns are in your datasource.  This file can then be used 
&#x9;as the basis for sorting, removing duplicates and then assigning logical/canonical names to the physical names.  It is also 
&#x9;possible to generate the logical names using various case sensitivity rules and alias rules.  This could be done if you 
&#x9;do not already have a data dictionary defined for your physical to logical mappings.  This is one way to begin a data 
&#x9;dictionary for the phyiscal to logical mapping.  

&#x9;It should be noted that this procedure uses the &quot;Target&quot; folder in the ConfigureStartingFolders().
&#x9;
&#x9;This procedure is meant to be executed by a Data Architect within studio.

&#x9;-------
&#x9;Usage:
&#x9;-------
&#x9;1) Edit the /&lt;project-name&gt;/_scripts/Configure/ConfigureParams and ConfigureStartingFolders file to set up the processing
&#x9;&#x9;startingFolderVector - 
&#x9;&#x9;&#x9;defines which data source folders to process, 
&#x9;&#x9;&#x9;where the views get generated, 
&#x9;&#x9;&#x9;and whether the sub-folders are derived from the source or defined absolutely
&#x9;----------
&#x9;Cautions:
&#x9;----------
&#x9;   CAUTION(1): Overlapping sourceFolderPath definitions will result in duplicated views being produced
&#x9;&#x9;Take the 2 example source folder paths expressed below.  The 2nd one is a sub-directory of the first one.
&#x9;&#x9;This will result in the same source folders being processed twice which generates the same mapping views
&#x9;&#x9;but in different target folders.
&#x9;&#x9;(1,&apos;PV&apos;,&apos;A&apos;,&apos;/shared/BestPractices/DataAbstraction_GENERIC_Template/Physical/Metadata&apos;,null,&apos;/shared/BestPractices/DataAbstraction_GENERIC_Template/Physical/Physical&apos;);
&#x9;&#x9;(1,&apos;PV&apos;,&apos;A&apos;,&apos;/shared/BestPractices/DataAbstraction_GENERIC_Template/Physical/Metadata/OracleSource/cisOraDemoDS/CISORADEMO&apos;,null,&apos;/shared/BestPractices/DataAbstraction_GENERIC_Template/Physical/Physical/CISORADEMO&apos;);

&#x9;    CAUTION(2): Source Folder Path definitions are case sensitive and must match the actual source path that you
&#x9;&#x9;want to introspect to create mapping views from.

&#x9;    CAUTION(3): Only views and procedures that produces a cursor output is supported.  Procedures include, parameterized or customer procedures
&#x9;&#x9;&#x9;with cursor output, XSLT with cursor output, packaged queries with cursor output.

&#x9;Input:
   &#x9;&#x9;Explanation:  The actual input are defined as local variables with DEFAULT values.  Adjust those variables accordingly.

&#x9;&#x9;&#x9;-- generate the logical names or physical names only
&#x9;    &#x9;-- 1 (TRUE) - generate datasource list with logical names
&#x9;&#x9;&#x9;-- 0 (FALSE) - generate datasource list only with no logical names, 
&#x9;&#x9;&#x9;-- Generally this parameter is true.  However, it may be useful to set to generateLogicalNames=0 and layerType=&apos;PM&apos; which allows
&#x9;&#x9;&#x9;--  the user to generate just the physical names for the physical metadata in the spreadsheet format as a way of initializing
&#x9;&#x9;&#x9;--  the physical names only.
  &#x9;&#x9;generateLogicalNames

&#x9;&#x9;&#x9;-- Determines whether to retrieve names from the Common_Model_v2_file[1-3].xls spreadsheets or generate them and
&#x9;&#x9;&#x9;--   is only meaninfful when generateLogicalNames=1
&#x9;&#x9; &#x9;-- G=Generate the resource names 
&#x9;&#x9;&#x9;--   use &apos;G&apos; in conjunctionwith layerType=&apos;PM&apos; to generate the physical metadata names to the spreadsheet.
&#x9;&#x9;&#x9;--   This would be the strategy for initializing the Common_Model_v2_file[1-3].xls spreadsheet.  
&#x9;&#x9;&#x9;--   It is often useful to set the caseRule parameter to establish the type of logical names that you want to start with.
&#x9;&#x9;&#x9;-- R=Retrieve the resource name from a spreadsheet. (resources include PATH names, VIEW names AND COLUMN names)
&#x9;&#x9;&#x9;--   use &apos;R&apos; in conjunction with layerType=&apos;FV&apos;
&#x9;&#x9;generateMode 

&#x9;&#x9;&#x9;--  TABLES/PROCEDURES only.  This resourceCaseRule is only used for tables or procedures.
&#x9;&#x9;&#x9;-- &#x9;&#x9;used when generateMode=&apos;G&apos;
&#x9;&#x9;&#x9;--&#x9; &#x9;Assumption:  The original table name has to have separators (_) for this to work properly.
&#x9;&#x9;&#x9;--&#x9;&#x9;&#x9;     If the original word has no separators then the case rule gets applied to the single word
&#x9;&#x9;&#x9;-- &#x9;&#x9;j=javaCase - 1st word part is lower case, following word parts are 1st is letter is upper and remaining word part is lower with no separators
&#x9;&#x9;&#x9;-- &#x9;&#x9;C=CamelCase - 1st letter of each word part is upper case and remaining word part is lower with no separators
&#x9;&#x9;&#x9;-- &#x9;&#x9;T=Title_Case - 1st letter of each word part is upper case and remaining word part is lower with separators retained
&#x9;&#x9;&#x9;-- &#x9;&#x9;U=UPPER_CASE - All word parts are UPPER case with separtors retained
&#x9;&#x9;&#x9;-- &#x9;&#x9;l=lower_case - All word parts are lower case with separators retained
&#x9;&#x9;&#x9;-- &#x9;&#x9;O=Original_case - The word is not changed at all -- just pass it through as is
&#x9;&#x9;resourceCaseRule

&#x9;&#x9;&#x9;--  COLUMNS only.  This caseRule is only used for columns.
&#x9;&#x9;&#x9;--&#x9;&#x9;used when generateMode=&apos;G&apos;
&#x9;&#x9;&#x9;--&#x9; &#x9;Assumption:  The original column name has to have separators (_) for this to work properly.
&#x9;&#x9;&#x9;--&#x9;&#x9;&#x9;     If the original word has no separators then the case rule gets applied to the single word
&#x9;&#x9;&#x9;--&#x9;&#x9;j=javaCase - 1st word part is lower case, following word parts are 1st is letter is upper and remaining word part is lower with no separators
&#x9;&#x9;&#x9;--&#x9;&#x9;C=CamelCase - 1st letter of each word part is upper case and remaining word part is lower with no separators
&#x9;&#x9;&#x9;--&#x9;&#x9;T=Title_Case - 1st letter of each word part is upper case and remaining word part is lower with separators retained
&#x9;&#x9;&#x9;--&#x9;&#x9;U=UPPER_CASE - All word parts are UPPER case with separtors retained
&#x9;&#x9;&#x9;--&#x9;&#x9;l=lower_case - All word parts are lower case with separators retained
&#x9;&#x9;&#x9;--&#x9;&#x9;O=Original_case - The word is not changed at all -- just pass it through as is
&#x9;&#x9;columnCaseRule

&#x9;&#x9;&#x9;-- determines how to use the word part alias rules.
&#x9;&#x9;&#x9;-- used when generateMode=&apos;G&apos;
&#x9;&#x9;&#x9;-- 0=[default] DO NOT perform alias rule lookup at all.  Word Part is passed through (default is 0)
&#x9;&#x9;&#x9;-- 1=Use alias rule and MATCH CASE exactly
&#x9;&#x9;&#x9;-- 2=Use alias rule and DO NOT MATCH CASE
&#x9;&#x9;&#x9;-- The &quot;AliasNameRuleSet()&quot; procedure is found in the folder /shared/&lt;project-folder&gt;/_scripts/Configure.
&#x9;&#x9;useAliasRule

&#x9;&#x9;&#x9;-- used when generateMode=&apos;G&apos;
&#x9;&#x9;&#x9;--  Any set of characters used to prefix a table or procedure name.  Include underscores with the suffix if applicable.
&#x9;&#x9;&#x9;--&#x9;Example: V_ MY_TABLE or V_MY_TABLE &#x9;
&#x9;&#x9;resourcePrefix

&#x9;&#x9;&#x9;-- used when generateMode=&apos;G&apos;
&#x9;&#x9;&#x9;--  Any set of characters used to suffix a table or procedure name.  Include underscores with the suffix if applicable.
&#x9;&#x9;&#x9;--&#x9;Example: _APP MY_TABLE or MY_TABLE_APP &#x9;
&#x9;&#x9;resourceSuffix

&#x9;&#x9;&#x9;-- flag indicating whether to ignore or generate unsupported column types.  For example in Oracle an SDO spatial type gets imported into Composite at &apos;OTHER&apos;.
&#x9;&#x9;&#x9;-- 0/null (default) - ignore column type = &apos;OTHER&apos; and do not generate that column
&#x9;&#x9;&#x9;-- 1 - generate columns where the column type = &apos;OTHER&apos;
&#x9;&#x9;generateUnsupportedColumnType

&#x9;&#x9;&#x9;-- specifies how the source resource will be matched against the resource being interrogated
&#x9;&#x9;&#x9;--&#x9;0=fuzzy match - sourcePath + derivedFilterPath must simply be contained within resourcePath
&#x9;&#x9;&#x9;--&#x9;1 (default)=exact match - sourcePath + derivedFilterPath must match exactly in resourcePath
&#x9;&#x9;exactMatch

&#x9;&#x9;&#x9;-- The list &quot;derivedFilterPath&quot; is a comma-separated list of resources and may be used with either generateToFolder (option 1) to groupId (option 2) 
&#x9;&#x9;&#x9;-- The path is derived by concatenating the partial filter path with the source path either from the sourceResource or of the designated layer type and groupId.
&#x9;&#x9;&#x9;-- The layerType and the groupId are used to filter the rows from the configureStartingFolders.  The source path is
&#x9;&#x9;&#x9;--    defined in configureStartingFolders per the layerType and groupId combination.
&#x9;&#x9;&#x9;--   e.g. layerType=CP and sourceFolderPath=/shared/BestPractices/DataAbstractionAbstractionSample/Application/Views
&#x9;&#x9;&#x9;--        The derivedFilterPath list=&quot;Orders_Closed,/Orders/Customers,Orders/Product&quot;
&#x9;&#x9;&#x9;--        Even though there are several other views in the /Orders folder under the /Application/Views only the ones specified
&#x9;&#x9;&#x9;--&#x9;      will be generated to the Application/Published.  Views directly under the source path do not require any qualifying path except the view name.
&#x9;&#x9;&#x9;--        Lastly, a leading &apos;/&apos; is not required but may be present if desired.
&#x9;&#x9;&#x9;-- Correlate the groupId position with the derivedFilterPath position
&#x9;&#x9;&#x9;--&#x9;&#x9;derivedFilterPath=&quot;customers,orders&quot;,shippingmethods
&#x9;&#x9;&#x9;--                         |                     |
&#x9;&#x9;&#x9;--                         v                     v
&#x9;&#x9;&#x9;--&#x9;&#x9;          groupId=ds_inventory.tutorial,ds_orders.tutorial
&#x9;&#x9;&#x9;-- If null, generate views from all source folders as directed by the sourceResource or &quot;configure starting folders&quot; and the designated layer type.
&#x9;&#x9;derivedFilterPath

&#x9;&#x9;&#x9;-- comma separated list of resource paths or partials paths to exclude.  This may be useful when a data source has been moved and it&apos;s index or foreign keys
&#x9;&#x9;&#x9;--&#x9;are pointing to another data source that does not exist anymore.  It may be necessary to exclude that path or paths.  If an exception is thrown during 
&#x9;&#x9;&#x9;--&#x9;execution, try excluding those paths.
&#x9;&#x9;&#x9;--&#x9;Values: /shared/MyPath/Physical/Metadata/MyDatasource
&#x9;&#x9;excludeDsPathsList

&#x9;&#x9;-- OPTION 1
&#x9;&#x9;&#x9;-- The source folder in CIS to begin searching for views to generate the view list or
&#x9;&#x9;&#x9;-- a source view (exact path) to generate for.
&#x9;&#x9;&#x9;-- If this is set it supercedes layerType, groupIds with derivedFilterPath being optional
&#x9; &#x9;sourceResource

&#x9;&#x9;-- OPTION 2
  &#x9;&#x9;&#x9;-- If sourceResource is blank, then layerType, groupIds must be set with derivedFilterPath being optional
&#x9;&#x9;&#x9;-- PM=Physical Metadata - used by generateDasourceList
&#x9;&#x9;&#x9;-- CR=CRUD Target Folder Path - generateTypeDefinitions and generateCRUDOperations invokes generateViews
&#x9;&#x9;&#x9;-- PV=Physical Views - generatePhysicalViews invokes generateViews
&#x9;&#x9;&#x9;-- FV=Formatting Views - generateFormattingViews invokes generateViews
&#x9;&#x9;&#x9;-- BV=Business Views - generateBusinessViews invokes generateViews
&#x9;&#x9;&#x9;-- LV=Logical Views - generateLoicalViews invokes generateViews
&#x9;&#x9;&#x9;-- CV=Client Views - generateClientViews invokes generateViews
&#x9;&#x9;&#x9;-- CP=Client Published - generateClientPublished invokes generateViews
&#x9;&#x9;&#x9;-- DB=Database published link - generatePublishedResource invokes generateViews
&#x9;   &#x9;layerType

&#x9;&#x9;&#x9;-- This is a comma separate list group ids to process. 
&#x9;&#x9;&#x9;-- This is a filter that allows the user to only generate for a specific group or list of groups
&#x9;&#x9;&#x9;--   found in the /_scripts/Configure/ConfigureStartingFolders.
&#x9;&#x9;&#x9;--   Pass in null to select all groupIds.
&#x9;&#x9;groupIds

    &#x9;Configuration files:
    &#x9;&#x9;&#x9;&quot;ConfigureParams&quot; - General parameters that affect execution.
    &#x9;&#x9;&#x9;&quot;ConfigureStartingFolders&quot; - Instructs this procedure what data source folders to process
    &#x9;&#x9;&#x9;&quot;AliasNameRuleSet&quot; - Provides a user-defined list of aliases and rules to apply to word parts
    &#x9;&#x9;&#x9;&quot;ConfigureReservedList&quot; - Provides a list of Composite reserved words that must be double-quoted in views

&#x9;&#x9;&#x9;-- This variable indicates whether you want to display a logical name or not.
&#x9;&#x9;&#x9;-- 0 (FALSE) - generate datasource list only with no logical names, 
     &#x9;&#x9;&#x9;This is useful if you want to create a starting list of physical columns 
    &#x9;&#x9;&#x9;and their container names so that you can fill in the logical column name &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;
&#x9;&#x9;&#x9;-- 1 (TRUE) - generate datasource list with logical names either retrieved from a spreadsheet or generated.
   &#x9;&#x9;generateLogicalNames&#x9;BIT, 
&#x9;&#x9;&#x9;&#x9;&#x9;If you want to generate logical names which are derived from the physical names, 
&#x9;&#x9;&#x9;&#x9;&#x9;then pay attention to these parameters as well:
&#x9;&#x9;&#x9;&#x9;&#x9;(1) The generateMode is set to &apos;G&apos;
     &#x9;&#x9;&#x9;&#x9;&#x9;DECLARE generateMode&#x9;&#x9;CHAR(1) DEFAULT &apos;G&apos;;
    &#x9;&#x9;&#x9;&#x9;&#x9;-- G=Generate the resource names 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- R=Retrieve the resource name from a spreadsheet. (resources include PATH names, VIEW names AND COLUMN names)
   &#x9;&#x9;&#x9;&#x9;&#x9;(2) Use _ as a separator to detect word parts
    &#x9;&#x9;&#x9;&#x9;(3) Apply Case rules to the word parts by setting these to parmaters in the ConfigurationFile
  &#x9;&#x9;&#x9;&#x9;   &#x9;&#x9;DECLARE caseRule&#x9;&#x9;&#x9;CHAR(1) DEFAULT &apos;C&apos;; -- (used when generateMode=&apos;G&apos;) 
    &#x9;&#x9;&#x9;&#x9;&#x9;-- j=javaCase - 1st word part is lower case, following word parts are 1st is letter is upper and remaining word part is lower with no separators
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- C=CamelCase - 1st letter of each word part is upper case and remaining word part is lower with no separators
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- T=Title_Case - 1st letter of each word part is upper case and remaining word part is lower with separators retained
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- U=UPPER_CASE - All word parts are UPPER case with separtors retained
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- l=lower_case - All word parts are lower case with separators retained
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- O=Original_case - The word is not changed at all -- just pass it through as is
&#x9;&#x9;&#x9;&#x9;&#x9;(4) Apply alias rules to the word parts
&#x9;&#x9;&#x9;&#x9;&#x9;    DECLARE useAliasRule&#x9;&#x9;SMALLINT DEFAULT 1;-- (used when generateMode=&apos;G&apos;)
 &#x9;&#x9;&#x9;&#x9;&#x9;   &#x9;-- 0=DO NOT perform alias rule lookup at all.  Word Part is passed through
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- 1=Use alias rule and MATCH CASE exactly
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- 2=Use alias rule and DO NOT MATCH CASE&#x9;
&#x9;Output:
&#x9;&#x9;&#x9;result CommonModelV2Row ROW (
&#x9;&#x9;&#x9;&#x9;&quot;Data Source&quot; &#x9;&#x9;&#x9;&#x9;VARCHAR(255), -- The name of the data source in composite (data lineage-used resources)
--[NOT CURRENTLY IMPLEMENTED] Published&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(255), -- Indicates whether this element is published in composite (data lineage-dependent resources)
&#x9;&#x9;&#x9;&#x9;&quot;Parent Name&quot; &#x9;&#x9;&#x9;&#x9;VARCHAR(255), -- The name of the parent container - parent to the parent (a.k.a. grandparent)
&#x9;&#x9;&#x9;&#x9;&quot;Container Name&quot; &#x9;&#x9;&#x9;VARCHAR(255), -- The name of the container - parent to the resource
&#x9;&#x9;&#x9;&#x9;&quot;Physical Name&quot;&#x9;&#x9;&#x9;&#x9;VARCHAR(255), -- The physical column name (a.k.a. source column name)
&#x9;&#x9;&#x9;&#x9;&quot;Physical Type&quot;&#x9;&#x9;&#x9;&#x9;VARCHAR(255), -- The physical type (a.k.a. source column native type)
&#x9;&#x9;&#x9;&#x9;&quot;Logical Name&quot;&#x9;&#x9;&#x9;&#x9;VARCHAR(255), -- The logical column name (a.k.a. table/view alias)
&#x9;&#x9;&#x9;&#x9;&quot;Logical Type&quot; &#x9;&#x9;&#x9;&#x9;VARCHAR(255), -- The logical column type
&#x9;&#x9;&#x9;&#x9;&quot;Logical Transformation&quot;&#x9;LONGVARCHAR,  -- The logical column transformation excluding outer cast statement
&#x9;&#x9;&#x9;&#x9;&quot;Logical Definition&quot;&#x9;&#x9;LONGVARCHAR,  -- The logical resource definition (a.k.a. view/table/column annotation)
&#x9;&#x9;&#x9;&#x9;&quot;Logical Path&quot;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR   -- The logical Path (this is not dumped to the spreadsheet)
&#x9;&#x9;&#x9;)

&#x9;Exceptions:  none

&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;CSW Version:&#x9;Reason:
&#x9;08/20/2010&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.1.0&#x9;&#x9;&#x9;Created new
&#x9;03/15/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.2.0&#x9;&#x9;&#x9;Modified for Best Practices v7.0
&#x9;04/15/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.2.0&#x9;&#x9;&#x9;Updated for Best Practices 7.0
&#x9;04/22/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.2.0&#x9;&#x9;&#x9;Updated for Best Practices 7.1
&#x9;11/07/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.1.0&#x9;&#x9;&#x9;B.P. 8.0: Added variable excludeDsPathsList and better formatted output.
&#x9;01/24/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;8.0.0&#x9;&#x9;&#x9;B.P. 2019.1: Added the ability to handle columnCaseRule, resourcePrefix, resourceSuffix and newColumnList for generateMode=&apos;G&apos;. 
&#x9;01/29/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;8.0.0&#x9;&#x9;&#x9;B.P. 2019.101: Fix bug so derivedFilterPath could be used with generateToFolder.
&#x9;03/14/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;B.P. 2019.102: Added scriptsPath for flexibility of the location of the _scripts folder.
&#x9;06/12/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;B.P. 2019.200: Modified to use XML based procedures in order to eliminate vector usage.

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

*/
PROCEDURE generateDatasourceList(
&#x9;&#x9;-- generate the logical names or physical names only
    &#x9;-- 1 (TRUE) [default] - generate datasource list with logical names
&#x9;&#x9;-- 0 (FALSE) - generate datasource list only with no logical names, 
&#x9;&#x9;-- Generally this parameter is true.  However, it may be useful to set to 0 when generateMode=&apos;G&apos; and layerType=&apos;PM&apos; which allows
&#x9;&#x9;--  the user to generate just the physical names for the physical metadata in the spreadsheet format as a way of initializing
&#x9;&#x9;--  the physical names only.
    IN generateLogicalNames&#x9;&#x9;&#x9;BIT,

&#x9;&#x9;-- Determines whether to retrieve names from the Common_Model_v2_file[1-3].xls spreadsheets or generate them and
&#x9;&#x9;--   is only meaninfful when generateLogicalNames=1
&#x9; &#x9;-- G=Generate the resource names 
&#x9;&#x9;--   use &apos;G&apos; in conjunctionwith layerType=&apos;PM&apos; to generate the physical metadata names to the spreadsheet.
&#x9;&#x9;--   This would be the strategy for initializing the Common_Model_v2_file[1-3].xls spreadsheet.  
&#x9;&#x9;--   It is often useful to set the caseRule parameter to establish the type of logical names that you want to start with.
&#x9;&#x9;-- R=Retrieve the resource name from a spreadsheet. (resources include PATH names, VIEW names AND COLUMN names)
&#x9;&#x9;--   use &apos;R&apos; in conjunction with layerType=&apos;FV&apos;
    IN generateMode&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1),

&#x9;&#x9;--  TABLES only.  This resourceCaseRule is only used for tables.
&#x9;&#x9;--&#x9; Assumption:  The original table name has to have separators (_) for this to work properly.
&#x9;&#x9;--&#x9;&#x9;&#x9;     If the original word has no separators then the case rule gets applied to the single word.
    &#x9;-- &#x9;j=javaCase - 1st word part is lower case, following word parts are 1st is letter is upper and remaining word part is lower with no separators
&#x9;&#x9;-- &#x9;C=CamelCase - 1st letter of each word part is upper case and remaining word part is lower with no separators
&#x9;&#x9;-- &#x9;T=Title_Case - 1st letter of each word part is upper case and remaining word part is lower with separators retained
&#x9;&#x9;-- &#x9;U=UPPER_CASE - All word parts are UPPER case with separtors retained
&#x9;&#x9;-- &#x9;l=lower_case - All word parts are lower case with separators retained
&#x9;&#x9;-- &#x9;O=Original_case - The word is not changed at all -- just pass it through as is
&#x9;IN resourceCaseRule&#x9;&#x9;&#x9;&#x9;CHAR(1), -- (used when generateMode=&apos;G&apos;)

&#x9;&#x9;--  COLUMNS only.  This columnCaseRule is only used for columns.
&#x9;&#x9;--&#x9; Assumption:  The original column name has to have separators (_) for this to work properly.
&#x9;&#x9;--&#x9;&#x9;&#x9;     If the original word has no separators then the case rule gets applied to the single word.
&#x9;&#x9;--&#x9;j=javaCase - 1st word part is lower case, following word parts are 1st is letter is upper and remaining word part is lower with no separators
&#x9;&#x9;--&#x9;C=CamelCase - 1st letter of each word part is upper case and remaining word part is lower with no separators
&#x9;&#x9;--&#x9;T=Title_Case - 1st letter of each word part is upper case and remaining word part is lower with separators retained
&#x9;&#x9;--&#x9;U=UPPER_CASE - All word parts are UPPER case with separtors retained
&#x9;&#x9;--&#x9;l=lower_case - All word parts are lower case with separators retained
&#x9;&#x9;--&#x9;O=Original_case - The word is not changed at all -- just pass it through as is
&#x9;IN columnCaseRule&#x9;&#x9;&#x9;&#x9;CHAR(1), -- (used when generateMode=&apos;G&apos;)

    &#x9;-- 0=DO NOT perform alias rule lookup at all.  Word Part is passed through
&#x9;&#x9;-- 1=Use alias rule and MATCH CASE exactly
&#x9;&#x9;-- 2=Use alias rule and DO NOT MATCH CASE
&#x9;IN useAliasRule&#x9;&#x9;&#x9;&#x9;&#x9;SMALLINT,&#x9;-- (used when generateMode=&apos;G&apos;)

&#x9;&#x9;--  Any set of characters used to prefix a table or procedure name.  Include underscores with the suffix if applicable.
&#x9;&#x9;--&#x9;Example: V_ MY_TABLE or V_MY_TABLE &#x9;
&#x9;IN resourcePrefix &#x9;&#x9;&#x9;&#x9;VARCHAR, --(used when generateMode=&apos;G&apos;)

&#x9;&#x9;--  Any set of characters used to suffix a table or procedure name.  Include underscores with the suffix if applicable.
&#x9;&#x9;--&#x9;Example: _APP MY_TABLE or MY_TABLE_APP 
&#x9;IN resourceSuffix &#x9;&#x9;&#x9;&#x9;VARCHAR, --(used when generateMode=&apos;G&apos;)

&#x9;&#x9;-- A formatted list of new columns to add to the end of the view.  The column will not be added if it already exists.
&#x9;&#x9;-- The format is as follows:  column1&amp;&amp;type1&amp;&amp;value1//column2&amp;&amp;type2&amp;&amp;value2//column3&amp;&amp;type3&amp;&amp;value3
&#x9;IN newColumnList&#x9;&#x9;&#x9;&#x9;LONGVARCHAR, --(used when generateMode=&apos;G&apos;)

&#x9;&#x9;-- flag indicating whether to ignore or generate unsupported column types.  For example in Oracle an SDO spatial type gets imported into Composite as &apos;OTHER&apos;.
&#x9;&#x9;-- 0/null (default) - ignore column type = &apos;OTHER&apos; and do not generate that column
&#x9;&#x9;-- 1 - generate columns where the column type = &apos;OTHER&apos;
&#x9;IN generateUnsupportedColumnType BIT,

&#x9;&#x9;-- specifies how the source resource will be matched against the resource being interrogated
&#x9;&#x9;-- 0=fuzzy match - sourcePath + derivedFilterPath must simply be contained within resourcePath
&#x9;&#x9;-- 1 (default)=exact match - sourcePath + derivedFilterPath must match exactly in resourcePath
&#x9;IN exactMatch&#x9;&#x9;&#x9;&#x9;&#x9;BIT,

&#x9;&#x9;-- The list &quot;derivedFilterPath&quot; is a comma-separated list of resources and may be used with either generateToFolder (option 1) to groupId (option 2) 
&#x9;&#x9;-- The path is derived by concatenating the partial filter path with the source path either from the sourceResource or of the designated layer type and groupId.
&#x9;&#x9;-- The layerType and the groupId are used to filter the rows from the configureStartingFolders.  The source path is
&#x9;&#x9;--    defined in configureStartingFolders per the layerType and groupId combination.
&#x9;&#x9;--   e.g. layerType=CP and sourceFolderPath=/shared/BestPractices/DataAbstractionAbstractionSample/Application/Views
&#x9;&#x9;--        The derivedFilterPath list=&quot;Orders_Closed,/Orders/Customers,Orders/Product&quot;
&#x9;&#x9;--        Even though there are several other views in the /Orders folder under the /Application/Views only the ones specified
&#x9;&#x9;--&#x9;      will be generated to the Application/Published.  Views directly under the source path do not require any qualifying path except the view name.
&#x9;&#x9;--        Lastly, a leading &apos;/&apos; is not required but may be present if desired.
&#x9;&#x9;-- Correlate the groupId position with the derivedFilterPath position
&#x9;&#x9;--&#x9;&#x9;derivedFilterPath=&quot;customers,orders&quot;,shippingmethods
&#x9;&#x9;--                         |                     |
&#x9;&#x9;--                         v                     v
&#x9;&#x9;--&#x9;&#x9;          groupId=ds_inventory.tutorial,ds_orders.tutorial
&#x9;&#x9;-- If null, generate views from all source folders as directed by the sourceResource or &quot;configure starting folders&quot; and the designated layer type.
&#x9;IN derivedFilterPath&#x9;&#x9;&#x9;LONGVARCHAR,

&#x9;&#x9;-- comma separated list of resource paths or partials paths to exclude.  This may be useful when a data source has been moved and it&apos;s index or foreign keys
&#x9;&#x9;--&#x9;are pointing to another data source that does not exist anymore.  It may be necessary to exclude that path or paths.  If an exception is thrown during 
&#x9;&#x9;--&#x9;execution, try excluding those paths.
&#x9;&#x9;--&#x9;Values: /shared/MyPath/Physical/Metadata/MyDatasource
&#x9;IN excludeDsPathsList&#x9;&#x9;&#x9;LONGVARCHAR,

&#x9;-- OPTION 1
&#x9;&#x9;-- The source folder in CIS to begin searching for views to generate the view list or
&#x9;&#x9;-- a source view (exact path) to generate for.
&#x9;&#x9;-- If this is set it supercedes layerType, inGroupIDs and derivedFilterPath
&#x9;IN sourceResource&#x9;&#x9;&#x9;&#x9;LONGVARCHAR, &#x9;

&#x9;-- OPTION 2
&#x9;&#x9;-- If sourceResource is blank, then layerType, groupIds must be set with derivedFilterPath being optional.  The default is &apos;PM&apos;.
&#x9;&#x9;-- PM=Physical Metadata - used by generateDasourceList
&#x9;&#x9;-- CR=CRUD Target Folder Path - generateTypeDefinitions and generateCRUDOperations invokes generateViews
&#x9;&#x9;-- PV=Physical Views - generatePhysicalViews invokes generateViews
&#x9;&#x9;-- FV=Formatting Views - generateFormattingViews invokes generateViews
&#x9;&#x9;-- BV=Business Views - generateBusinessViews invokes generateViews
&#x9;&#x9;-- LV=Logical Views - generateLoicalViews invokes generateViews
&#x9;&#x9;-- CV=Client Views - generateClientViews invokes generateViews
&#x9;&#x9;-- CP=Client Published - generateClientPublished invokes generateViews
&#x9;&#x9;-- DB=Database published link - generatePublishedResource invokes generateViews
    IN layerType&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR,

&#x9;&#x9;-- This is a comma separate list group ids to process. 
&#x9;&#x9;-- This is a filter that allows the user to only generate for a specific group or list of groups
&#x9;&#x9;--   found in the /_scripts/Configure/ConfigureStartingFolders.
&#x9;&#x9;--   Pass in null to select all groupIds.
&#x9;IN groupIds&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR, 

    OUT result &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CURSOR /shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions.CommonModelV2Row
)
BEGIN
&#x9;&#x9;-- Path to the base project directory.
    DECLARE basePath&#x9;&#x9;&#x9;&#x9;VARCHAR(4000);

&#x9;&#x9;-- Path to the scripts project directory.
&#x9;DECLARE scriptsPath&#x9;&#x9;&#x9;&#x9;VARCHAR(4000);

 &#x9;DECLARE ConfigParamsXML&#x9;&#x9;&#x9;LONGVARCHAR;

&#x9;-----------------------------------------------------------------
&#x9;-- NOTE: Make sure the path is pointing to the correct project
&#x9;-----------------------------------------------------------------
&#x9;set basePath = /shared/Common/&quot;_scripts&quot;/Constants/defaultValues.basePath;
&#x9;set scriptsPath = /shared/Common/&quot;_scripts&quot;/Constants/defaultValues.scriptsPath;

 &#x9;-- Set environment variables
&#x9;call /lib/util/SetEnvironment(&apos;best.practices.scriptsPath&apos;,scriptsPath);
&#x9;call /lib/util/SetEnvironment(&apos;best.practices.generateUnsupportedColumnType&apos;,CAST(generateUnsupportedColumnType AS VARCHAR));
&#x9;call /lib/util/SetEnvironment(&apos;best.practices.exactMatch&apos;,CAST(exactMatch AS VARCHAR));
&#x9;call /lib/util/SetEnvironment(&apos;best.practices.excludeDsPathsList&apos;,excludeDsPathsList);
&#x9;call /lib/util/SetEnvironment(&apos;best.practices.newColumnList&apos;,newColumnList);

   CALL /shared/ASAssets/BestPractices_v81/Procedures/getConfigureParamsXML(basePath, generateMode, NULL, NULL, resourceCaseRule, columnCaseRule, useAliasRule, resourcePrefix, resourceSuffix, NULL, NULL, NULL, ConfigParamsXML);&#x9;    

    OPEN result FOR 
        SELECT *
        FROM /shared/ASAssets/BestPractices_v81/Procedures/generateDatasourceListXML(sourceResource, generateLogicalNames, NVL(layerType,&apos;PM&apos;), groupIds, derivedFilterPath, null, ConfigParamsXML);
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1570164291271</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">na</attribute>
  <attribute name="lastModifiedUserName" type="STRING">asp5665</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
</metadata>