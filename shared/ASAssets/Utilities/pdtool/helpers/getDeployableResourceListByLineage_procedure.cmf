<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:e931daa6-7fda-456a-badf-4cdb1c228a1a -->
<metadata name="getDeployableResourceListByLineage" path="/shared/ASAssets/Utilities/pdtool/helpers/getDeployableResourceListByLineage" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>&lt;![CDATA[getDeployableResourceListByLineage:
&#x9;-- CIS Repository Helper Procedure --

&#x9;&#x9;This procedure provides the logic for retrieving a complete list of paths based on the lineage of all the resources
&#x9;&#x9;specified by the input parameter &quot;resourcePathList&quot;.  Any resource paths found in the exclude paths list &quot;excludePathsList&quot; 
&#x9;&#x9;will be excluded from the result.   Any resources that are not inclusive of the include base paths &quot;includeBasePath&quot; 
&#x9;&#x9;will be excluded from the result.

&#x9;&#x9;PDTool (Promotion and Deployment Tool) is used to execute generated plan files.  If 
&#x9;&#x9;you do not have PDTool on site, you may obtain it through a Professional Services engagement.

&#x9;Input:
&#x9;&#x9;resourcePathList&#x9;&#x9;&#x9;LONGVARCHAR&#x9;&#x9;- A comma separated list of resource paths to generate a plan for based on the lineage of all resources found.
&#x9;&#x9;includeDependentTriggers&#x9;INTEGER &#x9; &#x9;- 0=do not include, 1=include 1st level dependents
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;- For each resource encountered, look to see if any dependent resources are triggers and include them if this variable is set to 1.
&#x9;&#x9;includeBasePath&#x9;&#x9;&#x9;&#x9;LONGVARCHAR&#x9;&#x9;- If present, then exclude any resources not in this comma separated list of base paths.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;It is intended to allow the user to specify a base path for published resources and 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;/shared project folder resources that are related project level resources but exclude
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;any other resources not associated with those base paths.
&#x9;&#x9;excludePathsList&#x9;&#x9;&#x9;LONGVARCHAR&#x9;&#x9;- A comma separated list of resource paths or partials paths to exclude
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;all paths or partial paths should end with a / to insure uniqueness of the path string.
&#x9;&#x9;inIgnoreResourceDoesNotExist INTEGER,&#x9;&#x9;-- Ignore any resources that do not exist
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- 1 = Bypass the processing of that resource.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- 0 = (default) Do not ignore any resources.  Throw an error that the resource does not exist.
&#x9;&#x9;debug&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1),&#x9; &#x9;- Y or N
&#x9;Output:
&#x9;&#x9;resourceTreeList &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;- A list of resources
&#x9;&#x9;&#x9;PIPE /shared/ASAssets/Utilities/repository/definitions/RepositoryDefinitionsRecursive.resourceTreeType
&#x9;&#x9;&#x9;&#x9;DECLARE PUBLIC TYPE resourceTreeType ROW (
&#x9;&#x9;&#x9;&#x9;&#x9;name&#x9;&#x9;&#x9;VARCHAR(255),
&#x9;&#x9;&#x9;&#x9;&#x9;resPath&#x9;&#x9;&#x9;TypeDefinitions.pathType,
&#x9;&#x9;&#x9;&#x9;&#x9;resType&#x9;&#x9;&#x9;VARCHAR(255),
&#x9;&#x9;&#x9;&#x9;&#x9;subType&#x9;&#x9;&#x9;VARCHAR(255)
&#x9;&#x9;&#x9;&#x9;);

&#x9;Exceptions: none

&#x9;Release:&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;DV Version:&#x9;&#x9;Reason:
&#x9;2013.301&#x9;07/30/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.0.0&#x9;&#x9;&#x9;Created new
&#x9;2013.4&#x9;&#x9;10/28/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.2.0&#x9;&#x9;&#x9;Added parameter inIgnoreResourceDoesNotExist
&#x9;2014.2&#x9;&#x9;03/20/2014&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.2.0&#x9;&#x9;&#x9;Added parameter to getResourceListRecursive to support recursion detection.
&#x9;2018.100&#x9;03/02/2018&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.5&#x9;&#x9;&#x9;Replaced RegexSplit with extractDelimitedText
&#x9;2019.200&#x9;04/04/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Changed custom functions to explicit paths.

    (c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.]]&gt;</annotation>
  <parameters>
    <parameter name="resourcePathList" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="includeDependentTriggers" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="includeBasePath" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="excludePathsList" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="inIgnoreResourceDoesNotExist" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="debug" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="resourceTreeList" direction="OUT" nullable="true">
      <datatype name="lineageTreeType" type="TABLE" refId="256">
        <element name="seqNum">
          <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
        </element>
        <element name="resourceID">
          <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
        </element>
        <element name="parentID">
          <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
        </element>
        <element name="resDepth">
          <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
        </element>
        <element name="treeType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="resName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="resPath">
          <datatype name="VARCHAR" referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
        </element>
        <element name="resType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="subType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="enabled">
          <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
        </element>
        <element name="dsID">
          <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
        </element>
        <element name="dsResName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="dsResPath">
          <datatype name="VARCHAR" referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
        </element>
        <element name="dsResType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="dsResSubType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="dsEnabled">
          <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
        </element>
        <element name="dsChildCount">
          <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
        </element>
        <element name="dataSourceType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
      </datatype>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/shared/ASAssets/Utilities/TypeDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/log/logDebugMessage" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="moduleName" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="moduleNameType" type="STRING" maxLength="4096"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="messageText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/definitions/RepositoryDefinitionsRecursive" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getAncestorResources" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="resourceName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resourcePath">
            <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
          </element>
          <element name="resourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="id">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="changeid">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="ownerDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ownerName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="impactLevel">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="childCount">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="dataSourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getBasicResourceCursor" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceCursor" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="name">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="path">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="type">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="id">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="changeid">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="version">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="introspectState">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ownerDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ownerName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="impactLevel">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="impactMessage">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="annotation">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="explicitlyDesigned">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="tableType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="sqlText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="scriptText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="childCount">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="dataSourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getDependentResourcesCursor" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="resourceName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resourcePath">
            <datatype type="STRING" maxLength="4096"/>
          </element>
          <element name="resourceType">
            <datatype type="STRING" maxLength="40"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="40"/>
          </element>
          <element name="id">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="ownerDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ownerName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="impactLevel">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="impactMessage">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getResourceLineageRecursive" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inSeqNum" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inParentID" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inResourceDepth" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inLineageResourceIdList" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="excludePathsList" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="datasourceAncestor" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inIgnoreResourceDoesNotExist" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="resourceTreeList" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="seqNum">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="resourceID">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="parentID">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="resDepth">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="treeType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resPath">
            <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
          </element>
          <element name="resType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="dsID">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="dsResName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="dsResPath">
            <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
          </element>
          <element name="dsResType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="dsResSubType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="dsEnabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="dsChildCount">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="dataSourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getResourceListRecursive" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="resourceTreeList" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="name">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resPath">
            <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
          </element>
          <element name="resType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="creationDate">
            <datatype type="DATETIME"/>
          </element>
          <element name="creationDateBigint">
            <datatype type="INTEGER"/>
          </element>
          <element name="creatorUserDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="creatorUserName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="lastModifiedDate">
            <datatype type="DATETIME"/>
          </element>
          <element name="lastModifiedDateBigint">
            <datatype type="INTEGER"/>
          </element>
          <element name="lastModifiedUserDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="lastModifiedUserName">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/lowerLevelProcedures/getBasicResourceXML" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="257"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/returnFolderNameAndFolderPath" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="mode" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="folderName" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="folderPath" direction="OUT">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/extractDelimitedText" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inputString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="delimiter" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="occurrence" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="reverseInputText" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="reverseOutput" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="trimText" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="includeDelimiter" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="object">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/xml/getValueFromXML" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="namespaces" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inXpath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inXml" direction="IN">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="257"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="outValue" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/*&#x9;getDeployableResourceListByLineage:
&#x9;-- CIS Repository Helper Procedure --

&#x9;&#x9;This procedure provides the logic for retrieving a complete list of paths based on the lineage of all the resources
&#x9;&#x9;specified by the input parameter &quot;resourcePathList&quot;.  Any resource paths found in the exclude paths list &quot;excludePathsList&quot; 
&#x9;&#x9;will be excluded from the result.   Any resources that are not inclusive of the include base paths &quot;includeBasePath&quot; 
&#x9;&#x9;will be excluded from the result.

&#x9;&#x9;PDTool (Promotion and Deployment Tool) is used to execute generated plan files.  If 
&#x9;&#x9;you do not have PDTool on site, you may obtain it through a Professional Services engagement.

&#x9;Input:
&#x9;&#x9;resourcePathList&#x9;&#x9;&#x9;LONGVARCHAR&#x9;&#x9;- A comma separated list of resource paths to generate a plan for based on the lineage of all resources found.
&#x9;&#x9;includeDependentTriggers&#x9;INTEGER &#x9; &#x9;- 0=do not include, 1=include 1st level dependents
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;- For each resource encountered, look to see if any dependent resources are triggers and include them if this variable is set to 1.
&#x9;&#x9;includeBasePath&#x9;&#x9;&#x9;&#x9;LONGVARCHAR&#x9;&#x9;- If present, then exclude any resources not in this comma separated list of base paths.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;It is intended to allow the user to specify a base path for published resources and 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;/shared project folder resources that are related project level resources but exclude
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;any other resources not associated with those base paths.
&#x9;&#x9;excludePathsList&#x9;&#x9;&#x9;LONGVARCHAR&#x9;&#x9;- A comma separated list of resource paths or partials paths to exclude
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;all paths or partial paths should end with a / to insure uniqueness of the path string.
&#x9;&#x9;inIgnoreResourceDoesNotExist INTEGER,&#x9;&#x9;-- Ignore any resources that do not exist
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- 1 = Bypass the processing of that resource.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- 0 = (default) Do not ignore any resources.  Throw an error that the resource does not exist.
&#x9;&#x9;debug&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1),&#x9; &#x9;- Y or N
&#x9;Output:
&#x9;&#x9;resourceTreeList &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;- A list of resources
&#x9;&#x9;&#x9;PIPE /shared/ASAssets/Utilities/repository/definitions/RepositoryDefinitionsRecursive.resourceTreeType
&#x9;&#x9;&#x9;&#x9;DECLARE PUBLIC TYPE resourceTreeType ROW (
&#x9;&#x9;&#x9;&#x9;&#x9;name&#x9;&#x9;&#x9;VARCHAR(255),
&#x9;&#x9;&#x9;&#x9;&#x9;resPath&#x9;&#x9;&#x9;TypeDefinitions.pathType,
&#x9;&#x9;&#x9;&#x9;&#x9;resType&#x9;&#x9;&#x9;VARCHAR(255),
&#x9;&#x9;&#x9;&#x9;&#x9;subType&#x9;&#x9;&#x9;VARCHAR(255)
&#x9;&#x9;&#x9;&#x9;);

&#x9;Exceptions: none

&#x9;Release:&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;DV Version:&#x9;&#x9;Reason:
&#x9;2013.301&#x9;07/30/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.0.0&#x9;&#x9;&#x9;Created new
&#x9;2013.4&#x9;&#x9;10/28/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.2.0&#x9;&#x9;&#x9;Added parameter inIgnoreResourceDoesNotExist
&#x9;2014.2&#x9;&#x9;03/20/2014&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.2.0&#x9;&#x9;&#x9;Added parameter to getResourceListRecursive to support recursion detection.
&#x9;2018.100&#x9;03/02/2018&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.5&#x9;&#x9;&#x9;Replaced RegexSplit with extractDelimitedText
&#x9;2019.200&#x9;04/04/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Changed custom functions to explicit paths.

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

*/
PROCEDURE getDeployableResourceListByLineage(
&#x9;IN resourcePathList&#x9;&#x9;&#x9;LONGVARCHAR,-- a comma separated list of resource paths
&#x9;IN includeDependentTriggers&#x9;INTEGER, &#x9;-- 0=do not include, 1=include 1st level dependents
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- For each resource encountered, look to see if any dependent resources are triggers and include them if this variable is set to 1.
&#x9;IN includeBasePath&#x9;&#x9;LONGVARCHAR, &#x9;-- If present, then exclude any resources not in this comma separated list of base paths.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;--   It is intended to allow the user to specify a base path for published resources and 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;--   /shared project folder resources that are related project level resources but exclude
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;--   any other resources not associated with those base paths.  All paths need to end with a &apos;/&apos;.
&#x9;IN excludePathsList&#x9;&#x9;&#x9;LONGVARCHAR,-- a comma separated list of resource paths or partials paths to exclude
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;-- all paths or partial paths should end with a / to insure uniqueness of the path string.
&#x9;IN inIgnoreResourceDoesNotExist&#x9;INTEGER,-- Ignore any resources that do not exist
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- 1 = Bypass the processing of that resource.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- 0 = (default) Do not ignore any resources.  Throw an error that the resource does not exist.
&#x9;IN debug&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1),&#x9;-- Y or N
&#x9;OUT resourceTreeList &#x9;&#x9;PIPE /shared/ASAssets/Utilities/repository/definitions/RepositoryDefinitionsRecursive.lineageTreeType
)
BEGIN
&#x9;DECLARE moduleName&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;getDeployableResourceListByLineage&apos;;
&#x9;DECLARE excludePathsList_&#x9;&#x9;LONGVARCHAR DEFAULT excludePathsList;
&#x9;DECLARE includeBasePath_&#x9;&#x9;LONGVARCHAR DEFAULT includeBasePath;
&#x9;DECLARE excludePath &#x9;&#x9;&#x9;/shared/ASAssets/Utilities/TypeDefinitions.pathType;
&#x9;DECLARE includePath &#x9;&#x9;&#x9;/shared/ASAssets/Utilities/TypeDefinitions.pathType;
&#x9;DECLARE seqNum&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE parentID&#x9;&#x9;&#x9;&#x9;INTEGER; -- null to start with
&#x9;DECLARE tparentID&#x9;&#x9;&#x9;&#x9;INTEGER; -- trigger parent id
&#x9;DECLARE resourceDepth&#x9;&#x9;&#x9;INTEGER; -- null to start with
&#x9;DECLARE parentContainer&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE resourceName&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE resourcePath &#x9;&#x9;&#x9;/shared/ASAssets/Utilities/TypeDefinitions.pathType; -- actual resource path and not a folder path
&#x9;DECLARE resourceType&#x9;&#x9;&#x9;VARCHAR DEFAULT null; -- The resource type
&#x9;DECLARE datasourceAncestor&#x9;&#x9;INTEGER DEFAULT 0; -- flag to get the data source ancestory (1=yes, 0=no)
&#x9;DECLARE processPath&#x9;&#x9;&#x9;&#x9;boolean;
&#x9;DECLARE processIncludePath&#x9;&#x9;boolean;
&#x9;DECLARE xmlOut&#x9;&#x9;&#x9;&#x9;&#x9;XML;
&#x9;DECLARE xmlTemp&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE namespaces&#x9;&#x9;&#x9;&#x9;VARCHAR(255) DEFAULT &apos;xmlns:resource=&quot;http://www.compositesw.com/services/system/admin/resource&quot;&apos;;
&#x9;DECLARE xpath&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(1024);
&#x9;DECLARE rec&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/shared/ASAssets/Utilities/repository/definitions/RepositoryDefinitionsRecursive.lineageTreeType;
&#x9;DECLARE trec&#x9;&#x9;&#x9;&#x9;&#x9;/shared/ASAssets/Utilities/repository/definitions/RepositoryDefinitionsRecursive.lineageTreeType;

&#x9;-- If the excludePathsList is empty make it null
&#x9;if (excludePathsList_ IS NOT NULL AND LENGTH(TRIM(excludePathsList_)) = 0) then
&#x9;&#x9;set excludePathsList_ = null;
&#x9;end if;
&#x9;-- If the excludePathsList is empty make it null
&#x9;if (includeBasePath_ IS NOT NULL AND LENGTH(TRIM(includeBasePath_)) = 0) then
&#x9;&#x9;set includeBasePath_ = null;
&#x9;end if;

&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;-- Log the exclude path list
&#x9;&#x9;for p as 
&#x9;&#x9;&#x9;select * from /shared/ASAssets/Utilities/string/extractDelimitedText(excludePathsList_, &apos;,&apos;,0,0,0,1,0) 
&#x9;&#x9;&#x9;&#x9;where object is not null and length(object) &gt; 0
&#x9;&#x9;do
&#x9;&#x9;&#x9;-- Log a single resourcePath from the list
&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;Exclude path=[&apos;||NVL(p.object,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;end for;
&#x9;&#x9;-- Log the exclude non-base path list
&#x9;&#x9;for p as 
&#x9;&#x9;&#x9;select * from /shared/ASAssets/Utilities/string/extractDelimitedText(includeBasePath_, &apos;,&apos;,0,0,0,1,0) 
&#x9;&#x9;&#x9;&#x9;where object is not null and length(object) &gt; 0
&#x9;&#x9;do
&#x9;&#x9;&#x9;-- Log a single resourcePath from the list
&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;Exclude non-base path=[&apos;||NVL(p.object,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;end for;
&#x9;end if;

&#x9;-- Extract the resource path list one-by-one and find the lineage for each
&#x9;for p as 
&#x9;&#x9;select * from /shared/ASAssets/Utilities/string/extractDelimitedText(resourcePathList, &apos;,&apos;,0,0,0,1,0) 
&#x9;&#x9;&#x9;where object is not null and length(object) &gt; 0
&#x9;do
&#x9;&#x9;-- Get a single resourcePath from the list
&#x9;&#x9;set resourcePath = p.object;
&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;Search lineage path=[&apos;||NVL(resourcePath,&apos;null&apos;)||&apos;]&apos;);

&#x9;&#x9;if (resourcePath is not null and LENGTH(resourcePath) &gt; 0) then
&#x9;&#x9;&#x9;-- Retrieve the resource XML
&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/lowerLevelProcedures/getBasicResourceXML(resourcePath, resourceType, xmlOut);
&#x9;&#x9;&#x9;set xmlTemp = CAST(xmlOut as LONGVARCHAR);
&#x9;&#x9;&#x9;set xpath = &apos;/resource:getResourceResponse/resource:resources/resource:resource/resource:type&apos;;
&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/&quot;xml&quot;/getValueFromXML(&apos;N&apos;, namespaces, xpath, xmlTemp, resourceType);

&#x9;&#x9;&#x9;if (resourceType = &apos;DATA_SOURCE&apos; or resourceType = &apos;CONTAINER&apos;) then
&#x9;&#x9;&#x9;&#x9;-- Get all the resources in that DATA_SOURCE or CONTAINER
&#x9;&#x9;&#x9;&#x9;for list as select * from /shared/ASAssets/Utilities/repository/getResourceListRecursive(resourcePath, resourceType) do
&#x9;&#x9;&#x9;&#x9;&#x9;set resourcePath = list.resPath;
&#x9;&#x9;&#x9;&#x9;&#x9;set resourceType = list.resType;

&#x9;&#x9;&#x9;&#x9;&#x9;-- Get the resource lineage for a given resource path
&#x9;&#x9;&#x9;&#x9;&#x9;for r as 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;select * from /shared/ASAssets/Utilities/repository/getResourceLineageRecursive(
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;seqNum, &#x9;&#x9;&#x9;-- sequence number starting with 1.  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;parentID, &#x9;&#x9;&#x9;-- the id of the parent.  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resourceDepth,&#x9;&#x9;-- the depth of the parent (number of levels which recursion has occurred). 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;NULL,&#x9;&#x9;&#x9;&#x9;-- resource id lineage list.  null to start with.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resourcePath, &#x9;&#x9;-- CIS source path to an actual resource
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resourceType, &#x9;&#x9;-- Type of CIS resource to be created.  It is null on the first invocation.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;excludePathsList_,&#x9;-- comma separate list of resource paths or partials paths to exclude
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;datasourceAncestor,&#x9;-- flag to get the data source ancestor 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;inIgnoreResourceDoesNotExist -- 1=ignore resources that do not exist, 0 (default) do not ignore
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)
&#x9;&#x9;&#x9;&#x9;&#x9;do
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- If the resource path is in the exclude list then don&apos;t process it
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set processPath = true;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;excludeLoop:
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for p as 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;select * from /shared/ASAssets/Utilities/string/extractDelimitedText(excludePathsList_, &apos;,&apos;,0,0,0,1,0) 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;where object is not null and length(object) &gt; 0
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;do
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set excludePath = REPLACE(p.object||&apos;/&apos;,&apos;//&apos;,&apos;/&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Check the resource path against the exclude list
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (REPLACE(r.resPath||&apos;/&apos;,&apos;//&apos;,&apos;/&apos;) = excludePath) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set processPath = false;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;leave excludeLoop;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end for;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- If the resource path is in the include base path list then process it otherwise ignore it
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (processPath and includeBasePath_ is not null) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set processIncludePath = false;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;includeLoop:
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for p as 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;select * from /shared/ASAssets/Utilities/string/extractDelimitedText(includeBasePath_, &apos;,&apos;,0,0,0,1,0) 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;where object is not null and length(object) &gt; 0
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;do
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set includePath = REPLACE(p.object||&apos;/&apos;,&apos;//&apos;,&apos;/&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Check the resource path against the exclude list
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (POSITION(includePath IN r.resPath) = 1) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set processIncludePath = true;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;leave includeLoop;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end for;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set processPath = processIncludePath;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (processPath) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (r.resType != &apos;CONTAINER&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set rec = r;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Get the ancestory of the resource (last record is the most immediate folder)
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for ancestor as select * from /shared/ASAssets/Utilities/repository/getAncestorResources(rec.resPath, rec.resType) do
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set rec.resourceID = ancestor.id;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set rec.resName = ancestor.resourceName;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set rec.resPath = ancestor.resourcePath;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set rec.resType = ancestor.resourceType;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set rec.subtype = ancestor.subtype;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set rec.enabled = ancestor.enabled;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end for;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Log it and insert it into the pipe
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;    Container resource path=[&apos;||NVL(rec.resPath,&apos;null&apos;)||&apos;]  type=[&apos;||NVL(rec.resType,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INSERT INTO resourceTreeList values(rec);

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Look for any dependent triggers for a given resource
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (includeDependentTriggers is not null and includeDependentTriggers &gt; 0 and rec.resType != &apos;CONTAINER&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for d as select * from /shared/ASAssets/Utilities/repository/getDependentResourcesCursor(rec.resPath, rec.resType) do
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (d.resourceType = &apos;TRIGGER&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set trec = rec;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/returnFolderNameAndFolderPath(d.resourcePath, &apos;E&apos;, trec.resName, trec.resPath);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Get the folder information for the trigger and output that information first
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for b as select * from /shared/ASAssets/Utilities/repository/getBasicResourceCursor(trec.resPath, &apos;CONTAINER&apos;) do
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set trec.parentID = null;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set trec.resourceID = b.id;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set tparentID = b.id;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set trec.resName = b.name;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set trec.resPath = b.&quot;path&quot;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set trec.resType = b.&quot;type&quot;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set trec.subtype = b.subtype;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set trec.enabled = b.enabled;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INSERT INTO resourceTreeList values(trec);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end for;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Now output the trigger information
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set trec = rec;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set trec.parentID = tparentID;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set trec.resourceID = d.id;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set trec.resName = d.resourceName;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set trec.resPath = d.resourcePath;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set trec.resType = d.resourceType;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set trec.subtype = d.subtype;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set trec.enabled = d.enabled;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INSERT INTO resourceTreeList values(trec);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end for;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;    Related    resource path=[&apos;||NVL(r.resPath,&apos;null&apos;)||&apos;]  type=[&apos;||NVL(r.resType,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INSERT INTO resourceTreeList values(r);

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Look for any dependent triggers for a given resource
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (includeDependentTriggers is not null and includeDependentTriggers &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for d as select * from /shared/ASAssets/Utilities/repository/getDependentResourcesCursor(r.resPath, r.resType) do
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (d.resourceType = &apos;TRIGGER&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set trec = rec;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/returnFolderNameAndFolderPath(d.resourcePath, &apos;E&apos;, trec.resName, trec.resPath);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Get the folder information for the trigger and output that information first
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for b as select * from /shared/ASAssets/Utilities/repository/getBasicResourceCursor(trec.resPath, &apos;CONTAINER&apos;) do
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set trec.parentID = null;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set trec.resourceID = b.id;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set tparentID = b.id;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set trec.resName = b.name;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set trec.resPath = b.&quot;path&quot;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set trec.resType = b.&quot;type&quot;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set trec.subtype = b.subtype;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set trec.enabled = b.enabled;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INSERT INTO resourceTreeList values(trec);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end for;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Now output the trigger information
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set trec = rec;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set trec.parentID = tparentID;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set trec.resourceID = d.id;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set trec.resName = d.resourceName;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set trec.resPath = d.resourcePath;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set trec.resType = d.resourceType;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set trec.subtype = d.subtype;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set trec.enabled = d.enabled;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INSERT INTO resourceTreeList values(trec);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end for;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;end for;
&#x9;&#x9;&#x9;&#x9;end for;
&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;-- Get the resource lineage for a given resource path
&#x9;&#x9;&#x9;&#x9;for r as 
&#x9;&#x9;&#x9;&#x9;&#x9;select * from /shared/ASAssets/Utilities/repository/getResourceLineageRecursive(
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;seqNum, &#x9;&#x9;&#x9;-- sequence number starting with 1.  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;parentID, &#x9;&#x9;&#x9;-- the id of the parent.  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resourceDepth,&#x9;&#x9;-- the depth of the parent (number of levels which recursion has occurred). 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;NULL,&#x9;&#x9;&#x9;&#x9;-- resource id lineage list.  null to start with.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resourcePath, &#x9;&#x9;-- CIS source path to an actual resource
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resourceType, &#x9;&#x9;-- Type of CIS resource to be created.  It is null on the first invocation.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;excludePathsList_,&#x9;-- comma separate list of resource paths or partials paths to exclude
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;datasourceAncestor,&#x9;-- flag to get the data source ancestor 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;inIgnoreResourceDoesNotExist -- 1=ignore resources that do not exist, 0 (default) do not ignore
&#x9;&#x9;&#x9;&#x9;&#x9;)
&#x9;&#x9;&#x9;&#x9;do
&#x9;&#x9;&#x9;&#x9;&#x9;-- If the resource path is in the exclude list then don&apos;t process it
&#x9;&#x9;&#x9;&#x9;&#x9;set processPath = true;
&#x9;&#x9;&#x9;&#x9;&#x9;excludeLoop:
&#x9;&#x9;&#x9;&#x9;&#x9;for p as 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;select * from /shared/ASAssets/Utilities/string/extractDelimitedText(excludePathsList_, &apos;,&apos;,0,0,0,1,0) 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;where object is not null and length(object) &gt; 0
&#x9;&#x9;&#x9;&#x9;&#x9;do
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set excludePath = REPLACE(p.object||&apos;/&apos;,&apos;//&apos;,&apos;/&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Check the resource path against the exclude list
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (REPLACE(r.resPath||&apos;/&apos;,&apos;//&apos;,&apos;/&apos;) = excludePath) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set processPath = false;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;leave excludeLoop;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;end for;

&#x9;&#x9;&#x9;&#x9;&#x9;-- If the resource path is in the include base path list then process it otherwise ignore it
&#x9;&#x9;&#x9;&#x9;&#x9;if (processPath and includeBasePath_ is not null) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set processIncludePath = false;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;includeLoop:
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for p as 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;select * from /shared/ASAssets/Utilities/string/extractDelimitedText(includeBasePath_, &apos;,&apos;,0,0,0,1,0) 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;where object is not null and length(object) &gt; 0
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;do
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set includePath = REPLACE(p.object||&apos;/&apos;,&apos;//&apos;,&apos;/&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Check the resource path against the exclude list
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (POSITION(includePath IN r.resPath) = 1) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set processIncludePath = true;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;leave includeLoop;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end for;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set processPath = processIncludePath;
&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;if (processPath) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (r.resType != &apos;CONTAINER&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set rec = r;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Get the ancestory of the resource (last record is the most immediate folder)
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for ancestor as select * from /shared/ASAssets/Utilities/repository/getAncestorResources(rec.resPath, rec.resType) do
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set rec.resourceID = ancestor.id;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set rec.resName = ancestor.resourceName;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set rec.resPath = ancestor.resourcePath;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set rec.resType = ancestor.resourceType;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set rec.subtype = ancestor.subtype;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set rec.enabled = ancestor.enabled;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end for;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Log it and insert it into the pipe
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;    Container resource path=[&apos;||NVL(rec.resPath,&apos;null&apos;)||&apos;]  type=[&apos;||NVL(rec.resType,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INSERT INTO resourceTreeList values(rec);

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Look for any dependent triggers for a given resource
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (includeDependentTriggers is not null and includeDependentTriggers &gt; 0 and rec.resType != &apos;CONTAINER&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for d as select * from /shared/ASAssets/Utilities/repository/getDependentResourcesCursor(rec.resPath, rec.resType) do
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (d.resourceType = &apos;TRIGGER&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set trec = rec;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/returnFolderNameAndFolderPath(d.resourcePath, &apos;E&apos;, trec.resName, trec.resPath);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Get the folder information for the trigger and output that information first
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for b as select * from /shared/ASAssets/Utilities/repository/getBasicResourceCursor(trec.resPath, &apos;CONTAINER&apos;) do
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set trec.parentID = null;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set trec.resourceID = b.id;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set tparentID = b.id;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set trec.resName = b.name;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set trec.resPath = b.&quot;path&quot;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set trec.resType = b.&quot;type&quot;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set trec.subtype = b.subtype;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set trec.enabled = b.enabled;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INSERT INTO resourceTreeList values(trec);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end for;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Now output the trigger information
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set trec = rec;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set trec.parentID = tparentID;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set trec.resourceID = d.id;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set trec.resName = d.resourceName;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set trec.resPath = d.resourcePath;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set trec.resType = d.resourceType;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set trec.subtype = d.subtype;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set trec.enabled = d.enabled;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INSERT INTO resourceTreeList values(trec);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end for;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;    Related   resource path=[&apos;||NVL(r.resPath,&apos;null&apos;)||&apos;]  type=[&apos;||NVL(r.resType,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INSERT INTO resourceTreeList values(r);

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Look for any dependent triggers for a given resource
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (includeDependentTriggers is not null and includeDependentTriggers &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for d as select * from /shared/ASAssets/Utilities/repository/getDependentResourcesCursor(r.resPath, r.resType) do
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (d.resourceType = &apos;TRIGGER&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set trec = rec;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/returnFolderNameAndFolderPath(d.resourcePath, &apos;E&apos;, trec.resName, trec.resPath);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Get the folder information for the trigger and output that information first
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for b as select * from /shared/ASAssets/Utilities/repository/getBasicResourceCursor(trec.resPath, &apos;CONTAINER&apos;) do
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set trec.parentID = null;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set trec.resourceID = b.id;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set tparentID = b.id;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set trec.resName = b.name;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set trec.resPath = b.&quot;path&quot;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set trec.resType = b.&quot;type&quot;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set trec.subtype = b.subtype;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set trec.enabled = b.enabled;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INSERT INTO resourceTreeList values(trec);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end for;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Now output the trigger information
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set trec = rec;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set trec.parentID = tparentID;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set trec.resourceID = d.id;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set trec.resName = d.resourceName;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set trec.resPath = d.resourcePath;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set trec.resType = d.resourceType;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set trec.subtype = d.subtype;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set trec.enabled = d.enabled;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INSERT INTO resourceTreeList values(trec);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end for;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;end for;
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;end if;
&#x9;end for;
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1564685178320</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
</metadata>