<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:e931daa6-7fda-456a-badf-4cdb1c228a1a -->
<metadata name="getBasicResourceCursor_PROCEDURE_CURSOR" path="/shared/ASAssets/Utilities/repository/getBasicResourceCursor_PROCEDURE_CURSOR" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>&lt;![CDATA[getBasicResourceCursor_PROCEDURE_CURSOR:
&#x9;-- CIS Repository Helper Procedure --
&#x9;This procedure retrieves the resource metadata for a given resource that is a procedure object providing both input and output parameters.  
&#x9;A cursor of metadata is returned. This procedure invokes 2 lower level API procedures:
&#x9;&#x9;getBasicResourceXML - this performs the actual invocation to the CIS repository API and returns XML
&#x9;&#x9;getBasicResourceXSLT_PROCEDURE - this procedure takes the XML response from getBasicResourceXML 
&#x9;&#x9;&#x9;and turns it into a cursor which is more usable by other CIS procedures.
&#x9;It should be noted that Procedures may return more than one output cursor.  
&#x9;The field &quot;sqlText&quot; will contain the actual CURSOR (...) definition and will be not null for each cursor output parameter.
&#x9;This may be true for SQL Procedures or Parameterized queries.  
&#x9;Generally speaking, for XSLT Procedures, there will only be one output cursor.

&#x9;mtinus: 10/24/2013
&#x9;Support case: 19620 - Composite does not support typed xml data types in a view variable declaration.  Only the generic &quot;XML&quot; is supported.
&#x9;&#x9;When generating views, the user of this procedure should use the columnBaseType when the dataType is xmlType otherwise use the columnType for defining
&#x9;&#x9;IN parameter declarations for VIEWS.

&#x9;Input:
&#x9;&#x9;fullResourcePath - Full resource path which includes the path and the resource name  
&#x9;&#x9;&#x9;Values: e.g. /shared/Utilities/repository/examples/source/PRODUCT_VIEW
&#x9;&#x9;resourceType - Type of CIS resource to be created
&#x9;&#x9;&#x9;Values: see &quot;TYPES / SUBTYPES&quot; listing below.  e.g. TABLE
&#x9;&#x9;cursorNum - For multiple output cursors in a procedure, this provides a way to identify which cursor
&#x9;&#x9;&#x9;the user would like to select.  If null or less than zero, then 0 is the default which returns all cursors.
&#x9;Output:
&#x9;&#x9;resourceCursor - XML response containing the resource metadata
&#x9;&#x9;&#x9;CURSOR (
&#x9;&#x9;        resourceName &#x9;VARCHAR(255), &#x9;&#x9;The name of the resource.
&#x9;&#x9;        resourcePath &#x9;VARCHAR(1024), &#x9;&#x9;The full resource path.
        &#x9;&#x9;resourceType &#x9;VARCHAR(255), &#x9;&#x9;The resource type: PROCEDURE
&#x9;&#x9;        subtype &#x9;&#x9;VARCHAR(255), &#x9;&#x9;The resource sub type. e.g. SQL_SCRIPT_PROCEDURE, XSLT_TRANSFORM_PROCEDURE
&#x9;&#x9;        enabled &#x9;&#x9;BIT, &#x9;&#x9;&#x9;&#x9;Indicates whether the resource is enabled (1) or not (0)
&#x9;&#x9;&#x9;&#x9;annotation &#x9;&#x9;LONGVARCHAR,&#x9;&#x9;Provides the annotation for the resource
&#x9;&#x9;        tableType &#x9;&#x9;VARCHAR(255), &#x9;&#x9;Provides the tableType which is null for procedures.  This column is here for consistency with getBasicResourceCursor_SQL_TABLE.
&#x9;&#x9;        sqlText &#x9;&#x9;VARCHAR(32768), &#x9;The sqlText for a cursor
&#x9;&#x9;&#x9;&#x9;columnName &#x9;&#x9;VARCHAR(255), &#x9;&#x9;The name of the column.
&#x9;&#x9;&#x9;&#x9;columnType &#x9;&#x9;VARCHAR(1024),&#x9;&#x9;The actual column type. e.g. CURSOR, XML, VARCHAR(255), DECIMAL(32,2), BIGINT, NUMERIC(2147483647,0), and etc.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;or a specific typed XML: /shared/BestPracticesTest/Application/DefinitionSets/OrderTransactionsWSDL.&quot;{http://www.compositesw.com/example/transaction/orders/v1.0}OrdersRequest&quot;
&#x9;&#x9;&#x9;&#x9;columnBaseType&#x9;VARCHAR(255),&#x9;&#x9;The base column type.  e.g. CURSOR, XML, BIGINT, INTEGER, DECIMAL, VARCHAR, NUMERIC and etc.
&#x9;&#x9;&#x9;&#x9;dataType&#x9;&#x9;VARCHAR(255),&#x9;&#x9;1 of [sqlType, xmlType, cursorType, cursorColumn]
&#x9;&#x9;&#x9;&#x9;paramDirection&#x9;VARCHAR(255),&#x9;&#x9;The direction of the parameter. e.g. 1 of [IN,OUT,INOUT]
&#x9;&#x9;&#x9;&#x9;nativeBaseType &#x9;VARCHAR(255),&#x9;&#x9;The native base type.  Currently defaulted to null. Future expansion.
&#x9;&#x9;&#x9;&#x9;nativeType &#x9;&#x9;VARCHAR(255)&#x9;&#x9;The native column type.  Currently defaulted to null. Future expansion.
&#x9;&#x9;&#x9;&#x9;)

&#x9;Exceptions:  none

&#x9;Release:&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;DV Version:&#x9;&#x9;Reason:
&#x9;2012.3&#x9;&#x9;04/27/2012&#x9;&#x9;Mike Tinius        &#x9;5.2.0&#x9;&#x9;&#x9;Created new.
&#x9;2013.2&#x9;&#x9;03/19/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.2.0&#x9;&#x9;&#x9;Added annotation to result cursor
&#x9;2013.3&#x9;&#x9;06/27/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.0.0&#x9;&#x9;&#x9;Modified to not output any cursor for stored procedure with no output cursor
&#x9;2013.4&#x9;&#x9;09/12/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.1.0&#x9;&#x9;&#x9;Modified if/then to if/then/else because it was not correctly parsing the CURSOR () output.
&#x9;2013.4&#x9;&#x9;10/28/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.2.0&#x9;&#x9;&#x9;B.P. 8.0: Modified to check for generic soap &quot;Envelope&quot; type and set to generic XML when dataType=&apos;xmlType&apos;.
&#x9;2014.2&#x9;&#x9;03/30/2014&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.2.0&#x9;&#x9;&#x9;B.P. 8.1.1: Fixed issue where the columnType had 2 parenthesis VARCHAR(255)) for the last column in the list.  Addressed issue with embedded spaces and commas in column names.
&#x9;2018.100&#x9;03/02/2018&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.5&#x9;&#x9;&#x9;Replaced RegexSplit with extractDelimitedText.  Increased size of resourcePath to VARCHAR(4096) and columnType to VARCHAR(4096).
&#x9;2019.200&#x9;04/04/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Changed custom functions to explicit paths.
&#x9;2019.200&#x9;05/21/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Replaced call to findString with INSTR which is more efficient.

    (c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.



&#x9;TYPES / SUBTYPES:
&#x9;=================
&#x9;The following resource types/subtypes are supported by this operation.  Resources
&#x9;cannot be created under &quot;/services&quot; unless otherwise noted, and cannot be created
&#x9;within a physical data source.  

&#x9;* LINK / unknown at this time

&#x9;(CIS procedures)
&#x9;* PROCEDURE / SQL_SCRIPT_PROCEDURE - A Composite SQL Procedure.  Created with a simple default script body that is runnable.
&#x9;(Custom procedures)
&#x9;* PROCEDURE / JAVA_PROCEDURE - A Composite java data source procedure.  Created from a java data source (jar file).
&#x9;(Database procedures)
&#x9;* PROCEDURE / EXTERNAL_SQL_PROCEDURE - A Composite Packaged Query.  Created with no SQL text, so it is not runnable.  
&#x9;* PROCEDURE / DATABASE_PROCEDURE - A database stored procedure.
&#x9;(XML procedures)
&#x9;* PROCEDURE / BASIC_TRANSFORM_PROCEDURE - A Composite Basic XSLT Transformation procedure.  Created with no target procedure and no output columns, so it is not runnable.
&#x9;* PROCEDURE / XSLT_TRANSFORM_PROCEDURE - A Composite XSLT Transformation procedure.  Created with no target procedure and no output columns, so it is not runnable.
&#x9;* PROCEDURE / STREAM_TRANSFORM_PROCEDURE - A Composite XSLT Streaming Transformation procedure.  Created with no target procedure and no output columns, so it is not runnable.
&#x9;* PROCEDURE / XQUERY_TRANSFORM_PROCEDURE - A Composite XQUERY Transformation Procedure.  Created with no target schema and no model, so it is not runnable.
&#x9;(Misc procedures)
&#x9;* PROCEDURE / OPERATION_PROCEDURE - A Composite web service or HTTP procedure operation.]]&gt;</annotation>
  <parameters>
    <parameter name="fullResourcePath" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="resourceType" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="cursorNum" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="resourceCursor" direction="OUT" nullable="true">
      <datatype name="resourceCursor" type="TABLE" refId="256">
        <element name="resourceName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="resourcePath">
          <datatype name="VARCHAR" type="STRING" maxLength="4096"/>
        </element>
        <element name="resourceType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="subtype">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="enabled">
          <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
        </element>
        <element name="annotation">
          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
        </element>
        <element name="tableType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="sqlText">
          <datatype name="VARCHAR" type="STRING" maxLength="32768"/>
        </element>
        <element name="columnName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="columnType">
          <datatype name="VARCHAR" type="STRING" maxLength="4096"/>
        </element>
        <element name="columnBaseType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="dataType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="paramDirection">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="nativeBaseType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="nativeType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
      </datatype>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/shared/ASAssets/Utilities/log/logDebugMessage" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="moduleName" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="moduleNameType" type="STRING" maxLength="4096"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="messageText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/_debug" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/lowerLevelProcedures/getBasicResourceXML" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="257"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/lowerLevelProcedures/getBasicResourceXSLT_PROCEDURE" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inXML" direction="IN">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="257"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="outputs" direction="OUT" nullable="false">
        <datatype type="TABLE" refId="256">
          <element name="resourceName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resourcePath">
            <datatype type="STRING" maxLength="4096"/>
          </element>
          <element name="resourceType">
            <datatype type="STRING" maxLength="40"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="40"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="annotation">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="dataType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="parameterName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="parameterType">
            <datatype type="STRING" maxLength="32767"/>
          </element>
          <element name="parameterDirection">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="parameterTypeName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="parameterTypeNamespace">
            <datatype type="STRING" maxLength="32767"/>
          </element>
          <element name="parameterTypeReferencePath">
            <datatype type="STRING" maxLength="32767"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/TextUtils/RegexReplace" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="Input Text" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Regular Expression" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Replacement Text" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Occurrence" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/extractDelimitedText" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inputString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="delimiter" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="occurrence" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="reverseInputText" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="reverseOutput" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="trimText" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="includeDelimiter" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="object">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* getBasicResourceCursor_PROCEDURE_CURSOR:
&#x9;-- CIS Repository Helper Procedure --
&#x9;This procedure retrieves the resource metadata for a given resource that is a procedure object providing both input and output parameters.  
&#x9;A cursor of metadata is returned. This procedure invokes 2 lower level API procedures:
&#x9;&#x9;getBasicResourceXML - this performs the actual invocation to the CIS repository API and returns XML
&#x9;&#x9;getBasicResourceXSLT_PROCEDURE - this procedure takes the XML response from getBasicResourceXML 
&#x9;&#x9;&#x9;and turns it into a cursor which is more usable by other CIS procedures.
&#x9;It should be noted that Procedures may return more than one output cursor.  
&#x9;The field &quot;sqlText&quot; will contain the actual CURSOR (...) definition and will be not null for each cursor output parameter.
&#x9;This may be true for SQL Procedures or Parameterized queries.  
&#x9;Generally speaking, for XSLT Procedures, there will only be one output cursor.

&#x9;mtinus: 10/24/2013
&#x9;Support case: 19620 - Composite does not support typed xml data types in a view variable declaration.  Only the generic &quot;XML&quot; is supported.
&#x9;&#x9;When generating views, the user of this procedure should use the columnBaseType when the dataType is xmlType otherwise use the columnType for defining
&#x9;&#x9;IN parameter declarations for VIEWS.

&#x9;Input:
&#x9;&#x9;fullResourcePath - Full resource path which includes the path and the resource name  
&#x9;&#x9;&#x9;Values: e.g. /shared/Utilities/repository/examples/source/PRODUCT_VIEW
&#x9;&#x9;resourceType - Type of CIS resource to be created
&#x9;&#x9;&#x9;Values: see &quot;TYPES / SUBTYPES&quot; listing below.  e.g. TABLE
&#x9;&#x9;cursorNum - For multiple output cursors in a procedure, this provides a way to identify which cursor
&#x9;&#x9;&#x9;the user would like to select.  If null or less than zero, then 0 is the default which returns all cursors.
&#x9;Output:
&#x9;&#x9;resourceCursor - XML response containing the resource metadata
&#x9;&#x9;&#x9;CURSOR (
&#x9;&#x9;        resourceName &#x9;VARCHAR(255), &#x9;&#x9;The name of the resource.
&#x9;&#x9;        resourcePath &#x9;VARCHAR(4096), &#x9;&#x9;The full resource path.
        &#x9;&#x9;resourceType &#x9;VARCHAR(255), &#x9;&#x9;The resource type: PROCEDURE
&#x9;&#x9;        subtype &#x9;&#x9;VARCHAR(255), &#x9;&#x9;The resource sub type. e.g. SQL_SCRIPT_PROCEDURE, XSLT_TRANSFORM_PROCEDURE
&#x9;&#x9;        enabled &#x9;&#x9;BIT, &#x9;&#x9;&#x9;&#x9;Indicates whether the resource is enabled (1) or not (0)
&#x9;&#x9;&#x9;&#x9;annotation &#x9;&#x9;LONGVARCHAR,&#x9;&#x9;Provides the annotation for the resource
&#x9;&#x9;        tableType &#x9;&#x9;VARCHAR(255), &#x9;&#x9;Provides the tableType which is null for procedures.  This column is here for consistency with getBasicResourceCursor_SQL_TABLE.
&#x9;&#x9;        sqlText &#x9;&#x9;VARCHAR(32768), &#x9;The sqlText for a cursor
&#x9;&#x9;&#x9;&#x9;columnName &#x9;&#x9;VARCHAR(255), &#x9;&#x9;The name of the column.
&#x9;&#x9;&#x9;&#x9;columnType &#x9;&#x9;VARCHAR(4096),&#x9;&#x9;The base column type.  e.g. VECTOR ROW, CURSOR, XML, BIGINT, INTEGER, DECIMAL, VARCHAR, NUMERIC, and etc.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;or a specific typed XML: /shared/BestPracticesTest/Application/DefinitionSets/OrderTransactionsWSDL.&quot;{http://www.compositesw.com/example/transaction/orders/v1.0}OrdersRequest&quot;
&#x9;&#x9;&#x9;&#x9;columnBaseType&#x9;VARCHAR(255),&#x9;&#x9;The base column type.  e.g. CURSOR, XML, BIGINT, INTEGER, DECIMAL, VARCHAR, NUMERIC and etc.
&#x9;&#x9;&#x9;&#x9;dataType&#x9;&#x9;VARCHAR(255),&#x9;&#x9;1 of [sqlType, xmlType, cursorType, cursorColumn]
&#x9;&#x9;&#x9;&#x9;paramDirection&#x9;VARCHAR(255),&#x9;&#x9;The direction of the parameter. e.g. 1 of [IN,OUT,INOUT]
&#x9;&#x9;&#x9;&#x9;nativeBaseType &#x9;VARCHAR(255),&#x9;&#x9;The native base type.  Currently defaulted to null. Future expansion.
&#x9;&#x9;&#x9;&#x9;nativeType &#x9;&#x9;VARCHAR(255)&#x9;&#x9;The native column type.  Currently defaulted to null. Future expansion.
&#x9;&#x9;&#x9;&#x9;)

&#x9;Exceptions:  none

&#x9;Release:&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;DV Version:&#x9;&#x9;Reason:
&#x9;2012.3&#x9;&#x9;04/27/2012&#x9;&#x9;Mike Tinius        &#x9;5.2.0&#x9;&#x9;&#x9;Created new.
&#x9;2013.2&#x9;&#x9;03/19/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.2.0&#x9;&#x9;&#x9;Added annotation to result cursor
&#x9;2013.3&#x9;&#x9;06/27/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.0.0&#x9;&#x9;&#x9;Modified to not output any cursor for stored procedure with no output cursor
&#x9;2013.4&#x9;&#x9;09/12/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.1.0&#x9;&#x9;&#x9;Modified if/then to if/then/else because it was not correctly parsing the CURSOR () output.
&#x9;2013.4&#x9;&#x9;10/28/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.2.0&#x9;&#x9;&#x9;B.P. 8.0: Modified to check for generic soap &quot;Envelope&quot; type and set to generic XML when dataType=&apos;xmlType&apos;.
&#x9;2014.2&#x9;&#x9;03/30/2014&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.2.0&#x9;&#x9;&#x9;B.P. 8.1.1: Fixed issue where the columnType had 2 parenthesis VARCHAR(255)) for the last column in the list.  Addressed issue with embedded spaces and commas in column names.
&#x9;2018.100&#x9;03/02/2018&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.5&#x9;&#x9;&#x9;Replaced RegexSplit with extractDelimitedText.  Increased size of resourcePath to VARCHAR(4096) and columnType to VARCHAR(4096).
&#x9;2019.200&#x9;04/04/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Changed custom functions to explicit paths.
&#x9;2019.200&#x9;05/21/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Replaced call to findString with INSTR which is more efficient.

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.


&#x9;TYPES / SUBTYPES:
&#x9;=================
&#x9;The following resource types/subtypes are supported by this operation.  Resources
&#x9;cannot be created under &quot;/services&quot; unless otherwise noted, and cannot be created
&#x9;within a physical data source.  

&#x9;* LINK / unknown at this time

&#x9;(CIS procedures)
&#x9;* PROCEDURE / SQL_SCRIPT_PROCEDURE - A Composite SQL Procedure.  Created with a simple default script body that is runnable.
&#x9;(Custom procedures)
&#x9;* PROCEDURE / JAVA_PROCEDURE - A Composite java data source procedure.  Created from a java data source (jar file).
&#x9;(Database procedures)
&#x9;* PROCEDURE / EXTERNAL_SQL_PROCEDURE - A Composite Packaged Query.  Created with no SQL text, so it is not runnable.  
&#x9;* PROCEDURE / DATABASE_PROCEDURE - A database stored procedure.
&#x9;(XML procedures)
&#x9;* PROCEDURE / BASIC_TRANSFORM_PROCEDURE - A Composite Basic XSLT Transformation procedure.  Created with no target procedure and no output columns, so it is not runnable.
&#x9;* PROCEDURE / XSLT_TRANSFORM_PROCEDURE - A Composite XSLT Transformation procedure.  Created with no target procedure and no output columns, so it is not runnable.
&#x9;* PROCEDURE / STREAM_TRANSFORM_PROCEDURE - A Composite XSLT Streaming Transformation procedure.  Created with no target procedure and no output columns, so it is not runnable.
&#x9;* PROCEDURE / XQUERY_TRANSFORM_PROCEDURE - A Composite XQUERY Transformation Procedure.  Created with no target schema and no model, so it is not runnable.
&#x9;(Misc procedures)
&#x9;* PROCEDURE / OPERATION_PROCEDURE - A Composite web service or HTTP procedure operation.
*/
PROCEDURE getBasicResourceCursor_PROCEDURE_CURSOR(
    IN fullResourcePath &#x9;LONGVARCHAR,  
    IN resourceType &#x9;&#x9;VARCHAR, 
&#x9;IN cursorNum&#x9;&#x9;&#x9;INTEGER,
    OUT resourceCursor PIPE (
&#x9;&#x9;        resourceName &#x9;VARCHAR(255), &#x9;&#x9;--The name of the resource.
&#x9;&#x9;        resourcePath &#x9;VARCHAR(4096), &#x9;&#x9;--The full resource path.
        &#x9;&#x9;resourceType &#x9;VARCHAR(255), &#x9;&#x9;--The resource type: PROCEDURE
&#x9;&#x9;        subtype &#x9;&#x9;VARCHAR(255), &#x9;&#x9;--The resource sub type. e.g. SQL_SCRIPT_PROCEDURE, XSLT_TRANSFORM_PROCEDURE
&#x9;&#x9;        enabled &#x9;&#x9;BIT, &#x9;&#x9;&#x9;&#x9;--Indicates whether the resource is enabled (1) or not (0)
&#x9;&#x9;&#x9;&#x9;annotation &#x9;&#x9;LONGVARCHAR,&#x9;&#x9;--Provides the annotation for the resource
&#x9;&#x9;        tableType &#x9;&#x9;VARCHAR(255), &#x9;&#x9;--Provides the tableType which is null for procedures.  This column is here for consistency with getBasicResourceCursor_SQL_TABLE.
&#x9;&#x9;        sqlText &#x9;&#x9;VARCHAR(32768), &#x9;--The sqlText for a cursor
&#x9;&#x9;&#x9;&#x9;columnName &#x9;&#x9;VARCHAR(255), &#x9;&#x9;--The name of the column.
&#x9;&#x9;&#x9;&#x9;columnType &#x9;&#x9;VARCHAR(4096),&#x9;&#x9;--The actual column type. e.g. CURSOR, XML, VARCHAR(255), DECIMAL(32,2), BIGINT, NUMERIC(2147483647,0), and etc.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--or a specific typed XML: /shared/BestPracticesTest/Application/DefinitionSets/OrderTransactionsWSDL.&quot;{http://www.compositesw.com/example/transaction/orders/v1.0}OrdersRequest&quot;
&#x9;&#x9;&#x9;&#x9;columnBaseType&#x9;VARCHAR(255),&#x9;&#x9;--The base column type.  e.g. VECTOR ROW, CURSOR, XML, BIGINT, INTEGER, DECIMAL, VARCHAR, NUMERIC, and etc.
&#x9;&#x9;&#x9;&#x9;dataType&#x9;&#x9;VARCHAR(255),&#x9;&#x9;--1 of [sqlType, xmlType, cursorType, cursorColumn]
&#x9;&#x9;&#x9;&#x9;paramDirection&#x9;VARCHAR(255),&#x9;&#x9;--The direction of the parameter. e.g. 1 of [IN,OUT,INOUT]
&#x9;&#x9;&#x9;&#x9;nativeBaseType &#x9;VARCHAR(255),&#x9;&#x9;--The native base type.  Currently defaulted to null.  Future expansion.
&#x9;&#x9;&#x9;&#x9;nativeType &#x9;&#x9;VARCHAR(255)&#x9;&#x9;--The native column type.  Currently defaulted to null. Future expansion.
        )
    )
BEGIN
&#x9;DECLARE moduleName&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;getBasicResourceCursor_PROCEDURE_CURSOR&apos;;
&#x9;DECLARE debug&#x9;&#x9;&#x9;&#x9;CHAR(1) DEFAULT /shared/ASAssets/Utilities/repository/&quot;_debug&quot;.debug;
&#x9;DECLARE cursorNum_&#x9;&#x9;&#x9;INTEGER DEFAULT cursorNum;
&#x9;DECLARE resourceResponse &#x9;XML;
&#x9;DECLARE cursorDefinition&#x9;LONGVARCHAR;
&#x9;DECLARE columnDefinition&#x9;LONGVARCHAR;
&#x9;DECLARE columnName &#x9;&#x9;&#x9;VARCHAR(255) DEFAULT NULL;
&#x9;DECLARE columnType &#x9;&#x9;&#x9;LONGVARCHAR DEFAULT NULL;
&#x9;DECLARE columnBaseType&#x9;&#x9;LONGVARCHAR DEFAULT NULL;
&#x9;DECLARE numOutCursors&#x9;&#x9;INTEGER DEFAULT 0;
&#x9;DECLARE i&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE annotation&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE parameterDirection&#x9;VARCHAR;
&#x9;DECLARE parameterType&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE dataType&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE pos1, pos2, pos3&#x9;INTEGER;
&#x9;-- Regex pattern for encoding values in double quotes
&#x9;DECLARE regexSize&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER DEFAULT 200000;
&#x9;DECLARE regexReplacePatternDoubleQuote &#x9;VARCHAR DEFAULT &apos;(?=[^&quot;]{0,&apos;||regexSize||&apos;}&quot;(?:[^&quot;\r\n]{0,&apos;||regexSize||&apos;}&quot;[^&quot;]{0,&apos;||regexSize||&apos;}&quot;){0,&apos;||regexSize||&apos;}[^&quot;\r\n]{0,&apos;||regexSize||&apos;}$)&apos;;

&#x9;-- 0 means get all input/output cursors
&#x9;if (cursorNum_ is null or cursorNum_ &lt; 0) then
&#x9;&#x9;set cursorNum_ = 0;
&#x9;end if;

&#x9;call /shared/ASAssets/Utilities/repository/lowerLevelProcedures/getBasicResourceXML(fullResourcePath, resourceType, resourceResponse);
    FOR r as
        SELECT * 
&#x9;&#x9;FROM /shared/ASAssets/Utilities/repository/lowerLevelProcedures/getBasicResourceXSLT_PROCEDURE(resourceResponse)
/*      resourceName VARCHAR(255), 
        resourcePath VARCHAR(1024), 
        resourceType LONGVARCHAR, 
        subtype VARCHAR(255), 
        enabled BIT, 
&#x9;&#x9;annotation LONGVARCHAR,
&#x9;&#x9;dataType VARCHAR(255)
        parameterName VARCHAR(255), 
        parameterType VARCHAR(32767),
        parameterDirection VARCHAR(255)
        parameterTypeName VARCHAR(255),
        parameterTypeNamespace VARCHAR(32767),
        parameterTypeReferencePath VARCHAR(32767),
*/
&#x9;DO
&#x9;&#x9;if (r.annotation is not null) then -- first row
&#x9;&#x9;&#x9;set annotation = r.annotation;
&#x9;&#x9;&#x9;if (UPPER(debug) = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;   annotation: &apos;||annotation);
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;end if;
&#x9;&#x9;set parameterDirection = TRIM(r.parameterDirection);
&#x9;&#x9;set parameterType = TRIM(r.parameterType);
&#x9;&#x9;set dataType = TRIM(r.dataType);

&#x9;&#x9;if (parameterDirection = &apos;IN&apos;) then
&#x9;&#x9;&#x9;if (UPPER(debug) = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;   dataType=[&apos;||NVL(dataType,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;   parameterTypeName=[&apos;||NVL(r.parameterTypeName,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;   parameterTypeNamespace=[&apos;||NVL(r.parameterTypeNamespace,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;   parameterType=[&apos;||NVL(parameterType,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;set columnName = TRIM(r.parameterName);
&#x9;&#x9;&#x9;set columnType = TRIM(r.parameterType);
&#x9;&#x9;&#x9;if (dataType = &apos;xmlType&apos;) then
&#x9;&#x9;&#x9;&#x9;set columnBaseType = &apos;XML&apos;;
&#x9;&#x9;&#x9;&#x9;if (r.parameterTypeNamespace is null) then
&#x9;&#x9;&#x9;&#x9;&#x9;set columnType = r.parameterTypeName;
&#x9;&#x9;&#x9;&#x9;else
    &#x9;&#x9;&#x9;&#x9;--e.g. /shared/exampleWS/Application/DefinitionSets/CustomerWSDL.&quot;{http://www.compositesw.com/example/transaction/customer/v1.0}CustomerRequest&quot;,
&#x9;&#x9;&#x9;&#x9;&#x9;if (r.parameterTypeReferencePath is not null and LENGTH(r.parameterTypeReferencePath) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set columnType = NVL(r.parameterTypeReferencePath,&apos;null&apos;)||&apos;.&quot;{&apos;||r.parameterTypeNamespace||&apos;}&apos;||r.parameterTypeName||&apos;&quot;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (r.parameterTypeName = &apos;Envelope&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set columnType = &apos;XML&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set columnType = &apos;&quot;{&apos;||r.parameterTypeNamespace||&apos;}&apos;||r.parameterTypeName||&apos;&quot;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;set columnBaseType = columnType;
&#x9;&#x9;&#x9;&#x9;if (columnBaseType is not null) then
&#x9;&#x9;&#x9;&#x9;&#x9;set pos1 = POSITION(&apos;(&apos; IN columnType);
&#x9;&#x9;&#x9;&#x9;&#x9;if (pos1 &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set columnBaseType = SUBSTRING(columnBaseType, 1, pos1 - 1);
&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;INSERT INTO resourceCursor values(r.resourceName,r.resourcePath,r.resourceType,r.subtype,r.enabled,null,null,null,columnName,columnType,columnBaseType,dataType,parameterDirection,null,null);
&#x9;&#x9;end if;

&#x9;&#x9;if (parameterDirection = &apos;OUT&apos; AND POSITION(&apos;CURSOR&apos; IN parameterType) = 1) then
&#x9;&#x9;&#x9;set numOutCursors = numOutCursors + 1;
&#x9;&#x9;&#x9;if (UPPER(debug) = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;   parameterType=[&apos;||NVL(parameterType,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;-- Check to see if the number of the output cursor matches the one passed in by the user
&#x9;&#x9;&#x9;if (cursorNum_ = 0 or cursorNum_ = numOutCursors) then
&#x9;&#x9;&#x9;&#x9;set pos1 = INSTR(parameterType, &apos;CURSOR (&apos;);
&#x9;&#x9;&#x9;&#x9;set pos2 = INSTR(parameterType, &apos;CURSOR(&apos;);
&#x9;&#x9;&#x9;&#x9;set pos3 = INSTR(parameterType, &apos;CURSOR&apos;);

&#x9;&#x9;&#x9;&#x9;if (pos1 &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;if (UPPER(debug) = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;FOUND &quot;CURSOR (&quot;&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;-- Remove the leading &quot;CURSOR (&quot;
&#x9;&#x9;&#x9;&#x9;&#x9;set cursorDefinition = TRIM(REPLACE(parameterType, &apos;CURSOR (&apos;,&apos;&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;-- Remove the trailing right parenthesis &quot;)&quot;
&#x9;&#x9;&#x9;&#x9;&#x9;if ( SUBSTRING(cursorDefinition, LENGTH(cursorDefinition), 1) = &apos;)&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set cursorDefinition = SUBSTRING(cursorDefinition, 1, LENGTH(cursorDefinition) - 1);
&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;elseif (pos2 &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;if (UPPER(debug) = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;FOUND &quot;CURSOR(&quot;&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;-- Remove the leading &quot;CURSOR(&quot;
&#x9;&#x9;&#x9;&#x9;&#x9;set cursorDefinition = TRIM(REPLACE(parameterType, &apos;CURSOR(&apos;,&apos;&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;-- Remove the trailing right parenthesis &quot;)&quot;
&#x9;&#x9;&#x9;&#x9;&#x9;if ( SUBSTRING(cursorDefinition, LENGTH(cursorDefinition), 1) = &apos;)&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set cursorDefinition = SUBSTRING(cursorDefinition, 1, LENGTH(cursorDefinition) - 1);
&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;elseif (pos3 &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;if (UPPER(debug) = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;FOUND &quot;CURSOR&quot;&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;-- Remove the leading &quot;CURSOR&quot;
&#x9;&#x9;&#x9;&#x9;&#x9;set cursorDefinition = TRIM(REPLACE(parameterType, &apos;CURSOR&apos;,&apos;&apos;));
&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;-- Encode spaces in double quotes.  This is required in order to parse the CURSOR line and separate columns from column types
&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/string/TextUtils/RegexReplace(cursorDefinition, &apos;\&apos;||&apos; &apos;||regexReplacePatternDoubleQuote, &apos;_0020&apos;, 0, cursorDefinition);
&#x9;&#x9;&#x9;&#x9;-- Encode commas in double quotes.  This is required i norder to parse the cursor line when column names contain embedded commas.  Commas separate the column/column type pairs.
&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/string/TextUtils/RegexReplace(cursorDefinition, &apos;\&apos;||&apos;,&apos;||regexReplacePatternDoubleQuote, &apos;_002c&apos;, 0, cursorDefinition);
&#x9;&#x9;&#x9;&#x9;if (UPPER(debug) = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;   Cursor Def=[&apos;||cursorDefinition||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;-- Only output results when the CURSOR definition is not empty
&#x9;&#x9;&#x9;&#x9;if (cursorDefinition IS NOT NULL AND LENGTH(&apos;|&apos;||cursorDefinition||&apos;|&apos;) &gt; 2) then
&#x9;&#x9;&#x9;&#x9;&#x9;INSERT INTO resourceCursor values(r.resourceName,r.resourcePath,r.resourceType,r.subtype,r.enabled,annotation,null,r.parameterType,r.parameterName,&apos;CURSOR&apos;,&apos;CURSOR&apos;,&apos;cursorType&apos;,parameterDirection,null,null);
/*
CURSOR (&quot;Product ID&quot; NUMERIC(2147483647,0), &quot;Product Name&quot; VARCHAR(32768), &quot;Category,ID&quot; NUMERIC(2147483647,0), &quot;Category, Name&quot; VARCHAR(32768), ProductDescription VARCHAR(32768), SerialNumber VARCHAR(32768), UnitPrice DECIMAL(32,6), ReorderLevel NUMERIC(2147483647,0), LeadTime VARCHAR(32768))
*/
&#x9;&#x9;&#x9;&#x9;&#x9;-- Parse the CURSOR list based on a comma space &apos;, &apos; separator.
&#x9;&#x9;&#x9;&#x9;&#x9;for s as select * from /shared/ASAssets/Utilities/string/extractDelimitedText(cursorDefinition,&apos;, &apos;,0,0,0,1,0) do
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set columnDefinition = s.object;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (UPPER(debug) = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;   Column Def: &apos;||columnDefinition);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set columnName = null;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set columnType = null;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set i = 1;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Parse the column and column type combination based on a space separator
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for t as 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;select * from /shared/ASAssets/Utilities/string/extractDelimitedText(columnDefinition,&apos; &apos;,0,0,0,1,0) 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;where object is not null and length(object) &gt; 0
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;do
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (i = 1) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set columnName = t.object;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (i = 2) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set columnType = t.object;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set i = i + 1;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end for;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set columnBaseType = columnType;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (columnBaseType is not null) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set pos1 = POSITION(&apos;(&apos; IN columnType);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (pos1 &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set columnBaseType = SUBSTRING(columnBaseType, 1, pos1 - 1);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (columnName is not null) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Replace the encoded space with a real space
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (POSITION(&apos;_0020&apos; IN columnName) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set columnName = REPLACE(columnName, &apos;_0020&apos;, &apos; &apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Replace the encoded comma with a real comma
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (POSITION(&apos;_002c&apos; IN columnName) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set columnName = REPLACE(columnName, &apos;_002c&apos;, &apos;,&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INSERT INTO resourceCursor values(r.resourceName,r.resourcePath,r.resourceType,r.subtype,r.enabled,null,null,null,columnName,columnType,columnBaseType,&apos;cursorColumn&apos;,parameterDirection,null,null);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;end for;
&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;set numOutCursors = numOutCursors + 1;
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;end if;
&#x9;END FOR;
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1564713540709</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
</metadata>