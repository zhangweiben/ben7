<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:e931daa6-7fda-456a-badf-4cdb1c228a1a -->
<metadata name="_readme" path="/shared/ASAssets/Utilities/examples/generate/_readme" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <parameters></parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <attribute name="Script" type="STRING">/*
&#x9;This _readme provides information on the how to generate views and destory views.  It provides background on various example scenarios.

&#x9;Summary
&#x9;-------------
&#x9; 1. pEx0_create_published_ds_group_and_user &#x9;&#x9;- Create a default group [group1], user [user1], published data source [/services/databases/ExampleProject,] and assign privileges to [group1].
&#x9; 2. pEx1_create_single_table_no_layers &#x9;&#x9;&#x9;&#x9;- Generate Views for a single table with no layers [products]
&#x9; 3. pEx1_destroy_single_table_prefix &#x9;&#x9;&#x9;&#x9;- Destroy Views for a single table [products]
&#x9; 4. pEx2_create_entire_schema_no_layers &#x9;&#x9;&#x9;- Generate Views for all tables with no layers [categories, employees, inventorytransactions, products, purchaseorders, suppliers]
&#x9; 5. pEx2_destroy_entire_schema &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;- Destroy Views for all tables [categories, employees, inventorytransactions, products, purchaseorders, suppliers]
&#x9; 6. pEx3_create_entire_schema_all_layers &#x9;&#x9;&#x9;- Generate Views for all tables through all layers [categories, employees, inventorytransactions, products, purchaseorders, suppliers]
&#x9; 7. pEx4_create_entire_schema_all_layers_with_fk &#x9;- Generate Views for all tables through all layers with foreign keys and annotations [categories, employees, inventorytransactions, products, purchaseorders, suppliers]
&#x9; 8. pEx4_destroy_entire_schema &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;- Destroy Views for all tables in all layers [categories, employees, inventorytransactions, products, purchaseorders, suppliers]
&#x9; 9. pEx5_create_multiple_tables_all_layers_prefix &#x9;- Generate Views for multiple tables through all layers with a prefix [categories,products]
&#x9;10. pEx4_destroy_entire_schema &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;- Destroy Views for all tables in all layers [categories, employees, inventorytransactions, products, purchaseorders, suppliers]
&#x9;11. pEx6_create_entire_schema_all_layers_no_idx_fk &#x9;- Generate Views for all table through all layers with no annotations, indexe or foreign keys [categories, employees, inventorytransactions, products, purchaseorders, suppliers]
&#x9;12. pEx4_destroy_entire_schema &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;- Destroy Views for all tables in all layers [categories, employees, inventorytransactions, products, purchaseorders, suppliers]
&#x9;13. pEx7_create_multiple_tables_all_layers_no_prefix- Generate Views for multiple tables through all layers with no prefix [categories,products]
&#x9;14. pEx4_destroy_entire_schema &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;- Destroy Views for all tables in all layers [categories, employees, inventorytransactions, products, purchaseorders, suppliers]


&#x9;Configuration
&#x9;-------------
&#x9;If your Data Virtualization not installed on port 9400 then modify the port for this data source and test the connection:
&#x9;&#x9;The current port is 9408.  If you install DV on 9500 then the port is 9508.
&#x9;&#x9;/shared/ASAssets/Utilities/examples/generate/ExampleProject/Physical/Metadata/postgres/ds_inventory

&#x9;The defaultValues do not need to be changed.   

&#x9;Examples Scenarios
&#x9;------------------
&#x9;All &quot;EXECUTE&quot; scripts are located here: /shared/ASAssets/Utilities/generate/example

&#x9;1. Create a default group [group1], user [user1], published data source [/services/databases/ExampleProject,] and assign privileges to [group1].
&#x9;&#x9;EXECUTE: pEx0_create_published_ds_group_and_user

&#x9;&#x9;Note: It is recommended to destory this group and user when you have finished with this example.
&#x9;&#x9;EXECUTE: pEx0_destory_published_ds_group_and_user

&#x9;2. Generate Views for a single table with no layers [products]
&#x9;&#x9;EXECUTE: pEx1_create_single_table_no_layers
&#x9;&#x9;&#x9;a. In this example, the view is published directly from the physical metadata layer to the published database.
&#x9;&#x9;&#x9;&#x9;&#x9;/services/databases/ExampleProject/TestCatalog/tutorial
&#x9;&#x9;&#x9;b. The view is published with a prefix: V_products
&#x9;&#x9;&#x9;c. Input options selected:
&#x9;&#x9;&#x9;&#x9;prefix=V_&#x9;&#x9;&#x9;- If not null, the prefix is prepended to the view name.
&#x9;&#x9;&#x9;&#x9;overwrite=1&#x9;&#x9;&#x9;- 0=bypass view creation if exists.   1=If the view exists, overwrite the view
&#x9;&#x9;&#x9;&#x9;copyAnnotations=1&#x9;- 0=do not copy annotations.  1=copy view and column annotations if they exist
&#x9;&#x9;&#x9;&#x9;copySqlIndexes=0&#x9;- 0=do not copy indexes.  1=copy SQL indexes if they exist on the table/view.
&#x9;&#x9;&#x9;&#x9;copyForeignKeys=0&#x9;- 0=do not copy foreign keys.  1=copy foriegn keys if they exists.  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;The foreign key reference will be modfied to point to the view on its corresponding layer.

&#x9;3. Destroy Views for a single table [products]
&#x9;&#x9;EXECUTE: pEx1_destroy_single_table_prefix
&#x9;&#x9;&#x9;a. In this example, the view is destroyed throughout the layers starting with the published resource and working down to the data source resource.
&#x9;&#x9;&#x9;b. Input options selected:
&#x9;&#x9;&#x9;&#x9;destroyDatasourceResource=1&#x9;- 0=do not destroy the final data source resource.  1=destroy the final data source resource.
&#x9;&#x9;&#x9;&#x9;destroyEmptyParentFolder=1&#x9;- 0=do not destroy empty parent folders.  1=destroy empty parent folders.

&#x9;4. Generate Views for all tables with no layers [categories, employees, inventorytransactions, products, purchaseorders, suppliers]
&#x9;&#x9;EXECUTE: pEx2_create_entire_schema_no_layers
&#x9;&#x9;&#x9;a. In this example, all views are published directly from the physical metadata layer to the published database.
&#x9;&#x9;&#x9;&#x9;&#x9;/services/databases/ExampleProject/TestCatalog/tutorial
&#x9;&#x9;&#x9;b. Input options selected:
&#x9;&#x9;&#x9;&#x9;prefix=null&#x9;&#x9;&#x9;- If not null, the prefix is prepended to the view name.
&#x9;&#x9;&#x9;&#x9;overwrite=0&#x9;&#x9;&#x9;- 0=bypass view creation if exists.   1=If the view exists, overwrite the view
&#x9;&#x9;&#x9;&#x9;copyAnnotations=1&#x9;- 0=do not copy annotations.  1=copy view and column annotations if they exist
&#x9;&#x9;&#x9;&#x9;copySqlIndexes=0&#x9;- 0=do not copy indexes.  1=copy SQL indexes if they exist on the table/view.
&#x9;&#x9;&#x9;&#x9;copyForeignKeys=0&#x9;- 0=do not copy foreign keys.  1=copy foriegn keys if they exists.  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;The foreign key reference will be modfied to point to the view on its corresponding layer.

&#x9;5. Destroy Views for all tables [categories, employees, inventorytransactions, products, purchaseorders, suppliers]
&#x9;&#x9;EXECUTE: pEx2_destroy_entire_schema
&#x9;&#x9;&#x9;a. In this example, all views are destroyed throughout the layers starting with the published resource and working down to the data source resource.
&#x9;&#x9;&#x9;&#x9;Notice how the parent folders do not get destroyed.  Notice how the data source table is not destroyed.
&#x9;&#x9;&#x9;b. Input options selected:
&#x9;&#x9;&#x9;&#x9;destroyDatasourceResource=0&#x9;- 0=do not destroy the final data source resource.  1=destroy the final data source resource.
&#x9;&#x9;&#x9;&#x9;destroyEmptyParentFolder=0&#x9;- 0=do not destroy empty parent folders.  1=destroy empty parent folders.

&#x9;6. Generate Views for all tables through all layers [categories, employees, inventorytransactions, products, purchaseorders, suppliers]
&#x9;&#x9;EXECUTE: pEx3_create_entire_schema_all_layers
&#x9;&#x9;&#x9;a. In this example, all views are generated through the Data Abstraction layers and published.
&#x9;&#x9;&#x9;&#x9;&#x9;/services/databases/ExampleProject/TestCatalog/tutorial
&#x9;&#x9;&#x9;&#x9;&#x9;/shared/ASAssets/Utilities/examples/generate/ExampleProject/Application/Views/tutorial
&#x9;&#x9;&#x9;&#x9;&#x9;/shared/ASAssets/Utilities/examples/generate/ExampleProject/Business/Logical/tutorial
&#x9;&#x9;&#x9;&#x9;&#x9;/shared/ASAssets/Utilities/examples/generate/ExampleProject/Physical/Formatting/tutorial
&#x9;&#x9;&#x9;&#x9;&#x9;/shared/ASAssets/Utilities/examples/generate/ExampleProject/Physical/Metadata/postgres/ds_inventory/tutorial
&#x9;&#x9;&#x9;b. The views are published with no prefix.
&#x9;&#x9;&#x9;c. Input options selected:
&#x9;&#x9;&#x9;&#x9;prefix=null&#x9;&#x9;&#x9;- If not null, the prefix is prepended to the view name.
&#x9;&#x9;&#x9;&#x9;overwrite=1&#x9;&#x9;&#x9;- 0=bypass view creation if exists.   1=If the view exists, overwrite the view
&#x9;&#x9;&#x9;&#x9;copyAnnotations=1&#x9;- 0=do not copy annotations.  1=copy view and column annotations if they exist
&#x9;&#x9;&#x9;&#x9;copySqlIndexes=1&#x9;- 0=do not copy indexes.  1=copy SQL indexes if they exist on the table/view.
&#x9;&#x9;&#x9;&#x9;copyForeignKeys=1&#x9;- 0=do not copy foreign keys.  1=copy foriegn keys if they exists.  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;The foreign key reference will be modfied to point to the view on its corresponding layer.

&#x9;&#x9;DO NOT DELETE VIEWS.  CONTINUE TO #8 DIRECTLY TO DEMONSTRATE ANNOTATIONS AND FOREIGN KEYS.

&#x9;7. Generate Views for all tables through all layers with foreign keys and annotations [categories, employees, inventorytransactions, products, purchaseorders, suppliers]
&#x9;&#x9;EXECUTE: pEx4_create_entire_schema_all_layers_with_fk
&#x9;&#x9;&#x9;a. In this example, all views are generated through the Data Abstraction layers and published.
&#x9;&#x9;&#x9;&#x9;&#x9;/services/databases/ExampleProject/TestCatalog/tutorial
&#x9;&#x9;&#x9;&#x9;&#x9;/shared/ASAssets/Utilities/examples/generate/ExampleProject/Application/Views/tutorial
&#x9;&#x9;&#x9;&#x9;&#x9;/shared/ASAssets/Utilities/examples/generate/ExampleProject/Business/Logical/tutorial
&#x9;&#x9;&#x9;&#x9;&#x9;/shared/ASAssets/Utilities/examples/generate/ExampleProject/Physical/Formatting/tutorial
&#x9;&#x9;&#x9;&#x9;&#x9;/shared/ASAssets/Utilities/examples/generate/ExampleProject/Physical/Metadata/postgres/ds_inventory/tutorial
&#x9;&#x9;&#x9;b. The Formating layer is modified on the fly to emulate annotations and foriegn keys
&#x9;&#x9;&#x9;&#x9;1. The views [products, suppliers] are modified with table annotations.
&#x9;&#x9;&#x9;&#x9;2. The view [suppliers] is modified with column [supplierid,suppliername,address] annotations.
&#x9;&#x9;&#x9;&#x9;3. The view products is modified with a foreign key [fk_categoryid]
&#x9;&#x9;&#x9;c. The views are published with no prefix.
&#x9;&#x9;&#x9;d. Input options selected:
&#x9;&#x9;&#x9;&#x9;prefix=null&#x9;&#x9;&#x9;- If not null, the prefix is prepended to the view name.
&#x9;&#x9;&#x9;&#x9;overwrite=0&#x9;&#x9;&#x9;- 0=bypass view creation if exists.   1=If the view exists, overwrite the view
&#x9;&#x9;&#x9;&#x9;copyAnnotations=1&#x9;- 0=do not copy annotations.  1=copy view and column annotations if they exist
&#x9;&#x9;&#x9;&#x9;copySqlIndexes=1&#x9;- 0=do not copy indexes.  1=copy SQL indexes if they exist on the table/view.
&#x9;&#x9;&#x9;&#x9;copyForeignKeys=1&#x9;- 0=do not copy foreign keys.  1=copy foriegn keys if they exists.  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;The foreign key reference will be modfied to point to the view on its corresponding layer.
&#x9;&#x9;&#x9;e. Result
&#x9;&#x9;&#x9;&#x9;1. The published view [products] contains a table annotation, indexes and foreign keys: 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/services/databases/ExampleProject/TestCatalog/tutorial/products
&#x9;&#x9;&#x9;&#x9;2. The published view [suppliers] contains a table annotation and indexes: 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/services/databases/ExampleProject/TestCatalog/tutorial/suppliers
&#x9;&#x9;&#x9;&#x9;3. The Application Layer view [suppliers] contains table and column level annotations: 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/shared/ASAssets/Utilities/examples/generate/ExampleProject/Application/Views/tutorial/suppliers[supplierid, suppliername, address]
&#x9;&#x9;&#x9;&#x9;&#x9;Published views cannot contain column level annotations.   The shared layer views may contain column level annotations.

&#x9;8. Destroy Views for all tables in all layers [categories, employees, inventorytransactions, products, purchaseorders, suppliers]
&#x9;&#x9;EXECUTE: pEx4_destroy_entire_schema
&#x9;&#x9;&#x9;a. In this example, all views are destroyed throughout the layers starting with the published resource and working down to the data source resource.
&#x9;&#x9;&#x9;&#x9;Notice how the parent folders are destroyed.  Notice how the data source resource is destroyed.
&#x9;&#x9;&#x9;b. Input options selected:
&#x9;&#x9;&#x9;&#x9;destroyDatasourceResource=1&#x9;- 0=do not destroy the final data source resource.  1=destroy the final data source resource.
&#x9;&#x9;&#x9;&#x9;destroyEmptyParentFolder=1&#x9;- 0=do not destroy empty parent folders.  1=destroy empty parent folders.

&#x9;9. Generate Views for multiple tables through all layers with a prefix [categories,products]
&#x9;&#x9;EXECUTE: pEx5_create_multiple_tables_all_layers_prefix
&#x9;&#x9;&#x9;a. In this example, the view is generated through the Data Abstraction layers and published with annotations, indexes and foreign keys.
&#x9;&#x9;&#x9;&#x9;&#x9;/services/databases/ExampleProject/TestCatalog/tutorial
&#x9;&#x9;&#x9;&#x9;&#x9;/shared/ASAssets/Utilities/examples/generate/ExampleProject/Application/Views/tutorial
&#x9;&#x9;&#x9;&#x9;&#x9;/shared/ASAssets/Utilities/examples/generate/ExampleProject/Business/Logical/tutorial
&#x9;&#x9;&#x9;&#x9;&#x9;/shared/ASAssets/Utilities/examples/generate/ExampleProject/Physical/Formatting/tutorial
&#x9;&#x9;&#x9;&#x9;&#x9;/shared/ASAssets/Utilities/examples/generate/ExampleProject/Physical/Metadata/postgres/ds_inventory/tutorial
&#x9;&#x9;&#x9;b. Input options selected:
&#x9;&#x9;&#x9;&#x9;prefix=v_&#x9;&#x9;&#x9;- If not null, the prefix is prepended to the view name.
&#x9;&#x9;&#x9;&#x9;overwrite=1&#x9;&#x9;&#x9;- 0=bypass view creation if exists.   1=If the view exists, overwrite the view
&#x9;&#x9;&#x9;&#x9;copyAnnotations=1&#x9;- 0=do not copy annotations.  1=copy view and column annotations if they exist
&#x9;&#x9;&#x9;&#x9;copySqlIndexes=1&#x9;- 0=do not copy indexes.  1=copy SQL indexes if they exist on the table/view.
&#x9;&#x9;&#x9;&#x9;copyForeignKeys=1&#x9;- 0=do not copy foreign keys.  1=copy foriegn keys if they exists.  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;The foreign key reference will be modfied to point to the view on its corresponding layer.

&#x9;10. Destroy Views for all tables in all layers
&#x9;&#x9;EXECUTE: pEx4_destroy_entire_schema

&#x9;11. Generate Views for all table through all layers with no annotations, indexe or foreign keys [categories, employees, inventorytransactions, products, purchaseorders, suppliers]
&#x9;&#x9;This script needs to be executed twice in a row in order to demonstrate that no annotations, indexes and foreign keys are being copied.
&#x9;&#x9;EXECUTE: pEx6_create_entire_schema_all_layers_no_idx_fk - the first time established the baseline views
&#x9;&#x9;EXECUTE: pEx6_create_entire_schema_all_layers_no_idx_fk - the second time will update the formatting layer views [products, suppliers] with annotations, indexes and foreign keys.
&#x9;&#x9;&#x9;a. In this example, all views are generated through the Data Abstraction layers and published with no annotations, indexes or foreign keys.
&#x9;&#x9;&#x9;&#x9;&#x9;/services/databases/ExampleProject/TestCatalog/tutorial
&#x9;&#x9;&#x9;&#x9;&#x9;/shared/ASAssets/Utilities/examples/generate/ExampleProject/Application/Views/tutorial
&#x9;&#x9;&#x9;&#x9;&#x9;/shared/ASAssets/Utilities/examples/generate/ExampleProject/Business/Logical/tutorial
&#x9;&#x9;&#x9;&#x9;&#x9;/shared/ASAssets/Utilities/examples/generate/ExampleProject/Physical/Formatting/tutorial
&#x9;&#x9;&#x9;&#x9;&#x9;/shared/ASAssets/Utilities/examples/generate/ExampleProject/Physical/Metadata/postgres/ds_inventory/tutorial
&#x9;&#x9;&#x9;b. The Formating layer is modified on the fly to emulate annotations and foriegn keys and indexes
&#x9;&#x9;&#x9;&#x9;1. The views [products, suppliers] are modified with table annotations.
&#x9;&#x9;&#x9;&#x9;2. The view [suppliers] is modified with column [supplierid,suppliername,address] annotations.
&#x9;&#x9;&#x9;&#x9;3. The view products is modified with an index [products_key] and foreign key [fk_categoryid]
&#x9;&#x9;&#x9;c. The views are published with no prefix.
&#x9;&#x9;&#x9;d. Input options selected:
&#x9;&#x9;&#x9;&#x9;prefix=null&#x9;&#x9;&#x9;- If not null, the prefix is prepended to the view name.
&#x9;&#x9;&#x9;&#x9;overwrite=0&#x9;&#x9;&#x9;- 0=bypass view creation if exists.   1=If the view exists, overwrite the view
&#x9;&#x9;&#x9;&#x9;copyAnnotations=0&#x9;- 0=do not copy annotations.  1=copy view and column annotations if they exist
&#x9;&#x9;&#x9;&#x9;copySqlIndexes=0&#x9;- 0=do not copy indexes.  1=copy SQL indexes if they exist on the table/view.
&#x9;&#x9;&#x9;&#x9;copyForeignKeys=0&#x9;- 0=do not copy foreign keys.  1=copy foriegn keys if they exists.  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;The foreign key reference will be modfied to point to the view on its corresponding layer.
&#x9;&#x9;&#x9;e. Result - there are no annotations, indexes or foreign keys present in any views above the Formatting layer.
&#x9;&#x9;&#x9;&#x9;1. The published view [products] contains &quot;NO&quot; table annotation, indexes and foreign keys: 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/services/databases/ExampleProject/TestCatalog/tutorial/products
&#x9;&#x9;&#x9;&#x9;2. The published view [suppliers] contains &quot;NO&quot; table annotation and indexes: 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/services/databases/ExampleProject/TestCatalog/tutorial/suppliers
&#x9;&#x9;&#x9;&#x9;3. The Application Layer view [suppliers] contains &quot;NO&quot; table and column level annotations: 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/shared/ASAssets/Utilities/examples/generate/ExampleProject/Application/Views/tutorial/suppliers[supplierid, suppliername, address]
&#x9;&#x9;&#x9;&#x9;&#x9;Published views cannot contain column level annotations.   The shared layer views may contain column level annotations.

&#x9;12. Destroy Views for all tables in all layers
&#x9;&#x9;EXECUTE: pEx4_destroy_entire_schema

&#x9;13. Generate Views for multiple tables through all layers with no prefix [categories,products]
&#x9;&#x9;EXECUTE: pEx7_create_multiple_tables_all_layers_no_prefix
&#x9;&#x9;&#x9;a. In this example, the view is generated through the Data Abstraction layers and published with annotations, indexes and foreign keys.
&#x9;&#x9;&#x9;&#x9;&#x9;/services/databases/ExampleProject/TestCatalog/tutorial
&#x9;&#x9;&#x9;&#x9;&#x9;/shared/ASAssets/Utilities/examples/generate/ExampleProject/Application/Views/tutorial
&#x9;&#x9;&#x9;&#x9;&#x9;/shared/ASAssets/Utilities/examples/generate/ExampleProject/Business/Logical/tutorial
&#x9;&#x9;&#x9;&#x9;&#x9;/shared/ASAssets/Utilities/examples/generate/ExampleProject/Physical/Formatting/tutorial
&#x9;&#x9;&#x9;&#x9;&#x9;/shared/ASAssets/Utilities/examples/generate/ExampleProject/Physical/Metadata/postgres/ds_inventory/tutorial
&#x9;&#x9;&#x9;b. Input options selected:
&#x9;&#x9;&#x9;&#x9;prefix=null&#x9;&#x9;&#x9;- If not null, the prefix is prepended to the view name.
&#x9;&#x9;&#x9;&#x9;overwrite=1&#x9;&#x9;&#x9;- 0=bypass view creation if exists.   1=If the view exists, overwrite the view
&#x9;&#x9;&#x9;&#x9;copyAnnotations=1&#x9;- 0=do not copy annotations.  1=copy view and column annotations if they exist
&#x9;&#x9;&#x9;&#x9;copySqlIndexes=1&#x9;- 0=do not copy indexes.  1=copy SQL indexes if they exist on the table/view.
&#x9;&#x9;&#x9;&#x9;copyForeignKeys=1&#x9;- 0=do not copy foreign keys.  1=copy foriegn keys if they exists.  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;The foreign key reference will be modfied to point to the view on its corresponding layer.

&#x9;14. Destroy Views for all tables in all layers
&#x9;&#x9;EXECUTE: pEx4_destroy_entire_schema

&#x9;Release:&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;DV Version:&#x9;&#x9;Reason:
&#x9;2018.100&#x9;01/10/2018&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.5&#x9;&#x9;&#x9;Created new.

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

*/
PROCEDURE &quot;_readme&quot;()
BEGIN
END</attribute>
  <attribute name="creationDate" type="LONG">1515775745444</attribute>
  <attribute name="creatorUserDomain" type="STRING">composite</attribute>
  <attribute name="creatorUserId" type="INTEGER">-1973</attribute>
  <attribute name="creatorUserName" type="STRING">admin</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1564748380651</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserId" type="INTEGER">-1973</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
  <attribute name="resourceModifiedDateOnSourceCISSite" type="LONG">1515775745444</attribute>
</metadata>