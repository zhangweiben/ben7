<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:e931daa6-7fda-456a-badf-4cdb1c228a1a -->
<metadata name="validateSupportingTables" path="/shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/validateSupportingTables" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>&lt;![CDATA[&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.
]]&gt;</annotation>
  <parameters>
    <parameter name="datasource" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="debug" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="organization" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="projectName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="subproject" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="domainName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="envName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="orgNotFound" direction="INOUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="projectNotFound" direction="INOUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="subprojectNotFound" direction="INOUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="domainNotFound" direction="INOUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="envNameNotFound" direction="INOUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="orgCount" direction="INOUT" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="projectCount" direction="INOUT" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="subprojectCount" direction="INOUT" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="domainCount" direction="INOUT" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="envNameCount" direction="INOUT" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="lastOrg" direction="INOUT" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="lastProject" direction="INOUT" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="lastSubproject" direction="INOUT" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="lastDomain" direction="INOUT" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="lastEnvName" direction="INOUT" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="exceptionText" direction="INOUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getPrivilegeDatasourceToScriptMapping" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="scriptType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="datasource" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="scriptMapping" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/*
&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;CSW Version:&#x9;Reason:
&#x9;05/16/2017&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.5&#x9;&#x9;&#x9;Adapted for Data Abstraction Best Practices.

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

*/
PROCEDURE validateSupportingTables(
&#x9;IN &#x9;datasource&#x9;&#x9;&#x9;&#x9;VARCHAR(255),-- REQUIRED FILTER: DB_[LLE,PROD], The source of the groups. Refer to getPrivilegeDatasourceToScriptMapping().
&#x9;IN debug&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1),
&#x9;IN organization&#x9;&#x9;&#x9;&#x9;VARCHAR,
&#x9;IN projectName&#x9;&#x9;&#x9;&#x9;VARCHAR,
&#x9;IN subproject&#x9;&#x9;&#x9;&#x9;VARCHAR,
&#x9;IN domainName&#x9;&#x9;&#x9;&#x9;VARCHAR,
&#x9;IN envName&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR,
&#x9;INOUT orgNotFound&#x9;&#x9;&#x9;LONGVARCHAR,
&#x9;INOUT projectNotFound&#x9;&#x9;LONGVARCHAR,
&#x9;INOUT subprojectNotFound&#x9;LONGVARCHAR,
&#x9;INOUT domainNotFound&#x9;&#x9;LONGVARCHAR,
&#x9;INOUT envNameNotFound&#x9;&#x9;LONGVARCHAR,
&#x9;INOUT orgCount&#x9;&#x9;&#x9;&#x9;INTEGER,
&#x9;INOUT projectCount&#x9;&#x9;&#x9;INTEGER,
&#x9;INOUT subprojectCount&#x9;&#x9;INTEGER,
&#x9;INOUT domainCount&#x9;&#x9;&#x9;INTEGER,
&#x9;INOUT envNameCount&#x9;&#x9;&#x9;INTEGER,
&#x9;INOUT lastOrg&#x9;&#x9;&#x9;&#x9;VARCHAR,
&#x9;INOUT lastProject&#x9;&#x9;&#x9;VARCHAR,
&#x9;INOUT lastSubproject&#x9;&#x9;VARCHAR,
&#x9;INOUT lastDomain&#x9;&#x9;&#x9;VARCHAR,
&#x9;INOUT lastEnvName&#x9;&#x9;&#x9;VARCHAR,
&#x9;INOUT exceptionText&#x9;&#x9;&#x9;LONGVARCHAR -- add on to the exception if the validation was unsuccessful.
)
BEGIN
&#x9;DECLARE ex&#x9;&#x9;&#x9;&#x9;&#x9;EXCEPTION;
&#x9;DECLARE recCount&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE environment&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE ownerName&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE ownerDomain&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE i&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE envValid&#x9;&#x9;&#x9;BOOLEAN;
&#x9;DECLARE sqlStatement&#x9;&#x9;VARCHAR(4096);
&#x9;DECLARE curs&#x9;&#x9;&#x9;&#x9;CURSOR(cnt INTEGER);
&#x9;DECLARE j&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE pos1,pos2&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE object&#x9;&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE moreToDo1&#x9;&#x9;&#x9;BOOLEAN;
&#x9;DECLARE objectList1&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE expression1&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE explen1&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE scriptPath&#x9;&#x9;&#x9;VARCHAR(4000);

&#x9;&#x9;-- Validation logic
&#x9;&#x9;IF (organization IS NOT NULL AND (orgCount = 0 OR lastOrg &lt;&gt; organization)) THEN
&#x9;&#x9;&#x9;IF (LENGTH(orgNotFound) = 0 OR INSTR(orgNotFound, &apos;,&apos;||organization) = 0) THEN
&#x9;&#x9;&#x9;&#x9;-- Verify the ORGANIZATION_TYPE
&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getPrivilegeDatasourceToScriptMapping(&apos;OT&apos;, datasource, scriptPath);
&#x9;&#x9;&#x9;&#x9;set sqlStatement = &apos;select count(*) cnt from &apos;||scriptPath||&apos; where ORGANIZATION_NAME = &apos;&apos;&apos;||organization||&apos;&apos;&apos; and ISACTIVE = &apos;&apos;Y&apos;&apos;&apos;;
&#x9;&#x9;&#x9;&#x9;open curs for sqlStatement;
&#x9;&#x9;&#x9;&#x9;fetch curs into orgCount;
&#x9;&#x9;&#x9;&#x9;close curs;

&#x9;&#x9;&#x9;&#x9;IF (debug = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(&apos;VALIDATE ORGANIZATION_TYPE: orgCount=&apos;||orgCount||&apos;  ORGANIZATION_NAME=&apos;||TRIM(NVL(organization,&apos;  &apos;)));
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;-- Raise an exception when the ORGANIZATION_NAME does not exist
&#x9;&#x9;&#x9;&#x9;IF (orgCount = 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;set exceptionText = exceptionText || &apos;ORGANIZATION_TYPE: ORGANIZATION_NAME=[&apos;||TRIM(NVL(organization,&apos;  &apos;))||&apos;] does not exist.&apos; || CHR(10);
&#x9;&#x9;&#x9;&#x9;&#x9;set orgNotFound = orgNotFound || &apos;,&apos;||organization;
&#x9;&#x9;&#x9;&#x9;&#x9;IF (debug = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(&apos;VALIDATE ORGANIZATION_TYPE: exceptionText=&apos;||exceptionText);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(&apos;VALIDATE ORGANIZATION_TYPE: orgNotFound=&apos;||orgNotFound);
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END IF;

&#x9;&#x9;IF (organization IS NOT NULL AND projectName IS NOT NULL AND (projectCount = 0 OR lastOrg &lt;&gt; organization OR lastProject &lt;&gt; projectName)) THEN
&#x9;&#x9;&#x9;IF (LENGTH(projectNotFound) = 0 OR INSTR(projectNotFound, &apos;,&apos;||organization||&apos;:&apos;||projectName) = 0) THEN
&#x9;&#x9;&#x9;&#x9;-- Verify the PROJECT_TYPE
&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getPrivilegeDatasourceToScriptMapping(&apos;PT&apos;, datasource, scriptPath);
&#x9;&#x9;&#x9;&#x9;set sqlStatement = &apos;select count(*) cnt from &apos;||scriptPath||&apos; where PROJECT_NAME = &apos;&apos;&apos;||projectName||&apos;&apos;&apos; and ORGANIZATION_NAME = &apos;&apos;&apos;||organization||&apos;&apos;&apos; and ISACTIVE = &apos;&apos;Y&apos;&apos;&apos;;
&#x9;&#x9;&#x9;&#x9;open curs for sqlStatement;
&#x9;&#x9;&#x9;&#x9;fetch curs into projectCount;
&#x9;&#x9;&#x9;&#x9;close curs;

&#x9;&#x9;&#x9;&#x9;IF (debug = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(&apos;VALIDATE PROJECT_TYPE: projectCount=&apos;||projectCount||&apos;  ORGANIZATION_NAME=[&apos;||TRIM(NVL(organization,&apos;  &apos;))||&apos;] and PROJECT_NAME=[&apos;||TRIM(NVL(projectName,&apos;  &apos;))||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;-- Raise an exception when the ORGANIZATION_NAME and PROJECT_NAME does not exist
&#x9;&#x9;&#x9;&#x9;IF (projectCount = 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;set exceptionText = exceptionText || &apos;PROJECT_TYPE: ORGANIZATION_NAME=[&apos;||TRIM(NVL(organization,&apos;  &apos;))||&apos;] and PROJECT_NAME=[&apos;||TRIM(NVL(projectName,&apos;  &apos;))||&apos;] does not exist.&apos; || CHR(10);
&#x9;&#x9;&#x9;&#x9;&#x9;set projectNotFound = projectNotFound || &apos;,&apos;||organization||&apos;:&apos;||projectName;
&#x9;&#x9;&#x9;&#x9;&#x9;IF (debug = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(&apos;VALIDATE PROJECT_TYPE: exceptionText=&apos;||exceptionText);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(&apos;VALIDATE PROJECT_TYPE: projectNotFound=&apos;||projectNotFound);
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END IF;

&#x9;&#x9;IF (projectName IS NOT NULL AND subproject IS NOT NULL AND (subprojectCount = 0 OR lastProject &lt;&gt; projectName OR lastSubproject &lt;&gt; subproject)) THEN
&#x9;&#x9;&#x9;IF (LENGTH(subprojectNotFound) = 0 OR INSTR(subprojectNotFound, &apos;,&apos;||projectName||&apos;:&apos;||subproject) = 0) THEN
&#x9;&#x9;&#x9;&#x9;-- Verify the SUBPROJECT_TYPE
&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getPrivilegeDatasourceToScriptMapping(&apos;ST&apos;, datasource, scriptPath);
&#x9;&#x9;&#x9;&#x9;set sqlStatement = &apos;select count(*) cnt from &apos;||scriptPath||&apos; where SUBPROJECT_NAME = &apos;&apos;&apos;||subproject||&apos;&apos;&apos; and PROJECT_NAME = &apos;&apos;&apos;||projectName||&apos;&apos;&apos; and  ISACTIVE = &apos;&apos;Y&apos;&apos;&apos;;
&#x9;&#x9;&#x9;&#x9;open curs for sqlStatement;
&#x9;&#x9;&#x9;&#x9;fetch curs into subprojectCount;
&#x9;&#x9;&#x9;&#x9;close curs;

&#x9;&#x9;&#x9;&#x9;IF (debug = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(&apos;VALIDATE SUBPROJECT_TYPE: subprojectCount=&apos;||subprojectCount||&apos;  PROJECT_NAME=[&apos;||TRIM(NVL(projectName,&apos;  &apos;))||&apos;] and SUBPROJECT_NAME=[&apos;||TRIM(NVL(subproject,&apos;  &apos;))||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;-- Raise an exception when the PROJECT_NAME and SUBPROJECT_NAME does not exist
&#x9;&#x9;&#x9;&#x9;IF (subprojectCount = 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;set exceptionText = exceptionText || &apos;SUBPROJECT_TYPE: PROJECT_NAME=[&apos;||TRIM(NVL(projectName,&apos;  &apos;))||&apos;] and SUBPROJECT_NAME=[&apos;||TRIM(NVL(subproject,&apos;  &apos;))||&apos;] does not exist.&apos; || CHR(10);
&#x9;&#x9;&#x9;&#x9;&#x9;set subprojectNotFound = subprojectNotFound || &apos;,&apos;||projectName||&apos;:&apos;||subproject;
&#x9;&#x9;&#x9;&#x9;&#x9;IF (debug = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(&apos;VALIDATE SUBPROJECT_TYPE: exceptionText=&apos;||exceptionText);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(&apos;VALIDATE SUBPROJECT_TYPE: subprojectNotFound=&apos;||subprojectNotFound);
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END IF;

&#x9;&#x9;IF (domainName IS NOT NULL AND (domainCount = 0 OR lastDomain &lt;&gt; domainName)) THEN
&#x9;&#x9;&#x9;IF (LENGTH(domainNotFound) = 0 OR INSTR(domainNotFound, &apos;,&apos;||domainName) = 0) THEN
&#x9;&#x9;&#x9;&#x9;-- Verify the DOMAIN_TYPE
&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getPrivilegeDatasourceToScriptMapping(&apos;DT&apos;, datasource, scriptPath);
&#x9;&#x9;&#x9;&#x9;set sqlStatement = &apos;select count(*) cnt from &apos;||scriptPath||&apos; where DOMAIN_NAME = &apos;&apos;&apos;||domainName||&apos;&apos;&apos; and ISACTIVE = &apos;&apos;Y&apos;&apos;&apos;;
&#x9;&#x9;&#x9;&#x9;open curs for sqlStatement;
&#x9;&#x9;&#x9;&#x9;fetch curs into domainCount;
&#x9;&#x9;&#x9;&#x9;close curs;

&#x9;&#x9;&#x9;&#x9;IF (debug = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(&apos;VALIDATE DOMAIN_TYPE: domainCount=&apos;||domainCount||&apos;  DOMAIN_NAME=&apos;||TRIM(NVL(domainName,&apos;  &apos;)));
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;-- Raise an exception when the DOMAIN_NAME does not exist
&#x9;&#x9;&#x9;&#x9;IF (domainCount = 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;set exceptionText = exceptionText || &apos;DOMAIN_TYPE: DOMAIN_NAME=[&apos;||TRIM(NVL(domainName,&apos;  &apos;))||&apos;] does not exist.&apos; || CHR(10);
&#x9;&#x9;&#x9;&#x9;&#x9;set domainNotFound = domainNotFound || &apos;,&apos;||domainName;
&#x9;&#x9;&#x9;&#x9;&#x9;IF (debug = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(&apos;VALIDATE DOMAIN_TYPE: exceptionText=&apos;||exceptionText);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(&apos;VALIDATE DOMAIN_TYPE: domainNotFound=&apos;||domainNotFound);
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END IF;

&#x9;&#x9;IF (envName IS NOT NULL AND (envNameCount = 0 OR lastEnvName &lt;&gt; envName)) THEN
&#x9;&#x9;&#x9;IF (LENGTH(envNameNotFound) = 0 OR INSTR(envNameNotFound, &apos;,&apos;||envName) = 0) THEN
&#x9;&#x9;&#x9;&#x9;-- Verify the ENVIRONMENT_TYPE
&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getPrivilegeDatasourceToScriptMapping(&apos;ET&apos;, datasource, scriptPath);
&#x9;&#x9;&#x9;&#x9;set sqlStatement = &apos;select count(*) cnt from &apos;||scriptPath||&apos; where ENVIRONMENT_NAME = &apos;&apos;&apos;||envName||&apos;&apos;&apos; and ISACTIVE = &apos;&apos;Y&apos;&apos;&apos;;
&#x9;&#x9;&#x9;&#x9;open curs for sqlStatement;
&#x9;&#x9;&#x9;&#x9;fetch curs into envNameCount;
&#x9;&#x9;&#x9;&#x9;close curs;

&#x9;&#x9;&#x9;&#x9;IF (debug = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(&apos;VALIDATE ENVIRONMENT_TYPE: envNameCount=&apos;||envNameCount||&apos;  ENVIRONMENT_NAME=&apos;||TRIM(NVL(envName,&apos;  &apos;)));
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;-- Raise an exception when the ENVIRONMENT_NAME does not exist
&#x9;&#x9;&#x9;&#x9;IF (envNameCount = 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;set exceptionText = exceptionText || &apos;ENVIRONMENT_TYPE: ENVIRONMENT_NAME=[&apos;||TRIM(NVL(envName,&apos;  &apos;))||&apos;] does not exist.&apos; || CHR(10);
&#x9;&#x9;&#x9;&#x9;&#x9;set envNameNotFound = envNameNotFound || &apos;,&apos;||envName;
&#x9;&#x9;&#x9;&#x9;&#x9;IF (debug = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(&apos;VALIDATE ENVIRONMENT_TYPE: exceptionText=&apos;||exceptionText);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(&apos;VALIDATE ENVIRONMENT_TYPE: envNameNotFound=&apos;||envNameNotFound);
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END IF;

&#x9;&#x9;-- Set the last variable value with the current variable value
&#x9;&#x9;SET lastOrg = organization;
&#x9;&#x9;SET lastProject = projectName;
&#x9;&#x9;SET lastSubproject = subproject;
&#x9;&#x9;SET lastDomain = domainName;
&#x9;&#x9;SET lastEnvName = envName;
END</attribute>
  <attribute name="creationDate" type="LONG">1459446278822</attribute>
  <attribute name="creatorUserDomain" type="STRING">ldap_im</attribute>
  <attribute name="creatorUserId" type="INTEGER">4306</attribute>
  <attribute name="creatorUserName" type="STRING">zkxl6un</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1564075714164</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserId" type="INTEGER">4306</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">11/149</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/85</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/84</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/125</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/101</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/77</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/181</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/180</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/156</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/157</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/132</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/133</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/109</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/173</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/108</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
  </attribute>
  <attribute name="resourceModifiedDateOnSourceCISSite" type="LONG">1459446278822</attribute>
</metadata>