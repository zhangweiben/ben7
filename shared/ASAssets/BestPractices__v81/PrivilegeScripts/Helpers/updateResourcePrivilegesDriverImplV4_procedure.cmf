<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:e931daa6-7fda-456a-badf-4cdb1c228a1a -->
<metadata name="updateResourcePrivilegesDriverImplV4" path="/shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/updateResourcePrivilegesDriverImplV4" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>&lt;![CDATA[&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.
]]&gt;</annotation>
  <parameters>
    <parameter name="datasource" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="Batch_Privileges" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="Environment_Name" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="Organization" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="Project" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="SubProject" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="Sheet_Name" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="Resource_Path" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="Resource_Type" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="Name_" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="Name_Type" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="Domain_Name" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="inPreview" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="forceDomainAsComposite" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="inDebug1" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="inDebug1Console" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="inDebug1CISLog" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="inDebug1ReadOnly" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="inDebug1RevokeAll" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="inDebug2" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="inBypassErrors" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="inModuleName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="rowsProcessed" direction="OUT" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="logOutput" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/resource/ResourceExists" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="path" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="type" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="version" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceVersion" type="STRING" maxLength="255"/>
      </element>
      <element name="exists" direction="OUT">
        <datatype type="BOOLEAN"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/services/databases/system/ALL_COLUMNS" type="TABLE">
    <datatype type="TABLE" refId="256">
      <element name="COLUMN_ID">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="COLUMN_NAME">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="DATA_TYPE">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="ORDINAL_POSITION">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="JDBC_DATA_TYPE">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="COLUMN_LENGTH">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="COLUMN_PRECISION">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="COLUMN_SCALE">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="COLUMN_RADIX">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="NULLABLE">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="IS_NULLABLE">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="TABLE_ID">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="TABLE_NAME">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="SCHEMA_ID">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="SCHEMA_NAME">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="CATALOG_ID">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="CATALOG_NAME">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="DATASOURCE_ID">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="DATASOURCE_NAME">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="ANNOTATION">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="OWNER_ID">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="OWNER">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="PARENT_PATH">
        <datatype type="STRING" minLength="21" maxLength="1043"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/addLogOutput" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="printConsole" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="printLog" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="inLogOutput" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="addLogOutput" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="outLogOutput" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getResourcePrivileges" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="nameTypeFilter" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="domainFilter" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="privilegeEntryType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="includeNameEqualFilter" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="includeNameLikeFilter" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="excludeNameNotEqualFilter" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="excludeNameNotLikeFilter" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="includePrivsEqualFilter" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="includePrivsLikeFilter" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="excludePrivsNotEqualFilter" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="excludePrivsNotLikeFilter" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="includeColumnPrivs" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="path">
            <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
          </element>
          <element name="type">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="name">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="nameType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="domain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="privs">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="combinedPrivs">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="inheritedPrivs">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="p_N">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="p_R">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="p_W">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="p_E">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="p_S">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="p_U">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="p_I">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="p_D">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="p_G">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="c_N">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="c_R">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="c_W">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="c_E">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="c_S">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="c_U">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="c_I">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="c_D">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="c_G">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="i_N">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="i_R">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="i_W">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="i_E">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="i_S">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="i_U">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="i_I">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="i_D">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="i_G">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getSQLPrivileges" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="datasource" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="Environment_Name" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="Organization" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="Project" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="SubProject" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="Sheet_Name" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="Resource_Path" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Resource_Type" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="Name_" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="Name_Type" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="Domain_Name" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="sqlStatement" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="fromClause" direction="OUT">
        <datatype type="STRING" maxLength="2048"/>
      </element>
      <element name="whereClause" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/updatePrivilegeReadFoldersV4" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="bypassErrors" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="envType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="preview" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="debug1ReadOnly" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="inDebug1Console" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="inDebug1CISLog" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="debug2Modified" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="inModuleName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="logOutput" direction="INOUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="privReadStr1" direction="INOUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="privReadStr2" direction="INOUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="privReadAppliedStr1" direction="INOUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="privReadAppliedStr2" direction="INOUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/updateResourcePrivilegesV4" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inDebug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="inDebugConsole" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="inDebugCISLog" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="owner" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="ownerDomain" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourcePath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="recurse" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="recurseDependencies" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="recurseDependents" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="mode" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="privilegeStr" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="logOutput" direction="INOUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/PrivilegeScripts/getPrivileges" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="datasource" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="Environment_Name" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="Organization" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="Project" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="SubProject" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="Sheet_Name" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="Resource_Path" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Resource_Type" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="Name_" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="Name_Type" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="Domain_Name" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="rownum">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="sheetRownum">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="datasource">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="sheetName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="privilegeType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="Organization">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="Project">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="SubProject">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="Resource Path">
            <datatype type="STRING" maxLength="4000"/>
          </element>
          <element name="Resource Type">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="Recurse Dependencies">
            <datatype type="STRING" maxLength="1"/>
          </element>
          <element name="Recurse Dependents">
            <datatype type="STRING" maxLength="1"/>
          </element>
          <element name="Recurse Child">
            <datatype type="STRING" maxLength="3"/>
          </element>
          <element name="Revoke All">
            <datatype type="STRING" maxLength="1"/>
          </element>
          <element name="Name">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="Name Type">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="Domain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="Env Type">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="OrderPrecedence">
            <datatype type="STRING" minLength="1" maxLength="1"/>
          </element>
          <element name="R">
            <datatype type="STRING" maxLength="1"/>
          </element>
          <element name="W">
            <datatype type="STRING" maxLength="1"/>
          </element>
          <element name="E">
            <datatype type="STRING" maxLength="1"/>
          </element>
          <element name="S">
            <datatype type="STRING" maxLength="1"/>
          </element>
          <element name="U">
            <datatype type="STRING" maxLength="1"/>
          </element>
          <element name="I">
            <datatype type="STRING" maxLength="1"/>
          </element>
          <element name="D">
            <datatype type="STRING" maxLength="1"/>
          </element>
          <element name="G">
            <datatype type="STRING" maxLength="1"/>
          </element>
          <element name="Owner">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="Owner Domain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="Comments">
            <datatype type="STRING" maxLength="4000"/>
          </element>
          <element name="Initialize">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="isActive">
            <datatype type="STRING" minLength="1" maxLength="1"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/_ProjectMaintenance/defaultValues" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getUsedResourcesCursor" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="usedResCursor" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="resourceName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resourcePath">
            <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
          </element>
          <element name="resourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="id">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="tableType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="explicitlyDesigned">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="sqlText">
            <datatype type="STRING" maxLength="32768"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/TextUtils/RegexReplace" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="Input Text" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Regular Expression" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Replacement Text" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Occurrence" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/time/getCurrentTimestamp" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="currentTS" direction="OUT">
        <datatype type="DATETIME"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* updateResourcePrivilegesDriverImpl: 

&#x9;Implementation procedure.   Does not get called directly.

&#x9;This procedure is used to update privileges by reading the privileges from an excel spreadsheet - Composite_Resource_Privileges_IM or _RISK.xlsx.
&#x9;&#x9;sheets: Privileges_shared &#x9;&#x9;- Update privileges for /shared
&#x9;&#x9;&#x9;    Privileges_databases &#x9;- Update privileges for /services/databases
&#x9;&#x9;&#x9;&#x9;Privileges_webservices &#x9;- Update privileges for /services/webservices

&#x9;Input:
&#x9;&#x9;datasource&#x9;&#x9;VARCHAR(255),&#x9;-- EXCEL, DB_LLE, DB_PROD.  The source of the privileges
&#x9;&#x9;Batch_Privileges INTEGER,&#x9;&#x9;-- REQUIRED_FILTER: 1=Batch all privileges for the same path, type and recursion setting. 0=Process each spreadsheet line separately (no batching).
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;When the resource path in the spreadsheet changes, a batch is executed.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;When the resource type in the spreadsheet changes, a batch is executed.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;When the recursion identifier in the spreadsheet changes, a batch is executed.  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;A group of rows with like recursion may only be batched together otherwise the meaning of the privilege setting is not the same.
&#x9;&#x9;Environment_Name VARCHAR(255), &#x9;-- REQUIRED FILTER: The Composite server environment in which to get/update privileges for: [DEV, TEST, UAT, PROD]
&#x9;&#x9;Project&#x9;&#x9;&#x9;VARCHAR(255),&#x9;-- RECOMMENDED FILTER: The name of the project that is hosted on CIS for this &quot;Env Type&quot;.  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;This provides a filter for only applying privileges for the given project.  If left blank, all projects will be updated.
&#x9;&#x9;SubProject&#x9;&#x9;VARCHAR(255),&#x9;-- RECOMMENDED FILTER: The name of the sub-project that is hosted on CIS for this &quot;Env Type&quot;.  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;This provides a filter for only applying privileges for the given sub-project.  If left blank, all rows for the project will be updated.
&#x9;&#x9;Sheet_Name &#x9;&#x9;VARCHAR(255), &#x9;-- OPTIONAL FILTER: The name of the Excel spreadsheet in which to get/update privileges from: [shared, databases, webservices]
&#x9;&#x9;Resource_Path &#x9;LONGVARCHAR,&#x9;-- OPTIONAL FILTER: The resource path in which to get/update privileges.  It may contain a wildcard &quot;%&quot;.
&#x9;&#x9;Resource_Type &#x9;VARCHAR(255),&#x9;-- OPTIONAL FILTER: The resource type in which to get/update privileges.  It is always upper case. 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--  This will only be used when no &quot;Resource_Path&quot; or a single &quot;Resource_Path&quot; is provided.  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--  It is not used when a list of &quot;Resource_Path&quot; entries are provided.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;E.g. DATA_SOURCE - a published datasource or physical metadata datasource.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9; CONTAINER - a folder path, a catalog or schema path.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9; COLUMN - a column from a table
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9; LINK - a published table or procedure.  If it resides in the path /services and points to a TABLE or PROCEDURE then it is a LINK.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9; TABLE - a view in the /shared path.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9; PROCEDURE a procedure in the /shared path.
&#x9;&#x9;Name_ &#x9;&#x9;&#x9;VARCHAR(255), &#x9;-- OPTIONAL FILTER: The user/group name in which to get/update privileges.
&#x9;&#x9;Domain_Name &#x9;VARCHAR(255), &#x9;-- OPTIONAL FILTER: The domain name in which to get/update privileges.
&#x9;&#x9;preview&#x9;&#x9;&#x9;CHAR(1),&#x9;&#x9;-- N or null(default)=Do not preview.  Execute the privileges.  Y=preview what will get set but don&apos;t actually execute the privileges.
&#x9;&#x9;forceDomainAsComposite &#x9;CHAR(1),-- OPTIONAL PARAM: Y=true, N=false. 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--    Provides a way to force a conversion of the group from an LDAP domain name like &quot;ldap&quot; to a the &quot;composite&quot; domain.  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--    This is useful when setting up the privileges for testing with composite groups that mirror the LDAP groups.  This way the spreadsheet does not have to be modified.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--    For example, the LDAP group Composite_Servicing_Dev is automatically converted to the composite domain group composite_servicing_dev.
&#x9;&#x9;inDebug1&#x9;&#x9;&#x9;CHAR(1),&#x9;-- N/Null=No debug, Y (default)=Debug for this procedure - basic messages
&#x9;&#x9;inDebug1Console&#x9;&#x9;CHAR(1), &#x9;-- N/Null (default)=No debug, Y=Debug console.  Determines whether to print the studio console window or not.
&#x9;&#x9;inDebug1CISLog&#x9;&#x9;CHAR(1), &#x9;-- N/Null (default)=No debug, Y=Debug log.  Determines whether to print to the CIS log or not.
&#x9;&#x9;inDebug1ReadOnly&#x9;CHAR(1),&#x9;-- N/Null (default)=No debug, Y=Debug for READ only messages
&#x9;&#x9;inDebug1RevokeAll&#x9;CHAR(1),&#x9;-- N/Null (default)=No debug, Y=Debug for Revoke All messages.
&#x9;&#x9;inDebug2&#x9;&#x9;&#x9;CHAR(1),&#x9;-- N/Null (default)=No debug, Y=Debug for 2nd and 3rd tier procedures (deep debug)
&#x9;&#x9;inBypassErrors&#x9;&#x9;CHAR(1)&#x9;&#x9;-- Bypass errors.  Throw exception when paths not found.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- N/Null (default) Do not bypass errors.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Y=bypass resource not found errors but report them.
&#x9;Output:
&#x9;&#x9;rowsProcessed&#x9;INTEGER&#x9;&#x9;&#x9;-- number of rows processed from the spreadsheet
&#x9;&#x9;logOutput&#x9;&#x9;LONGVARCHAR&#x9;&#x9;-- The output log that gets printed to the command line console is also output

&#x9;Exceptions:  Exception may be thrown.

---------------------------------------------------------------------------------
/services/webservices/system/admin/resource/operations/updateResourcePrivileges:
----------------------------------------------------------------------------------
Set the privilege information for a list of resources.

Only a user with GRANT privilege on a resource can modify the privileges for that
resource.  The owner of a resource always has GRANT privilege, as do users with the
MODIFY_ALL_RESOURCES right.

When &quot;mode&quot; is &quot;OVERWRITE_APPEND&quot;, or is not supplied, privileges are applied on a
per-user or per-group basis, so that updating privileges for one user or group does not
alter privileges from any other user or group.  The privileges applied for a user or
group replace the previous value for that user or group. When &quot;mode&quot; is &quot;SET_EXACTLY&quot;,
all privileges on the resource are made to look exactly like the provided privileges.

When &quot;updateRecursively&quot; is &quot;false&quot;, the privileges are applied only the specified
resources.  When it is &quot;true&quot;, the privileges are recursively applied into any 
CONTAINER or DATA_SOURCE resource specified.  When recursively applying privileges, 
the privilege change is ignored for any resource the user lacks owner privileges for.

Privileges that are not applicable for a given resource type are automatically stripped
down to the set that is legal for each resource.  TABLE resources support NONE, READ,
WRITE, SELECT, INSERT, UPDATE, and DELETE.  PROCEDURE resources support NONE, READ,
WRITE, and EXECUTE.  All other resource types only support NONE, READ, and WRITE.

The &quot;combinedPrivs&quot; and &quot;inheritedPrivs&quot; elements on each &quot;privilegeEntry&quot; will be
ignored and can be left unset.

Request Elements:
    updateRecursively: If &quot;true&quot;, then all children of the given resources will
       recursively be updated with the privileges assigned to their parent.
    updateDependenciesRecursively: If &quot;true&quot;, then all dependencies of the given resources will
       recursively be updated with the privileges assigned to their parent.
    privilegeEntries: A list of resource names, types, and the privileges.
    mode (optional): Determines whether privileges are merged with existing ones,
       default is &quot;OVERWRITE_APPEND&quot;, which merges and does not update privileges for
       users or groups not mentioned.  &quot;SET_EXACTLY&quot; makes privileges look exactly like
       those provided in the call.

Response Elements:
    N/A

Faults:
    IllegalArgument: If any path is malformed or any type or privilege entry is illegal,
       or mode is not one of the legal values.
    NotAllowed: If an attempt is made to use this operation with an insufficient license.
    NotFound: If a path refers to a resource that does not exist.
    NotFound: If an unknown domain is provided.
    NotFound: If an unknown user is provided.
    NotFound: If an unknown group is provided.
    Security: If for a given entry path the user does not have READ access on any item
       in a path other than the last item, or does not have GRANT access on the last item.
    Security: If the user does not have the ACCESS_TOOLS right.

&#x9;Modified Date: &#x9;Modified By:&#x9;&#x9;CSW Version:&#x9;Reason:
&#x9;10/28/2014&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.2.6&#x9;&#x9;&#x9;Added new.
&#x9;01/15/2016&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.2&#x9;&#x9;&#x9;1. added additional parameters to updatePrivilegeCategory. 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;2. Fixed bug where 1st privilege was not being applied.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;3. Retrieve columns from system.COLUMN_NAMES instead of the procedure getBasicResourceCursor_SQL_TABLE.
&#x9;05/24/2016&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.3&#x9;&#x9;&#x9;Added procedure getCurrentTimestamp to workaround a bug introduced by 7.0.3 server when setting CURRENT_TIMESTAMP.
&#x9;07/15/2016&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.3&#x9;&#x9;&#x9;Removed use of vectors to improve performance and reduce memory leak issues.
&#x9;05/16/2017&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.5&#x9;&#x9;&#x9;Adapted for Data Abstraction Best Practices.

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

*/
PROCEDURE updateResourcePrivilegesDriverImplV4(
&#x9;IN datasource&#x9;&#x9;&#x9;&#x9;VARCHAR(255),&#x9;--  EXCEL, DB_LLE, DB_PROD.  The source of the privileges
&#x9;IN Batch_Privileges &#x9;&#x9;INTEGER,&#x9;&#x9;-- REQUIRED_FILTER: 1=Batch all privileges for the same path and type, 0=Process each spreadsheet line separately (no batching).
    IN Environment_Name &#x9;&#x9;VARCHAR(255), &#x9;-- REQUIRED FILTER: The Composite server environment in which to get/update privileges for: [DEV, TEST, UAT, PROD]
&#x9;IN Organization&#x9;&#x9;&#x9;&#x9;VARCHAR(255),&#x9;-- OPTIONAL FILTER: The name of the organization such as IM or SS
&#x9;IN Project&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(255),&#x9;-- OPTIONAL FILTER: The name of the project that is hosted on CIS for this &quot;Env Type&quot;.  This provides a filter for only applying privileges for the given project.  If left blank, all projects will be updated.
&#x9;IN SubProject&#x9;&#x9;&#x9;&#x9;VARCHAR(255),&#x9;-- OPTIONAL FILTER: The name of the sub-project that is hosted on CIS for this &quot;Env Type&quot;.  This provides a filter for only applying privileges for the given sub-project.  If left blank, all rows for the sub-projects will be updated.
    IN Sheet_Name &#x9;&#x9;&#x9;&#x9;VARCHAR(255), &#x9;-- OPTIONAL FILTER: The name of the Excel spreadsheet in which to get/update privileges from: [Privileges_initialize, Privileges_shared, Privileges_databases, Privileges_webservices]
    IN Resource_Path &#x9;&#x9;&#x9;LONGVARCHAR,&#x9;-- OPTIONAL FILTER: The resource path in which to get/update privileges.  It may contain a wildcard &quot;%&quot;.
&#x9;IN Resource_Type &#x9;&#x9;&#x9;VARCHAR(255),&#x9;-- OPTIONAL FILTER: The resource type in which to get/update privileges.  It is always upper case. 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--  This will only be used when no &quot;Resource_Path&quot; or a single &quot;Resource_Path&quot; is provided.  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--  It is not used when a list of &quot;Resource_Path&quot; entries are provided.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;E.g. DATA_SOURCE - a published datasource or physical metadata datasource.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9; CONTAINER - a folder path, a catalog or schema path.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9; COLUMN - a column from a table
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9; LINK - a published table or procedure.  If it resides in the path /services and points to a TABLE or PROCEDURE then it is a LINK.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9; TABLE - a view in the /shared path.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9; PROCEDURE a procedure in the /shared path.
    IN Name_ &#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(255), &#x9;-- OPTIONAL FILTER: The user/group name in which to get/update privileges.
    IN Name_Type&#x9;&#x9;&#x9;&#x9;VARCHAR(255), &#x9;-- OPTIONAL FILTER: Valid values are USER or GROUP
    IN Domain_Name &#x9;&#x9;&#x9;&#x9;VARCHAR(255), &#x9;-- OPTIONAL FILTER: The domain name in which to get/update privileges.
&#x9;IN inPreview&#x9;&#x9;&#x9;&#x9;CHAR(1),&#x9;&#x9;-- N or null(default)=Do not preview.  Execute the privileges.  Y=preview what will get set but don&apos;t actually execute the privileges.
&#x9;IN forceDomainAsComposite &#x9;CHAR(1),&#x9;&#x9;-- OPTIONAL PARAM: Y=true, N=false. 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--    Provides a way to force a conversion of the group from an LDAP domain name like &quot;ldap&quot; to a the &quot;composite&quot; domain.  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--    This is useful when setting up the privileges for testing with composite groups that mirror the LDAP groups.  This way the spreadsheet does not have to be modified.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--    For example, the LDAP group Composite_Servicing_Dev is automatically converted to the composite domain group composite_servicing_dev.
&#x9;IN inDebug1&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1),&#x9;&#x9;-- N/Null=No debug, Y (default)=Debug for this procedure - basic messages
&#x9;IN inDebug1Console&#x9;&#x9;&#x9;CHAR(1), &#x9;&#x9;-- N/Null (default)=No debug, Y=Debug console.  Determines whether to print the studio console window or not.
&#x9;IN inDebug1CISLog&#x9;&#x9;&#x9;CHAR(1), &#x9;&#x9;-- N/Null (default)=No debug, Y=Debug log.  Determines whether to print to the CIS log or not.
&#x9;IN inDebug1ReadOnly&#x9;&#x9;&#x9;CHAR(1), &#x9;&#x9;-- N/Null (default)=No debug, Y=Debug for READ only messages
&#x9;IN inDebug1RevokeAll&#x9;&#x9;CHAR(1),&#x9;&#x9;-- N/Null (default)=No debug, Y=Debug for Revoke All messages.
&#x9;IN inDebug2&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1),&#x9;&#x9;-- N/Null (default)=No debug, Y=Debug for 2nd and 3rd tier procedures (deep debug)
&#x9;IN inBypassErrors&#x9;&#x9;&#x9;CHAR(1),&#x9;&#x9;-- Bypass errors.  Throw exception when paths not found.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- &#x9;  N/Null (default) Do not bypass errors.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- &#x9;  Y=bypass resource not found errors but report them.
&#x9;IN inModuleName&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The name of the invoking interface procedure.
&#x9;OUT rowsProcessed&#x9;&#x9;&#x9;INTEGER,&#x9;&#x9;-- number of rows processed from the spreadsheet
&#x9;OUT logOutput&#x9;&#x9;&#x9;&#x9;LONGVARCHAR&#x9;&#x9;-- The output log that gets printed to the command line console is also output
)
BEGIN
&#x9;DECLARE debug1&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1) DEFAULT UPPER(NVL(inDebug1,&apos;Y&apos;));&#x9;&#x9;&#x9;-- Debug for this procedure - basic messages
&#x9;DECLARE debug1Console&#x9;&#x9;&#x9;CHAR(1) DEFAULT NVL(UPPER(inDebug1Console),&apos;N&apos;);
&#x9;DECLARE debug1CISLog&#x9;&#x9;&#x9;CHAR(1) DEFAULT NVL(UPPER(inDebug1CISLog),&apos;N&apos;);
&#x9;DECLARE debug1ReadOnly&#x9;&#x9;&#x9;CHAR(1) DEFAULT UPPER(NVL(inDebug1ReadOnly,&apos;N&apos;)); &#x9;-- Debug for READ only messages
&#x9;DECLARE debug1RevokeAll&#x9;&#x9;&#x9;CHAR(1) DEFAULT UPPER(NVL(inDebug1RevokeAll,&apos;N&apos;)); &#x9;-- Debug for Revoke All only messages
&#x9;DECLARE debug2&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1) DEFAULT UPPER(NVL(inDebug2,&apos;N&apos;));&#x9;&#x9;&#x9;-- Debug for 2nd and 3rd tier procedures (deep debug)
&#x9;DECLARE bypassErrors&#x9;&#x9;&#x9;CHAR(1) DEFAULT NVL(UPPER(inBypassErrors), &apos;N&apos;);&#x9;-- N/Null (default) Do not bypass errors, Y=bypass resource not found errors but report them.

&#x9;-- DO NOT CHANGE
&#x9;DECLARE moduleName &#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT NVL(inModuleName,&apos;updateResourcePrivilegesDriverImplV4&apos;);
&#x9;DECLARE sqlStatement&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE fromClause&#x9;&#x9;&#x9;&#x9;VARCHAR(2048);
&#x9;DECLARE whereClause&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE revokeUsersIgnoreList&#x9;VARCHAR(4000) DEFAULT &apos;admin&apos;; -- &apos;admin,all,anonymous,monitor&apos;  -- The list of user to ignore when revoking privileges
&#x9;DECLARE revokeAllDefaultPrivilege VARCHAR DEFAULT &apos;NONE&apos;; -- READ -- this is the privilege that gets set on a resource when revoking privileges.  Option 2=NONE
&#x9;DECLARE revokeAllLogOutput&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE debug2RownumMin&#x9;&#x9;&#x9;INTEGER DEFAULT 0; -- when 0 then allow debug for all otherwise only debug a specific row when debug2=&apos;Y&apos;
&#x9;DECLARE debug2RownumMax&#x9;&#x9;&#x9;INTEGER DEFAULT 0; -- when 0 then allow debug for all otherwise only debug a specific row when debug2=&apos;Y&apos;
&#x9;DECLARE debug2Modified&#x9;&#x9;&#x9;CHAR(1);
&#x9;DECLARE newline&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT CHR(10);
&#x9;DECLARE batchPrivileges&#x9;&#x9;&#x9;INTEGER DEFAULT NVL(Batch_Privileges, 1);
&#x9;DECLARE preview&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1) DEFAULT UPPER(NVL(inPreview, &apos;N&apos;));
&#x9;DECLARE beginBatch&#x9;&#x9;&#x9;&#x9;BOOLEAN DEFAULT false;
&#x9;DECLARE columnExists&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE parentPath&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE parentType&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE colName&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE resourcePath&#x9;&#x9;&#x9;LONGVARCHAR DEFAULT null;
&#x9;DECLARE resourceType&#x9;&#x9;&#x9;VARCHAR DEFAULT null;
&#x9;DECLARE resourceExists&#x9;&#x9;&#x9;BOOLEAN;
&#x9;DECLARE resourceName&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE getPrivsResourcePath&#x9;LONGVARCHAR;
/* mtinius: 2016-01-15: Fixed bug where 1st record was not used because default was null.  
                        Need to compare prevResourcePath and prevResourceType to blank string so 1st record is found different and used. 
*/
&#x9;DECLARE prevResourcePath&#x9;&#x9;LONGVARCHAR DEFAULT &apos;&apos;;
&#x9;DECLARE prevResourceType&#x9;&#x9;VARCHAR DEFAULT &apos;&apos;;
&#x9;DECLARE recurseDependencies&#x9;&#x9;BIT;&#x9;&#x9;-- 0=no recurse, 1=recurse through all dependencies of the given resource and update them with the privileges assigned to their parent.
&#x9;DECLARE recurseDependents&#x9;&#x9;BIT;&#x9;&#x9;-- 0=no recurse, 1=recurse through all dependents of the given resource and update them with the privileges assigned to the resource passed in.
&#x9;DECLARE recurseChild&#x9;&#x9;&#x9;BIT;&#x9; &#x9;-- 0=no recurse, 1=recurse through folders if the resource is a folder.
&#x9;DECLARE revokeAll&#x9;&#x9;&#x9;&#x9;CHAR(1);&#x9;-- N=no revoke all, Y=yes revoke all
&#x9;DECLARE recurseChildStr&#x9;&#x9;&#x9;VARCHAR DEFAULT null;
&#x9;DECLARE prevRecurseChildStr&#x9;&#x9;VARCHAR DEFAULT null;
&#x9;DECLARE recurseDependenciesStr&#x9;VARCHAR;
&#x9;DECLARE recurseDependentsStr&#x9;VARCHAR;
&#x9;DECLARE mode&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR; &#x9;-- &quot;OVERWRITE_APPEND&quot;=Only apply modification, &quot;SET_EXACTLY&quot;=Make child resources look like this resource. 
&#x9;DECLARE PUBLIC TYPE privilegeRow&#x9;&#x9;ROW (
&#x9;&#x9;domainName&#x9;&#x9;&#x9;VARCHAR(255),-- composite domain
&#x9;&#x9;name&#x9;&#x9;&#x9;&#x9;VARCHAR(255),-- name of the user or group to assign the privilege
&#x9;&#x9;nameType&#x9;&#x9;&#x9;VARCHAR(255),-- USER or GROUP
&#x9;&#x9;privilegeList&#x9;&#x9;VARCHAR(255) -- space separated list of privileges: NONE or READ WRITE SELECT EXECUTE INSERT UPDATE DELETE GRANT
&#x9;);
&#x9;DECLARE privilegeRec&#x9;&#x9;&#x9;privilegeRow;
&#x9;DECLARE privilegeStr&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE name&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE nameType&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE domainName&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE privilegeList&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE privilegeListDisplay&#x9;VARCHAR;
&#x9;DECLARE actualPrivilegeList&#x9;&#x9;VARCHAR;
&#x9;DECLARE owner&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE ownerDomain&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE ex&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;EXCEPTION;
&#x9;DECLARE rowString&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE rownum&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE privRows&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE totalPrivsToApply&#x9;&#x9;INTEGER;
&#x9;DECLARE message&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE project&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE subProject&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE startTime&#x9;&#x9;&#x9;&#x9;TIMESTAMP DEFAULT CURRENT_TIMESTAMP;
&#x9;DECLARE currentTS&#x9;&#x9;&#x9;&#x9;TIMESTAMP;
&#x9;DECLARE duration&#x9;&#x9;&#x9;&#x9;INTERVAL DAY(9) TO SECOND;
&#x9;DECLARE result&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE status&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE tmpResourceStr&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE bypassResourceStr&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE bypassErrorResourceFound BIT;
&#x9;DECLARE LONGVARCHARlen&#x9;&#x9;&#x9;INTEGER DEFAULT 2147483647;
&#x9;-- This string is used to keep track of resource not exist errors.  Format=&quot;Resource Path&quot;::&quot;Resource Type&quot;|[repeat format]
&#x9;DECLARE bypassErrorsStr1&#x9;&#x9;LONGVARCHAR DEFAULT &apos;&apos;;
&#x9;DECLARE bypassErrorsStr2&#x9;&#x9;LONGVARCHAR DEFAULT &apos;&apos;;
&#x9;-- The string used to track the list of paths to set READ privilege.
&#x9;DECLARE privReadStr1&#x9;&#x9;&#x9;LONGVARCHAR;--Format: &quot;Resource Path&quot;::&quot;Resource Type&quot;::Name::&quot;Name Type&quot;::&quot;Domain&quot;::privilege::Owner::&quot;Owner Domain&quot;::&quot;Recurse Dependencies&quot;::&quot;Recurse Dependents&quot;::Recurse::mode|[repeat format]
&#x9;DECLARE privReadStr2&#x9;&#x9;&#x9;LONGVARCHAR;--Format: &quot;Resource Path&quot;::&quot;Resource Type&quot;::Name::&quot;Name Type&quot;::&quot;Domain&quot;::privilege::Owner::&quot;Owner Domain&quot;::&quot;Recurse Dependencies&quot;::&quot;Recurse Dependents&quot;::Recurse::mode|[repeat format]
&#x9;-- The string used to track the list of explicitly set paths for non-READ privileges.
&#x9;DECLARE privReadAppliedStr1&#x9;&#x9;LONGVARCHAR;--Format: &quot;Resource Path&quot;::&quot;Resource Type&quot;::Name::&quot;Name Type&quot;::&quot;Domain&quot;::privilege::Owner::&quot;Owner Domain&quot;::&quot;Recurse Dependencies&quot;::&quot;Recurse Dependents&quot;::Recurse::mode|[repeat format]
&#x9;DECLARE privReadAppliedStr2&#x9;&#x9;LONGVARCHAR;--Format: &quot;Resource Path&quot;::&quot;Resource Type&quot;::Name::&quot;Name Type&quot;::&quot;Domain&quot;::privilege::Owner::&quot;Owner Domain&quot;::&quot;Recurse Dependencies&quot;::&quot;Recurse Dependents&quot;::Recurse::mode|[repeat format]
&#x9;-- This string contains a list of found and not found paths.  
&#x9;--&#x9;Format [FOUND:/path,NOTFOUND:/path,]  Each path is succeeded by a comma to designate the end of the path.
&#x9;DECLARE privExplicitlySetStr1&#x9;LONGVARCHAR DEFAULT &apos;&apos;;--Format: &quot;Resource Path&quot;::&quot;Resource Type&quot;::Name::&quot;Name Type&quot;::&quot;Domain&quot;::privilege::Owner::&quot;Owner Domain&quot;::&quot;Recurse Dependencies&quot;::&quot;Recurse Dependents&quot;::Recurse::mode|[repeat format]
&#x9;DECLARE privExplicitlySetStr2&#x9;LONGVARCHAR DEFAULT &apos;&apos;;--Format: &quot;Resource Path&quot;::&quot;Resource Type&quot;::Name::&quot;Name Type&quot;::&quot;Domain&quot;::privilege::Owner::&quot;Owner Domain&quot;::&quot;Recurse Dependencies&quot;::&quot;Recurse Dependents&quot;::Recurse::mode|[repeat format]
&#x9;-- The string used to track the list of READ-only privileges that have been applied privileges.
&#x9;DECLARE parentPaths&#x9;&#x9;&#x9;&#x9;LONGVARCHAR DEFAULT &apos;&apos;;
&#x9;-- Global variable: 
&#x9;DECLARE overrideOwner&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE overrideOwnerDomain&#x9;&#x9;VARCHAR;
&#x9;-- Variables for Update Privilege Category
&#x9;DECLARE grandparentPath&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE privReadStr&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;--Format: &quot;Resource Path&quot;::&quot;Resource Type&quot;::Name::&quot;Name Type&quot;::&quot;Domain&quot;::privilege::Owner::&quot;Owner Domain&quot;::&quot;Recurse Dependencies&quot;::&quot;Recurse Dependents&quot;::Recurse::mode|
&#x9;DECLARE tmpPrivStr&#x9;&#x9;&#x9;&#x9;LONGVARCHAR; --Format: &quot;Resource Path&quot;::&quot;Resource Type&quot;::Name::&quot;Name Type&quot;::&quot;Domain&quot;::privilege::Owner::&quot;Owner Domain&quot;::&quot;Recurse Dependencies&quot;::&quot;Recurse Dependents&quot;::Recurse::mode|[repeat format]
&#x9;DECLARE trailerString&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE category&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE userDomain&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT NULL;
&#x9;DECLARE resourceTypeTmp&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE denyReadPrivilegesNameList&#x9;LONGVARCHAR DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.denyReadPrivilegesNameList;
&#x9;DECLARE denyNameBool&#x9;&#x9;&#x9;&#x9;BOOLEAN;
&#x9;DECLARE denyName&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE privRowFound&#x9;&#x9;&#x9;&#x9;BOOLEAN;
&#x9;-- Variables for lookupOverrideOwner
&#x9;--   Global variable: 
&#x9;--   A comma separated list of environments types user and domain where the owner and owner domain shall be defaulted to the specified value no matter how they are set within the privilege rows.
&#x9;--   Format Environment_Name/[PDEFAULT,project1]/[SDEFAULT,subproject1]/user/domain, envType/[PDEFAULT,project2]/[SDEFAULT,subproject2]/user/domain,(repeat)
&#x9;--   When project=PDEFAULT then apply the setting for all projects by default unless a specific project is found
&#x9;--   When subproject=SDEFAULT then apply the setting for all subprojects by default unless a specific subproject is found
&#x9;--   e.g. &apos;UAT/PDEFAULT/SDEFAULT/admin/composite, PROD/PDEFAULT/SDEFAULT/admin/composite&apos;
&#x9;DECLARE OverrideEnvOwnerList&#x9;&#x9;&#x9;&#x9;VARCHAR(4000) DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.OverrideEnvOwnerList;
&#x9;DECLARE defaultOwner&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE defaultOwnerDomain&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE defaultProjectFound&#x9;&#x9;&#x9;&#x9;BOOLEAN;
&#x9;DECLARE defaultSubProjectFound&#x9;&#x9;&#x9;BOOLEAN;
&#x9;DECLARE part&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE listRow&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE listProject&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE listSubproject&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE pos&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE j,k&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE pos1,pos2&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE object&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE moreToDo1,moreToDo2&#x9;&#x9;&#x9;&#x9;BOOLEAN;
&#x9;DECLARE objectList1,objectList2&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE expression1,expression2&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE explen1,explen2&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER;

&#x9;/************* FORCE BATCH PRIVILEGES TO BE ON *******************/
--&#x9;set batchPrivileges = 1;
&#x9;/*****************************************************************/

&#x9;-- Set defaults
&#x9;set logOutput = &apos;&apos;;
&#x9;IF (batchPrivileges &gt; 0) THEN
&#x9;&#x9;set batchPrivileges = 1;
&#x9;END IF;

&#x9;-- Print out the input filters
&#x9;set message = &apos;INPUT FILTERS:&apos;||newline;

    IF (datasource IS NOT NULL) THEN
&#x9;&#x9;set message = message || &apos; datasource=&apos;||datasource||newline;
&#x9;END IF;
    IF (batchPrivileges IS NOT NULL) THEN
&#x9;&#x9;set message = message || &apos; Batch_Privileges=&apos;||NVL(CAST(batchPrivileges AS VARCHAR), &apos; &apos;)||newline;
&#x9;END IF;
    IF (Environment_Name IS NOT NULL AND LENGTH(Environment_Name) &gt; 0) THEN
&#x9;&#x9;set message = message || &apos; Environment_Name=&apos;||NVL(Environment_Name, &apos; &apos;)||newline;
&#x9;END IF;
     IF (Project IS NOT NULL AND LENGTH(Project) &gt; 0) THEN
&#x9;&#x9;set message = message || &apos; Project=&apos;||NVL(Project, &apos; &apos;)||newline;
&#x9;END IF;
     IF (SubProject IS NOT NULL AND LENGTH(SubProject) &gt; 0) THEN
&#x9;&#x9;set message = message || &apos; SubProject=&apos;||NVL(SubProject, &apos; &apos;)||newline;
&#x9;END IF;
    IF (Sheet_Name IS NOT NULL AND LENGTH(Sheet_Name) &gt; 0) THEN
&#x9;&#x9;IF (POSITION(&apos;shared&apos; in Sheet_Name) &gt; 0 OR POSITION(&apos;data&apos; in Sheet_Name) &gt; 0 OR POSITION(&apos;web&apos; in Sheet_Name) &gt; 0) THEN
&#x9;&#x9;&#x9;set message = message || &apos; Sheet_Name=&apos;||NVL(Sheet_Name, &apos; &apos;)||newline;
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;raise ex value &apos;The Sheet_Name value [&apos;||TRIM(NVL(Sheet_Name, &apos; &apos;))||&apos;] is invalid.  It may be [Privileges_shared|shared, Privileges_databases|databases, Privileges_webservices|webservices].&apos;;
&#x9;&#x9;END IF;
&#x9;END IF;
    IF (Resource_Path IS NOT NULL AND LENGTH(Resource_Path) &gt; 0) THEN
&#x9;&#x9;set message = message || &apos; Resource_Path=&apos;||NVL(Resource_Path, &apos; &apos;)||newline;
&#x9;END IF;
    IF (Name_ IS NOT NULL AND LENGTH(Name_) &gt; 0) THEN
&#x9;&#x9;set message = message || &apos; Name_=&apos;||NVL(Name_, &apos; &apos;)||newline;
&#x9;END IF;
    IF (Domain_Name IS NOT NULL AND LENGTH(Domain_Name) &gt; 0) THEN
&#x9;&#x9;set message = message || &apos; Domain_Name=&apos;||NVL(Domain_Name, &apos; &apos;)||newline;
&#x9;END IF;
    IF (preview IS NOT NULL AND LENGTH(preview) &gt; 0) THEN
&#x9;&#x9;set message = message || &apos; preview=&apos;||NVL(preview, &apos; &apos;)||newline;
&#x9;&#x9;IF (preview = &apos;Y&apos; AND debug1 = &apos;N&apos;) THEN
&#x9;&#x9;&#x9;set debug1 = &apos;Y&apos;;
&#x9;&#x9;END IF;
&#x9;END IF;
    IF (forceDomainAsComposite IS NOT NULL AND LENGTH(forceDomainAsComposite) &gt; 0) THEN
&#x9;&#x9;set message = message || &apos; forceDomainAsComposite=&apos;||NVL(CAST(forceDomainAsComposite AS VARCHAR), &apos; &apos;)||newline;
&#x9;END IF;

&#x9;-- This is done so that the owner of a resource is not accidently reset thus wiping out the original resource owner in the development environment.
&#x9;-- Lookup the override owner and owner domain
&#x9;/******************************
&#x9; BEGIN lookupOverrideOwner
&#x9; ******************************/
&#x9;IF (Environment_Name IS NOT NULL AND project IS NOT NULL) THEN
&#x9;&#x9;-- Extract the object from the object list
&#x9;&#x9;SET objectList1 = OverrideEnvOwnerList;
&#x9;&#x9;SET expression1 = &apos;,&apos;;
&#x9;&#x9;SET explen1 = length(expression1);
&#x9;&#x9;SET moreToDo1 = true;
&#x9;&#x9;SET j = 0;
&#x9;&#x9;WHILE (moreToDo1) DO
&#x9;&#x9;&#x9;-- Extract the source column type
&#x9;&#x9;&#x9;set j = j + 1;
&#x9;&#x9;&#x9;SET object = null;
&#x9;&#x9;&#x9;IF (j = 1) THEN
&#x9;&#x9;&#x9;&#x9;SET pos1 = INSTR(objectList1, expression1, 1, j);
&#x9;&#x9;&#x9;&#x9;IF (pos1 &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;SET object = SUBSTRING(objectList1, 1, pos1-1);
&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;IF (LENGTH(TRIM(objectList1)) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET object = objectList1;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;SET moreToDo1 = false;
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;SET pos1 = INSTR(objectList1, expression1, 1, j-1);
&#x9;&#x9;&#x9;&#x9;SET pos2 = INSTR(objectList1, expression1, 1, j);
&#x9;&#x9;&#x9;&#x9;IF (pos1 &gt; 0 and pos2 &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;SET object = SUBSTRING(objectList1, pos1+explen1, pos2-pos1-explen1);
&#x9;&#x9;&#x9;&#x9;ELSEIF (pos1 &gt; 0 and pos2 = 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;SET object = SUBSTRING(objectList1, pos1+explen1);
&#x9;&#x9;&#x9;&#x9;&#x9;SET moreToDo1 = false;
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;SET object = TRIM(object);
&#x9;&#x9;&#x9;--CALL print(&apos;includeNameEQ object=[&apos;||TRIM(NVL(object,&apos;  &apos;))||&apos;]&apos;);
&#x9;&#x9;&#x9;IF (object IS NOT NULL and LENGTH(TRIM(object)) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;set listRow = object;
&#x9;&#x9;&#x9;&#x9;-- Continue if the listRow begins with envType or /envType
&#x9;&#x9;&#x9;&#x9;--&#x9;AND splitElement LIKE Environment_Name||&apos;%&apos; OR splitElement LIKE &apos;/&apos;||Environment_Name||&apos;%&apos;
&#x9;&#x9;&#x9;&#x9;IF (INSTR(listRow, Environment_Name) = 1 OR INSTR(listRow, &apos;/&apos;||Environment_Name) = 1) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;IF (SUBSTRING(listRow,1,1) = &apos;/&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET listRow = SUBSTRING(listRow, 2, LENGTH(listRow));
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;--CALL PRINT(&apos;listRow=&apos;||listRow);
&#x9;&#x9;&#x9;&#x9;&#x9;SET defaultProjectFound = false;
&#x9;&#x9;&#x9;&#x9;&#x9;SET defaultSubProjectFound = false;

&#x9;&#x9;&#x9;&#x9;&#x9;-- Extract the object from the object list
&#x9;&#x9;&#x9;&#x9;&#x9;SET objectList2 = listRow;
&#x9;&#x9;&#x9;&#x9;&#x9;SET expression2 = &apos;/&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;SET explen2 = length(expression2);
&#x9;&#x9;&#x9;&#x9;&#x9;SET moreToDo2 = true;
&#x9;&#x9;&#x9;&#x9;&#x9;SET k = 0;
&#x9;&#x9;&#x9;&#x9;&#x9;WHILE (moreToDo2) DO
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Extract the source column type
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set k = k + 1;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET object = null;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (k = 1) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET pos1 = INSTR(objectList2, expression2, 1, k);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (pos1 &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET object = SUBSTRING(objectList2, 1, pos1-1);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (LENGTH(TRIM(objectList2)) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET object = objectList2;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET moreToDo2 = false;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET pos1 = INSTR(objectList2, expression2, 1, k-1);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET pos2 = INSTR(objectList2, expression2, 1, k);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (pos1 &gt; 0 and pos2 &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET object = SUBSTRING(objectList2, pos1+explen2, pos2-pos1-explen2);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSEIF (pos1 &gt; 0 and pos2 = 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET object = SUBSTRING(objectList2, pos1+explen2);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET moreToDo2 = false;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET object = TRIM(object);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--CALL print(&apos;part object=[&apos;||TRIM(NVL(object,&apos;  &apos;))||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (object IS NOT NULL and LENGTH(TRIM(object)) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set part = object;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CASE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN k = 2 THEN SET listProject = part;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN k = 3 THEN SET listSubproject = part;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END CASE;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (part = &apos;PDEFAULT&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET defaultProjectFound = TRUE;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (part = &apos;SDEFAULT&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET defaultSubProjectFound = TRUE;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (defaultProjectFound AND defaultSubProjectFound) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CASE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN k = 4 THEN SET defaultOwner = TRIM(NVL(part,&apos;  &apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN k = 5 THEN SET defaultOwnerDomain = TRIM(NVL(part,&apos;  &apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END CASE;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSEIF (project = listProject AND subProject = listSubproject) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CASE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN k = 4 THEN SET overrideOwner = part;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN k = 5 THEN SET overrideOwnerDomain = part;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END CASE;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;END WHILE;
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END WHILE;

&#x9;&#x9;IF (overrideOwner IS NULL) THEN
&#x9;&#x9;&#x9;SET overrideOwner = defaultOwner;
&#x9;&#x9;END IF;
&#x9;&#x9;IF (overrideOwnerDomain IS NULL) THEN
&#x9;&#x9;&#x9;SET overrideOwnerDomain = defaultOwnerDomain;
&#x9;&#x9;END IF;
&#x9;END IF;
    IF (overrideOwner IS NOT NULL AND overrideOwnerDomain IS NOT NULL) THEN
&#x9;&#x9;set message = message || &apos; For Environment_Name[&apos;||TRIM(NVL(Environment_Name,&apos;  &apos;))||&apos;], the owner and ownderDomain are being overridden by default values overrideOwner=[&apos;||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;TRIM(NVL(overrideOwner,&apos;  &apos;))||&apos;] and overrideOwnerDomain=[&apos;||TRIM(NVL(overrideOwnerDomain,&apos;  &apos;))||&apos;]&apos;||newline;
&#x9;&#x9;IF (overrideOwner = &apos;NULL&apos;) THEN
&#x9;&#x9;&#x9;SET overrideOwner = &apos;&apos;;
&#x9;&#x9;END IF;
&#x9;&#x9;IF (overrideOwnerDomain = &apos;NULL&apos;) THEN
&#x9;&#x9;&#x9;SET overrideOwnerDomain = &apos;&apos;;
&#x9;&#x9;END IF;
&#x9;END IF;
&#x9;IF (debug1 = &apos;Y&apos;) THEN
&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/addLogOutput(debug1Console, debug1CISLog, logOutput, moduleName||&apos; : &apos;||message, logOutput);
&#x9;END IF;
&#x9;/******************************
&#x9; END lookupOverrideOwner
&#x9; ******************************/

&#x9;-- Print out the preview Mode
&#x9;IF (preview = &apos;Y&apos;) THEN
&#x9;&#x9;IF (debug1 = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;set message = &apos;PREVIEW MODE ONLY.  NO PRIVILEGES WILL BE UPDATED.&apos;||newline;
&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/addLogOutput(debug1Console, debug1CISLog, logOutput, moduleName||&apos; : &apos;||message, logOutput);
&#x9;&#x9;END IF;
&#x9;ELSE
&#x9;&#x9;IF (debug1 = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;set message = &apos;UPDATE MODE.  PRIVILEGES WILL BE UPDATED.&apos;||newline;
&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/addLogOutput(debug1Console, debug1CISLog, logOutput, moduleName||&apos; : &apos;||message, logOutput);
&#x9;&#x9;END IF;
&#x9;END IF;

&#x9;-- Get the SQL Statement for logging purposes
&#x9;CALL /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getSQLPrivileges(datasource, Environment_Name, Organization, Project, SubProject, Sheet_Name, Resource_Path, Resource_Type, Name_, Name_Type, Domain_Name, debug1, sqlStatement, fromClause, whereClause);
&#x9;-- Process the spreadsheet and look for resource paths that do not exist in order to &quot;fail fast&quot;
&#x9;IF (debug1 = &apos;Y&apos;) THEN
&#x9;&#x9;set message = &apos;VALIDATE ALL RESOURCE PATHS ::&apos;||&apos;|&apos;||newline;
&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/addLogOutput(debug1Console, debug1CISLog, logOutput, moduleName||&apos; : &apos;||message, logOutput);
&#x9;&#x9;set message = &apos;SQL STATEMENT FOR SELECTING PRIVILEGES ::&apos;||sqlStatement||&apos;|&apos;||newline;
&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/addLogOutput(debug1Console, debug1CISLog, logOutput, moduleName||&apos; : &apos;||message, logOutput);
&#x9;END IF;

&#x9;/*************************************
&#x9; BEGIN EVALUATE RESOURCES NOT EXIST
&#x9; *************************************/
&#x9;-- Loop through the privilege list and check for resource paths that do not exist.
&#x9;set totalPrivsToApply = 0;
&#x9;FOR r AS 
&#x9;&#x9;SELECT * FROM /shared/ASAssets/BestPractices_v81/PrivilegeScripts/getPrivileges(datasource, Environment_Name, Organization, Project, SubProject, Sheet_Name, Resource_Path, Resource_Type, Name_, Name_Type, Domain_Name, &apos;N&apos;)
&#x9;DO
&#x9;&#x9;-- set variables
&#x9;&#x9;set totalPrivsToApply = totalPrivsToApply + 1;
&#x9;&#x9;set resourcePath = r.&quot;Resource Path&quot;;
&#x9;&#x9;set resourceType = r.&quot;Resource Type&quot;;

&#x9;&#x9;IF (prevResourcePath IS NOT NULL AND prevResourceType IS NOT NULL AND resourcePath IS NOT NULL AND resourceType IS NOT NULL
&#x9;&#x9;&#x9;&#x9;AND (prevResourcePath != resourcePath OR prevResourceType != resourceType) ) 
&#x9;&#x9;THEN
&#x9;&#x9;&#x9;-- Create the row string to display
&#x9;&#x9;&#x9;set rowString = &apos;Sheet=&apos;||r.sheetName||&apos; SheetRow=&apos;||r.sheetRownum||&apos; ResPath=&apos;||resourcePath || &apos; ResType=&apos;||resourceType;

&#x9;&#x9;&#x9;IF (resourceType != &apos;COLUMN&apos;) THEN
&#x9;&#x9;&#x9;&#x9;call /lib/resource/ResourceExists(resourcePath, resourceType, null, resourceExists);
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;SET colName = null;
&#x9;&#x9;&#x9;&#x9;SET parentPath = null;
&#x9;&#x9;&#x9;&#x9;SET pos = INSTR(resourcePath, &apos;/&apos;, -1, 1);
&#x9;&#x9;&#x9;&#x9;IF (pos &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;SET colName = SUBSTRING(resourcePath, pos+1);
&#x9;&#x9;&#x9;&#x9;&#x9;SET parentPath = SUBSTRING(resourcePath, 1, pos-1);
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;-- Assumption when applying COLUMN level privileges is that the resource is a TABLE and not a PROCEDURE.
&#x9;&#x9;&#x9;&#x9;call /lib/resource/ResourceExists(parentPath, &apos;TABLE&apos;, null, resourceExists);
&#x9;&#x9;&#x9;&#x9;-- Check to see if the column exists if the table exists
&#x9;&#x9;&#x9;&#x9;IF (resourceExists) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;-- Remove double quotes around column name
&#x9;&#x9;&#x9;&#x9;&#x9;IF (INSTR(colName, &apos;&quot;&apos;) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--CALL /shared/ASAssets/Utilities/string/removeDoubleQuotes(colName, colName);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--RegexReplace (RegexReplace(inString, &apos;&quot;&quot;&apos;, &apos;&quot;&quot;=dq=&apos;, 0), &apos;(&quot;=dq=|&quot;(?!&quot;))&apos;, &apos;&apos;, 0);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL/shared/ASAssets/Utilities/string/TextUtils/RegexReplace(colName, &apos;&quot;&quot;&apos;, &apos;&quot;&quot;=dq=&apos;, 0, colName);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL/shared/ASAssets/Utilities/string/TextUtils/RegexReplace(colName, &apos;(&quot;=dq=|&quot;(?!&quot;))&apos;, &apos;&apos;, 0, colName);
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;/* mtinius: 2016-01-15: new strategy for checking column exists. */
&#x9;&#x9;&#x9;&#x9;&#x9;SELECT COUNT(*) columnExists INTO columnExists
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FROM /services/databases/system/ALL_COLUMNS
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHERE COLUMN_NAME = colName
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  AND PARENT_PATH = parentPath;
&#x9;&#x9;&#x9;&#x9;&#x9;/* mtinius: 2016-01-15: commented out old strategy
&#x9;&#x9;&#x9;&#x9;&#x9;SELECT COUNT(*) columnExists INTO columnExists
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FROM /shared/ASAssets/Utilities/repository/getBasicResourceCursor_SQL_TABLE(parentPath, &apos;TABLE&apos;)
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHERE columnName IS NOT NULL AND columnName = colName;
&#x9;&#x9;&#x9;&#x9;&#x9;*/
&#x9;&#x9;&#x9;&#x9;&#x9;IF (columnExists = 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET resourceExists = FALSE;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;IF (bypassErrors = &apos;N&apos; AND NOT resourceExists) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;raise ex value &apos;Resource does not exist...&apos;||rowString;
&#x9;&#x9;&#x9;&#x9;ELSEIF (bypassErrors = &apos;Y&apos; AND NOT resourceExists) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;SET bypassResourceStr = TRIM(NVL(resourceType,&apos;  &apos;))||&apos;::&apos;||TRIM(NVL(resourcePath,&apos;  &apos;))||&apos;|&apos;;

&#x9;&#x9;&#x9;&#x9;&#x9;-- Search for this current unique entry in the &quot;bypass error&quot; list.  
&#x9;&#x9;&#x9;&#x9;&#x9;IF (POSITION(bypassResourceStr IN bypassErrorsStr1) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET bypassErrorResourceFound = 1;
&#x9;&#x9;&#x9;&#x9;&#x9;ELSEIF (POSITION(bypassResourceStr IN bypassErrorsStr2) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET bypassErrorResourceFound = 1;
&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET bypassErrorResourceFound = 0;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;-- Add the row to the string since it was not found in the &quot;bypass error&quot; list.  Only one reference of resource path is needed.
&#x9;&#x9;&#x9;&#x9;&#x9;IF (bypassErrorResourceFound = 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (LENGTH(bypassErrorsStr1) + LENGTH(bypassResourceStr) &lt; LONGVARCHARlen) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET bypassErrorsStr1 = bypassErrorsStr1 || bypassResourceStr;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSEIF (LENGTH(bypassErrorsStr2) + LENGTH(bypassResourceStr) &lt; LONGVARCHARlen) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET bypassErrorsStr2 = bypassErrorsStr2 || bypassResourceStr;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;RAISE ex VALUE &apos;The length of &quot;bypassErrorsStr1&quot; and &quot;bypassErrorsStr2&quot; has been exceeded.&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (debug1 = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Log the resource not exist issue
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set message = &apos;**ERROR**: RESOURCE NOT EXIST :: Resource Type::Path=&apos;||TRIM(NVL(resourceType,&apos;  &apos;))||&apos;::&apos;||TRIM(NVL(resourcePath,&apos;  &apos;))||&apos;|&apos;||newline;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/addLogOutput(debug1Console, debug1CISLog, logOutput, moduleName||&apos; : &apos;||message, logOutput);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;END IF;
&#x9;&#x9;-- Set the previous resource path and type so as to track when a line is different than the previous
&#x9;&#x9;--   This will trigger invoking the updateResourcePrivileges() method during batch privilege processing.
&#x9;&#x9;set prevResourcePath = resourcePath;
&#x9;&#x9;set prevResourceType = resourceType;
&#x9;END FOR;
&#x9;set prevResourcePath = null;
&#x9;set prevResourceType = null;
&#x9;/*************************************
&#x9; END EVALUATE RESOURCES NOT EXIST
&#x9; *************************************/

&#x9;-- Display a debug message that the batch is beginning
&#x9;IF (batchPrivileges &gt; 0) THEN
&#x9;&#x9;IF (debug1 = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/addLogOutput(debug1Console, debug1CISLog, logOutput, &apos;|&apos;||newline, logOutput);
&#x9;&#x9;&#x9;set message = &apos;BEGIN BATCH ::&apos;||&apos;|&apos;||newline;
&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/addLogOutput(debug1Console, debug1CISLog, logOutput, moduleName||&apos; : &apos;||message, logOutput);
&#x9;&#x9;END IF;
&#x9;&#x9;set beginBatch = true;
&#x9;END IF;

&#x9;-- Get the SQL Statement for logging purposes
&#x9;CALL /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getSQLPrivileges(datasource, Environment_Name, Organization, Project, SubProject, Sheet_Name, Resource_Path, Resource_Type, Name_, Name_Type, Domain_Name, debug1, sqlStatement, fromClause, whereClause);
&#x9;IF (debug1 = &apos;Y&apos;) THEN
&#x9;&#x9;set message = &apos;SQL STATEMENT FOR SELECTING PRIVILEGES ::&apos;||REPLACE(sqlStatement,newline,&apos; &apos;)||&apos;|&apos;||newline;
&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/addLogOutput(debug1Console, debug1CISLog, logOutput, moduleName||&apos; : &apos;||message, logOutput);
&#x9;END IF;

&#x9;/*************************************
&#x9; BEGIN PROCESSING PRIVILEGE ROWS
&#x9; *************************************/
&#x9;-- Process the spreadsheet and apply privileges
&#x9;set privRows = 0;
&#x9;set rowsProcessed = 0;
&#x9;FOR r AS 
&#x9;&#x9;SELECT * FROM /shared/ASAssets/BestPractices_v81/PrivilegeScripts/getPrivileges(datasource, Environment_Name, Organization, Project, SubProject, Sheet_Name, Resource_Path, Resource_Type, Name_, Name_Type, Domain_Name, debug1)
&#x9;DO
&#x9;&#x9;-- set count variables
&#x9;&#x9;set rowsProcessed = rowsProcessed + 1;
&#x9;&#x9;set rownum = r.rownum;
&#x9;&#x9;set project = r.Project;
&#x9;&#x9;set subProject = r.SubProject;
&#x9;&#x9;IF (preview = &apos;N&apos;) THEN
&#x9;&#x9;&#x9;set status = &apos;PROCESSED:&apos;;
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;set status = &apos;PREVIEWED:&apos;;
&#x9;&#x9;END IF;

&#x9;&#x9;-- Validate recurse child and mode
&#x9;&#x9;set recurseChildStr = &apos;N&apos;;
&#x9;&#x9;IF (r.&quot;Recurse Child&quot; IS NOT NULL) THEN
&#x9;&#x9;&#x9;IF (UPPER(r.&quot;Recurse Child&quot;) = &apos;YM&apos;) THEN
&#x9;&#x9;&#x9;&#x9;set recurseChildStr = UPPER(TRIM(r.&quot;Recurse Child&quot;));
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;IF (UPPER(r.&quot;Recurse Child&quot;) = &apos;YC&apos;) THEN
&#x9;&#x9;&#x9;&#x9;set recurseChildStr = UPPER(TRIM(r.&quot;Recurse Child&quot;));
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END IF;

&#x9;&#x9;-- Set the revoke all parameter
&#x9;&#x9;set revokeAll = &apos;N&apos;;
&#x9;&#x9;IF (r.&quot;Revoke All&quot; IS NOT NULL AND UPPER(r.&quot;Revoke All&quot;) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;set revokeAll = &apos;Y&apos;;
&#x9;&#x9;END IF;

--&#x9;&#x9;call print(&apos;CURR: recurseChildStr=&apos;||recurseChildStr    ||&apos;  resourceType=&apos;||r.&quot;Resource Type&quot;||&apos;  resourcePath=&apos;||r.&quot;Resource Path&quot;);
--&#x9;&#x9;call print(&apos;PREV: recurseChildStr=&apos;||prevRecurseChildStr||&apos;  resourceType=&apos;||prevResourceType ||&apos;  resourcePath=&apos;||prevResourcePath);

&#x9;&#x9;-- If Batch Privileges is &quot;ON&quot; and the curent path is different than the previous path then process this path before continuing.
&#x9;&#x9;IF (batchPrivileges &gt; 0 AND 
&#x9;&#x9;&#x9;&#x9;(&#x9;(prevResourcePath IS NOT NULL AND prevResourceType IS NOT NULL AND r.&quot;Resource Path&quot; IS NOT NULL AND r.&quot;Resource Type&quot; IS NOT NULL
&#x9;&#x9;&#x9;&#x9;&#x9;and prevRecurseChildStr IS NOT NULL AND recurseChildStr IS NOT NULL
&#x9;&#x9;&#x9;&#x9;&#x9;and (prevResourcePath != r.&quot;Resource Path&quot; OR prevResourceType != r.&quot;Resource Type&quot; OR prevRecurseChildStr != recurseChildStr))   )
&#x9;&#x9;&#x9;) 
&#x9;&#x9;then
&#x9;&#x9;&#x9;-- Debug message indicating the batch of privileges was committed
&#x9;&#x9;&#x9;IF (debug1 = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;IF (preview = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;set message = &apos;PREVIEWED BATCH: Change in: &apos;;
&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;set message = &apos;COMMIT BATCH: Change in: &apos;;
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;IF (prevResourcePath != r.&quot;Resource Path&quot;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;set message = message || &apos;&quot;Resource Path&quot; &apos;;
&#x9;&#x9;&#x9;&#x9;ELSEIF (prevResourceType != r.&quot;Resource Type&quot;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;set message = message || &apos;&quot;Resource Type&quot; &apos;;
&#x9;&#x9;&#x9;&#x9;ELSEIF (prevRecurseChildStr != recurseChildStr) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;set message = message || &apos;&quot;Recurse Child&quot; &apos;;
&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;set message = message || &apos;New Batch&apos;;
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;IF (project IS NOT NULL) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;set message = message || &apos;    [Project=&apos;||TRIM(NVL(project,&apos; &apos;))||&apos;]&apos;;
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;IF (subProject IS NOT NULL) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;set message = message || &apos;    [SubProject=&apos;||TRIM(NVL(subProject,&apos; &apos;))||&apos;]&apos;;
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;set message = message ||&apos;|&apos; || newline;

&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/addLogOutput(debug1Console, debug1CISLog, logOutput, moduleName||&apos; : &apos;||message, logOutput);
&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/addLogOutput(debug1Console, debug1CISLog, logOutput, &apos;|&apos;||newline, logOutput);
&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;IF (debug2RownumMin = 0 AND debug2RownumMax = 0) THEN
&#x9;&#x9;&#x9;&#x9;set debug2Modified = debug2;
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;IF (rownum &gt;= debug2RownumMin AND rownum &lt;= debug2RownumMax) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;set debug2Modified = debug2;
&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;set debug2Modified = &apos;N&apos;;
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;-- Perform update if NOT preview mode
&#x9;&#x9;&#x9;IF (preview = &apos;N&apos;) THEN

&#x9;&#x9;&#x9;&#x9;-- Search the bypass error string to determine if the resource type and path combination exists due to a previous NOT EXIST ERROR detected.
&#x9;&#x9;&#x9;&#x9;SET bypassErrorResourceFound = 0;
&#x9;&#x9;&#x9;&#x9;IF (resourceType IS NOT NULL AND resourcePath IS NOT NULL AND
&#x9;&#x9;&#x9;&#x9;&#x9; (POSITION(resourceType||&apos;::&apos;||resourcePath||&apos;|&apos; IN bypassErrorsStr1) &gt; 0 OR POSITION(resourceType||&apos;::&apos;||resourcePath||&apos;|&apos; IN bypassErrorsStr2) &gt; 0) ) 
&#x9;&#x9;&#x9;&#x9;THEN
&#x9;&#x9;&#x9;&#x9;&#x9;SET bypassErrorResourceFound = 1;
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;-- Perform the update as long as there was no error logged previously
&#x9;&#x9;&#x9;&#x9;IF (bypassErrorResourceFound = 0) THEN
&#x9;&#x9;&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Invoke the update resource privileges admin api
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/updateResourcePrivilegesV4(
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;debug2Modified,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;debug1Console,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;debug1CISLog,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;owner,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ownerDomain,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resourcePath,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resourceType,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;recurseChild,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;recurseDependencies,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;recurseDependents,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mode,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;privilegeStr,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;logOutput,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;result
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (result IS NOT NULL) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;raise ex value result || newline || &apos;ROW: &apos;||rowString;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;EXCEPTION
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;RAISE;
&#x9;&#x9;&#x9;&#x9;&#x9;END;

&#x9;&#x9;&#x9;&#x9;&#x9;/* mtinius (2014-10-28): added to automatically process READ-only acestor containers */
&#x9;&#x9;&#x9;&#x9;&#x9;-- Update the READ privileges for ancestor folders only
&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/updatePrivilegeReadFoldersV4(bypassErrors, Environment_Name, preview, debug1ReadOnly, debug1Console, debug1CISLog, debug2Modified, inModuleName, logOutput, privReadStr1, privReadStr2, privReadAppliedStr1, privReadAppliedStr2);
&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;-- Bypass error message for the batch
&#x9;&#x9;&#x9;&#x9;&#x9;IF (debug1 = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set message = &apos;BYPASS BATCH :: RESOURCE PATH NOT FOUND [&apos;||TRIM(NVL(resourceType,&apos;  &apos;))||&apos;::&apos;||TRIM(NVL(resourcePath,&apos;  &apos;))||&apos;]&apos;||&apos;|&apos;||newline;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/addLogOutput(debug1Console, debug1CISLog, logOutput, moduleName||&apos; : &apos;||message, logOutput);
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;-- Debug message indicating the batch of privileges was committed
&#x9;&#x9;&#x9;IF (debug1 = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;set message = &apos;BEGIN BATCH ::&apos;||&apos;|&apos;||newline;
&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/addLogOutput(debug1Console, debug1CISLog, logOutput, moduleName||&apos; : &apos;||message, logOutput);
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;set beginBatch = false;

&#x9;&#x9;&#x9;-- Initialize the privilege string for another row.
&#x9;&#x9;&#x9;set privilegeStr = null;
&#x9;&#x9;&#x9;set privilegeRec = null;
&#x9;&#x9;END IF;

&#x9;&#x9;/******************************
&#x9;&#x9; * Set Resource Information
&#x9;&#x9; ******************************/
&#x9;&#x9;-- Get the current resource path and type
&#x9;&#x9;set resourcePath = r.&quot;Resource Path&quot;;
&#x9;&#x9;set resourceType = r.&quot;Resource Type&quot;;

&#x9;&#x9;-- Validate recurse dependencies
&#x9;&#x9;set recurseDependenciesStr = &apos;N&apos;;
&#x9;&#x9;set recurseDependencies = 0;
&#x9;&#x9;IF (r.&quot;Recurse Dependencies&quot; IS NOT NULL) THEN
&#x9;&#x9;&#x9;IF (UPPER(r.&quot;Recurse Dependencies&quot;) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;set recurseDependencies = 1;
&#x9;&#x9;&#x9;&#x9;set recurseDependenciesStr = UPPER(TRIM(r.&quot;Recurse Dependencies&quot;));
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END IF;

&#x9;&#x9;-- Validate recurse dependents
&#x9;&#x9;set recurseDependentsStr = &apos;N&apos;;
&#x9;&#x9;set recurseDependents = 0;
&#x9;&#x9;IF (r.&quot;Recurse Dependents&quot; IS NOT NULL) THEN
&#x9;&#x9;&#x9;IF (UPPER(r.&quot;Recurse Dependents&quot;) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;set recurseDependents = 1;
&#x9;&#x9;&#x9;&#x9;set recurseDependentsStr = UPPER(TRIM(r.&quot;Recurse Dependents&quot;));
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END IF;

&#x9;&#x9;-- Set recurse child and mode
&#x9;&#x9;IF (recurseChildStr = &apos;N&apos;) THEN
&#x9;&#x9;&#x9;set recurseChild = 0;
&#x9;&#x9;&#x9;set mode = &apos;OVERWRITE_APPEND&apos;;
&#x9;&#x9;END IF;
&#x9;&#x9;IF (recurseChildStr = &apos;YM&apos;) THEN
&#x9;&#x9;&#x9;set recurseChild = 1;
&#x9;&#x9;&#x9;set mode = &apos;OVERWRITE_APPEND&apos;;
&#x9;&#x9;END IF;
&#x9;&#x9;IF (recurseChildStr = &apos;YC&apos;) THEN
&#x9;&#x9;&#x9;set recurseChild = 1;
&#x9;&#x9;&#x9;set mode = &apos;SET_EXACTLY&apos;;
&#x9;&#x9;END IF;

&#x9;&#x9;-- If the current owner IS NULL or empty then set to empty else set to current owner
&#x9;&#x9;IF (overrideOwner IS NOT NULL) THEN
&#x9;&#x9;&#x9;set owner = TRIM(NVL(overrideOwner,&apos;  &apos;));
&#x9;&#x9;ELSEIF (r.owner IS NULL OR LENGTH(TRIM(r.owner)) = 0) THEN
&#x9;&#x9;&#x9;set owner = &apos;&apos;;
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;set owner = r.owner;
&#x9;&#x9;END IF;

&#x9;&#x9;-- If the current owner domain IS NULL or empty then set to empty else set to current owner domain
&#x9;&#x9;IF (overrideOwnerDomain IS NOT NULL) THEN
&#x9;&#x9;&#x9;set ownerDomain = TRIM(NVL(overrideOwnerDomain,&apos;  &apos;));
&#x9;&#x9;ELSEIF (r.&quot;Owner Domain&quot; IS NULL OR LENGTH(TRIM(r.&quot;Owner Domain&quot;)) = 0) THEN
&#x9;&#x9;&#x9;set ownerDomain = &apos;&apos;;
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;set ownerDomain = r.&quot;Owner Domain&quot;;
&#x9;&#x9;END IF;

&#x9;&#x9;/******************************
&#x9;&#x9; * Set Privileges
&#x9;&#x9; ******************************/
&#x9;&#x9;-- Set domain name
&#x9;&#x9;IF (forceDomainAsComposite IS NOT NULL AND UPPER(forceDomainAsComposite) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;set domainName = &apos;composite&apos;;
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;set domainName = r.&quot;Domain&quot;;
&#x9;&#x9;END IF;
&#x9;&#x9;IF (domainName IS NULL OR LENGTH(domainName) = 0) THEN
&#x9;&#x9;&#x9;set domainName = &apos;&apos;;
&#x9;&#x9;END IF;
&#x9;&#x9;-- Set name
&#x9;&#x9;set name = r.name;
&#x9;&#x9;IF (name IS NULL OR LENGTH(name) = 0) THEN
&#x9;&#x9;&#x9;set name = &apos;&apos;;
&#x9;&#x9;END IF;
&#x9;&#x9;-- Set name type
&#x9;&#x9;set nameType = r.&quot;Name Type&quot;;
&#x9;&#x9;IF (nameType IS NULL OR LENGTH(nameType) = 0) THEN
&#x9;&#x9;&#x9;set nameType = &apos;&apos;;
&#x9;&#x9;END IF;
&#x9;&#x9;-- Set the privilege list
&#x9;&#x9;set privilegeList = &apos;&apos;;
&#x9;&#x9;set privilegeListDisplay = &apos;&apos;;

&#x9;&#x9;IF (r.R IS NOT NULL AND (TRIM(r.R) = &apos;X&apos; OR TRIM(r.R) = &apos;Y&apos;)) THEN 
&#x9;&#x9;&#x9;set privilegeList = privilegeList || &apos;READ &apos;;    
&#x9;&#x9;&#x9;set privilegeListDisplay = privilegeListDisplay || &apos;R &apos;;   
&#x9;&#x9;END IF;
&#x9;&#x9;IF (r.W IS NOT NULL AND (TRIM(r.W) = &apos;X&apos; OR TRIM(r.W) = &apos;Y&apos;)) THEN 
&#x9;&#x9;&#x9;set privilegeList = privilegeList || &apos;WRITE &apos;;   
&#x9;&#x9;&#x9;set privilegeListDisplay = privilegeListDisplay || &apos;W &apos;;   
&#x9;&#x9;END IF;
&#x9;&#x9;IF (r.E IS NOT NULL AND (TRIM(r.E) = &apos;X&apos; OR TRIM(r.E) = &apos;Y&apos;)) THEN 
&#x9;&#x9;&#x9;set privilegeList = privilegeList || &apos;EXECUTE &apos;; 
&#x9;&#x9;&#x9;set privilegeListDisplay = privilegeListDisplay || &apos;E &apos;;   
&#x9;&#x9;END IF;
&#x9;&#x9;IF (r.S IS NOT NULL AND (TRIM(r.S) = &apos;X&apos; OR TRIM(r.S) = &apos;Y&apos;)) THEN 
&#x9;&#x9;&#x9;set privilegeList = privilegeList || &apos;SELECT &apos;;  
&#x9;&#x9;&#x9;set privilegeListDisplay = privilegeListDisplay || &apos;S &apos;;   
&#x9;&#x9;END IF;
&#x9;&#x9;IF (r.U IS NOT NULL AND (TRIM(r.U) = &apos;X&apos; OR TRIM(r.U) = &apos;Y&apos;)) THEN 
&#x9;&#x9;&#x9;set privilegeList = privilegeList || &apos;UPDATE &apos;;  
&#x9;&#x9;&#x9;set privilegeListDisplay = privilegeListDisplay || &apos;U &apos;;   
&#x9;&#x9;END IF;
&#x9;&#x9;IF (r.I IS NOT NULL AND (TRIM(r.I) = &apos;X&apos; OR TRIM(r.I) = &apos;Y&apos;)) THEN 
&#x9;&#x9;&#x9;set privilegeList = privilegeList || &apos;INSERT &apos;;  
&#x9;&#x9;&#x9;set privilegeListDisplay = privilegeListDisplay || &apos;I &apos;;   
&#x9;&#x9;END IF;
&#x9;&#x9;IF (r.D IS NOT NULL AND (TRIM(r.D) = &apos;X&apos; OR TRIM(r.D) = &apos;Y&apos;)) THEN 
&#x9;&#x9;&#x9;set privilegeList = privilegeList || &apos;DELETE &apos;;  
&#x9;&#x9;&#x9;set privilegeListDisplay = privilegeListDisplay || &apos;D &apos;;   
&#x9;&#x9;END IF;
&#x9;&#x9;IF (r.G IS NOT NULL AND (TRIM(r.G) = &apos;X&apos; OR TRIM(r.G) = &apos;Y&apos;)) THEN
&#x9;&#x9;&#x9;set privilegeList = privilegeList || &apos;GRANT &apos;;   
&#x9;&#x9;&#x9;set privilegeListDisplay = privilegeListDisplay || &apos;G &apos;;   
&#x9;&#x9;END IF;
&#x9;&#x9;set privilegeList = TRIM(privilegeList);
&#x9;&#x9;set privilegeListDisplay = TRIM(privilegeListDisplay);
&#x9;&#x9;IF (LENGTH(privilegeList) = 0) THEN
&#x9;&#x9;&#x9;set privilegeList = &apos;NONE&apos;;
&#x9;&#x9;&#x9;set privilegeListDisplay = &apos;NONE&apos;;   
&#x9;&#x9;END IF;

&#x9;&#x9;-- Search the bypass error string to determine if the resource type and path combination exists due to a previous NOT EXIST ERROR detected.
&#x9;&#x9;SET bypassErrorResourceFound = 0;
&#x9;&#x9;IF (resourceType IS NOT NULL AND resourcePath IS NOT NULL AND
&#x9;&#x9;&#x9; (POSITION(resourceType||&apos;::&apos;||resourcePath||&apos;|&apos; IN bypassErrorsStr1) &gt; 0 OR POSITION(resourceType||&apos;::&apos;||resourcePath||&apos;|&apos; IN bypassErrorsStr2) &gt; 0) ) 
&#x9;&#x9;THEN
&#x9;&#x9;&#x9;SET bypassErrorResourceFound = 1;
&#x9;&#x9;END IF;

&#x9;&#x9;-- Set status for this row
&#x9;&#x9;IF (bypassErrorResourceFound = 1) THEN
&#x9;&#x9;&#x9;set status = &apos;SKIPPED: [BYPASS **ERROR**]&apos;;
&#x9;&#x9;END IF;

&#x9;&#x9;/**************************************
&#x9;&#x9; * BEGIN REVOKE ALL PRIVILEGES SECTION
&#x9;&#x9; **************************************/
&#x9;&#x9;set revokeAllLogOutput = &apos;&apos;;
&#x9;&#x9;-- Set the privilege string values for revoking all privileges as long as there was no error logged previously
&#x9;&#x9;IF (revokeAll = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;IF (bypassErrorResourceFound = 0) THEN
/*&#x9;&#x9;   &#x9;getResourcePrivilegesV2()
&#x9;&#x9;&#x9;&#x9;IN resourcePath &#x9;&#x9;&#x9;&#x9;/lib/resource/ResourceDefs.ResourcePath, &lt;-- resourcePath
&#x9;&#x9;&#x9;&#x9;IN resourceType &#x9;&#x9;&#x9;&#x9;/lib/resource/ResourceDefs.ResourceType, &lt;-- resourceType
&#x9;&#x9;&#x9;&#x9;IN nameTypeFilter &#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;--[optional]
&#x9;&#x9;&#x9;&#x9;IN domainFilter&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR, &#x9;--[optional]
&#x9;&#x9;&#x9;&#x9;IN privilegeEntryType&#x9;&#x9;&#x9;VARCHAR,&#x9;--[mandatory:  privs, combinedPrivs, inheritedPrivs] 1 of the selection list.  &lt;-- &apos;privs&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;&#x9;   privs=the actual privileges. 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;&#x9;   combinedPrivs=Combination of actual privileges and inherited privileges.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;&#x9;   inheritedPrivs=Inherited privileges.
&#x9;&#x9;&#x9;&#x9;IN includeNameEqualFilter &#x9;&#x9;LONGVARCHAR,--[optional]
&#x9;&#x9;&#x9;&#x9;IN includeNameLikeFilter &#x9;&#x9;LONGVARCHAR,--[optional]
&#x9;&#x9;&#x9;&#x9;IN excludeNameNotEqualFilter&#x9;LONGVARCHAR,--[optional] &lt;-- revokeUsersIgnoreList
&#x9;&#x9;&#x9;&#x9;IN excludeNameNotLikeFilter&#x9;&#x9;LONGVARCHAR,--[optional]
&#x9;&#x9;&#x9;&#x9;IN includePrivsEqualFilter&#x9;&#x9;VARCHAR, &#x9;--[optional]
&#x9;&#x9;&#x9;&#x9;IN includePrivsLikeFilter&#x9;&#x9;VARCHAR, &#x9;--[optional]
&#x9;&#x9;&#x9;&#x9;IN excludePrivsNotEqualFilter&#x9;VARCHAR, &#x9;--[optional] &lt;-- &apos;NONE,READ&apos;
&#x9;&#x9;&#x9;&#x9;IN excludePrivsNotLikeFilter&#x9;VARCHAR, &#x9;--[optional]
&#x9;&#x9;&#x9;&#x9;IN includeColumnPrivs&#x9;&#x9;&#x9;BIT,&#x9; &#x9;--[optional] &lt;-- 0
&#x9;&#x9;&#x9;&#x9;IN debug&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1), &#x9;--[optional] &lt;-- debug2
&#x9;&#x9;&#x9;&#x9;OUT result &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CURSOR ResultType
*/
&#x9;&#x9;&#x9;  BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;&#x9;&#x9;/*
&#x9;&#x9;&#x9;&#x9;&#x9;Get Lineage for Published Resource Column
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If resourcePath in /services/databases and resourceType = COLUMN then get the lineage to the view immediately publishing to the database.  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;This is where the actual privileges are set
&#x9;&#x9;&#x9;&#x9;*/
&#x9;&#x9;&#x9;&#x9;SET getPrivsResourcePath = resourcePath;
&#x9;&#x9;&#x9;&#x9;IF (POSITION(&apos;/services/databases/&apos; IN getPrivsResourcePath) &gt; 0 AND resourceType = &apos;COLUMN&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;-- Get the parent path
&#x9;&#x9;&#x9;&#x9;&#x9;SET resourceName = null;
&#x9;&#x9;&#x9;&#x9;&#x9;SET parentPath = null;
&#x9;&#x9;&#x9;&#x9;&#x9;SET pos = INSTR(getPrivsResourcePath, &apos;/&apos;, -1, 1);
&#x9;&#x9;&#x9;&#x9;&#x9;IF (pos &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET resourceName = SUBSTRING(getPrivsResourcePath, pos+1);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET parentPath = SUBSTRING(getPrivsResourcePath, 1, pos-1);
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;-- Retrieve the first level depth resource for the published LINK
&#x9;&#x9;&#x9;&#x9;&#x9;FOR r AS select * from /shared/ASAssets/Utilities/repository/getUsedResourcesCursor(parentPath, &apos;LINK&apos;) DO
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set getPrivsResourcePath = r.resourcePath||&apos;/&apos;||resourceName;
&#x9;&#x9;&#x9;&#x9;&#x9;END FOR;
&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;set j = 1;
&#x9;&#x9;&#x9;&#x9;-- Return the list of privileges for this resources where privs != &apos;NONE AND privs != &apos;READ&apos;
&#x9;&#x9;&#x9;&#x9;FOR p AS 
&#x9;&#x9;&#x9;&#x9;&#x9;-- 2016-07-11 (mtinius): Created a new procedure to allow passing in the new privilegeEntryType=priv so that the sorting is only done on explicit privileges and not combinedPrivs.
&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;This eliminates all of the inherited privileges which we don&apos;t care about.   This equates to fewer privilege rows to loop through. 
&#x9;&#x9;&#x9;&#x9;&#x9;SELECT * FROM /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getResourcePrivileges(
 &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;getPrivsResourcePath,resourceType,null,null,&apos;privs&apos;,null,null,revokeUsersIgnoreList,null,null,null,&apos;NONE,READ&apos;,null,0,debug2)
&#x9;&#x9;&#x9;&#x9;DO
&#x9;&#x9;&#x9;&#x9;&#x9;-- Get the list of inherited privielges to report
&#x9;&#x9;&#x9;&#x9;&#x9;set actualPrivilegeList = &apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;-- 2016-06-25 (mtinius): Added to only look for actual privileges that are set.  Inherited Privileges cannot be explicitly set or changed.
&#x9;&#x9;&#x9;&#x9;&#x9;IF (p.p_R IS NOT NULL AND p.p_R = 1) THEN set actualPrivilegeList = actualPrivilegeList || &apos;R &apos;; END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;IF (p.p_W IS NOT NULL AND p.p_W = 1) THEN set actualPrivilegeList = actualPrivilegeList || &apos;W &apos;; END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;IF (p.p_E IS NOT NULL AND p.p_E = 1) THEN set actualPrivilegeList = actualPrivilegeList || &apos;E &apos;; END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;IF (p.p_S IS NOT NULL AND p.p_S = 1) THEN set actualPrivilegeList = actualPrivilegeList || &apos;S &apos;; END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;IF (p.p_U IS NOT NULL AND p.p_U = 1) THEN set actualPrivilegeList = actualPrivilegeList || &apos;U &apos;; END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;IF (p.p_I IS NOT NULL AND p.p_I = 1) THEN set actualPrivilegeList = actualPrivilegeList || &apos;I &apos;; END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;IF (p.p_D IS NOT NULL AND p.p_D = 1) THEN set actualPrivilegeList = actualPrivilegeList || &apos;D &apos;; END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;IF (p.p_G IS NOT NULL AND p.p_G = 1) THEN set actualPrivilegeList = actualPrivilegeList || &apos;G &apos;; END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;IF (LENGTH(actualPrivilegeList) = 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set actualPrivilegeList = &apos;NONE&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;-- Report the name, nameType, domain and inherited privileges that are being revoked.
&#x9;&#x9;&#x9;&#x9;&#x9;IF (LENGTH(revokeAllLogOutput) = 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set revokeAllLogOutput = LPAD(&apos;REVOKE ALL: &apos;,(LENGTH(moduleName||&apos; : &apos;)+27));
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;set revokeAllLogOutput = revokeAllLogOutput || &apos;(&apos;||j||&apos;. &apos;||TRIM(NVL(p.name,&apos;  &apos;))||&apos;/&apos;||TRIM(NVL(p.nameType,&apos;  &apos;))||&apos;/&apos;||TRIM(NVL(p.&quot;domain&quot;,&apos;  &apos;))||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;/PRIVILEGES=&apos;||TRIM(actualPrivilegeList)||&apos;), &apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;-- Increment the string for each name to be revoked that currently has privileges set
&#x9;&#x9;&#x9;&#x9;&#x9;IF (privilegeStr IS NULL) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET privilegeStr = &apos;&apos;;&#x9;-- initialize the string
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;set privilegeStr = privilegeStr || TRIM(NVL(p.&quot;domain&quot;,&apos;  &apos;)) ||&apos;::&apos;|| TRIM(NVL(p.name,&apos;  &apos;)) ||&apos;::&apos;|| TRIM(NVL(p.nameType,&apos;  &apos;)) ||&apos;::&apos;|| TRIM(NVL(revokeAllDefaultPrivilege,&apos;  &apos;)) || &apos;|&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;set privRows = privRows + 1;
&#x9;&#x9;&#x9;&#x9;&#x9;IF (debug2Modified = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName||&apos;::  privRows=&apos;||CAST(privRows AS VARCHAR)||&apos;  Revoke privilegeStr=[&apos;||TRIM(NVL(privilegeStr,&apos;  &apos;))||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;set j = j + 1;
&#x9;&#x9;&#x9;&#x9;END FOR;
&#x9;&#x9;&#x9;&#x9;IF (LENGTH(revokeAllLogOutput) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;set revokeAllLogOutput = TRIM(revokeAllLogOutput);
&#x9;&#x9;&#x9;&#x9;&#x9;set revokeAllLogOutput = SUBSTRING(revokeAllLogOutput, 1, LENGTH(revokeAllLogOutput) -1);
&#x9;&#x9;&#x9;&#x9;&#x9;set revokeAllLogOutput = revokeAllLogOutput||&apos;|&apos;||newline;
&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;  EXCEPTION
&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;raise ex value CAST(CURRENT_EXCEPTION.TRACE AS LONGVARCHAR);
&#x9;&#x9;&#x9;  END;
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;-- Debug message indicating the batch of privileges was committed
&#x9;&#x9;&#x9;&#x9;IF (debug1 = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;set message = &apos;Status=SKIPPED: [BYPASS **ERROR**]  REVOKE ALL :: RESOURCE PATH NOT FOUND [&apos;||TRIM(NVL(resourceType,&apos;  &apos;))||&apos;::&apos;||TRIM(NVL(resourcePath,&apos;  &apos;))||&apos;]&apos;||&apos;|&apos;||newline;
&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/addLogOutput(debug1Console, debug1CISLog, logOutput, moduleName||&apos; : &apos;||message, logOutput);
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END IF;
&#x9;&#x9;/**************************************
&#x9;&#x9; * END REVOKE ALL PRIVILEGES SECTION
&#x9;&#x9; **************************************/

&#x9;&#x9;-- Set the privilege string values for the true settings for this line
&#x9;&#x9;set privilegeRec.name = name;
&#x9;&#x9;set privilegeRec.nameType = nameType;
&#x9;&#x9;set privilegeRec.domainName = domainName;
&#x9;&#x9;set privilegeRec.privilegeList = privilegeList;
&#x9;&#x9;set privRows = privRows + 1;

&#x9;&#x9;IF (privilegeStr IS NULL) THEN
&#x9;&#x9;&#x9;SET privilegeStr = &apos;&apos;;&#x9;-- initialize the string
&#x9;&#x9;END IF;
&#x9;&#x9;set privilegeStr = privilegeStr || TRIM(NVL(domainName,&apos;  &apos;)) ||&apos;::&apos;|| TRIM(NVL(name,&apos;  &apos;)) ||&apos;::&apos;|| TRIM(NVL(nameType,&apos;  &apos;)) ||&apos;::&apos;|| TRIM(NVL(privilegeList,&apos;  &apos;)) || &apos;|&apos;;
&#x9;&#x9;IF (debug2Modified = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;call print(moduleName||&apos;::  privRows=&apos;||CAST(privRows AS VARCHAR)||&apos;  Actual privilegeStr=[&apos;||TRIM(NVL(privilegeStr,&apos;  &apos;))||&apos;]&apos;);
&#x9;&#x9;END IF;

&#x9;&#x9;/*********************************
&#x9;&#x9; * BEGIN Update Privilege Category
&#x9;&#x9; *********************************/
&#x9;&#x9;-- Capture the privileges for READ only on ancestor folders
&#x9;&#x9;-- Initialize variables
&#x9;&#x9;SET resourceTypeTmp = &apos;CONTAINER&apos;;
&#x9;&#x9;SET userDomain = null;
&#x9;&#x9;SET denyNameBool = false;

&#x9;&#x9;-- Initialize the previous already applied privilege string
&#x9;&#x9;IF (privReadStr1 IS NULL) THEN
&#x9;&#x9;&#x9;SET privReadStr1 = &apos;&apos;;
&#x9;&#x9;END IF;
&#x9;&#x9;IF (privReadStr2 IS NULL) THEN
&#x9;&#x9;&#x9;SET privReadStr2 = &apos;&apos;;
&#x9;&#x9;END IF;

&#x9;&#x9;-- Determine IF the current group/domain is in the deny list
&#x9;&#x9;IF (POSITION(name||&apos;/&apos;||domainName IN denyReadPrivilegesNameList) &gt; 0) THEN
&#x9;&#x9;&#x9;set denyNameBool = true;
&#x9;&#x9;END IF;

/* 07/11/2016 mtinius - This section of code is commented out because the variables never get used even though they are being set.
&#x9;&#x9;-- Construct the explicitly set privilege string
&#x9;&#x9;SET privExplicitStr = TRIM(NVL(resourcePath,&apos;  &apos;))||&apos;::&apos;||TRIM(NVL(resourceType,&apos;  &apos;))||&apos;::&apos;||TRIM(NVL(name,&apos;  &apos;))||&apos;::&apos;||TRIM(NVL(nameType,&apos;  &apos;))||&apos;::&apos;||TRIM(NVL(domainName,&apos;  &apos;))||&apos;::&apos;||TRIM(NVL(privilegeList,&apos;  &apos;))||&apos;::&apos;||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;TRIM(NVL(owner,&apos;  &apos;))||&apos;::&apos;||TRIM(NVL(ownerDomain,&apos;  &apos;))||&apos;::&apos;||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;TRIM(NVL(CAST(recurseDependencies AS VARCHAR),&apos;  &apos;))||&apos;::&apos;||TRIM(NVL(CAST(recurseDependents AS VARCHAR),&apos;  &apos;))||&apos;::&apos;||TRIM(NVL(CAST(recurseChild AS VARCHAR),&apos;  &apos;))||&apos;::&apos;||TRIM(NVL(mode,&apos;  &apos;))||&apos;|&apos;;

&#x9;&#x9;-- Search for this current unique entry in the &quot;privilege explicitly set&quot; list.  (Already applied list.)
&#x9;&#x9;SET privRowFound = FALSE;
&#x9;&#x9;IF (POSITION(privExplicitStr IN privExplicitlySetStr1) &gt; 0 OR POSITION(privExplicitStr IN privExplicitlySetStr2) &gt; 0) THEN
&#x9;&#x9;&#x9;SET privRowFound = TRUE;
&#x9;&#x9;END IF;
&#x9;&#x9;-- Add the row to the privilege vector since it was not found in the &quot;privilege explicitly set&quot; list.  (Explicitly applied list.)
&#x9;&#x9;IF (NOT privRowFound) THEN
&#x9;&#x9;&#x9;IF (LENGTH(privExplicitlySetStr1) + LENGTH(privExplicitStr) &lt; LONGVARCHARlen) THEN
&#x9;&#x9;&#x9;&#x9;SET privExplicitlySetStr1 = privExplicitlySetStr1 || privExplicitStr;
&#x9;&#x9;&#x9;ELSEIF (LENGTH(privExplicitlySetStr2) + LENGTH(privExplicitStr) &lt; LONGVARCHARlen) THEN
&#x9;&#x9;&#x9;&#x9;SET privExplicitlySetStr2 = privExplicitlySetStr2 || privExplicitStr;
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;RAISE ex VALUE &apos;The length of &quot;privExplicitlySetStr1&quot; and &quot;privExplicitlySetStr2&quot; has been exceeded.&apos;;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END IF;
*/
&#x9;&#x9;-- If the current name/domain is not denied then process it
&#x9;&#x9;IF (NOT denyNameBool) THEN
&#x9;&#x9;&#x9;-- Get the parent path
&#x9;&#x9;&#x9;SET resourceName = null;
&#x9;&#x9;&#x9;SET parentPath = null;
&#x9;&#x9;&#x9;SET pos = INSTR(resourcePath, &apos;/&apos;, -1, 1);
&#x9;&#x9;&#x9;IF (pos &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;SET resourceName = SUBSTRING(resourcePath, pos+1);
&#x9;&#x9;&#x9;&#x9;SET parentPath = SUBSTRING(resourcePath, 1, pos-1);
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;-- If the origial path is a COLUMN type THEN get the parent (container) of the parent (table)
&#x9;&#x9;&#x9;IF (resourceType = &apos;COLUMN&apos;) THEN
&#x9;&#x9;&#x9;&#x9;SET resourceName = null;
&#x9;&#x9;&#x9;&#x9;SET pos = INSTR(parentPath, &apos;/&apos;, -1, 1);
&#x9;&#x9;&#x9;&#x9;IF (pos &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;SET resourceName = SUBSTRING(parentPath, pos+1);
&#x9;&#x9;&#x9;&#x9;&#x9;SET parentPath = SUBSTRING(parentPath, 1, pos-1);
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;WHILE (parentPath IS NOT NULL AND LENGTH(parentPath) &gt; 0) DO
&#x9;&#x9;&#x9;&#x9;-- Set the parent path to a CONTAINER type by default
&#x9;&#x9;&#x9;&#x9;SET resourceTypeTmp = &apos;CONTAINER&apos;;
&#x9;&#x9;&#x9;&#x9;-- If the parent path is in the &quot;/services/databases&quot; path then get the grand parent path in order to determine if the parent path is a DATA_SOURCE
&#x9;&#x9;&#x9;&#x9;IF (POSITION(&apos;/services/databases/&apos; IN parentPath) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;-- If the grandparentPath=/services/databases then this is a DATA_SOURCE
&#x9;&#x9;&#x9;&#x9;&#x9;SET resourceName = null;
&#x9;&#x9;&#x9;&#x9;&#x9;SET grandparentPath = null;
&#x9;&#x9;&#x9;&#x9;&#x9;SET pos = INSTR(parentPath, &apos;/&apos;, -1, 1);
&#x9;&#x9;&#x9;&#x9;&#x9;IF (pos &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET resourceName = SUBSTRING(parentPath, pos+1);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET grandparentPath = SUBSTRING(parentPath, 1, pos-1);
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;IF (grandparentPath = &apos;/services/databases&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set resourceTypeTmp = &apos;DATA_SOURCE&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;-- Check to see IF the parent path exists before proceeding
&#x9;&#x9;&#x9;&#x9;IF (POSITION(&apos;RESFOUND:&apos;||parentPath||&apos;,&apos; IN parentPaths) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;SET resourceExists = true;
&#x9;&#x9;&#x9;&#x9;ELSEIF (POSITION(&apos;NOTFOUND:&apos;||parentPath||&apos;,&apos; IN parentPaths) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;SET resourceExists = false;
&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;call /lib/resource/ResourceExists(parentPath, resourceTypeTmp, null, resourceExists);
&#x9;&#x9;&#x9;&#x9;&#x9;IF (resourceExists) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET parentPaths = parentPaths || &apos;RESFOUND:&apos;||parentPath||&apos;,&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET parentPaths = parentPaths || &apos;NOTFOUND:&apos;||parentPath||&apos;,&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;-- Log the resource not exist issue
&#x9;&#x9;&#x9;&#x9;IF (NOT resourceExists) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;IF (bypassErrors = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (debug1 = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET message = &apos;Status=SKIPPED: [BYPASS **ERROR**]  PARENT PATH NOT FOUND :: ParentPath=&apos;||TRIM(NVL(parentPath,&apos;  &apos;))||&apos;|&apos;||newline;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/addLogOutput(debug1Console, debug1CISLog, logOutput, &apos;_________&apos;||moduleName||&apos; : &apos;||message, logOutput);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET message = &apos;Status=EXCEPTION: [BYPASS=OFF **ERROR**]  PARENT PATH NOT FOUND :: ParentPath=&apos;||TRIM(NVL(parentPath,&apos;  &apos;))||&apos;|&apos;||newline;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;RAISE ex VALUE message;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;CASE 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN POSITION(&apos;/services/databases/&apos; IN parentPath) &gt; 0 THEN 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET category = 1;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (parentPath = &apos;/services/databases&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET category = 0;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN POSITION(&apos;/services/webservices/&apos; IN parentPath) &gt; 0 THEN 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET category = 2;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (parentPath = &apos;/services/webservices&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET category = 0;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN POSITION(&apos;/shared/&apos; IN parentPath) &gt; 0 THEN 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET category = 3;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (parentPath = &apos;/shared&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET category = 0;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN POSITION(&apos;/policy/cache/&apos; IN parentPath) &gt; 0 THEN 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET category = 4;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (parentPath = &apos;/policy/cache&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET category = 0;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN POSITION(&apos;/policy/security/&apos; IN parentPath) &gt; 0 THEN 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET category = 5;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (parentPath = &apos;/policy/security&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET category = 0;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN POSITION(&apos;/security/rowlevel/filters/&apos; IN parentPath) &gt; 0 THEN 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET category = 6;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (parentPath = &apos;/security/rowlevel/filters&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET category = 0;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN POSITION(&apos;/users/composite/&apos; IN parentPath) &gt; 0 THEN 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET category = 7;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (parentPath = &apos;/users/composite&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET category = 0;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN POSITION(&apos;/users/&apos; IN parentPath) &gt; 0 AND POSITION(&apos;/users/composite/&apos; IN parentPath) = 0 THEN 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET category = 8;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (userDomain IS NULL) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Get the user domain in the string - /users/ldap/nbkid
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set pos = INSTR(parentPath, &apos;/&apos;, 1, 2);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set pos1 = INSTR(parentPath, &apos;/&apos;, 1, 3);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (pos &gt; 0 and pos1 = 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set userDomain = TRIM(SUBSTRING(parentPath, pos+1));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;elseif (pos &gt; 0 and pos1 &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set userDomain = TRIM(SUBSTRING(parentPath, pos+1, pos1-pos-1));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set userDomain = &apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--call print(&apos;userDomain=&apos;||userDomain);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (parentPath = &apos;/users/&apos;||userDomain) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET category = 0;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET category = 0;
&#x9;&#x9;&#x9;&#x9;&#x9;END CASE;
&#x9;&#x9;&#x9;&#x9;&#x9;IF (category &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET privReadStr = TRIM(NVL(parentPath,&apos;  &apos;))||&apos;::&apos;||resourceTypeTmp||&apos;::&apos;||TRIM(NVL(name,&apos;  &apos;))||&apos;::&apos;||TRIM(NVL(nameType,&apos;  &apos;))||&apos;::&apos;||TRIM(NVL(domainName,&apos;  &apos;))||&apos;::&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- recurseDependencies :: recurseDependents&#x9;:: recurseChild ::&#x9;   mode&#x9;&#x9;  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET trailerString = &apos;READ&apos;||&apos;::&apos;||TRIM(NVL(owner,&apos;  &apos;))||&apos;::&apos;||TRIM(NVL(ownerDomain,&apos;  &apos;))||&apos;::&apos;||&apos;0&apos;||&#x9;  &apos;::&apos;||&#x9;&apos;0&apos;||&#x9;   &apos;::&apos;||&apos;0&apos;||&#x9;   &apos;::&apos;||&apos;OVERWRITE_APPEND&apos;||&apos;|&apos;;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Search for this current unique entry in the &quot;privilege read applied&quot; list.  (Already applied list.)
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET privRowFound = FALSE;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (POSITION(privReadStr IN privReadStr1) &gt; 0 OR POSITION(privReadStr IN privReadStr2) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET privRowFound = TRUE;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Add the row to the privilege string since it was not found in the &quot;privilege read applied&quot; list.  (Already applied list.)
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (NOT privRowFound) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (LENGTH(privReadStr1) + LENGTH(privReadStr) + LENGTH(trailerString) &lt; LONGVARCHARlen) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET privReadStr1 = privReadStr1 || privReadStr || trailerString;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (debug2Modified = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : Added path to privReadStr1=&apos;||privReadStr1);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSEIF (LENGTH(privReadStr2) + LENGTH(privReadStr) + LENGTH(trailerString) &lt; LONGVARCHARlen) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET privReadStr2 = privReadStr2 || privReadStr || trailerString;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (debug2Modified = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : Added path to privReadStr2=&apos;||privReadStr2);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;RAISE ex VALUE &apos;The length of &quot;privReadStr1&quot; and &quot;privReadStr2&quot; has been exceeded.&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;SET resourceName = null;
&#x9;&#x9;&#x9;&#x9;SET pos = INSTR(parentPath, &apos;/&apos;, -1, 1);
&#x9;&#x9;&#x9;&#x9;IF (pos &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;SET resourceName = SUBSTRING(parentPath, pos+1);
&#x9;&#x9;&#x9;&#x9;&#x9;SET parentPath = SUBSTRING(parentPath, 1, pos-1);
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;END WHILE;
&#x9;&#x9;END IF;
&#x9;&#x9;/******************************
&#x9;&#x9; * END Update Privilege Category
&#x9;&#x9; ******************************/

&#x9;&#x9;/******************************
&#x9;&#x9; * Set Debug Information
&#x9;&#x9; ******************************/
&#x9;&#x9;-- Create the row string to display
&#x9;&#x9;set rowString = &apos;[&apos;||CAST(rowsProcessed AS VARCHAR)||&apos; of &apos;||CAST(totalPrivsToApply AS VARCHAR)||&apos;]  Status=&apos;||status||&apos;  Row=&apos;||TRIM(NVL(CAST(rownum AS VARCHAR),&apos; &apos;))||&apos;  PrivRows=&apos;||TRIM(NVL(CAST(privRows AS VARCHAR),&apos; &apos;))||
&#x9;&#x9;&#x9;&apos; SheetRow=&apos;||TRIM(NVL(CAST(r.sheetRownum AS VARCHAR),&apos; &apos;))||&apos; Sheet=&apos;||TRIM(NVL(r.sheetName,&apos; &apos;))||
&#x9;&#x9;&#x9;&apos; ResPath=&apos;||TRIM(NVL(resourcePath,&apos; &apos;)) || &apos; ResType=&apos;||TRIM(NVL(resourceType,&apos; &apos;)) ||
&#x9;&#x9;&#x9;&apos; Dependencies=&apos;||TRIM(NVL(recurseDependenciesStr,&apos; &apos;)) || &apos; Dependents=&apos;||TRIM(NVL(recurseDependentsStr,&apos; &apos;)) || &apos; Child=&apos;||TRIM(NVL(recurseChildStr,&apos; &apos;))  || 
&#x9;&#x9;&#x9;&apos; mode=&apos;|| TRIM(NVL(mode,&apos; &apos;)) ||  &apos; RevokeAll=&apos;|| TRIM(NVL(revokeAll,&apos; &apos;)) ||
&#x9;&#x9;&#x9;&apos; Name=&apos;||TRIM(NVL(privilegeRec.name,&apos; &apos;)) || &apos; Type=&apos;||TRIM(NVL(privilegeRec.nameType,&apos; &apos;)) || 
&#x9;&#x9;&#x9;&apos; Domain=&apos;||TRIM(NVL(privilegeRec.domainName,&apos; &apos;)) || &apos; EnvType=&apos;||TRIM(NVL(r.&quot;Env Type&quot;,&apos; &apos;)) || 
&#x9;&#x9;&#x9;&apos; Privileges=&apos;||TRIM(NVL(privilegeListDisplay,&apos; &apos;)) || &apos; Owner=&apos;||TRIM(NVL(owner,&apos; &apos;)) || &apos; OwnerDomain=&apos;||TRIM(NVL(ownerDomain,&apos; &apos;))||
&#x9;&#x9;&#x9;&apos;|&apos;||newline;

&#x9;&#x9;IF (debug1 = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/addLogOutput(debug1Console, debug1CISLog, logOutput, moduleName||&apos; : &apos;||rowString, logOutput);
&#x9;&#x9;END IF;
&#x9;&#x9;IF (debug1RevokeAll = &apos;Y&apos; AND LENGTH(revokeAllLogOutput) &gt; 0) THEN
&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/addLogOutput(debug1Console, debug1CISLog, logOutput, moduleName||&apos; : &apos;||revokeAllLogOutput, logOutput);
&#x9;&#x9;END IF;
&#x9;
&#x9;&#x9;-- If Batch Privileges is &quot;OFF&quot; then process each row as it occurs.
&#x9;&#x9;IF (batchPrivileges = 0 and
&#x9;&#x9;&#x9;resourcePath IS NOT NULL AND resourceType IS NOT NULL)
&#x9;&#x9;then
&#x9;&#x9;&#x9;IF (preview = &apos;N&apos;) THEN
&#x9;&#x9;&#x9;&#x9;IF (debug2RownumMin = 0 AND debug2RownumMax = 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;set debug2Modified = debug2;
&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;IF (rownum &gt;= debug2RownumMin AND rownum &lt;= debug2RownumMax) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set debug2Modified = debug2;
&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set debug2Modified = &apos;N&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;-- Search the bypass error string to determine if the resource type and path combination exists due to a previous NOT EXIST ERROR detected.
&#x9;&#x9;&#x9;&#x9;SET bypassErrorResourceFound = 0;
&#x9;&#x9;&#x9;&#x9;IF (resourceType IS NOT NULL AND resourcePath IS NOT NULL AND
&#x9;&#x9;&#x9;&#x9;&#x9; (POSITION(resourceType||&apos;::&apos;||resourcePath||&apos;|&apos; IN bypassErrorsStr1) &gt; 0 OR POSITION(resourceType||&apos;::&apos;||resourcePath||&apos;|&apos; IN bypassErrorsStr2) &gt; 0) ) 
&#x9;&#x9;&#x9;&#x9;THEN
&#x9;&#x9;&#x9;&#x9;&#x9;SET bypassErrorResourceFound = 1;
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;-- Perform the update as long as there was no error logged previously
&#x9;&#x9;&#x9;&#x9;IF (bypassErrorResourceFound = 0) THEN

&#x9;&#x9;&#x9;&#x9;&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Invoke the update resource privileges admin api
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/updateResourcePrivilegesV4(
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;debug2Modified,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;debug1Console,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;debug1CISLog,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;owner,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ownerDomain,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resourcePath,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resourceType,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;recurseChild,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;recurseDependencies,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;recurseDependents,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mode,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;privilegeStr,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;logOutput,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;result
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (result IS NOT NULL) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;raise ex value result || newline || &apos;ROW: &apos;||rowString;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;EXCEPTION
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;raise ex value CAST(CURRENT_EXCEPTION.TRACE AS LONGVARCHAR);
&#x9;&#x9;&#x9;&#x9;&#x9;END;

&#x9;&#x9;&#x9;&#x9;&#x9;/* mtinius (2014-10-28): added to automatically process READ-only acestor containers */
&#x9;&#x9;&#x9;&#x9;&#x9;-- Update the READ privileges for ancestor folders only
&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/updatePrivilegeReadFoldersV4(bypassErrors, Environment_Name, preview, debug1ReadOnly, debug1Console, debug1CISLog, debug2Modified, inModuleName, logOutput, privReadStr1, privReadStr2, privReadAppliedStr1, privReadAppliedStr2);
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;-- Initialize the privilege string for another row.
&#x9;&#x9;&#x9;set privilegeStr = null;
&#x9;&#x9;&#x9;set privilegeRec = null;
&#x9;&#x9;&#x9;set privRows = 0;
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;-- Initialize the privilege string for another row.
&#x9;&#x9;END IF;

&#x9;&#x9;-- Set the previous resource path and type so as to track when a line is different than the previous
&#x9;&#x9;--   This will trigger invoking the updateResourcePrivileges() method during batch privilege processing.
&#x9;&#x9;set prevResourcePath = resourcePath;
&#x9;&#x9;set prevResourceType = resourceType;
&#x9;&#x9;set prevRecurseChildStr = recurseChildStr;
&#x9;END FOR;
&#x9;/*************************************
&#x9; END PROCESSING PRIVILEGE ROWS
&#x9; *************************************/

&#x9;/**********************************
&#x9; * Perform Post processing 
&#x9; **********************************/
&#x9;-- If Batch Privileges is &quot;ON&quot; then process the last resource path.
&#x9;IF (batchPrivileges &gt; 0
&#x9;&#x9;&#x9;AND prevResourcePath IS NOT NULL AND prevResourceType IS NOT NULL AND resourcePath IS NOT NULL AND resourceType IS NOT NULL
&#x9;&#x9;&#x9;AND prevRecurseChildStr IS NOT NULL AND recurseChildStr IS NOT NULL
&#x9;&#x9;&#x9;) 
&#x9;then
&#x9;&#x9;IF (debug2RownumMin = 0 AND debug2RownumMax = 0) THEN
&#x9;&#x9;&#x9;set debug2Modified = debug2;
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;IF (rownum &gt;= debug2RownumMin AND rownum &lt;= debug2RownumMax) THEN
&#x9;&#x9;&#x9;&#x9;set debug2Modified = debug2;
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;set debug2Modified = &apos;N&apos;;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END IF;

&#x9;&#x9;-- Search the bypass error string to determine if the resource type and path combination exists due to a previous NOT EXIST ERROR detected.
&#x9;&#x9;SET bypassErrorResourceFound = 0;
&#x9;&#x9;IF (resourceType IS NOT NULL AND resourcePath IS NOT NULL AND 
&#x9;&#x9;&#x9;(POSITION(resourceType||&apos;::&apos;||resourcePath||&apos;|&apos; IN bypassErrorsStr1) &gt; 0 OR POSITION(resourceType||&apos;::&apos;||resourcePath||&apos;|&apos; IN bypassErrorsStr2) &gt; 0) ) 
&#x9;&#x9;THEN
&#x9;&#x9;&#x9;SET bypassErrorResourceFound = 1;
&#x9;&#x9;END IF;

&#x9;&#x9;IF (preview = &apos;N&apos;) THEN

&#x9;&#x9;&#x9;IF (debug2Modified = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;SET message = &apos;FINAL PROCESSING...num privilege rows to process=&apos;||privRows||&apos;|&apos;||newline;
&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/addLogOutput(debug1Console, debug1CISLog, logOutput, moduleName||&apos; : &apos;||message, logOutput);
&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;-- Perform the update as long as there was no error logged previously
&#x9;&#x9;&#x9;IF (bypassErrorResourceFound = 0) THEN

&#x9;&#x9;&#x9;&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;&#x9;&#x9;&#x9;-- Invoke the update resource privileges admin api
&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/updateResourcePrivilegesV4(
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;debug2Modified,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;debug1Console,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;debug1CISLog,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;owner,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ownerDomain,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resourcePath,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resourceType,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;recurseChild,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;recurseDependencies,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;recurseDependents,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mode,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;privilegeStr,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;logOutput,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;result
&#x9;&#x9;&#x9;&#x9;&#x9;);
&#x9;&#x9;&#x9;&#x9;&#x9;IF (result IS NOT NULL) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;raise ex value result || newline || &apos;ROW: &apos;||rowString;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;EXCEPTION
&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;raise ex value CAST(CURRENT_EXCEPTION.TRACE AS LONGVARCHAR);
&#x9;&#x9;&#x9;&#x9;END;
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;IF (debug1 = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;set message = &apos;BYPASS FINAL BATCH :: RESOURCE PATH NOT FOUND [&apos;||TRIM(NVL(resourceType,&apos;  &apos;))||&apos;::&apos;||TRIM(NVL(resourcePath,&apos;  &apos;))||&apos;]&apos;||&apos;|&apos;||newline;
&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/addLogOutput(debug1Console, debug1CISLog, logOutput, moduleName||&apos; : &apos;||message, logOutput);
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END IF;

&#x9;&#x9;-- Debug message indicating the batch of privileges was committed
&#x9;&#x9;IF (debug1 = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;IF (preview = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;set message = &apos;PREVIEWED FINAL BATCH: &apos;;
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;set message = &apos;COMMIT FINAL BATCH: &apos;;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;IF (project IS NOT NULL) THEN
&#x9;&#x9;&#x9;&#x9;set message = message || &apos;    [Project=&apos;||TRIM(NVL(project,&apos; &apos;))||&apos;]&apos;;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;IF (subProject IS NOT NULL) THEN
&#x9;&#x9;&#x9;&#x9;set message = message || &apos;    [SubProject=&apos;||TRIM(NVL(subProject,&apos; &apos;))||&apos;]&apos;;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;set message = message ||&apos;|&apos;||newline;
&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/addLogOutput(debug1Console, debug1CISLog, logOutput, moduleName||&apos; : &apos;||message, logOutput);
&#x9;&#x9;END IF;

&#x9;&#x9;IF (preview = &apos;N&apos;) THEN
&#x9;&#x9;&#x9;-- Perform the update as long as there was no error logged previously
&#x9;&#x9;&#x9;IF (bypassErrorResourceFound = 0) THEN

&#x9;&#x9;&#x9;&#x9;/* mtinius (2014-10-28): added to automatically process READ-only acestor containers */
&#x9;&#x9;&#x9;&#x9;IF (debug1ReadOnly = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/addLogOutput(debug1Console, debug1CISLog, logOutput, &apos;|&apos;||newline, logOutput);
&#x9;&#x9;&#x9;&#x9;&#x9;SET message = &apos;BEGIN FINAL READ_ONLY PROCESSING...&apos;||&apos;|&apos;||newline;
&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/addLogOutput(debug1Console, debug1CISLog, logOutput, moduleName||&apos; : &apos;||message, logOutput);
&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;-- Update the READ privileges for parent folders only
&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/updatePrivilegeReadFoldersV4(bypassErrors, Environment_Name, preview, debug1ReadOnly, debug1Console, debug1CISLog, debug2Modified, inModuleName, logOutput, privReadStr1, privReadStr2, privReadAppliedStr1, privReadAppliedStr2);

&#x9;&#x9;&#x9;&#x9;/* mtinius (2014-10-28): added to automatically process READ-only acestor containers */
&#x9;&#x9;&#x9;&#x9;IF (debug1ReadOnly = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;SET message = &apos;COMMIT FINAL READ_ONLY PROCESSING&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;IF (project IS NOT NULL) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set message = message || &apos;    [Project=&apos;||TRIM(NVL(project,&apos; &apos;))||&apos;]&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;IF (subProject IS NOT NULL) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set message = message || &apos;    [SubProject=&apos;||TRIM(NVL(subProject,&apos; &apos;))||&apos;]&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;set message = message ||&apos;|&apos;||newline;
&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/addLogOutput(debug1Console, debug1CISLog, logOutput, moduleName||&apos; : &apos;||message||newline, logOutput);
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;IF (debug1ReadOnly = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;set message = &apos;BYPASS FINAL READ-ONLY BATCH :: RESOURCE PATH NOT FOUND [&apos;||TRIM(NVL(resourceType,&apos;  &apos;))||&apos;::&apos;||TRIM(NVL(resourcePath,&apos;  &apos;))||&apos;]&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/addLogOutput(debug1Console, debug1CISLog, logOutput, moduleName||&apos; : &apos;||message, logOutput);
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;END IF;
&#x9;END IF;

&#x9;-- Display final duration
&#x9;IF (debug1 = &apos;Y&apos;) THEN
&#x9;&#x9;call /shared/ASAssets/Utilities/&quot;time&quot;/getCurrentTimestamp(currentTS);
&#x9;&#x9;set duration = currentTS - startTime;&#x9;&#x9;&#x9;&#x9;&#x9;
&#x9;&#x9;set message = &apos;PRIVILEGE EXECUTION TIME: &apos;||CAST(duration AS VARCHAR)||&apos;|&apos;||newline;
&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/addLogOutput(debug1Console, debug1CISLog, logOutput, moduleName||&apos; : &apos;||message, logOutput);
&#x9;END IF;
END</attribute>
  <attribute name="creationDate" type="LONG">1386346747412</attribute>
  <attribute name="creatorUserDomain" type="STRING">composite</attribute>
  <attribute name="creatorUserName" type="STRING">admin</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1560603906783</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="public_types" type="MAP">
    <item>
      <key type="STRING">privilegeRow</key>
      <value type="BYTE_ARRAY">EB8GAgAMAHAAcgBpAHYAaQBsAGUAZwBlAFIAbwB3BikAYAAvAHMAaABhAHIAZQBkAC8AQQBTAEEAcwBzAGUAdABzAC8AQgBlAHMAdABQAHIAYQBjAHQAaQBjAGUAcwBfAHYAOAAxAC8AUAByAGkAdgBpAGwAZQBnAGUAUwBjAHIAaQBwAHQAcwAvAEgAZQBsAHAAZQByAHMALwB1AHAAZABhAHQAZQBSAGUAcwBvAHUAcgBjAGUAUAByAGkAdgBpAGwAZQBnAGUAcwBEAHIAaQB2AGUAcgBJAG0AcABsAFYANAYqAAwAcAByAGkAdgBpAGwAZQBnAGUAUgBvAHcDEgAAAAEDEgAAAAEBEwEJFAAAAAQQIQYVAAoAZABvAG0AYQBpAG4ATgBhAG0AZQMvAAAAAQMWAAAAAAMaAAAAAQMbAAAAAQMg/////wMiAAAAAAgZEBsGAgAHAFYAQQBSAEMASABBAFIDEgAAAAIEBAAAAAAAAAD/ARMB/////xAhBhUABABuAGEAbQBlAy8AAAABAxYAAAAAAxoAAAABAxsAAAABAyD/////AyIAAAAAAxIAAAAC//8QIQYVAAgAbgBhAG0AZQBUAHkAcABlAy8AAAABAxYAAAAAAxoAAAABAxsAAAABAyD/////AyIAAAAAAxIAAAAC//8QIQYVAA0AcAByAGkAdgBpAGwAZQBnAGUATABpAHMAdAMvAAAAAQMWAAAAAAMaAAAAAQMbAAAAAQMg/////wMiAAAAAAMSAAAAAv////8=</value>
    </item>
  </attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">9/1051</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">15/1234</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">15/1239</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/1013</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
  </attribute>
</metadata>