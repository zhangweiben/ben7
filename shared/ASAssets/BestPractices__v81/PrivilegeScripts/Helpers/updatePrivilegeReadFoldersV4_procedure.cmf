<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:9a66723c-3693-47f1-a1f0-d7811996f9d5 -->
<metadata name="updatePrivilegeReadFoldersV4" path="/shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/updatePrivilegeReadFoldersV4" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>&lt;![CDATA[&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.
]]&gt;</annotation>
  <parameters>
    <parameter name="bypassErrors" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="envType" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="preview" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="debug1ReadOnly" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="inDebug1Console" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="inDebug1CISLog" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="debug2Modified" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="inModuleName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="logOutput" direction="INOUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="privReadStr1" direction="INOUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="privReadStr2" direction="INOUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="privReadAppliedStr1" direction="INOUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="privReadAppliedStr2" direction="INOUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/services/databases/system/DUAL" type="TABLE">
    <datatype type="TABLE" refId="256">
      <element name="DUMMY">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/addLogOutput" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="printConsole" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="printLog" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="inLogOutput" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="addLogOutput" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="outLogOutput" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getResourcePrivileges" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="nameTypeFilter" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="domainFilter" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="privilegeEntryType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="includeNameEqualFilter" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="includeNameLikeFilter" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="excludeNameNotEqualFilter" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="excludeNameNotLikeFilter" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="includePrivsEqualFilter" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="includePrivsLikeFilter" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="excludePrivsNotEqualFilter" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="excludePrivsNotLikeFilter" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="includeColumnPrivs" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="path">
            <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
          </element>
          <element name="type">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="name">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="nameType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="domain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="privs">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="combinedPrivs">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="inheritedPrivs">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="p_N">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="p_R">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="p_W">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="p_E">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="p_S">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="p_U">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="p_I">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="p_D">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="p_G">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="c_N">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="c_R">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="c_W">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="c_E">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="c_S">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="c_U">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="c_I">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="c_D">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="c_G">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="i_N">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="i_R">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="i_W">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="i_E">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="i_S">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="i_U">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="i_I">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="i_D">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="i_G">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/updateResourcePrivilegesV4" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inDebug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="inDebugConsole" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="inDebugCISLog" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="owner" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="ownerDomain" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourcePath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="recurse" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="recurseDependencies" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="recurseDependents" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="mode" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="privilegeStr" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="logOutput" direction="INOUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/extractDelimitedText" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inputString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="delimiter" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="occurrence" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="reverseInputText" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="reverseOutput" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="trimText" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="includeDelimiter" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="object">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* updatePrivilegeReadFolders:  

&#x9;This procedure is used to update the READ only privilege to the ancestor container paths.
&#x9;
&#x9;Input:
&#x9;&#x9;bypassErrors&#x9;&#x9;&#x9;&#x9;CHAR(1),&#x9;-- Bypass errors.  Throw exception when paths not found.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- N/Null (default) Do not bypass errors.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Y=bypass resource not found errors but report them.
&#x9;&#x9;envType&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;-- The environment type such as [DEV, UAT, PROD]
&#x9;&#x9;preview&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1),&#x9;-- If preview=Y then no updating will be done otherwise preview=N will execute updates.
&#x9;&#x9;debug1ReadOnly&#x9;&#x9;&#x9;&#x9;CHAR(1),&#x9;-- N/Null (default)=No debug, Y=Debug read only.  Determines whether to capture any debug output and return it in logOutput.
&#x9;&#x9;inDebug1Console&#x9;&#x9;&#x9;&#x9;CHAR(1), &#x9;-- N/Null (default)=No debug, Y=Debug console.  Determines whether to print the studio console window or not.
&#x9;&#x9;inDebug1CISLog&#x9;&#x9;&#x9;&#x9;CHAR(1), &#x9;-- N/Null (default)=No debug, Y=Debug log.  Determines whether to print to the CIS log or not.
&#x9;&#x9;debug2Modified&#x9;&#x9;&#x9;&#x9;CHAR(1),&#x9;-- Y=debug on, N=debug off.  2nd level debug (deep debug).  usually turned off.
&#x9;&#x9;inModuleName&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;-- The module name from the invoking procedure which is used to calculate the output log length so the module names match up in output lentgth.
&#x9;&#x9;logOutput&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR,-- the appended log output value.  Will only be set if inDebug=Y
&#x9;&#x9;-- The string used to track the list of paths to set READ privilege.
&#x9;&#x9;privReadStr1&#x9;&#x9;&#x9;&#x9;LONGVARCHAR,--Format: &quot;Resource Path&quot;::&quot;Resource Type&quot;::Name::&quot;Name Type&quot;::&quot;Domain&quot;::privilege::Owner::&quot;Owner Domain&quot;::&quot;Recurse Dependencies&quot;::&quot;Recurse Dependents&quot;::Recurse::mode|[repeat format]
&#x9;&#x9;privReadStr2&#x9;&#x9;&#x9;&#x9;LONGVARCHAR,--Format: &quot;Resource Path&quot;::&quot;Resource Type&quot;::Name::&quot;Name Type&quot;::&quot;Domain&quot;::privilege::Owner::&quot;Owner Domain&quot;::&quot;Recurse Dependencies&quot;::&quot;Recurse Dependents&quot;::Recurse::mode|[repeat format]
&#x9;&#x9;-- The string used to track the list of READ-only privileges that have been applied privileges.
&#x9;&#x9;privReadAppliedStr1&#x9;&#x9;&#x9;LONGVARCHAR--Format: &quot;Resource Path&quot;::&quot;Resource Type&quot;::Name::&quot;Name Type&quot;::&quot;Domain&quot;::privilege::Owner::&quot;Owner Domain&quot;::&quot;Recurse Dependencies&quot;::&quot;Recurse Dependents&quot;::Recurse::mode|[repeat format]
&#x9;&#x9;privReadAppliedStr2&#x9;&#x9;&#x9;LONGVARCHAR--Format: &quot;Resource Path&quot;::&quot;Resource Type&quot;::Name::&quot;Name Type&quot;::&quot;Domain&quot;::privilege::Owner::&quot;Owner Domain&quot;::&quot;Recurse Dependencies&quot;::&quot;Recurse Dependents&quot;::Recurse::mode|[repeat format]
&#x9;Output:
&#x9;&#x9;logOutput&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR,-- the appended log output value.  Will only be set if inDebug=Y
&#x9;&#x9;-- The string used to track the list of paths to set READ privilege.
&#x9;&#x9;privReadStr1&#x9;&#x9;&#x9;&#x9;LONGVARCHAR,--Format: &quot;Resource Path&quot;::&quot;Resource Type&quot;::Name::&quot;Name Type&quot;::&quot;Domain&quot;::privilege::Owner::&quot;Owner Domain&quot;::&quot;Recurse Dependencies&quot;::&quot;Recurse Dependents&quot;::Recurse::mode|[repeat format]
&#x9;&#x9;privReadStr2&#x9;&#x9;&#x9;&#x9;LONGVARCHAR,--Format: &quot;Resource Path&quot;::&quot;Resource Type&quot;::Name::&quot;Name Type&quot;::&quot;Domain&quot;::privilege::Owner::&quot;Owner Domain&quot;::&quot;Recurse Dependencies&quot;::&quot;Recurse Dependents&quot;::Recurse::mode|[repeat format]
&#x9;&#x9;-- The string used to track the list of READ-only privileges that have been applied privileges.
&#x9;&#x9;privReadAppliedStr1&#x9;&#x9;&#x9;LONGVARCHAR--Format: &quot;Resource Path&quot;::&quot;Resource Type&quot;::Name::&quot;Name Type&quot;::&quot;Domain&quot;::privilege::Owner::&quot;Owner Domain&quot;::&quot;Recurse Dependencies&quot;::&quot;Recurse Dependents&quot;::Recurse::mode|[repeat format]
&#x9;&#x9;privReadAppliedStr2&#x9;&#x9;&#x9;LONGVARCHAR--Format: &quot;Resource Path&quot;::&quot;Resource Type&quot;::Name::&quot;Name Type&quot;::&quot;Domain&quot;::privilege::Owner::&quot;Owner Domain&quot;::&quot;Recurse Dependencies&quot;::&quot;Recurse Dependents&quot;::Recurse::mode|[repeat format]
&#x9;Exceptions:  none

&#x9;Modified Date: &#x9;Modified By:&#x9;&#x9;CSW Version:&#x9;Reason:
&#x9;10/28/2014&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.2.6&#x9;&#x9;&#x9;Added new.
&#x9;11/17/2014&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.2.6&#x9;&#x9;&#x9;Modified the logging to be selective about output to logOutput variable, console or CIS log.
&#x9;07/15/2016&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.3&#x9;&#x9;&#x9;Removed use of vectors to improve performance and reduce memory leak issues.
&#x9;05/16/2017&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.5&#x9;&#x9;&#x9;Adapted for Data Abstraction Best Practices.
&#x9;03/02/2018&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.5&#x9;&#x9;&#x9;Replaced RegexSplit with extractDelimitedText

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

*/
PROCEDURE updatePrivilegeReadFoldersV4(
&#x9;IN bypassErrors&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1),&#x9;-- Bypass errors.  Throw exception when paths not found.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- N/Null (default) Do not bypass errors.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Y=bypass resource not found errors but report them.
&#x9;IN envType&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;-- The environment type such as [DEV, UAT, PROD]
&#x9;IN preview&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1),&#x9;-- If preview=Y then no updating will be done otherwise preview=N will execute updates.
&#x9;IN debug1ReadOnly&#x9;&#x9;&#x9;&#x9;CHAR(1),&#x9;-- N/Null (default)=No debug, Y=Debug read only.  Determines whether to capture any debug output and return it in logOutput.
&#x9;IN inDebug1Console&#x9;&#x9;&#x9;&#x9;CHAR(1), &#x9;-- N/Null (default)=No debug, Y=Debug console.  Determines whether to print the studio console window or not.
&#x9;IN inDebug1CISLog&#x9;&#x9;&#x9;&#x9;CHAR(1), &#x9;-- N/Null (default)=No debug, Y=Debug log.  Determines whether to print to the CIS log or not.
&#x9;IN debug2Modified&#x9;&#x9;&#x9;&#x9;CHAR(1),&#x9;-- Y=debug on, N=debug off.  2nd level debug (deep debug).  usually turned off.
&#x9;IN inModuleName&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;-- The module name from the invoking procedure which is used to calculate the output log length so the module names match up in output lentgth.
&#x9;INOUT logOutput&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR,-- the appended log output value.  Will only be set if inDebug=Y
&#x9;-- The string used to track the list of paths to set READ privilege.
&#x9;INOUT privReadStr1&#x9;&#x9;&#x9;&#x9;LONGVARCHAR,--Format: &quot;Resource Path&quot;::&quot;Resource Type&quot;::Name::&quot;Name Type&quot;::&quot;Domain&quot;::privilege::Owner::&quot;Owner Domain&quot;::&quot;Recurse Dependencies&quot;::&quot;Recurse Dependents&quot;::Recurse::mode|[repeat format]
&#x9;INOUT privReadStr2&#x9;&#x9;&#x9;&#x9;LONGVARCHAR,--Format: &quot;Resource Path&quot;::&quot;Resource Type&quot;::Name::&quot;Name Type&quot;::&quot;Domain&quot;::privilege::Owner::&quot;Owner Domain&quot;::&quot;Recurse Dependencies&quot;::&quot;Recurse Dependents&quot;::Recurse::mode|[repeat format]
&#x9;-- The string used to track the list of READ-only privileges that have been applied privileges.
&#x9;INOUT privReadAppliedStr1&#x9;&#x9;LONGVARCHAR,--Format: &quot;Resource Path&quot;::&quot;Resource Type&quot;::Name::&quot;Name Type&quot;::&quot;Domain&quot;::privilege::Owner::&quot;Owner Domain&quot;::&quot;Recurse Dependencies&quot;::&quot;Recurse Dependents&quot;::Recurse::mode|[repeat format]
&#x9;INOUT privReadAppliedStr2&#x9;&#x9;LONGVARCHAR --Format: &quot;Resource Path&quot;::&quot;Resource Type&quot;::Name::&quot;Name Type&quot;::&quot;Domain&quot;::privilege::Owner::&quot;Owner Domain&quot;::&quot;Recurse Dependencies&quot;::&quot;Recurse Dependents&quot;::Recurse::mode|[repeat format]
)
BEGIN
&#x9;DECLARE moduleName&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;updatePrivilegeReadFoldersV4&apos;;
&#x9;DECLARE debug1Console&#x9;&#x9;&#x9;CHAR(1) DEFAULT NVL(UPPER(inDebug1Console),&apos;N&apos;);
&#x9;DECLARE debug1CISLog&#x9;&#x9;&#x9;CHAR(1) DEFAULT NVL(UPPER(inDebug1CISLog),&apos;N&apos;);
&#x9;DECLARE localDebug&#x9;&#x9;&#x9;&#x9;CHAR(1) DEFAULT &apos;N&apos;;
&#x9;DECLARE ex&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;EXCEPTION;
&#x9;DECLARE newline&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT CHR(10);
&#x9;DECLARE result&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE READ_SET&#x9;&#x9;&#x9;&#x9;BOOLEAN;
&#x9;DECLARE rowString&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE status&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE numPrivs&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE numRows&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE privReadStr&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;--Format: &quot;Resource Path&quot;::&quot;Resource Type&quot;::Name::&quot;Name Type&quot;::&quot;Domain&quot;::privilege::Owner::&quot;Owner Domain&quot;::&quot;Recurse Dependencies&quot;::&quot;Recurse Dependents&quot;::Recurse::mode|
&#x9;DECLARE privReadPathStr&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE privRowFound&#x9;&#x9;&#x9;BOOLEAN;
&#x9;DECLARE LONGVARCHARlen&#x9;&#x9;&#x9;INTEGER DEFAULT 2147483647;
&#x9;DECLARE message&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE actualPrivilegeList&#x9;&#x9;VARCHAR;
&#x9;DECLARE displayPrivilegeList&#x9;VARCHAR;
&#x9;DECLARE displayActualPrivilegeList VARCHAR;
&#x9;DECLARE setPrivilegeList&#x9;&#x9;VARCHAR;
&#x9;DECLARE displaySetPrivilegeList&#x9;VARCHAR;
&#x9;DECLARE TYPE privRowType&#x9;&#x9;ROW (
&#x9;&#x9;resourcePath&#x9;&#x9;&#x9;&#x9;LONGVARCHAR,
&#x9;&#x9;resourceType&#x9;&#x9;&#x9;&#x9;VARCHAR,
&#x9;&#x9;name&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR,
&#x9;&#x9;nameType&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR,
&#x9;&#x9;domainName&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR,
&#x9;&#x9;privilegeList&#x9;&#x9;&#x9;&#x9;VARCHAR,
&#x9;&#x9;owner&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR,
&#x9;&#x9;ownerDomain&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR,
&#x9;&#x9;recurseDependencies&#x9;&#x9;&#x9;BIT,
&#x9;&#x9;recurseDependents&#x9;&#x9;&#x9;BIT,
&#x9;&#x9;recurseChild&#x9;&#x9;&#x9;&#x9;BIT,
&#x9;&#x9;mode&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR
&#x9;);
&#x9;DECLARE privRec &#x9;&#x9;&#x9;&#x9;privRowType;
&#x9;DECLARE prevPrivRec &#x9;&#x9;&#x9;privRowType;
&#x9;DECLARE privilegeStr&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE privRow&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE privItem&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE recurseDependencies&#x9;&#x9;VARCHAR;
&#x9;DECLARE recurseDependents&#x9;&#x9;VARCHAR;
&#x9;DECLARE recurseChild&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE j,k&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE start2&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE pos1,pos2,lastpos1&#x9;&#x9;INTEGER;
&#x9;DECLARE object&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE moreToDo1,moreToDo2&#x9;&#x9;BOOLEAN;
&#x9;DECLARE objectList1,objectList2&#x9;LONGVARCHAR;
&#x9;DECLARE expression1,expression2&#x9;VARCHAR;
&#x9;DECLARE explen1,explen2,poslen&#x9;INTEGER;

&#x9;-- Initialize logOutput
&#x9;IF (logOutput IS NULL) THEN
&#x9;&#x9;set logOutput = &apos;&apos;;
&#x9;END IF;

&#x9;-- Initialize moduleName with leading pad characters to make it even with the invoking procedure
&#x9;SET pos1 = LENGTH(inModuleName) - LENGTH(moduleName);
&#x9;IF (pos1 &lt; 0) THEN
&#x9;&#x9;set pos1 = 0;
&#x9;END IF;
&#x9;SET pos1 = pos1 + LENGTH(moduleName);
&#x9;SET moduleName = LPAD(moduleName, pos1, &apos;_&apos;);

&#x9;-- Initialize the previous already applied privilege string
&#x9;IF (privReadAppliedStr1 IS NULL) THEN
&#x9;&#x9;SET privReadAppliedStr1 = &apos;&apos;;
&#x9;END IF;
&#x9;IF (privReadAppliedStr2 IS NULL) THEN
&#x9;&#x9;SET privReadAppliedStr2 = &apos;&apos;;
&#x9;END IF;
&#x9;-- Initialize previous priv record
&#x9;SET prevPrivRec.resourcePath = null;
&#x9;SET prevPrivRec.resourceType = null;
&#x9;SET prevPrivRec.owner = &apos;&apos;;
&#x9;SET prevPrivRec.ownerDomain = &apos;&apos;;

&#x9;IF (privReadStr1 IS NOT NULL AND LENGTH(privReadStr1) &gt; 0) THEN

&#x9;IF (debug2Modified = &apos;Y&apos;) THEN
&#x9;&#x9;call print(moduleName||&apos; : BEGIN: LENGTH(privReadStr1)=&apos;||LENGTH(privReadStr1)||&apos;  LENGTH(privReadStr2)=&apos;||LENGTH(privReadStr2));
&#x9;&#x9;call print(moduleName||&apos; : BEGIN: LENGTH(privReadAppliedStr1)=&apos;||LENGTH(privReadAppliedStr1)|| &apos;  LENGTH(privReadAppliedStr2)=&apos;||LENGTH(privReadAppliedStr2));
&#x9;END IF;

&#x9;&#x9;SET numPrivs = 0;
&#x9;&#x9;SET numRows = 0;

&#x9;&#x9;-- Each privilege row is separated by a pipe &apos;|&apos;.  Process each row by sort them by path which is the first element in the row.
&#x9;&#x9;FOR readList AS 
&#x9;&#x9;&#x9;&#x9;SELECT privRow FROM (
&#x9;&#x9;&#x9;&#x9;&#x9;SELECT object privRow
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FROM /shared/ASAssets/Utilities/string/extractDelimitedText(privReadStr1,&apos;|&apos;,0,0,0,1,0)
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHERE object IS NOT NULL AND LENGTH(object) &gt; 0
&#x9;&#x9;&#x9;&#x9;&#x9;UNION
&#x9;&#x9;&#x9;&#x9;&#x9;SELECT object privRow
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FROM /shared/ASAssets/Utilities/string/extractDelimitedText(privReadStr2,&apos;|&apos;,0,0,0,1,0)
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHERE object IS NOT NULL AND LENGTH(object) &gt; 0
&#x9;&#x9;&#x9;&#x9;&#x9;UNION
&#x9;&#x9;&#x9;&#x9;&#x9;SELECT &apos;/zzzz::END::all::GROUP::composite::NONE::::::0::0::0::OVERWRITE_APPEND&apos; privRow FROM /services/databases/system/DUAL
&#x9;&#x9;&#x9;&#x9;) a
&#x9;&#x9;&#x9;&#x9;ORDER BY privRow
&#x9;&#x9;DO
&#x9;&#x9;&#x9;SET privRow = readList.privRow;
&#x9;&#x9;&#x9;SET numRows = numRows + 1;
&#x9;&#x9;&#x9;-- Process the current row and split out the columns within the double colon &apos;::&apos; separated list.
&#x9;&#x9;&#x9;-- Extract the object from the object list
&#x9;&#x9;&#x9;SET objectList2 = privRow;
&#x9;&#x9;&#x9;SET expression2 = &apos;::&apos;;
&#x9;&#x9;&#x9;SET moreToDo2 = true;
&#x9;&#x9;&#x9;SET explen2 = length(expression2);
&#x9;&#x9;&#x9;SET start2 = 1;
&#x9;&#x9;&#x9;SET lastpos1 = 0;
&#x9;&#x9;&#x9;SET k = 0;
&#x9;&#x9;&#x9;WHILE (moreToDo2) DO
&#x9;&#x9;&#x9;&#x9;set k = k + 1;
&#x9;&#x9;&#x9;&#x9;SET object = null;
&#x9;&#x9;&#x9;&#x9;IF (k = 1) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;SET pos1 = INSTR(objectList2, expression2, start2, 1);
&#x9;&#x9;&#x9;&#x9;&#x9;--call print(&apos;&quot;privRow&quot; start2=&apos;||start2||&apos;  pos1=&apos;||pos1||&apos;  pos1-1=&apos;||CAST(pos1-1 AS VARCHAR));
&#x9;&#x9;&#x9;&#x9;&#x9;IF (pos1 &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET poslen = pos1-1;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (poslen &lt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET poslen = 0;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET object = SUBSTRING(objectList2, 1, poslen);
&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (LENGTH(TRIM(objectList2)) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET object = objectList2;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET moreToDo2 = false;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;SET lastpos1 = pos1;
&#x9;&#x9;&#x9;&#x9;&#x9;SET start2 = lastpos1+explen2;
&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;SET pos2 = INSTR(objectList2, expression2, start2, 1);
&#x9;&#x9;&#x9;&#x9;&#x9;--call print(&apos;&quot;privRow&quot; start2=&apos;||start2||&apos;  lastpos1=&apos;||lastpos1||&apos;  pos2=&apos;||pos2||&apos;  explen2=&apos;||explen2||&apos;  pos2-lastpos1-explen2=&apos;||CAST(pos2-lastpos1-explen2 AS VARCHAR));
&#x9;&#x9;&#x9;&#x9;&#x9;IF (lastpos1 &gt; 0 and pos2 &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET poslen = pos2-lastpos1-explen2;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (poslen &lt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET poslen = 0;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET object = SUBSTRING(objectList2, lastpos1+explen2, poslen);
&#x9;&#x9;&#x9;&#x9;&#x9;ELSEIF (lastpos1 &gt; 0 and pos2 = 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET object = SUBSTRING(objectList2, lastpos1+explen2);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET moreToDo2 = false;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;SET lastpos1 = pos2;
&#x9;&#x9;&#x9;&#x9;&#x9;SET start2 = lastpos1+explen2;
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;SET object = TRIM(object);
&#x9;&#x9;&#x9;&#x9;--CALL print(&apos;priv k=&apos;||k||&apos;  object=[&apos;||TRIM(NVL(object,&apos;  &apos;))||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;set privItem = object;

&#x9;&#x9;&#x9;&#x9;-- parse out the columns within the row.
&#x9;&#x9;&#x9;&#x9;CASE 
&#x9;&#x9;&#x9;&#x9;&#x9;WHEN k = 1  THEN SET privRec.resourcePath = TRIM(NVL(privItem,&apos;  &apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;WHEN k = 2  THEN SET privRec.resourceType = TRIM(NVL(privItem,&apos;  &apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;WHEN k = 3  THEN SET privRec.name = TRIM(NVL(privItem,&apos;  &apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;WHEN k = 4  THEN SET privRec.nameType = TRIM(NVL(privItem,&apos;  &apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;WHEN k = 5  THEN SET privRec.domainName = TRIM(NVL(privItem,&apos;  &apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;WHEN k = 6  THEN SET privRec.privilegeList = TRIM(NVL(privItem,&apos;  &apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;WHEN k = 7  THEN SET privRec.owner = TRIM(NVL(privItem,&apos;  &apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;WHEN k = 8  THEN SET privRec.ownerDomain = TRIM(NVL(privItem,&apos;  &apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;WHEN k = 9  THEN SET privRec.recurseDependencies = privItem;
&#x9;&#x9;&#x9;&#x9;&#x9;WHEN k = 10 THEN SET privRec.recurseDependents = privItem;
&#x9;&#x9;&#x9;&#x9;&#x9;WHEN k = 11 THEN SET privRec.recurseChild = privItem;
&#x9;&#x9;&#x9;&#x9;&#x9;WHEN k = 12 THEN SET privRec.mode = TRIM(NVL(privItem,&apos;  &apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;END CASE;
&#x9;&#x9;&#x9;END WHILE;

&#x9;&#x9;&#x9;-- Set the privilege list for display purposes
&#x9;&#x9;&#x9;SET displayPrivilegeList = REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(privRec.privilegeList,&apos;NONE&apos;,&apos;N&apos;),&apos;READ&apos;,&apos;R&apos;),&apos;WRITE&apos;,&apos;W&apos;),&apos;SELECT&apos;,&apos;S&apos;),&apos;EXECUTE&apos;,&apos;E&apos;),&apos;INSERT&apos;,&apos;I&apos;),&apos;UPDATE&apos;,&apos;U&apos;),&apos;DELETE&apos;,&apos;D&apos;),&apos;GRANT&apos;,&apos;G&apos;);

&#x9;&#x9;&#x9;IF (UPPER(debug2Modified) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;IF (privRec.resourceType != &apos;END&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : row=&apos;||cast(numRows as varchar)||&apos;  privRow=&apos;||privRow);
&#x9;&#x9;&#x9;&#x9;&#x9;set message = &apos;PRIV_ROW=[&apos;||TRIM(NVL(privRow,&apos;  &apos;))||&apos;]&apos; || newline
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  || &apos;prevResourcePath=[&apos;||TRIM(NVL(prevPrivRec.resourcePath,&apos;  &apos;))||&apos;]_____prevResourceType=[&apos;||TRIM(NVL(prevPrivRec.resourceType,&apos;  &apos;)) ||&apos;]&apos;|| newline
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  || &apos;____resourcePath=[&apos;||    TRIM(NVL(privRec.resourcePath,&apos;  &apos;))||&apos;]_________resourceType=[&apos;||TRIM(NVL(privRec.resourceType,&apos;  &apos;))||&apos;]&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  || &apos;  name=[&apos;||TRIM(NVL(privRec.name,&apos;  &apos;))||&apos;]  nameType=[&apos;||TRIM(NVL(privRec.nameType,&apos;  &apos;))||&apos;]&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  || &apos;  privilegeList=[&apos;||displayPrivilegeList||&apos;]|&apos;|| newline;
&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/addLogOutput(debug1Console, debug1CISLog, logOutput, moduleName||&apos; : &apos;||message, logOutput);
&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : LAST RECORD FOUND: row=&apos;||cast(numRows as varchar)||&apos;  privRow=&apos;||privRow);
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;/******************************
&#x9;&#x9;&#x9; * UPDATE BATCH PRIVILEGES
&#x9;&#x9;&#x9; ******************************/
&#x9;&#x9;&#x9;-- Determine if the current record &quot;privRec&quot; is different than the previous record &quot;prevPrivRec&quot; and apply privileges if it is.
&#x9;&#x9;&#x9;IF (prevPrivRec.resourcePath is not null and prevPrivRec.resourceType is not null and privRec.resourcePath is not null and privRec.resourceType is not null
&#x9;&#x9;&#x9;&#x9;&#x9;and (prevPrivRec.resourcePath != privRec.resourcePath or prevPrivRec.resourceType != privRec.resourceType) ) 
&#x9;&#x9;&#x9;THEN
&#x9;&#x9;&#x9;&#x9;IF (debug2Modified = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName||&apos; : BEGIN PROCESSING FOR UPDATE. PATH HAS CHANGED.  path=&apos;||prevPrivRec.resourcePath);
&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;&#x9;&#x9;&#x9;IF (privilegeStr IS NOT NULL AND LENGTH(TRIM(privilegeStr)) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (preview = &apos;N&apos;) THEN

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Debug message indicating the batch of privileges was committed
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (debug1ReadOnly = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set message = &apos;COMMIT BATCH: Change in: &apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (prevPrivRec.resourcePath != privRec.resourcePath) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set message = message || &apos;&quot;Resource Path&quot; &apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;elseif (prevPrivRec.resourceType != privRec.resourceType) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set message = message || &apos;&quot;Resource Type&quot; &apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set message = message || &apos;|&apos; || newline;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/addLogOutput(debug1Console, debug1CISLog, logOutput, moduleName||&apos; : &apos;||message, logOutput);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;BEGIN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Invoke the update resource privileges admin api
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/updateResourcePrivilegesV4(
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;debug2Modified,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;debug1Console,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;debug1CISLog,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;prevPrivRec.owner,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;prevPrivRec.ownerDomain,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;prevPrivRec.resourcePath,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;prevPrivRec.resourceType,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;prevPrivRec.recurseChild,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;prevPrivRec.recurseDependencies,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;prevPrivRec.recurseDependents,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;prevPrivRec.mode,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;privilegeStr,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;logOutput,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;result
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;EXCEPTION
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set result = CAST(CURRENT_EXCEPTION.TRACE AS LONGVARCHAR);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (result is not null) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set result = REPLACE(REPLACE(result, CHR(10), &apos; &apos;),CHR(13),&apos; &apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Remove all CR, LF and double spaces
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHILE (POSITION(&apos;  &apos; IN result) &gt; 0) DO
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set result = REPLACE(result, &apos;  &apos;, &apos; &apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END WHILE;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (bypassErrors = &apos;Y&apos; and POSITION(&apos;does not exist&apos; IN result) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (debug1ReadOnly = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set message = &apos;Status=SKIPPED: [BYPASS **ERROR**] REVOKE ALL :: RESOURCE PATH NOT FOUND [&apos;||TRIM(NVL(prevPrivRec.resourceType,&apos;  &apos;))||&apos;::&apos;||TRIM(NVL(prevPrivRec.resourcePath,&apos;  &apos;))||&apos;]&apos;||&apos;|&apos;||newline;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/addLogOutput(debug1Console, debug1CISLog, logOutput, moduleName||&apos; : &apos;||message, logOutput);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;raise ex value result || newline || &apos;ROW: &apos;||TRIM(NVL(rowString,&apos;  &apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Initialize privilege string
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set privilegeStr = NULL;
&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug2Modified) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName||&apos; : No Read Privileges to apply for resource=[&apos;||TRIM(NVL(prevPrivRec.resourcePath,&apos;  &apos;))||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;EXCEPTION
&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;RAISE;
&#x9;&#x9;&#x9;&#x9;END;
&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;/********************************************
&#x9;&#x9;&#x9; * PROCESSING BEGINS HERE
&#x9;&#x9;&#x9; ********************************************/
&#x9;&#x9;&#x9;IF (LENGTH(privRec.resourcePath) &gt; 0 AND LENGTH(privRec.resourceType) &gt; 0) THEN

&#x9;&#x9;&#x9;&#x9;/***************************************************
&#x9;&#x9;&#x9;&#x9; * FOR THE CURRENT RECORD (privRec=privReadStr1 or 2), 
&#x9;&#x9;&#x9;&#x9; *   SEARCH FOR EQUIVLENT RECORD IN privReadAppliedStr1.
&#x9;&#x9;&#x9;&#x9; * IF FOUND, EXTRACT PRIVILEGES FOR DISPLAY.
&#x9;&#x9;&#x9;&#x9; ***************************************************/
&#x9;&#x9;&#x9;&#x9;-- Initialize string for actual privileges
&#x9;&#x9;&#x9;&#x9;set displayActualPrivilegeList = &apos;&apos;;
&#x9;&#x9;&#x9;&#x9;-- Search for this current unique entry in the &quot;privilege read applied&quot; list.  (Already applied list.)
&#x9;&#x9;&#x9;&#x9;SET privReadStr = TRIM(NVL(privRec.resourcePath,&apos;  &apos;))||&apos;::&apos;||TRIM(NVL(privRec.resourceType,&apos;  &apos;))||&apos;::&apos;||TRIM(NVL(privRec.name,&apos;  &apos;))||&apos;::&apos;||TRIM(NVL(privRec.nameType,&apos;  &apos;))||&apos;::&apos;||TRIM(NVL(privRec.domainName,&apos;  &apos;))||&apos;::&apos;;
&#x9;&#x9;&#x9;&#x9;SET privRowFound = FALSE;
&#x9;&#x9;&#x9;&#x9;SET pos1 = POSITION(privReadStr IN privReadAppliedStr1);
&#x9;&#x9;&#x9;&#x9;IF (localDebug = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName||&apos; : privReadAppliedStr1=[&apos;||TRIM(NVL(privReadAppliedStr1,&apos;  &apos;))||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName||&apos; : pos1=&apos;||TRIM(NVL(cast(pos1 as varchar),&apos;  &apos;))||&apos;  privReadStr=&apos;||TRIM(NVL(privReadStr,&apos;  &apos;)));
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;IF (pos1 &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;SET pos2 = INSTR(privReadAppliedStr1, &apos;|&apos;, pos1);
&#x9;&#x9;&#x9;&#x9;&#x9;-- Local Debug
&#x9;&#x9;&#x9;&#x9;&#x9;IF (localDebug = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName||&apos; : pos1=&apos;||pos1||&apos; pos2=&apos;||pos2||&apos;  LENGTH(privReadStr)=&apos;||LENGTH(privReadStr));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName||&apos; : pos1 + LENGTH(privReadStr) + 2=&apos;||cast(pos1 + LENGTH(privReadStr) + 2 as varchar));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName||&apos; : pos2 - pos1 - LENGTH(privReadStr) - 2=&apos;||cast(pos2 - pos1 - LENGTH(privReadStr) - 2 as varchar));
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;SET displayActualPrivilegeList = SUBSTRING(privReadAppliedStr1, pos1 + LENGTH(privReadStr) + 2, pos2 - pos1 - LENGTH(privReadStr) - 2);
&#x9;&#x9;&#x9;&#x9;&#x9;SET privRowFound = TRUE;
&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug2Modified) = &apos;Y&apos; OR localDebug = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName||&apos; : Privilege row found.  row=&apos;||TRIM(NVL(privReadStr,&apos;  &apos;))||&apos; displayActualPrivilegeList=&apos;||displayActualPrivilegeList);
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;SET pos1 = POSITION(privReadStr IN privReadAppliedStr2);
&#x9;&#x9;&#x9;&#x9;&#x9;IF (pos1 &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET pos2 = INSTR(privReadAppliedStr2, &apos;|&apos;, pos1);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (localDebug = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName||&apos; : pos1=&apos;||pos1||&apos; pos2=&apos;||pos2||&apos;  LENGTH(privReadStr)=&apos;||LENGTH(privReadStr));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName||&apos; : pos1 + LENGTH(privReadStr) + 2=&apos;||cast(pos1 + LENGTH(privReadStr) + 2 as varchar));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName||&apos; : pos2 - pos1 - LENGTH(privReadStr) - 2=&apos;||cast(pos2 - pos1 - LENGTH(privReadStr) - 2 as varchar));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET displayActualPrivilegeList = SUBSTRING(privReadAppliedStr2, pos1 + LENGTH(privReadStr) + 2, pos2 - pos1 - LENGTH(privReadStr) - 2);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET privRowFound = TRUE;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug2Modified) = &apos;Y&apos; OR localDebug = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName||&apos; : Privilege row found.  row=&apos;||TRIM(NVL(privReadStr,&apos;  &apos;))||&apos; displayActualPrivilegeList=&apos;||displayActualPrivilegeList);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;-- Local Debug
&#x9;&#x9;&#x9;&#x9;IF (localDebug = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName||&apos; : privRowFound=&apos;||cast(privRowFound as varchar));
&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;IF (privRec.resourceType != &apos;END&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;IF (NOT privRowFound) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Initialize string for actual privileges
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET actualPrivilegeList = &apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET displayActualPrivilegeList = &apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET setPrivilegeList = &apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Look up the actual privilege on the CONTAINER to see if it already is set for READ
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET READ_SET = false;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FOR actual AS 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- 2016-07-11 (mtinius): Created a new procedure to allow passing in the new privilegeEntryType=privs so that the sorting is only done on explicit privileges and not combinedPrivs.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;This eliminates all of the inherited privileges which we don&apos;t care about.   This equates to fewer privilege rows to loop through. 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SELECT * FROM /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getResourcePrivileges(
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;privRec.resourcePath, privRec.resourceType, privRec.nameType, privRec.domainName, &apos;privs&apos;, privRec.name, null, null, null, null, null, &apos;NONE&apos;, null, null, debug2Modified)
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DO
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- These are the actual privileges from the resource in Composite
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (actual.p_R is not null and actual.p_R=1) then &#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set actualPrivilegeList = actualPrivilegeList || &apos;READ &apos;; &#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set displayActualPrivilegeList = displayActualPrivilegeList || &apos;R &apos;; &#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- If the path has READ set then consider this CONTAINER as &quot;Already Set&quot;.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET READ_SET = true;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (actual.p_W is not null and actual.p_W=1) then &#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set actualPrivilegeList = actualPrivilegeList || &apos;WRITE &apos;;  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set displayActualPrivilegeList = displayActualPrivilegeList || &apos;W &apos;; &#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (actual.p_E is not null and actual.p_E=1) then &#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set actualPrivilegeList = actualPrivilegeList || &apos;EXECUTE &apos;;  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set displayActualPrivilegeList = displayActualPrivilegeList || &apos;E &apos;; &#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (actual.p_S is not null and actual.p_S=1) then &#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set actualPrivilegeList = actualPrivilegeList || &apos;SELECT &apos;;  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set displayActualPrivilegeList = displayActualPrivilegeList || &apos;S &apos;; &#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (actual.p_U is not null and actual.p_U=1) then &#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set actualPrivilegeList = actualPrivilegeList || &apos;UPDATE &apos;;  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set displayActualPrivilegeList = displayActualPrivilegeList || &apos;U &apos;; &#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (actual.p_I is not null and actual.p_I=1) then &#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set actualPrivilegeList = actualPrivilegeList || &apos;INSERT &apos;;  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set displayActualPrivilegeList = displayActualPrivilegeList || &apos;I &apos;; &#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (actual.p_D is not null and actual.p_D=1) then &#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set actualPrivilegeList = actualPrivilegeList || &apos;DELETE &apos;;  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set displayActualPrivilegeList = displayActualPrivilegeList || &apos;D &apos;; &#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (actual.p_G is not null and actual.p_G=1) then &#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set actualPrivilegeList = actualPrivilegeList || &apos;GRANT &apos;;  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set displayActualPrivilegeList = displayActualPrivilegeList || &apos;G &apos;; &#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Trim the spaces before and after the list
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set actualPrivilegeList = TRIM(actualPrivilegeList);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set displayActualPrivilegeList = TRIM(displayActualPrivilegeList);

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Local Debug
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (debug2Modified = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; :       EVALUATE READ: Actual:[&apos;||actualPrivilegeList||&apos;]  &apos;|| TRIM(NVL(privRec.resourcePath,&apos;  &apos;))||&apos;::&apos;||privRec.resourceType||&apos;::&apos;||TRIM(NVL(privRec.name,&apos;  &apos;))||&apos;::&apos;||TRIM(NVL(privRec.nameType,&apos;  &apos;))||&apos;::&apos;||TRIM(NVL(privRec.domainName,&apos;  &apos;)));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END FOR;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END; -- BEGIN INDEPENDENT TRANSACTION

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (LENGTH(actualPrivilegeList) = 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET actualPrivilegeList = &apos;NONE&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET displayActualPrivilegeList = &apos;N&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Add the row to the privilege string since it was not found in the &quot;privilege read applied&quot; list.  (Already applied list.)
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Only add the name triplet into the string if this resource path needs to be set
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (READ_SET) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET status = &apos;SKIPPED [Already Set]:     &apos;||RPAD(&apos;Actual:[&apos;||displayActualPrivilegeList||&apos;]&apos;,24,&apos; &apos;);

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- 07/11/2016 mtinius - added code to log the fact that a privilege was skipped because it is set and should not be applied again.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF ( (LENGTH(TRIM(privReadAppliedStr1)) = 0 AND LENGTH(TRIM(privReadAppliedStr2)) = 0) OR 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; (POSITION(privReadStr IN privReadAppliedStr1) = 0 AND POSITION(privReadStr IN privReadAppliedStr2) = 0)) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (LENGTH(privReadAppliedStr1) + LENGTH(privReadStr||&apos;::&apos;||displayActualPrivilegeList||&apos;|&apos;) &lt; LONGVARCHARlen) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET privReadAppliedStr1 = privReadAppliedStr1 || privReadStr || &apos;::&apos; || displayActualPrivilegeList || &apos;|&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (debug2Modified = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : pos1=&apos;||cast(pos1 as varchar)||&apos; Added path to privReadAppliedStr1=&apos;||privReadAppliedStr1);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSEIF (LENGTH(privReadAppliedStr2) + LENGTH(privReadStr||&apos;::&apos;||displayActualPrivilegeList||&apos;|&apos;) &lt; LONGVARCHARlen) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET privReadAppliedStr2 = privReadAppliedStr2 || privReadStr || &apos;::&apos; || displayActualPrivilegeList || &apos;|&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (debug2Modified = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : pos1=&apos;||cast(pos1 as varchar)||&apos; Added path to privReadAppliedStr2=&apos;||privReadAppliedStr2);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;RAISE ex VALUE &apos;The length of &quot;privReadAppliedStr1&quot; and &quot;privReadAppliedStr2&quot; has been exceeded.&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Local Debug
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (localDebug = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName||&apos; : MID: LENGTH(privReadAppliedStr1)=&apos;||LENGTH(privReadAppliedStr1)|| &apos;  LENGTH(privReadAppliedStr2)=&apos;||LENGTH(privReadAppliedStr2));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- READ is not set on this resource
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET numPrivs = numPrivs + 1;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Check for NONE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (actualPrivilegeList = &apos;NONE&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET setPrivilegeList = &apos;READ&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Prepend READ mode to the privilege lists.  This is used to retain the actual privileges for the folder
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET setPrivilegeList = &apos;READ &apos;|| actualPrivilegeList;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Set status and display variables
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET displaySetPrivilegeList = TRIM(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(setPrivilegeList,&apos;NONE&apos;,&apos;N&apos;),&apos;READ&apos;,&apos;R&apos;),&apos;WRITE&apos;,&apos;W&apos;),&apos;SELECT&apos;,&apos;S&apos;),&apos;EXECUTE&apos;,&apos;E&apos;),&apos;INSERT&apos;,&apos;I&apos;),&apos;UPDATE&apos;,&apos;U&apos;),&apos;DELETE&apos;,&apos;D&apos;),&apos;GRANT&apos;,&apos;G&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET status = &apos;APPLIED [Read-only]:       &apos;||RPAD(&apos;Actual:[&apos;||displayActualPrivilegeList||&apos;]&apos;,24,&apos; &apos;)||RPAD(&apos;Set:[&apos;||displaySetPrivilegeList||&apos;]&apos;,22,&apos; &apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Initialize the string
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (privilegeStr IS NULL) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET privilegeStr = &apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Set the privilege string for updating the privileges
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET privilegeStr = privilegeStr || TRIM(NVL(privRec.domainName,&apos;  &apos;)) || &apos;::&apos; || TRIM(NVL(privRec.name,&apos;  &apos;)) ||&apos;::&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;|| TRIM(NVL(privRec.nameType,&apos;  &apos;)) ||&apos;::&apos;|| TRIM(NVL(setPrivilegeList,&apos;  &apos;)) || &apos;|&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug2Modified) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : Added privilege row.   num rows=&apos;||numPrivs);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Set the privilegeReadApplied string to track what has been applied.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF ( (LENGTH(TRIM(privReadAppliedStr1)) = 0 AND LENGTH(TRIM(privReadAppliedStr2)) = 0) OR 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; (POSITION(privReadStr IN privReadAppliedStr1) = 0 AND POSITION(privReadStr IN privReadAppliedStr2) = 0)) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (LENGTH(privReadAppliedStr1) + LENGTH(privReadStr||&apos;::&apos;||displaySetPrivilegeList||&apos;|&apos;) &lt; LONGVARCHARlen) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET privReadAppliedStr1 = privReadAppliedStr1 || privReadStr || &apos;::&apos; || displaySetPrivilegeList || &apos;|&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (debug2Modified = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : pos1=&apos;||cast(pos1 as varchar)||&apos; Added path to privReadAppliedStr1=&apos;||privReadAppliedStr1);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSEIF (LENGTH(privReadAppliedStr2) + LENGTH(privReadStr||&apos;::&apos;||displaySetPrivilegeList||&apos;|&apos;) &lt; LONGVARCHARlen) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET privReadAppliedStr2 = privReadAppliedStr2 || privReadStr || &apos;::&apos; || displaySetPrivilegeList || &apos;|&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (debug2Modified = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : pos1=&apos;||cast(pos1 as varchar)||&apos; Added path to privReadAppliedStr2=&apos;||privReadAppliedStr2);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;RAISE ex VALUE &apos;The length of &quot;privReadAppliedStr1&quot; and &quot;privReadAppliedStr2&quot; has been exceeded.&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET status = &apos;SKIPPED [Already Applied]: &apos;||RPAD(&apos;Actual:[&apos;||displayActualPrivilegeList||&apos;]&apos;,24,&apos; &apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;/******************************
&#x9;&#x9;&#x9;&#x9;&#x9; * Set Debug Information
&#x9;&#x9;&#x9;&#x9;&#x9; ******************************/
&#x9;&#x9;&#x9;&#x9;&#x9;-- Create the row string to display as long as it is not the last control record that starts with resourcePath=/zzzz and resourceType=END
&#x9;&#x9;&#x9;&#x9;&#x9;IF (debug1ReadOnly = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Convert privRec.recurseDependencies to Y or N
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set recurseDependencies = CAST(privRec.recurseDependencies AS VARCHAR);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (recurseDependencies is null) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set recurseDependencies = &apos;N&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if ( (POSITION(&apos;Y&apos; IN recurseDependencies) &gt; 0) or (POSITION(&apos;T&apos; IN recurseDependencies) &gt; 0) ) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set recurseDependencies = &apos;Y&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if ( (POSITION(&apos;N&apos; IN recurseDependencies) &gt; 0) or (POSITION(&apos;F&apos; IN recurseDependencies) &gt; 0) ) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set recurseDependencies = &apos;N&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (POSITION(&apos;1&apos; IN recurseDependencies) &gt; 0)  then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set recurseDependencies = &apos;Y&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (POSITION(&apos;0&apos; IN recurseDependencies) &gt; 0)  then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set recurseDependencies = &apos;N&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Convert privRec.recurseDependents to Y or N
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set recurseDependents = CAST(privRec.recurseDependents AS VARCHAR);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (recurseDependents is null) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set recurseDependents = &apos;N&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if ( (POSITION(&apos;Y&apos; IN recurseDependents) &gt; 0) or (POSITION(&apos;T&apos; IN recurseDependents) &gt; 0) ) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set recurseDependents = &apos;Y&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if ( (POSITION(&apos;N&apos; IN recurseDependents) &gt; 0) or (POSITION(&apos;F&apos; IN recurseDependents) &gt; 0) ) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set recurseDependents = &apos;N&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (POSITION(&apos;1&apos; IN recurseDependents) &gt; 0)  then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set recurseDependents = &apos;Y&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (POSITION(&apos;0&apos; IN recurseDependents) &gt; 0)  then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set recurseDependents = &apos;N&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Convert privRec.recurseChild to Y or N
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set recurseChild = CAST(privRec.recurseChild AS VARCHAR);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (recurseChild is null) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set recurseChild = &apos;N&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if ( (POSITION(&apos;Y&apos; IN recurseChild) &gt; 0) or (POSITION(&apos;T&apos; IN recurseChild) &gt; 0) ) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set recurseChild = &apos;Y&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if ( (POSITION(&apos;N&apos; IN recurseChild) &gt; 0) or (POSITION(&apos;F&apos; IN recurseChild) &gt; 0) ) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set recurseChild = &apos;N&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (POSITION(&apos;1&apos; IN recurseChild) &gt; 0)  then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set recurseChild = &apos;Y&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (POSITION(&apos;0&apos; IN recurseChild) &gt; 0)  then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set recurseChild = &apos;N&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rowString = &apos;Status=&apos;||status||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos; ResPath=&apos;||TRIM(NVL(privRec.resourcePath,&apos; &apos;)) || 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos; ResType=&apos;||TRIM(NVL(privRec.resourceType,&apos; &apos;)) ||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos; Dependencies=&apos;||recurseDependencies || 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos; Dependents=&apos;||recurseDependents || 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos; Child=&apos;||recurseChild  || 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos; mode=&apos;|| TRIM(NVL(privRec.mode,&apos; &apos;)) ||  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos; Name=&apos;||TRIM(NVL(privRec.name,&apos; &apos;)) || 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos; Type=&apos;||TRIM(NVL(privRec.nameType,&apos; &apos;)) || 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos; Domain=&apos;||TRIM(NVL(privRec.domainName,&apos; &apos;)) || 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos; EnvType=&apos;||TRIM(NVL(envType,&apos; &apos;)) || 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos; ActualPrivileges=&apos;||TRIM(NVL(displayActualPrivilegeList,&apos; &apos;)) || 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos; Owner=&apos;||TRIM(NVL(privRec.owner,&apos; &apos;)) || 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos; OwnerDomain=&apos;||TRIM(NVL(privRec.ownerDomain,&apos; &apos;))||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;|&apos;||newline;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/addLogOutput(debug1Console, debug1CISLog, logOutput, moduleName||&apos; : &apos;||rowString, logOutput);
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;-- Set the previous resource path and type so as to track when a line is different than the previous
&#x9;&#x9;&#x9;&#x9;--   This will trigger invoking the updateResourcePrivileges() method during batch privilege processing.
&#x9;&#x9;&#x9;&#x9;SET prevPrivRec = privRec;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END FOR;

&#x9;&#x9;IF (preview = &apos;N&apos; AND numRows &gt; 1) THEN
&#x9;&#x9;&#x9;IF (debug1ReadOnly = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;-- Output a blank line for end of processing if not preview and rows processed.
&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/addLogOutput(debug1Console, debug1CISLog, logOutput, &apos;|&apos;||newline, logOutput);
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END IF;

&#x9;&#x9;-- Local Debug
&#x9;&#x9;IF (debug2Modified = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;call print(moduleName||&apos; : END: LENGTH(privReadStr1)=&apos;||LENGTH(privReadStr1)||&apos;  LENGTH(privReadStr2)=&apos;||LENGTH(privReadStr2));
&#x9;&#x9;&#x9;call print(moduleName||&apos; : END: LENGTH(privReadAppliedStr1)=&apos;||LENGTH(privReadAppliedStr1)|| &apos;  LENGTH(privReadAppliedStr2)=&apos;||LENGTH(privReadAppliedStr2));
&#x9;&#x9;END IF;

 &#x9;&#x9;-- Reset the read string since all changes have been applied
&#x9;&#x9;SET privReadStr1 = NULL;
&#x9;&#x9;SET privReadStr2 = NULL;
&#x9;END IF;
END</attribute>
  <attribute name="creationDate" type="LONG">1414441694073</attribute>
  <attribute name="creatorUserDomain" type="STRING">composite</attribute>
  <attribute name="creatorUserName" type="STRING">admin</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1560603906783</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="p:10:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="p:4:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="p:5:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="p:6:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="p:7:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="p:8:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="p:9:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">16/479</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">13/385</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/399</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">16/530</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/255</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">13/386</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/275</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">13/387</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/378</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/372</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/159</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/373</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/645</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/644</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">13/392</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">16/525</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/364</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/365</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/263</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">13/338</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">16/484</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/371</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">14/492</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">14/458</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">14/516</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/160</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
  </attribute>
</metadata>