<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:e931daa6-7fda-456a-badf-4cdb1c228a1a -->
<metadata name="modify_06_COMPOSITE_PRIVILEGES" path="/shared/ASAssets/BestPractices_v81/PrivilegeScripts/ModifyDBPrivileges/TableMaintenance/modify_06_COMPOSITE_PRIVILEGES" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>&lt;![CDATA[&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.
]]&gt;</annotation>
  <parameters>
    <parameter name="datasource" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="performInsertUpdate" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="1"/>
    </parameter>
    <parameter name="setInactive" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="1"/>
    </parameter>
    <parameter name="performDelete" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="1"/>
    </parameter>
    <parameter name="inPRIVILEGE_ID" direction="IN" nullable="true">
      <datatype name="DECIMAL" type="DECIMAL" maxDigits="38" maxFractionalDigits="0"/>
    </parameter>
    <parameter name="inORGANIZATION_NAME" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="inPROJECT_NAME" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="inSUBPROJECT_NAME" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="inRESOURCE_PATH" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="inRESOURCE_TYPE" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="inRECURSE_DEPENDENCIES" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="1"/>
    </parameter>
    <parameter name="inRECURSE_DEPENDENTS" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="1"/>
    </parameter>
    <parameter name="inRECURSE_CHILD" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="2"/>
    </parameter>
    <parameter name="inREVOKE_ALL" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="1"/>
    </parameter>
    <parameter name="inNAME" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="1000"/>
    </parameter>
    <parameter name="inNAME_TYPE" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="inDOMAIN_NAME" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="inENVIRONMENT_NAME" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="inREAD_ACCESS" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="1"/>
    </parameter>
    <parameter name="inWRITE_ACCESS" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="1"/>
    </parameter>
    <parameter name="inEXECUTE_ACCESS" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="1"/>
    </parameter>
    <parameter name="inSELECT_ACCESS" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="1"/>
    </parameter>
    <parameter name="inUPDATE_ACCESS" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="1"/>
    </parameter>
    <parameter name="inINSERT_ACCESS" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="1"/>
    </parameter>
    <parameter name="inDELETE_ACCESS" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="1"/>
    </parameter>
    <parameter name="inGRANT_ACCESS" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="1"/>
    </parameter>
    <parameter name="inINITIALIZE" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="1"/>
    </parameter>
    <parameter name="inOWNER_NAME" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="inOWNER_DOMAIN" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="inCOMMENTS" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="actionType" direction="OUT" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="rowsProcessed" direction="OUT" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="duplicateRows" direction="OUT" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="duplicateRowMsg" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="message" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getPrivilegeDatasourceToScriptMapping" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="scriptType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="datasource" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="scriptMapping" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getSQLPrivileges" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="datasource" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="Environment_Name" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="Organization" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="Project" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="SubProject" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="Sheet_Name" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="Resource_Path" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Resource_Type" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="Name_" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="Name_Type" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="Domain_Name" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="sqlStatement" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="fromClause" direction="OUT">
        <datatype type="STRING" maxLength="2048"/>
      </element>
      <element name="whereClause" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/PrivilegeScripts/ModifyDBPrivileges/TableMaintenance/modify_01_ORGANIZATION_TYPE" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="datasource" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="setInactive" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="performDelete" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="inORGANIZATION_NAME" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="message" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/PrivilegeScripts/ModifyDBPrivileges/TableMaintenance/modify_04_PROJECT_TYPE" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="datasource" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="setInactive" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="performDelete" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="inPROJECT_NAME" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inORGANIZATION_NAME" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="message" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/PrivilegeScripts/ModifyDBPrivileges/TableMaintenance/modify_05_SUBPROJECT_TYPE" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="datasource" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="setInactive" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="performDelete" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="inSUBPROJECT_NAME" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inPROJECT_NAME" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inORGANIZATION_NAME" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="message" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/*
&#x9;This procedure is used to insert/update/delete/inactivate rows in the COMPOSITE_PRIVILEGES table.
&#x9;These are rows that come from the Privileges_shared, Privileges_databases, and Privileges_webservices 
&#x9;sheets in the Composite_Resource_Privileges_LOAD_DB.xlsx spreadsheet.

&#x9;For deleting records the following fields are used to create the where clause:
&#x9;&#x9;PRIVIELGE_ID - if present then it only uses this to delete that 1 record.
&#x9;&#x9;The following list of fields are used for constructing a dynamic where clause.  If a field contains a null then it
&#x9;&#x9;is not used for the where clause.  Therefore it provides a lot of flexibility for deleting as much or little as you wish.
&#x9;&#x9;&#x9;inENVIRONMENT_NAME, inORGANIZATION_NAME, inPROJECT_NAME, inSUBPROJECT_NAME, inRESOURCE_PATH, inNAME, inNAME_TYPE, inDOMAIN_NAME

&#x9;Example record for insert or update:
&#x9;&#x9;PRIVILEGE_ID:&#x9;&#x9;2
&#x9;&#x9;ORGANIZATION_NAME:&#x9;ORG1
&#x9;&#x9;PRIVILEGE_TYPE:&#x9;&#x9;SHARED
&#x9;&#x9;PROJECT_NAME:&#x9;&#x9;Common
&#x9;&#x9;SUBPROJECT_NAME:&#x9;[NULL]
&#x9;&#x9;RESOURCE_PATH:&#x9;&#x9;/shared/Common/generateViews
&#x9;&#x9;RESOURCE_TYPE:&#x9;&#x9;CONTAINER
&#x9;&#x9;RECURSE_DEPENDENCIES:[NULL]
&#x9;&#x9;RECURSE_DEPENDENTS:&#x9;[NULL]
&#x9;&#x9;RECURSE_CHILD:&#x9;&#x9;YM
&#x9;&#x9;REVOKE_ALL:&#x9;&#x9;&#x9;N
&#x9;&#x9;NAME:&#x9;&#x9;&#x9;&#x9;group1
&#x9;&#x9;NAME_TYPE:&#x9;&#x9;&#x9;GROUP
&#x9;&#x9;DOMAIN_NAME:&#x9;&#x9;composite
&#x9;&#x9;ENVIRONMENT_NAME:&#x9;DEV
&#x9;&#x9;READ_ACCESS:&#x9;&#x9;X
&#x9;&#x9;WRITE_ACCESS:&#x9;&#x9;[NULL]
&#x9;&#x9;EXECUTE_ACCESS:&#x9;&#x9;X
&#x9;&#x9;SELECT_ACCESS:&#x9;&#x9;X
&#x9;&#x9;UPDATE_ACCESS:&#x9;&#x9;[NULL]
&#x9;&#x9;INSERT_ACCESS:&#x9;&#x9;[NULL]
&#x9;&#x9;DELETE_ACCESS:&#x9;&#x9;[NULL]
&#x9;&#x9;GRANT_ACCESS:&#x9;&#x9;[NULL]
&#x9;&#x9;INITIALIZE:&#x9;&#x9;&#x9;X
&#x9;&#x9;OWNER_NAME:&#x9;&#x9;&#x9;[NULL]
&#x9;&#x9;OWNER_DOMAIN:&#x9;&#x9;[NULL]
&#x9;&#x9;COMMENTS:&#x9;&#x9;&#x9;initialize
&#x9;&#x9;CREATEDBY:&#x9;&#x9;&#x9;CMPPRV
&#x9;&#x9;CREATEDDATE:&#x9;&#x9;2017-05-17 15:31:13
&#x9;&#x9;UPDATEDBY:&#x9;&#x9;&#x9;CMPPRV
&#x9;&#x9;UPDATEDDATE:&#x9;&#x9;2017-05-17 15:31:13
&#x9;&#x9;ISACTIVE:&#x9;&#x9;&#x9;Y

&#x9;Input:
&#x9;&#x9;datasource&#x9;&#x9;&#x9;&#x9;- REQUIRED FILTER: DB_[LLE,PROD], The source of the groups. Refer to getPrivilegeDatasourceToScriptMapping().
&#x9;&#x9;performInsertUpdate&#x9;&#x9;- Y or N.  Y=yes perform insert or update.  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;- N=no do not perform insert or update but display the same messages to see what will be executed.&#x9;&#x9;setInactive&#x9;&#x9;&#x9;&#x9;- Set the ISACTIVE flag to N
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Y=if the record exists set it inactive.  Overrides performDelete
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;N/null=do not perform this operation.
&#x9;&#x9;setInactive&#x9;&#x9;&#x9;&#x9;- Y=if the record exists set it inactive.  Overrides performDelete
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;- N/null=do not perform this operation.
&#x9;&#x9;performDelete&#x9;&#x9;&#x9;- Delete the row if it exists
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Y=perform a delete using filters supplied.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;N/null=do not perform delete but perform insert or update instead.
&#x9;&#x9;various fields...
&#x9;Output:
&#x9;&#x9;actionType&#x9;&#x9;&#x9;&#x9;- I=insert, U=update, D=delete, S=set inactive
&#x9;&#x9;rowsProcessed&#x9;&#x9;&#x9;- Number of rows process for the action type
&#x9;&#x9;duplicateRows&#x9;&#x9;&#x9;- number of duplicate rows
&#x9;&#x9;duplicateRowMsg&#x9;&#x9;&#x9;- a duplicate row message
&#x9;&#x9;message&#x9;&#x9;&#x9;&#x9;&#x9;- a general message

&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;CIS Version:&#x9;Reason:
&#x9;--------------&#x9;------------------&#x9;------------&#x9;-------
&#x9;05/16/2017&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.5&#x9;&#x9;&#x9;Adapted for Data Abstraction Best Practices.

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

*/
PROCEDURE modify_06_COMPOSITE_PRIVILEGES(
&#x9;IN &#x9;datasource&#x9;&#x9;&#x9;&#x9;VARCHAR(255),-- REQUIRED FILTER: DB_[LLE,PROD], The source of the groups. Refer to getPrivilegeDatasourceToScriptMapping().
&#x9;IN &#x9;performInsertUpdate&#x9;&#x9;VARCHAR(1),&#x9;-- Y or N.  Y=yes perform insert or update.  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- N=no do not perform insert or update but display the same messages to see what will be executed.
&#x9;IN&#x9;setInactive&#x9;&#x9;&#x9;&#x9;VARCHAR(1),&#x9;-- Y=if the record exists set it inactive.  Overrides performDelete
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- N/null=do not perform this operation.
&#x9;IN&#x9;performDelete&#x9;&#x9;&#x9;VARCHAR(1),&#x9;-- Y=perform a delete using filters supplied.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- N/null=do not perform delete but perform insert or update instead.
&#x9;IN&#x9;inPRIVILEGE_ID&#x9;&#x9;&#x9;DECIMAL(38,0), -- This is used only when deleting a specific row by its generated PRIVILEGE_ID
&#x9;IN &#x9;inORGANIZATION_NAME&#x9;&#x9;VARCHAR(255),
&#x9;IN&#x9;inPROJECT_NAME&#x9;&#x9;&#x9;VARCHAR(255),
&#x9;IN&#x9;inSUBPROJECT_NAME&#x9;&#x9;VARCHAR(255),
&#x9;IN&#x9;inRESOURCE_PATH&#x9;&#x9;&#x9;VARCHAR(4000),
&#x9;IN&#x9;inRESOURCE_TYPE&#x9;&#x9;&#x9;VARCHAR(255),
&#x9;IN&#x9;inRECURSE_DEPENDENCIES&#x9;VARCHAR(1),
&#x9;IN&#x9;inRECURSE_DEPENDENTS&#x9;VARCHAR(1),
&#x9;IN&#x9;inRECURSE_CHILD&#x9;&#x9;&#x9;VARCHAR(2),&#x9;-- not null: YM or YC
&#x9;IN&#x9;inREVOKE_ALL&#x9;&#x9;&#x9;VARCHAR(1),&#x9;-- not null: Y or N
&#x9;IN&#x9;inNAME&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(1000),&#x9;&#x9;&#x9;&#x9;&#x9;
&#x9;IN&#x9;inNAME_TYPE&#x9;&#x9;&#x9;&#x9;VARCHAR(255),
&#x9;IN&#x9;inDOMAIN_NAME&#x9;&#x9;&#x9;VARCHAR(255),
&#x9;IN&#x9;inENVIRONMENT_NAME&#x9;&#x9;VARCHAR(255),
&#x9;IN&#x9;inREAD_ACCESS&#x9;&#x9;&#x9;VARCHAR(1),&#x9;-- null or X to indicate access.
&#x9;IN&#x9;inWRITE_ACCESS&#x9;&#x9;&#x9;VARCHAR(1),&#x9;-- null or X to indicate access.
&#x9;IN&#x9;inEXECUTE_ACCESS&#x9;&#x9;VARCHAR(1),&#x9;-- null or X to indicate access.
&#x9;IN&#x9;inSELECT_ACCESS&#x9;&#x9;&#x9;VARCHAR(1),&#x9;-- null or X to indicate access.
&#x9;IN&#x9;inUPDATE_ACCESS&#x9;&#x9;&#x9;VARCHAR(1),&#x9;-- null or X to indicate access.
&#x9;IN&#x9;inINSERT_ACCESS&#x9;&#x9;&#x9;VARCHAR(1),&#x9;-- null or X to indicate access.
&#x9;IN&#x9;inDELETE_ACCESS&#x9;&#x9;&#x9;VARCHAR(1),&#x9;-- null or X to indicate access.
&#x9;IN&#x9;inGRANT_ACCESS&#x9;&#x9;&#x9;VARCHAR(1),&#x9;-- null or X to indicate access.
&#x9;IN&#x9;inINITIALIZE&#x9;&#x9;&#x9;VARCHAR(1), -- null or X to indicate access.
&#x9;IN&#x9;inOWNER_NAME&#x9;&#x9;&#x9;VARCHAR(255),
&#x9;IN&#x9;inOWNER_DOMAIN&#x9;&#x9;&#x9;VARCHAR(255),
&#x9;IN&#x9;inCOMMENTS&#x9;&#x9;&#x9;&#x9;VARCHAR(4000),
&#x9;OUT actionType&#x9;&#x9;&#x9;&#x9;CHAR(1),&#x9;-- I=insert, U=update, D=delete, S=set inactive
&#x9;OUT rowsProcessed&#x9;&#x9;&#x9;INTEGER,&#x9;-- Number of rows process for the action type
&#x9;OUT duplicateRows&#x9;&#x9;&#x9;INTEGER,&#x9;-- Number of duplicate rows found
&#x9;OUT duplicateRowMsg&#x9;&#x9;&#x9;LONGVARCHAR,-- message for duplicate rows
&#x9;OUT&#x9;message&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR&#x9;-- a general message
)
BEGIN
&#x9;DECLARE moduleName&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;modify_06_COMPOSITE_PRIVILEGES&apos;;
&#x9;DECLARE debug&#x9;&#x9;&#x9;&#x9;CHAR(1) DEFAULT &apos;Y&apos;;
&#x9;DECLARE ex&#x9;&#x9;&#x9;&#x9;&#x9;EXCEPTION;
&#x9;DECLARE cnt&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE privilegeType&#x9;&#x9;VARCHAR;
&#x9;DECLARE duplicate&#x9;&#x9;&#x9;BOOLEAN;
&#x9;DECLARE Sheet_Name&#x9;&#x9;&#x9;VARCHAR DEFAULT null;
&#x9;DECLARE sqlStatement&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE sqlStatement2&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE sqlStatement3&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE fromClause&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE whereClause&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE pos&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE i&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE rowCount&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE subprojectCount&#x9;&#x9;INTEGER DEFAULT 0;
&#x9;DECLARE countCursor&#x9;&#x9;&#x9;CURSOR(rowCount INTEGER);
&#x9;DECLARE EnvTypeCursor&#x9;&#x9;CURSOR(EnvType VARCHAR(300));
&#x9;DECLARE EnvTypeList&#x9;&#x9;&#x9;LONGVARCHAR DEFAULT &apos;&apos;;
&#x9;DECLARE duplicateCursor&#x9;&#x9;CURSOR(cnt INTEGER, ORGANIZATION_NAME VARCHAR(255), PROJECT_NAME VARCHAR(255), SUBPROJECT_NAME VARCHAR(255), RESOURCE_PATH VARCHAR(4000), RESOURCE_TYPE VARCHAR(255), DOMAIN_NAME VARCHAR(255), NAME_TYPE VARCHAR(255), NAME VARCHAR(255), ENVIRONMENT_NAME VARCHAR(255));
&#x9;DECLARE msg&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE scriptPath&#x9;&#x9;&#x9;VARCHAR(4000);

&#x9;set rowsProcessed = 0;
&#x9;set duplicateRows = 0;
&#x9;set duplicateRowMsg = &apos;&apos;;

&#x9;IF (datasource IS NOT NULL AND datasource = &apos;EXCEL&apos;) THEN
&#x9;&#x9;raise ex value &apos;The input variable datasource=&quot;EXCEL&quot; is not valid.&apos;;
&#x9;END IF;

&#x9;-- Verify the ORGANIZATION type
&#x9;if (inORGANIZATION_NAME is null or length(trim(inORGANIZATION_NAME)) = 0) then
&#x9;&#x9;raise ex value &apos;inORGANIZATION_NAME cannot be null or empty.&apos;;
&#x9;end if;
&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getPrivilegeDatasourceToScriptMapping(&apos;OT&apos;, datasource, scriptPath);
&#x9;set sqlStatement = &apos;select count(*) cnt from &apos;||scriptPath||&apos; where ORGANIZATION_NAME = &apos;&apos;&apos;||inORGANIZATION_NAME||&apos;&apos;&apos; and ISACTIVE = &apos;&apos;Y&apos;&apos;&apos;;
&#x9;open countCursor for sqlStatement;
&#x9;fetch countCursor into cnt;
&#x9;close countCursor;
&#x9;if (cnt is null or cnt = 0) then
&#x9;&#x9;raise ex value &apos;inORGANIZATION_NAME=&apos;||inORGANIZATION_NAME||&apos; is not valid.&apos;;
&#x9;end if;

&#x9;-- Determine the operation: insert/update/delete/inactivate
&#x9;if (performInsertUpdate is not null and upper(performInsertUpdate) = &apos;Y&apos;) then
&#x9;&#x9;-- Verify the PROJECT type
&#x9;&#x9;if (inPROJECT_NAME is null or length(trim(inPROJECT_NAME)) = 0) then
&#x9;&#x9;&#x9;raise ex value &apos;inPROJECT_NAME cannot be null or empty.&apos;;
&#x9;&#x9;end if;
&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getPrivilegeDatasourceToScriptMapping(&apos;PT&apos;, datasource, scriptPath);
&#x9;&#x9;set sqlStatement = &apos;select count(*) cnt from &apos;||scriptPath||&apos; where PROJECT_NAME = &apos;&apos;&apos;||inPROJECT_NAME||&apos;&apos;&apos; and ORGANIZATION_NAME = &apos;&apos;&apos;||inORGANIZATION_NAME||&apos;&apos;&apos; and ISACTIVE = &apos;&apos;Y&apos;&apos;&apos;;
&#x9;&#x9;open countCursor for sqlStatement;
&#x9;&#x9;fetch countCursor into cnt;
&#x9;&#x9;close countCursor;
&#x9;&#x9;if (cnt is null or cnt = 0) then
&#x9;&#x9;&#x9;raise ex value &apos;inPROJECT_NAME=&apos;||inPROJECT_NAME||&apos; and inORGANIZATION_NAME=&apos;||inORGANIZATION_NAME||&apos; is not valid.&apos;;
&#x9;&#x9;end if;

&#x9;&#x9;-- Verify the RESOURCE_PATH and RESOURCE_TYPE
&#x9;&#x9;if (inRESOURCE_PATH is null or length(trim(inRESOURCE_PATH)) = 0) then
&#x9;&#x9;&#x9;raise ex value &apos;inRESOURCE_PATH cannot be null or empty.&apos;;
&#x9;&#x9;end if;
&#x9;&#x9;if (inRESOURCE_TYPE is null or length(trim(inRESOURCE_TYPE)) = 0) then
&#x9;&#x9;&#x9;raise ex value &apos;inRESOURCE_TYPE cannot be null or empty.&apos;;
&#x9;&#x9;end if;
&#x9;&#x9;-- Verify the NAME and NAME_TYPE
&#x9;&#x9;if (inNAME is null or length(trim(inNAME)) = 0) then
&#x9;&#x9;&#x9;raise ex value &apos;inNAME cannot be null or empty.&apos;;
&#x9;&#x9;end if;
&#x9;&#x9;if (inNAME_TYPE is null or length(trim(inNAME_TYPE)) = 0) then
&#x9;&#x9;&#x9;raise ex value &apos;inNAME_TYPE cannot be null or empty.&apos;;
&#x9;&#x9;end if;

&#x9;&#x9;-- Verify the DOMAIN type
&#x9;&#x9;if (inDOMAIN_NAME is null or length(trim(inDOMAIN_NAME)) = 0) then
&#x9;&#x9;&#x9;raise ex value &apos;inDOMAIN_NAME cannot be null or empty.&apos;;
&#x9;&#x9;end if;
&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getPrivilegeDatasourceToScriptMapping(&apos;DT&apos;, datasource, scriptPath);
&#x9;&#x9;set sqlStatement = &apos;select count(*) cnt from &apos;||scriptPath||&apos; where DOMAIN_NAME = &apos;&apos;&apos;||inDOMAIN_NAME||&apos;&apos;&apos; and ISACTIVE = &apos;&apos;Y&apos;&apos;&apos;;
&#x9;&#x9;open countCursor for sqlStatement;
&#x9;&#x9;fetch countCursor into cnt;
&#x9;&#x9;close countCursor;
&#x9;&#x9;if (cnt is null or cnt = 0) then
&#x9;&#x9;&#x9;raise ex value &apos;inDOMAIN_NAME=&apos;||inDOMAIN_NAME||&apos; is not valid.&apos;;
&#x9;&#x9;end if;

&#x9;&#x9;-- Verify the ENVIRONMENT_NAME
&#x9;&#x9;if (inENVIRONMENT_NAME is null or length(trim(inENVIRONMENT_NAME)) = 0) then
&#x9;&#x9;&#x9;raise ex value &apos;inENVIRONMENT_NAME cannot be null or empty.&apos;;
&#x9;&#x9;end if;
&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getPrivilegeDatasourceToScriptMapping(&apos;ET&apos;, datasource, scriptPath);
&#x9;&#x9;set sqlStatement = &apos;select count(*) cnt from &apos;||scriptPath||&apos; where ENVIRONMENT_NAME = &apos;&apos;&apos;||inENVIRONMENT_NAME||&apos;&apos;&apos; and ISACTIVE = &apos;&apos;Y&apos;&apos;&apos;;
&#x9;&#x9;open countCursor for sqlStatement;
&#x9;&#x9;fetch countCursor into cnt;
&#x9;&#x9;close countCursor;
&#x9;&#x9;if (cnt is null or cnt = 0) then
&#x9;&#x9;&#x9;raise ex value &apos;inENVIRONMENT_NAME=&apos;||inENVIRONMENT_NAME||&apos; is not valid.&apos;;
&#x9;&#x9;end if;

&#x9;&#x9;-- Verify the SUBPROJECT type
&#x9;&#x9;if (inSUBPROJECT_NAME is not null) then
&#x9;&#x9;&#x9;if (length(trim(inSUBPROJECT_NAME)) = 0) then
&#x9;&#x9;&#x9;&#x9;raise ex value &apos;inSUBPROJECT_NAME cannot be empty.&apos;;
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getPrivilegeDatasourceToScriptMapping(&apos;ST&apos;, datasource, scriptPath);
&#x9;&#x9;&#x9;set sqlStatement = &apos;select count(*) cnt from &apos;||scriptPath||&apos; where SUBPROJECT_NAME = &apos;&apos;&apos;||inSUBPROJECT_NAME||&apos;&apos;&apos; and PROJECT_NAME = &apos;&apos;&apos;||inPROJECT_NAME||&apos;&apos;&apos; and  ISACTIVE = &apos;&apos;Y&apos;&apos;&apos;;
&#x9;&#x9;&#x9;open countCursor for sqlStatement;
&#x9;&#x9;&#x9;fetch countCursor into cnt;
&#x9;&#x9;&#x9;close countCursor;
&#x9;&#x9;&#x9;if (cnt is null or cnt = 0) then
&#x9;&#x9;&#x9;&#x9;raise ex value &apos;inSUBPROJECT_NAME=&apos;||inSUBPROJECT_NAME||&apos; and inPROJECT_NAME=&apos;||inPROJECT_NAME||&apos; is not valid.&apos;;
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;end if;

&#x9;&#x9;if (inRECURSE_DEPENDENCIES is not null and upper(inRECURSE_DEPENDENCIES) &lt;&gt; &apos;N&apos; AND upper(inRECURSE_DEPENDENCIES) &lt;&gt; &apos;Y&apos;) then
&#x9;&#x9;&#x9;raise ex value &apos;inRECURSE_DEPENDENCIES cannot be any value other than &quot;N&quot; OR &quot;Y&quot;.&apos;;
&#x9;&#x9;end if;
&#x9;&#x9;if (inRECURSE_DEPENDENTS is not null and upper(inRECURSE_DEPENDENTS) &lt;&gt; &apos;N&apos; AND upper(inRECURSE_DEPENDENTS) &lt;&gt; &apos;Y&apos;) then
&#x9;&#x9;&#x9;raise ex value &apos;inRECURSE_DEPENDENTS cannot be any value other than &quot;N&quot; OR &quot;Y&quot;.&apos;;
&#x9;&#x9;end if;
&#x9;&#x9;if (inRECURSE_CHILD is null or (inRECURSE_CHILD is not null and upper(inRECURSE_CHILD) &lt;&gt; &apos;N&apos; AND upper(inRECURSE_CHILD) &lt;&gt; &apos;YC&apos; AND upper(inRECURSE_CHILD) &lt;&gt; &apos;YM&apos;)) then
&#x9;&#x9;&#x9;raise ex value &apos;inRECURSE_CHILD cannot be any value other than &quot;N&quot;, &quot;YC&quot; OR &quot;YM&quot;.&apos;;
&#x9;&#x9;end if;
&#x9;&#x9;if (inREVOKE_ALL is null or (inREVOKE_ALL is not null and upper(inREVOKE_ALL) &lt;&gt; &apos;N&apos; AND upper(inREVOKE_ALL) &lt;&gt; &apos;Y&apos;)) then
&#x9;&#x9;&#x9;raise ex value &apos;inREVOKE_ALL cannot be any value other than &quot;N&quot; OR &quot;Y&quot;.&apos;;
&#x9;&#x9;end if;
&#x9;&#x9;if (inNAME_TYPE is not null and (length(trim(inNAME_TYPE)) = 0) or (upper(inNAME_TYPE) &lt;&gt; &apos;USER&apos; AND upper(inNAME_TYPE) &lt;&gt; &apos;GROUP&apos;)) then
&#x9;&#x9;&#x9;raise ex value &apos;inNAME_TYPE cannot be empty or any value other than &quot;USER&quot; OR &quot;GROUP&quot;.&apos;;
&#x9;&#x9;end if;
&#x9;&#x9;if (inREAD_ACCESS is not null and (length(trim(inREAD_ACCESS)) = 0 or upper(inREAD_ACCESS) &lt;&gt; &apos;X&apos;)) then
&#x9;&#x9;&#x9;raise ex value &apos;inREAD_ACCESS cannot be empty or any value other than &quot;X&quot;.&apos;;
&#x9;&#x9;end if;
&#x9;&#x9;if (inWRITE_ACCESS is not null and (length(trim(inWRITE_ACCESS)) = 0 or upper(inWRITE_ACCESS) &lt;&gt; &apos;X&apos;)) then
&#x9;&#x9;&#x9;raise ex value &apos;inWRITE_ACCESS cannot be empty or any value other than &quot;X&quot;.&apos;;
&#x9;&#x9;end if;
&#x9;&#x9;if (inEXECUTE_ACCESS is not null and (length(trim(inEXECUTE_ACCESS)) = 0 or upper(inEXECUTE_ACCESS) &lt;&gt; &apos;X&apos;)) then
&#x9;&#x9;&#x9;raise ex value &apos;inEXECUTE_ACCESS cannot be empty or any value other than &quot;X&quot;.&apos;;
&#x9;&#x9;end if;
&#x9;&#x9;if (inSELECT_ACCESS is not null and (length(trim(inSELECT_ACCESS)) = 0 or upper(inSELECT_ACCESS) &lt;&gt; &apos;X&apos;)) then
&#x9;&#x9;&#x9;raise ex value &apos;inSELECT_ACCESS cannot be empty or any value other than &quot;X&quot;.&apos;;
&#x9;&#x9;end if;
&#x9;&#x9;if (inUPDATE_ACCESS is not null and (length(trim(inUPDATE_ACCESS)) = 0 or upper(inUPDATE_ACCESS) &lt;&gt; &apos;X&apos;)) then
&#x9;&#x9;&#x9;raise ex value &apos;inUPDATE_ACCESS cannot be empty or any value other than &quot;X&quot;.&apos;;
&#x9;&#x9;end if;
&#x9;&#x9;if (inINSERT_ACCESS is not null and (length(trim(inINSERT_ACCESS)) = 0 or upper(inINSERT_ACCESS) &lt;&gt; &apos;X&apos;)) then
&#x9;&#x9;&#x9;raise ex value &apos;inINSERT_ACCESS cannot be empty or any value other than &quot;X&quot;.&apos;;
&#x9;&#x9;end if;
&#x9;&#x9;if (inDELETE_ACCESS is not null and (length(trim(inDELETE_ACCESS)) = 0 or upper(inDELETE_ACCESS) &lt;&gt; &apos;X&apos;)) then
&#x9;&#x9;&#x9;raise ex value &apos;inDELETE_ACCESS cannot be empty or any value other than &quot;X&quot;.&apos;;
&#x9;&#x9;end if;
&#x9;&#x9;if (inGRANT_ACCESS is not null and (length(trim(inGRANT_ACCESS)) = 0 or upper(inGRANT_ACCESS) &lt;&gt; &apos;X&apos;)) then
&#x9;&#x9;&#x9;raise ex value &apos;inGRANT_ACCESS cannot be empty or any value other than &quot;X&quot;.&apos;;
&#x9;&#x9;end if;
&#x9;&#x9;if (inINITIALIZE is not null and (length(trim(inINITIALIZE)) = 0 or upper(inINITIALIZE) &lt;&gt; &apos;X&apos;)) then
&#x9;&#x9;&#x9;raise ex value &apos;inINITIALIZE cannot be empty or any value other than &quot;X&quot;.&apos;;
&#x9;&#x9;end if;
&#x9;&#x9;-- Determine the PRIVILEGE_TYPE [SHARED|DATABASES|WEBSERVICES]
&#x9;&#x9;if (instr(lower(trim(inRESOURCE_PATH)), &apos;/shared&apos;) = 1) then
&#x9;&#x9;&#x9;set privilegeType = &apos;SHARED&apos;;
&#x9;&#x9;end if;
&#x9;&#x9;if (instr(lower(trim(inRESOURCE_PATH)), &apos;/services/databases&apos;) = 1) then
&#x9;&#x9;&#x9;set privilegeType = &apos;DATABASES&apos;;
&#x9;&#x9;end if;
&#x9;&#x9;if (instr(lower(trim(inRESOURCE_PATH)), &apos;/services/webservices&apos;) = 1) then
&#x9;&#x9;&#x9;set privilegeType = &apos;WEBSERVICES&apos;;
&#x9;&#x9;end if;

&#x9;&#x9;-- Determine if this combination of already exists.
&#x9;&#x9;SET duplicate = false;

&#x9;&#x9;-- Check for existing records
&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getPrivilegeDatasourceToScriptMapping(&apos;CP&apos;, datasource, scriptPath);
&#x9;&#x9;CALL /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getSQLPrivileges(
&#x9;&#x9;&#x9;&#x9;datasource, inENVIRONMENT_NAME, inORGANIZATION_NAME, inPROJECT_NAME, inSUBPROJECT_NAME, Sheet_Name, inRESOURCE_PATH, inRESOURCE_TYPE,
&#x9;&#x9;&#x9;&#x9;inNAME, inNAME_TYPE, inDOMAIN_NAME, debug, sqlStatement, fromClause, whereClause);

&#x9;&#x9;set sqlStatement = &apos;SELECT g.cnt, c.ORGANIZATION_NAME, c.PROJECT_NAME, c.SUBPROJECT_NAME, c.RESOURCE_PATH, c.RESOURCE_TYPE, c.DOMAIN_NAME, c.NAME_TYPE, c.NAME, c.ENVIRONMENT_NAME
            FROM &apos;||scriptPath||&apos; c
            INNER JOIN
            (
                SELECT count(*) cnt, ORGANIZATION_NAME, PROJECT_NAME, SUBPROJECT_NAME, RESOURCE_PATH, RESOURCE_TYPE, DOMAIN_NAME, NAME_TYPE, NAME, ENVIRONMENT_NAME
                FROM &apos;||scriptPath||&apos; 
                &apos;||TRIM(whereClause)||
                &apos;  AND ISACTIVE = &apos;&apos;Y&apos;&apos;
                GROUP BY ORGANIZATION_NAME, PROJECT_NAME, SUBPROJECT_NAME, RESOURCE_PATH, RESOURCE_TYPE, DOMAIN_NAME, NAME_TYPE, NAME, ENVIRONMENT_NAME
            ) g
            ON c.ORGANIZATION_NAME = g.ORGANIZATION_NAME
            AND c.PROJECT_NAME = g.PROJECT_NAME
            AND c.SUBPROJECT_NAME = g.SUBPROJECT_NAME
            AND c.RESOURCE_PATH = g.RESOURCE_PATH
            AND c.RESOURCE_TYPE = g.RESOURCE_TYPE
            AND c.DOMAIN_NAME = g.DOMAIN_NAME
            AND c.NAME = g.NAME
            AND c.NAME_TYPE = g.NAME_TYPE
            AND c.ENVIRONMENT_NAME = g.ENVIRONMENT_NAME
            AND ISACTIVE = &apos;&apos;Y&apos;&apos;
            AND g.cnt &gt; 0
            ORDER BY c.ORGANIZATION_NAME, c.PROJECT_NAME, c.SUBPROJECT_NAME, c.RESOURCE_PATH, c.RESOURCE_TYPE, c.DOMAIN_NAME, c.NAME_TYPE, c.NAME, c.ENVIRONMENT_NAME&apos;;

&#x9;&#x9;if (debug is not null and UPPER(debug) = &apos;Y&apos;) then
&#x9;&#x9;&#x9;call print(moduleName || &apos; : sqlStatement=&apos;||SUBSTRING(moduleName || &apos; : sqlStatement=&apos;||sqlStatement,1,63900));
&#x9;&#x9;end if;

&#x9;&#x9;open duplicateCursor for sqlStatement;
&#x9;&#x9;FOR dup AS duplicateCursor DO
&#x9;&#x9;&#x9;SET duplicate = true;
&#x9;&#x9;&#x9;-- Duplicate rows were found so log the message but do not update
&#x9;&#x9;&#x9;IF (dup.cnt &gt; 1) THEN
&#x9;&#x9;&#x9;&#x9;SET duplicateRowMsg = duplicateRowMsg || &apos; COUNT=&apos;||dup.cnt ||&apos;|&apos;||
&#x9;&#x9;&#x9;&#x9;&#x9;dup.ORGANIZATION_NAME ||&apos;|&apos;|| dup.PROJECT_NAME||&apos;|&apos;|| TRIM(NVL(dup.SUBPROJECT_NAME,&apos;  &apos;))||&apos;|&apos;|| dup.RESOURCE_PATH||&apos;|&apos;|| 
&#x9;&#x9;&#x9;&#x9;&#x9;dup.RESOURCE_TYPE||&apos;|&apos;|| dup.DOMAIN_NAME||&apos;|&apos;|| dup.NAME_TYPE||&apos;|&apos;|| dup.NAME||&apos;|&apos;|| dup.ENVIRONMENT_NAME || &apos;|&apos;||&#x9;CHR(10);
&#x9;&#x9;&#x9;&#x9;SET duplicateRows = duplicateRows + dup.cnt - 1; -- subtract 1 for the original row so it is not counted.

&#x9;&#x9;&#x9;-- A single matching row was found so update it.
&#x9;&#x9;&#x9;ELSEIF (dup.cnt = 1) THEN 
&#x9;&#x9;&#x9;&#x9;set actionType = &apos;U&apos;;
&#x9;&#x9;&#x9;&#x9;IF (performInsertUpdate IS NOT NULL AND UPPER(performInsertUpdate) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;set sqlStatement = 
                    &apos;UPDATE &apos;||scriptPath||&apos;
                        SET
                        ORGANIZATION_NAME       = &apos;||NVL2(inORGANIZATION_NAME,      &apos;&apos;&apos;&apos;||inORGANIZATION_NAME||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        PRIVILEGE_TYPE          = &apos;||NVL2(privilegeType,            &apos;&apos;&apos;&apos;||privilegeType||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        PROJECT_NAME            = &apos;||NVL2(inPROJECT_NAME,           &apos;&apos;&apos;&apos;||inPROJECT_NAME||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        SUBPROJECT_NAME         = &apos;||NVL2(inSUBPROJECT_NAME,        &apos;&apos;&apos;&apos;||inSUBPROJECT_NAME||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        RESOURCE_PATH           = &apos;||NVL2(inRESOURCE_PATH,          &apos;&apos;&apos;&apos;||inRESOURCE_PATH||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        RESOURCE_TYPE           = &apos;||NVL2(inRESOURCE_TYPE,          &apos;&apos;&apos;&apos;||UPPER(inRESOURCE_TYPE)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        RECURSE_DEPENDENCIES    = &apos;||NVL2(inRECURSE_DEPENDENCIES,   &apos;&apos;&apos;&apos;||UPPER(inRECURSE_DEPENDENCIES)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        RECURSE_DEPENDENTS      = &apos;||NVL2(inRECURSE_DEPENDENTS,     &apos;&apos;&apos;&apos;||UPPER(inRECURSE_DEPENDENTS)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        RECURSE_CHILD           = &apos;||NVL2(inRECURSE_CHILD,          &apos;&apos;&apos;&apos;||UPPER(inRECURSE_CHILD)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        REVOKE_ALL              = &apos;||NVL2(inREVOKE_ALL,             &apos;&apos;&apos;&apos;||UPPER(inREVOKE_ALL)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        NAME                    = &apos;||NVL2(inNAME,                   &apos;&apos;&apos;&apos;||inNAME||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        NAME_TYPE               = &apos;||NVL2(inNAME_TYPE,              &apos;&apos;&apos;&apos;||UPPER(inNAME_TYPE)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        DOMAIN_NAME             = &apos;||NVL2(inDOMAIN_NAME,            &apos;&apos;&apos;&apos;||inDOMAIN_NAME||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        ENVIRONMENT_NAME        = &apos;||NVL2(inENVIRONMENT_NAME,       &apos;&apos;&apos;&apos;||UPPER(inENVIRONMENT_NAME)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        READ_ACCESS             = &apos;||NVL2(inREAD_ACCESS,            &apos;&apos;&apos;&apos;||UPPER(inREAD_ACCESS)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        WRITE_ACCESS            = &apos;||NVL2(inWRITE_ACCESS,           &apos;&apos;&apos;&apos;||UPPER(inWRITE_ACCESS)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        EXECUTE_ACCESS          = &apos;||NVL2(inEXECUTE_ACCESS,         &apos;&apos;&apos;&apos;||UPPER(inEXECUTE_ACCESS)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        SELECT_ACCESS           = &apos;||NVL2(inSELECT_ACCESS,          &apos;&apos;&apos;&apos;||UPPER(inSELECT_ACCESS)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        UPDATE_ACCESS           = &apos;||NVL2(inUPDATE_ACCESS,          &apos;&apos;&apos;&apos;||UPPER(inUPDATE_ACCESS)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        INSERT_ACCESS           = &apos;||NVL2(inINSERT_ACCESS,          &apos;&apos;&apos;&apos;||UPPER(inINSERT_ACCESS)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        DELETE_ACCESS           = &apos;||NVL2(inDELETE_ACCESS,          &apos;&apos;&apos;&apos;||UPPER(inDELETE_ACCESS)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        GRANT_ACCESS            = &apos;||NVL2(inGRANT_ACCESS,           &apos;&apos;&apos;&apos;||UPPER(inGRANT_ACCESS)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        INITIALIZE              = &apos;||NVL2(inINITIALIZE,             &apos;&apos;&apos;&apos;||UPPER(inINITIALIZE)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        OWNER_NAME              = &apos;||NVL2(inOWNER_NAME,             &apos;&apos;&apos;&apos;||inOWNER_NAME||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        OWNER_DOMAIN            = &apos;||NVL2(inOWNER_DOMAIN,           &apos;&apos;&apos;&apos;||inOWNER_DOMAIN||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        COMMENTS                = &apos;||NVL2(inCOMMENTS,               &apos;&apos;&apos;&apos;||inCOMMENTS||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;
                    &apos;||TRIM(whereClause)||&apos;
                      AND ISACTIVE = &apos;&apos;Y&apos;&apos;&apos;;

&#x9;&#x9;&#x9;&#x9;&#x9;if (debug is not null and UPPER(debug) = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName || &apos; : sqlStatement=&apos;||SUBSTRING(moduleName || &apos; : sqlStatement=&apos;||sqlStatement,1,63900));
&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;execute immediate sqlStatement;
&#x9;&#x9;&#x9;&#x9;END IF; 
&#x9;&#x9;&#x9;&#x9;set message = &apos;SUCCESS UPDATING &apos;||TRIM(whereClause); 
&#x9;&#x9;&#x9;&#x9;SET rowsProcessed = rowsProcessed + 1;
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;set message = &apos;SUCCESS TO BE UPDATED: &apos;||TRIM(whereClause); 
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END FOR;

&#x9;&#x9;-- No matching row was found so insert it.
&#x9;&#x9;IF (NOT duplicate) THEN
&#x9;&#x9;&#x9;set actionType = &apos;I&apos;;
&#x9;&#x9;&#x9;IF(performInsertUpdate IS NOT NULL AND UPPER(performInsertUpdate) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;set sqlStatement = 
&#x9;&#x9;&#x9;&#x9;&apos;insert into &apos;||scriptPath||&apos;
                    (ORGANIZATION_NAME, PRIVILEGE_TYPE, PROJECT_NAME, SUBPROJECT_NAME, RESOURCE_PATH, RESOURCE_TYPE, 
                    RECURSE_DEPENDENCIES, RECURSE_DEPENDENTS, RECURSE_CHILD, REVOKE_ALL, 
                    NAME, NAME_TYPE, DOMAIN_NAME, ENVIRONMENT_NAME, 
                    READ_ACCESS, WRITE_ACCESS, EXECUTE_ACCESS, SELECT_ACCESS, UPDATE_ACCESS, INSERT_ACCESS, DELETE_ACCESS, GRANT_ACCESS, 
                    INITIALIZE, OWNER_NAME, OWNER_DOMAIN, COMMENTS, ISACTIVE)
                    values (&apos;||NVL2(inORGANIZATION_NAME,     &apos;&apos;&apos;&apos;||inORGANIZATION_NAME||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(privilegeType,           &apos;&apos;&apos;&apos;||privilegeType||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inPROJECT_NAME,          &apos;&apos;&apos;&apos;||inPROJECT_NAME||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inSUBPROJECT_NAME,       &apos;&apos;&apos;&apos;||inSUBPROJECT_NAME||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inRESOURCE_PATH,         &apos;&apos;&apos;&apos;||inRESOURCE_PATH||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inRESOURCE_TYPE,         &apos;&apos;&apos;&apos;||UPPER(inRESOURCE_TYPE)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inRECURSE_DEPENDENCIES,  &apos;&apos;&apos;&apos;||UPPER(inRECURSE_DEPENDENCIES)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inRECURSE_DEPENDENTS,    &apos;&apos;&apos;&apos;||UPPER(inRECURSE_DEPENDENTS)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inRECURSE_CHILD,         &apos;&apos;&apos;&apos;||UPPER(inRECURSE_CHILD)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inREVOKE_ALL,            &apos;&apos;&apos;&apos;||UPPER(inREVOKE_ALL)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inNAME,                  &apos;&apos;&apos;&apos;||inNAME||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inNAME_TYPE,             &apos;&apos;&apos;&apos;||UPPER(inNAME_TYPE)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inDOMAIN_NAME,           &apos;&apos;&apos;&apos;||inDOMAIN_NAME||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inENVIRONMENT_NAME,      &apos;&apos;&apos;&apos;||UPPER(inENVIRONMENT_NAME)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inREAD_ACCESS,           &apos;&apos;&apos;&apos;||UPPER(inREAD_ACCESS)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inWRITE_ACCESS,          &apos;&apos;&apos;&apos;||UPPER(inWRITE_ACCESS)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inEXECUTE_ACCESS,        &apos;&apos;&apos;&apos;||UPPER(inEXECUTE_ACCESS)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inSELECT_ACCESS,         &apos;&apos;&apos;&apos;||UPPER(inSELECT_ACCESS)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inUPDATE_ACCESS,         &apos;&apos;&apos;&apos;||UPPER(inUPDATE_ACCESS)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inINSERT_ACCESS,         &apos;&apos;&apos;&apos;||UPPER(inINSERT_ACCESS)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inDELETE_ACCESS,         &apos;&apos;&apos;&apos;||UPPER(inDELETE_ACCESS)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inGRANT_ACCESS,          &apos;&apos;&apos;&apos;||UPPER(inGRANT_ACCESS)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inINITIALIZE,            &apos;&apos;&apos;&apos;||UPPER(inINITIALIZE)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inOWNER_NAME,            &apos;&apos;&apos;&apos;||inOWNER_NAME||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inOWNER_DOMAIN,          &apos;&apos;&apos;&apos;||inOWNER_DOMAIN||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inCOMMENTS,              &apos;&apos;&apos;&apos;||inCOMMENTS||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;&apos;Y&apos;&apos;
                        )&apos;;

&#x9;&#x9;&#x9;&#x9;if (debug is not null and UPPER(debug) = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName || &apos; : sqlStatement=&apos;||SUBSTRING(moduleName || &apos; : sqlStatement=&apos;||sqlStatement,1,63900));
&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;-- Execute the SQL INSERT
&#x9;&#x9;&#x9;&#x9;execute immediate sqlStatement;
&#x9;&#x9;&#x9;&#x9;set message = &apos;SUCCESS INSERTING &apos;|| 
&#x9;&#x9;&#x9;&#x9;&#x9;inORGANIZATION_NAME ||&apos;|&apos;|| inPROJECT_NAME||&apos;|&apos;|| TRIM(NVL(inSUBPROJECT_NAME,&apos;  &apos;))||&apos;|&apos;|| inRESOURCE_PATH||&apos;|&apos;|| 
&#x9;&#x9;&#x9;&#x9;&#x9;inRESOURCE_TYPE||&apos;|&apos;|| inNAME||&apos;|&apos;|| inNAME_TYPE||&apos;|&apos;|| inDOMAIN_NAME||&apos;|&apos;|| inENVIRONMENT_NAME || &apos;|&apos;;
&#x9;&#x9;&#x9;&#x9;SET rowsProcessed = rowsProcessed + 1;
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;set message = &apos;SUCCESS TO BE INSERTED: &apos;|| 
&#x9;&#x9;&#x9;&#x9;&#x9;inORGANIZATION_NAME ||&apos;|&apos;|| inPROJECT_NAME||&apos;|&apos;|| TRIM(NVL(inSUBPROJECT_NAME,&apos;  &apos;))||&apos;|&apos;|| inRESOURCE_PATH||&apos;|&apos;|| 
&#x9;&#x9;&#x9;&#x9;&#x9;inRESOURCE_TYPE||&apos;|&apos;|| inNAME||&apos;|&apos;|| inNAME_TYPE||&apos;|&apos;|| inDOMAIN_NAME||&apos;|&apos;|| inENVIRONMENT_NAME || &apos;|&apos;;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END IF;
&#x9;elseif (setInactive is not null and upper(setInactive) = &apos;Y&apos;) then
&#x9;&#x9;set actionType = &apos;S&apos;;
&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getPrivilegeDatasourceToScriptMapping(&apos;CP&apos;, datasource, scriptPath);
&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getSQLPrivileges(
&#x9;&#x9;&#x9;&#x9;datasource, inENVIRONMENT_NAME, inORGANIZATION_NAME, inPROJECT_NAME, inSUBPROJECT_NAME, Sheet_Name, inRESOURCE_PATH, inRESOURCE_TYPE,
&#x9;&#x9;&#x9;&#x9;inNAME, inNAME_TYPE, inDOMAIN_NAME, debug, sqlStatement, fromClause, whereClause);

&#x9;&#x9;-- Set row inactive from COMPOSITE_PRIVILEGES using the PRIVILEGE_ID
&#x9;&#x9;if (inPRIVILEGE_ID is not null) then
&#x9;&#x9;&#x9;set sqlStatement = &apos;select count(*) cnt from &apos;||scriptPath||&apos; where PRIVILEGE_ID = &apos;||inPRIVILEGE_ID;
&#x9;&#x9;&#x9;open countCursor for sqlStatement;
&#x9;&#x9;&#x9;fetch countCursor into cnt;
&#x9;&#x9;&#x9;close countCursor;
&#x9;&#x9;&#x9;SET rowsProcessed = cnt;
&#x9;&#x9;&#x9;if (cnt &gt; 0) then
&#x9;&#x9;&#x9;&#x9;-- Update ISACTIVE from COMPOSITE_PRIVILEGES table
&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getPrivilegeDatasourceToScriptMapping(&apos;CP&apos;, datasource, scriptPath);
&#x9;&#x9;&#x9;&#x9;set sqlStatement = &apos;UPDATE &apos;||scriptPath||&apos;&#x9;SET ISACTIVE = &apos;&apos;N&apos;&apos; WHERE PRIVILEGE_ID = &apos;||inPRIVILEGE_ID;
&#x9;&#x9;&#x9;&#x9;if (debug is not null and UPPER(debug) = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName || &apos; : sqlStatement=&apos;||SUBSTRING(moduleName || &apos; : sqlStatement=&apos;||sqlStatement,1,63900));
&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;execute immediate sqlStatement;
&#x9;&#x9;&#x9;&#x9;set message = &apos;SUCCESS SETTING INACTIVE PRIVILEGE_ID=&apos;|| inPRIVILEGE_ID;
&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;set message = &apos;No rows exists.&apos;;
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;else
&#x9;&#x9;&#x9;-- Set rows inactive using adhoc where clause
&#x9;&#x9;&#x9;set sqlStatement = &apos;select count(*) cnt from &apos;||scriptPath||&apos; &apos;||TRIM(whereClause);
&#x9;&#x9;&#x9;open countCursor for sqlStatement;
&#x9;&#x9;&#x9;fetch countCursor into cnt;
&#x9;&#x9;&#x9;close countCursor;

&#x9;&#x9;&#x9;SET rowsProcessed = cnt;
&#x9;&#x9;&#x9;if (cnt &gt; 0) then
&#x9;&#x9;&#x9;&#x9;-- Update ISACTIVE from COMPOSITE_PRIVILEGES table
&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getPrivilegeDatasourceToScriptMapping(&apos;CP&apos;, datasource, scriptPath);
&#x9;&#x9;&#x9;&#x9;set sqlStatement = 
&#x9;&#x9;&#x9;&#x9;&apos;update &apos;||scriptPath||&apos;
                    set ISACTIVE = &apos;&apos;N&apos;&apos;
                &apos; ||TRIM(whereClause);

&#x9;&#x9;&#x9;&#x9;if (debug is not null and UPPER(debug) = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName || &apos; : sqlStatement=&apos;||SUBSTRING(moduleName || &apos; : sqlStatement=&apos;||sqlStatement,1,63900));
&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;execute immediate sqlStatement;
&#x9;&#x9;&#x9;&#x9;set message = &apos;SUCCESS SETTING INACTIVE &apos;||TRIM(whereClause); 
&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;set message = &apos;No rows exists.&apos;;
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;end if;
&#x9;elseif (performDelete is not null and upper(performDelete) = &apos;Y&apos;) then
&#x9;&#x9;set actionType = &apos;D&apos;;
&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getPrivilegeDatasourceToScriptMapping(&apos;CP&apos;, datasource, scriptPath);
&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getSQLPrivileges(
&#x9;&#x9;&#x9;&#x9;datasource, inENVIRONMENT_NAME, inORGANIZATION_NAME, inPROJECT_NAME, inSUBPROJECT_NAME, Sheet_Name, inRESOURCE_PATH, inRESOURCE_TYPE,
&#x9;&#x9;&#x9;&#x9;inNAME, inNAME_TYPE, inDOMAIN_NAME, debug, sqlStatement, fromClause, whereClause);

&#x9;&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;&#x9;-- Delete a row from COMPOSITE_PRIVILEGES using the PRIVILEGE_ID
&#x9;&#x9;&#x9;if (inPRIVILEGE_ID is not null) then
&#x9;&#x9;&#x9;&#x9;set sqlStatement = &apos;select count(*) cnt from &apos;||scriptPath||&apos; where PRIVILEGE_ID = &apos;||inPRIVILEGE_ID;
&#x9;&#x9;&#x9;&#x9;open countCursor for sqlStatement;
&#x9;&#x9;&#x9;&#x9;fetch countCursor into cnt;
&#x9;&#x9;&#x9;&#x9;close countCursor;
&#x9;&#x9;&#x9;&#x9;set rowsProcessed = cnt;
&#x9;&#x9;&#x9;&#x9;if (cnt &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;-- Delete row from COMPOSITE_PRIVILEGES table using PRIVILEGE_ID
&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getPrivilegeDatasourceToScriptMapping(&apos;CP&apos;, datasource, scriptPath);
&#x9;&#x9;&#x9;&#x9;&#x9;set sqlStatement = &apos;DELETE FROM &apos;||scriptPath||&apos; WHERE PRIVILEGE_ID = &apos;||inPRIVILEGE_ID;
&#x9;&#x9;&#x9;&#x9;&#x9;if (debug is not null and UPPER(debug) = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName || &apos; : sqlStatement=&apos;||SUBSTRING(moduleName || &apos; : sqlStatement=&apos;||sqlStatement,1,63900));
&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;execute immediate sqlStatement;
&#x9;&#x9;&#x9;&#x9;&#x9;set message = &apos;SUCCESS DELETING PRIVILEGE_ID=&apos;|| inPRIVILEGE_ID;
&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;set message = &apos;No rows exists.&apos;;
&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;-- Delete rows from COMPOSITE_PRIVILEGES table using adhoc SQL
&#x9;&#x9;&#x9;&#x9;-- Create the fromClause pointing to the correct /Formatting layer database table
&#x9;&#x9;&#x9;&#x9;set fromClause = &apos;FROM &apos;||scriptPath;
&#x9;&#x9;&#x9;&#x9;-- Create the SELCT COUNT(*) CNT statement
&#x9;&#x9;&#x9;&#x9;set sqlStatement2 = &apos;SELECT COUNT(*) rowsDeleted &apos;||fromClause||CHR(10)||&apos;         &apos;||whereClause;
&#x9;&#x9;&#x9;&#x9;-- Create the DELETE statement
&#x9;&#x9;&#x9;&#x9;set sqlStatement3 = &apos;DELETE &apos;||fromClause||CHR(10)||&apos;         &apos;||whereClause;
&#x9;&#x9;&#x9;&#x9;-- Print out debug
&#x9;&#x9;&#x9;&#x9;if (debug is not null and UPPER(debug) = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;call print(SUBSTRING(moduleName || &apos; : fromClause=&apos;||fromClause,1,63900));
&#x9;&#x9;&#x9;&#x9;&#x9;call print(SUBSTRING(moduleName || &apos; : whereClause=&apos;||whereClause,1,63900));
&#x9;&#x9;&#x9;&#x9;&#x9;call print(SUBSTRING(moduleName || &apos; : sqlStatement2=&apos;||sqlStatement2,1,63900));
&#x9;&#x9;&#x9;&#x9;&#x9;call print(SUBSTRING(moduleName || &apos; : sqlStatement3=&apos;||sqlStatement3,1,63900));
&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;-- Execute the SELECT COUNT statement
&#x9;&#x9;&#x9;&#x9;open countCursor for sqlStatement2;
&#x9;&#x9;&#x9;&#x9;fetch countCursor into cnt;
&#x9;&#x9;&#x9;&#x9;close countCursor;
&#x9;&#x9;&#x9;&#x9;if (debug is not null and UPPER(debug) = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName || &apos; : Number of privilege rows=&apos;||cnt);
&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;-- Execute the DELETE statement
&#x9;&#x9;&#x9;&#x9;set rowsProcessed = cnt;
&#x9;&#x9;&#x9;&#x9;if (cnt &gt; 0 and performDelete is not null and UPPER(performDelete) = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;-- Execute the DELETE statement
&#x9;&#x9;&#x9;&#x9;&#x9;if (debug is not null and UPPER(debug) = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName || &apos; : Deleting &apos;||cnt||&apos; privileges rows.&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;execute immediate sqlStatement3;
&#x9;&#x9;&#x9;&#x9;&#x9;set message = &apos;SUCCESS DELETING &apos;||TRIM(whereClause); 
&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;set message = &apos;No rows exists.&apos;;
&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;EXCEPTION
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;raise;
&#x9;&#x9;END;

&#x9;&#x9;-- Clean up supporting tables: Delete SUBPROJECT_TYPE and PROJECT_TYPE and ORGANIZATION_TYPE if available and valid to delete.
&#x9;&#x9;if (inSUBPROJECT_NAME is not null) then
&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/ModifyDBPrivileges/TableMaintenance/modify_05_SUBPROJECT_TYPE(datasource, null, performDelete, inSUBPROJECT_NAME, inPROJECT_NAME, inORGANIZATION_NAME, msg);
&#x9;&#x9;elseif (inPROJECT_NAME is not null) then
&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/ModifyDBPrivileges/TableMaintenance/modify_04_PROJECT_TYPE(datasource, null, performDelete, inPROJECT_NAME, inORGANIZATION_NAME, msg);
&#x9;&#x9;elseif (inORGANIZATION_NAME is not null) then
&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/ModifyDBPrivileges/TableMaintenance/modify_01_ORGANIZATION_TYPE(datasource, null, performDelete, inORGANIZATION_NAME, msg);
&#x9;&#x9;end if;
&#x9;else
&#x9;&#x9;set message = &apos;Invalid command provided.&apos;;
&#x9;end if;
&#x9;call print(moduleName||&apos; : &apos;||message);
END</attribute>
  <attribute name="creationDate" type="LONG">1491944720784</attribute>
  <attribute name="creatorUserDomain" type="STRING">ldap</attribute>
  <attribute name="creatorUserId" type="INTEGER">4005</attribute>
  <attribute name="creatorUserName" type="STRING">zkxl6un</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1564075714164</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserId" type="INTEGER">4005</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">7/577</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/534</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/545</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/488</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/431</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/464</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/537</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/535</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/536</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/553</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/378</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/517</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/328</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
  </attribute>
  <attribute name="resourceModifiedDateOnSourceCISSite" type="LONG">1491944720784</attribute>
</metadata>