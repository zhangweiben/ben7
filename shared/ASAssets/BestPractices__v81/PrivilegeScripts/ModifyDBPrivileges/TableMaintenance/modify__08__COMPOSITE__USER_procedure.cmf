<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:e931daa6-7fda-456a-badf-4cdb1c228a1a -->
<metadata name="modify_08_COMPOSITE_USER" path="/shared/ASAssets/BestPractices_v81/PrivilegeScripts/ModifyDBPrivileges/TableMaintenance/modify_08_COMPOSITE_USER" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>&lt;![CDATA[&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.
]]&gt;</annotation>
  <parameters>
    <parameter name="datasource" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="performInsertUpdate" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="1"/>
    </parameter>
    <parameter name="setInactive" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="1"/>
    </parameter>
    <parameter name="performDelete" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="1"/>
    </parameter>
    <parameter name="inUSERID" direction="IN" nullable="true">
      <datatype name="DECIMAL" type="DECIMAL" maxDigits="38" maxFractionalDigits="0"/>
    </parameter>
    <parameter name="inORGANIZATION_NAME" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="inPROJECT_NAME" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="inSUBPROJECT_NAME" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="inUSER_NAME" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="inUSER_DESC" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="inDOMAIN_NAME" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="inENVIRONMENT_NAME" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="inUSER_PWD" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="inFORCE_USER" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="1"/>
    </parameter>
    <parameter name="inGROUP_LIST" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="2048"/>
    </parameter>
    <parameter name="actionType" direction="OUT" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="rowsProcessed" direction="OUT" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="duplicateRows" direction="OUT" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="duplicateRowMsg" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="message" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getPrivilegeDatasourceToScriptMapping" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="scriptType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="datasource" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="scriptMapping" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getSQLUsers" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="datasource" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="Environment_Name" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="Organization" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="Project" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="SubProject" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="User_Name" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="Domain_Name" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="sqlStatement" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="fromClause" direction="OUT">
        <datatype type="STRING" maxLength="2048"/>
      </element>
      <element name="whereClause" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/PrivilegeScripts/ModifyDBPrivileges/TableMaintenance/modify_01_ORGANIZATION_TYPE" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="datasource" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="setInactive" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="performDelete" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="inORGANIZATION_NAME" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="message" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/PrivilegeScripts/ModifyDBPrivileges/TableMaintenance/modify_04_PROJECT_TYPE" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="datasource" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="setInactive" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="performDelete" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="inPROJECT_NAME" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inORGANIZATION_NAME" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="message" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/PrivilegeScripts/ModifyDBPrivileges/TableMaintenance/modify_05_SUBPROJECT_TYPE" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="datasource" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="setInactive" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="performDelete" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="inSUBPROJECT_NAME" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inPROJECT_NAME" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inORGANIZATION_NAME" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="message" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/encoding/EncodingCJP/Base64Encode" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inputString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/*
&#x9;This procedure is used to insert/update/delete/inactivate rows in the COMPOSITE_USER table.
&#x9;These are rows that come from the User_List sheet in the Composite_Resource_Privileges_LOAD_DB.xlsx spreadsheet.
&#x9;Example:
&#x9;&#x9;USERID:&#x9;&#x9;&#x9;&#x9;&#x9;1
&#x9;&#x9;ORGANIZATION_NAME:&#x9;&#x9;ORG1
&#x9;&#x9;PROJECT_NAME:&#x9;&#x9;&#x9;Common
&#x9;&#x9;SUBPROJECT_NAME:&#x9;&#x9;SB1
&#x9;&#x9;USER_NAME:&#x9;&#x9;&#x9;&#x9;user1
&#x9;&#x9;USER_DESC:&#x9;&#x9;&#x9;&#x9;user desc
&#x9;&#x9;DOMAIN_NAME:&#x9;&#x9;&#x9;composite
&#x9;&#x9;ENVIRONMENT_NAME:&#x9;&#x9;DEV
&#x9;&#x9;USER_PWD:&#x9;&#x9;&#x9;&#x9;password
&#x9;&#x9;FORCE_USER:&#x9;&#x9;&#x9;&#x9;1
&#x9;&#x9;GROUP_LIST:&#x9;&#x9;&#x9;&#x9;group1|composite  &lt;--GROUP_NAME|DOMAIN_NAME
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Pipe separated list of group|domain
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;May contain a list of pairs separated by spaces.  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Below the list contains a space separate list of group|domain pairs:  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;E.g. G1|D1 G2|D1 G3|D1
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;This list may not exceed a total of 2048 characters.
&#x9;&#x9;USER_NAME_LOWERCASE:&#x9;user1
&#x9;&#x9;CREATEDBY:&#x9;&#x9;&#x9;&#x9;CMPPRV
&#x9;&#x9;CREATEDDATE:&#x9;&#x9;&#x9;2017-05-17 16:57:13
&#x9;&#x9;UPDATEDBY:&#x9;&#x9;&#x9;&#x9;CMPPRV
&#x9;&#x9;UPDATEDDATE:&#x9;&#x9;&#x9;2017-05-17 16:57:13
&#x9;&#x9;ISACTIVE:&#x9;&#x9;&#x9;&#x9;Y

&#x9;Input:
&#x9;&#x9;datasource&#x9;&#x9;&#x9;&#x9;- REQUIRED FILTER: DB_[LLE,PROD], The source of the groups. Refer to getPrivilegeDatasourceToScriptMapping().
&#x9;&#x9;performInsertUpdate&#x9;&#x9;- Y or N.  Y=yes perform insert or update.  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;- N=no do not perform insert or update but display the same messages to see what will be executed.&#x9;&#x9;setInactive&#x9;&#x9;&#x9;&#x9;- Set the ISACTIVE flag to N
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Y=if the record exists set it inactive.  Overrides performDelete
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;N/null=do not perform this operation.
&#x9;&#x9;setInactive&#x9;&#x9;&#x9;&#x9;- Y=if the record exists set it inactive.  Overrides performDelete
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;- N/null=do not perform this operation.
&#x9;&#x9;performDelete&#x9;&#x9;&#x9;- Delete the row if it exists
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Y=perform a delete using filters supplied.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;N/null=do not perform delete but perform insert or update instead.
&#x9;&#x9;various fields...
&#x9;Output:
&#x9;&#x9;actionType&#x9;&#x9;&#x9;&#x9;- I=insert, U=update, D=delete, S=set inactive
&#x9;&#x9;rowsProcessed&#x9;&#x9;&#x9;- Number of rows process for the action type
&#x9;&#x9;duplicateRows&#x9;&#x9;&#x9;- number of duplicate rows
&#x9;&#x9;duplicateRowMsg&#x9;&#x9;&#x9;- a duplicate row message
&#x9;&#x9;message&#x9;&#x9;&#x9;&#x9;&#x9;- a general message

&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;CIS Version:&#x9;Reason:
&#x9;--------------&#x9;------------------&#x9;------------&#x9;-------
&#x9;05/16/2017&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.5&#x9;&#x9;&#x9;Adapted for Data Abstraction Best Practices.

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

*/
PROCEDURE modify_08_COMPOSITE_USER(
&#x9;IN &#x9;datasource&#x9;&#x9;&#x9;&#x9;VARCHAR(255),-- REQUIRED FILTER: DB_[LLE,PROD], The source of the groups. Refer to getPrivilegeDatasourceToScriptMapping().
&#x9;IN &#x9;performInsertUpdate&#x9;&#x9;VARCHAR(1),&#x9;-- Y or N.  Y=yes perform insert or update.  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- N=no do not perform insert or update but display the same messages to see what will be executed.
&#x9;IN&#x9;setInactive&#x9;&#x9;&#x9;&#x9;VARCHAR(1),&#x9;-- Y=if the record exists set it inactive.  Overrides performDelete
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- N/null=do not perform this operation.
&#x9;IN&#x9;performDelete&#x9;&#x9;&#x9;VARCHAR(1),&#x9;-- Y=perform a delete using filters supplied.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- N/null=do not perform delete but perform insert or update instead.
&#x9;IN&#x9;inUSERID&#x9;&#x9;&#x9;&#x9;DECIMAL(38,0),
&#x9;IN &#x9;inORGANIZATION_NAME&#x9;&#x9;VARCHAR(255),
&#x9;IN&#x9;inPROJECT_NAME&#x9;&#x9;&#x9;VARCHAR(255),
&#x9;IN&#x9;inSUBPROJECT_NAME&#x9;&#x9;VARCHAR(255),
&#x9;IN&#x9;inUSER_NAME&#x9;&#x9;&#x9;&#x9;VARCHAR(255),
&#x9;IN&#x9;inUSER_DESC&#x9;&#x9;&#x9;&#x9;VARCHAR(255),
&#x9;IN&#x9;inDOMAIN_NAME&#x9;&#x9;&#x9;VARCHAR(255),
&#x9;IN&#x9;inENVIRONMENT_NAME&#x9;&#x9;VARCHAR(255),
&#x9;IN&#x9;inUSER_PWD&#x9;&#x9;&#x9;&#x9;VARCHAR(255),
&#x9;IN&#x9;inFORCE_USER&#x9;&#x9;&#x9;VARCHAR(1),&#x9;-- 0 or 1 to indicate access.
&#x9;IN&#x9;inGROUP_LIST&#x9;&#x9;&#x9;VARCHAR(2048),
&#x9;OUT actionType&#x9;&#x9;&#x9;&#x9;CHAR(1),&#x9;-- I=insert, U=update, D=delete, S=set inactive
&#x9;OUT rowsProcessed&#x9;&#x9;&#x9;INTEGER,&#x9;-- Number of rows process for the action type
&#x9;OUT duplicateRows&#x9;&#x9;&#x9;INTEGER,&#x9;-- Number of duplicate rows found
&#x9;OUT duplicateRowMsg&#x9;&#x9;&#x9;LONGVARCHAR,-- message for duplicate rows
&#x9;OUT&#x9;message&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR&#x9;-- a general message
)
BEGIN
&#x9;DECLARE moduleName&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;modify_08_COMPOSITE_USER&apos;;
&#x9;DECLARE debug&#x9;&#x9;&#x9;&#x9;CHAR(1) DEFAULT &apos;Y&apos;;
&#x9;DECLARE ex&#x9;&#x9;&#x9;&#x9;&#x9;EXCEPTION;
&#x9;DECLARE cnt&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE password&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE duplicate&#x9;&#x9;&#x9;BOOLEAN;
&#x9;DECLARE sqlStatement&#x9;&#x9;LONGVARCHAR DEFAULT &apos;&apos;;
&#x9;DECLARE sqlStatement2&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE sqlStatement3&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE fromClause&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE whereClause&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE rowCount&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE countCursor&#x9;&#x9;&#x9;CURSOR(rowCount INTEGER);
&#x9;DECLARE scriptPath&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE msg&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE duplicateCursor&#x9;&#x9;CURSOR(cnt INTEGER, ORGANIZATION_NAME VARCHAR(255), PROJECT_NAME VARCHAR(255), SUBPROJECT_NAME VARCHAR(255), USER_NAME VARCHAR(255), DOMAIN_NAME VARCHAR(255), ENVIRONMENT_NAME VARCHAR(255));

&#x9;set rowsProcessed = 0;
&#x9;set duplicateRows = 0;
&#x9;set duplicateRowMsg = &apos;&apos;;

&#x9;IF (datasource IS NOT NULL AND datasource = &apos;EXCEL&apos;) THEN
&#x9;&#x9;raise ex value &apos;The input variable datasource=&quot;EXCEL&quot; is not valid.&apos;;
&#x9;END IF;

&#x9;-- Verify the ORGANIZATION type
&#x9;if (inORGANIZATION_NAME is null or length(trim(inORGANIZATION_NAME)) = 0) then
&#x9;&#x9;raise ex value &apos;inORGANIZATION_NAME cannot be null or empty.&apos;;
&#x9;end if;
&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getPrivilegeDatasourceToScriptMapping(&apos;OT&apos;, datasource, scriptPath);
&#x9;set sqlStatement = &apos;select count(*) cnt from &apos;||scriptPath||&apos; where ORGANIZATION_NAME = &apos;&apos;&apos;||inORGANIZATION_NAME||&apos;&apos;&apos; and ISACTIVE = &apos;&apos;Y&apos;&apos;&apos;;
&#x9;open countCursor for sqlStatement;
&#x9;fetch countCursor into cnt;
&#x9;close countCursor;
&#x9;if (cnt is null or cnt = 0) then
&#x9;&#x9;raise ex value &apos;inORGANIZATION_NAME=&apos;||inORGANIZATION_NAME||&apos; is not valid.&apos;;
&#x9;end if;

&#x9;-- Determine the operation: insert/update/delete/inactivate
&#x9;if (performInsertUpdate is not null and upper(performInsertUpdate) = &apos;Y&apos;) then
&#x9;&#x9;-- Verify the PROJECT type
&#x9;&#x9;if (inPROJECT_NAME is null or length(trim(inPROJECT_NAME)) = 0) then
&#x9;&#x9;&#x9;raise ex value &apos;inPROJECT_NAME cannot be null or empty.&apos;;
&#x9;&#x9;end if;
&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getPrivilegeDatasourceToScriptMapping(&apos;PT&apos;, datasource, scriptPath);
&#x9;&#x9;set sqlStatement = &apos;select count(*) cnt from &apos;||scriptPath||&apos; where PROJECT_NAME = &apos;&apos;&apos;||inPROJECT_NAME||&apos;&apos;&apos; and ORGANIZATION_NAME = &apos;&apos;&apos;||inORGANIZATION_NAME||&apos;&apos;&apos; and ISACTIVE = &apos;&apos;Y&apos;&apos;&apos;;
&#x9;&#x9;open countCursor for sqlStatement;
&#x9;&#x9;fetch countCursor into cnt;
&#x9;&#x9;close countCursor;
&#x9;&#x9;if (cnt is null or cnt = 0) then
&#x9;&#x9;&#x9;raise ex value &apos;inPROJECT_NAME=&apos;||inPROJECT_NAME||&apos; and inORGANIZATION_NAME=&apos;||inORGANIZATION_NAME||&apos; is not valid.&apos;;
&#x9;&#x9;end if;

&#x9;&#x9;-- Verify the USER_NAME
&#x9;&#x9;if (inUSER_NAME is null or length(trim(inUSER_NAME)) = 0) then
&#x9;&#x9;&#x9;raise ex value &apos;inUSER_NAME cannot be null or empty.&apos;;
&#x9;&#x9;end if;

&#x9;&#x9;-- Verify the DOMAIN type
&#x9;&#x9;if (inDOMAIN_NAME is null or length(trim(inDOMAIN_NAME)) = 0) then
&#x9;&#x9;&#x9;raise ex value &apos;inDOMAIN_NAME cannot be null or empty.&apos;;
&#x9;&#x9;end if;
&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getPrivilegeDatasourceToScriptMapping(&apos;DT&apos;, datasource, scriptPath);
&#x9;&#x9;set sqlStatement = &apos;select count(*) cnt from &apos;||scriptPath||&apos; where DOMAIN_NAME = &apos;&apos;&apos;||inDOMAIN_NAME||&apos;&apos;&apos; and ISACTIVE = &apos;&apos;Y&apos;&apos;&apos;;
&#x9;&#x9;open countCursor for sqlStatement;
&#x9;&#x9;fetch countCursor into cnt;
&#x9;&#x9;close countCursor;
&#x9;&#x9;if (cnt is null or cnt = 0) then
&#x9;&#x9;&#x9;raise ex value &apos;inDOMAIN_NAME=&apos;||inDOMAIN_NAME||&apos; is not valid.&apos;;
&#x9;&#x9;end if;

&#x9;&#x9;-- Verify the ENVIRONMENT_NAME
&#x9;&#x9;if (inENVIRONMENT_NAME is null or length(trim(inENVIRONMENT_NAME)) = 0) then
&#x9;&#x9;&#x9;raise ex value &apos;inENVIRONMENT_NAME cannot be null or empty.&apos;;
&#x9;&#x9;end if;
&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getPrivilegeDatasourceToScriptMapping(&apos;ET&apos;, datasource, scriptPath);
&#x9;&#x9;set sqlStatement = &apos;select count(*) cnt from &apos;||scriptPath||&apos; where ENVIRONMENT_NAME = &apos;&apos;&apos;||inENVIRONMENT_NAME||&apos;&apos;&apos; and ISACTIVE = &apos;&apos;Y&apos;&apos;&apos;;
&#x9;&#x9;open countCursor for sqlStatement;
&#x9;&#x9;fetch countCursor into cnt;
&#x9;&#x9;close countCursor;
&#x9;&#x9;if (cnt is null or cnt = 0) then
&#x9;&#x9;&#x9;raise ex value &apos;inENVIRONMENT_NAME=&apos;||inENVIRONMENT_NAME||&apos; is not valid.&apos;;
&#x9;&#x9;end if;

&#x9;&#x9;-- Verify the SUBPROJECT type
&#x9;&#x9;if (inSUBPROJECT_NAME is not null) then
&#x9;&#x9;&#x9;if (length(trim(inSUBPROJECT_NAME)) = 0) then
&#x9;&#x9;&#x9;&#x9;raise ex value &apos;inSUBPROJECT_NAME cannot be empty.&apos;;
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getPrivilegeDatasourceToScriptMapping(&apos;ST&apos;, datasource, scriptPath);
&#x9;&#x9;&#x9;set sqlStatement = &apos;select count(*) cnt from &apos;||scriptPath||&apos; where SUBPROJECT_NAME = &apos;&apos;&apos;||inSUBPROJECT_NAME||&apos;&apos;&apos; and PROJECT_NAME = &apos;&apos;&apos;||inPROJECT_NAME||&apos;&apos;&apos; and  ISACTIVE = &apos;&apos;Y&apos;&apos;&apos;;
&#x9;&#x9;&#x9;open countCursor for sqlStatement;
&#x9;&#x9;&#x9;fetch countCursor into cnt;
&#x9;&#x9;&#x9;close countCursor;
&#x9;&#x9;&#x9;if (cnt is null or cnt = 0) then
&#x9;&#x9;&#x9;&#x9;raise ex value &apos;inSUBPROJECT_NAME=&apos;||inSUBPROJECT_NAME||&apos; and inPROJECT_NAME=&apos;||inPROJECT_NAME||&apos; is not valid.&apos;;
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;end if;

&#x9;&#x9;if (inUSER_PWD is null or length(trim(inUSER_PWD)) = 0) then
&#x9;&#x9;&#x9;raise ex value &apos;inUSER_PWD cannot be null or empty.&apos;;
&#x9;&#x9;end if;
&#x9;&#x9;if (inFORCE_USER is not null and (length(trim(inFORCE_USER)) = 0 or (upper(inFORCE_USER) &lt;&gt; &apos;0&apos; and upper(inFORCE_USER) &lt;&gt; &apos;1&apos;))) then
&#x9;&#x9;&#x9;raise ex value &apos;inFORCE_USER cannot be empty or any value other than &quot;0&quot; or &quot;1&quot;.&apos;;
&#x9;&#x9;end if;
&#x9;&#x9;call /shared/ASAssets/Utilities/encoding/EncodingCJP/Base64Encode(inUSER_PWD, password);
&#x9;&#x9;set password = &apos;Encrypted:&apos;||password;

&#x9;&#x9;SET duplicate = false;
&#x9;&#x9;-- Determine if this combination of already exists.
&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getPrivilegeDatasourceToScriptMapping(&apos;CU&apos;, datasource, scriptPath);
&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getSQLUsers(
&#x9;&#x9;&#x9;&#x9;datasource, inENVIRONMENT_NAME, inORGANIZATION_NAME, inPROJECT_NAME, inSUBPROJECT_NAME, inUSER_NAME, inDOMAIN_NAME, 
&#x9;&#x9;&#x9;&#x9;debug, sqlStatement, fromClause, whereClause);

&#x9;&#x9;set sqlStatement = &apos;SELECT g.cnt, c.ORGANIZATION_NAME, c.PROJECT_NAME, c.SUBPROJECT_NAME, c.USER_NAME, c.DOMAIN_NAME, c.ENVIRONMENT_NAME
&#x9;&#x9;&#x9;FROM &apos;||scriptPath||&apos; c
&#x9;&#x9;&#x9;INNER JOIN
&#x9;&#x9;&#x9;(
&#x9;&#x9;&#x9;&#x9;SELECT ORGANIZATION_NAME, PROJECT_NAME, SUBPROJECT_NAME, USER_NAME, DOMAIN_NAME, ENVIRONMENT_NAME, count(*) cnt
&#x9;&#x9;&#x9;&#x9;FROM &apos;||scriptPath||&apos; 
                &apos;||TRIM(whereClause)||
                &apos;  AND ISACTIVE = &apos;&apos;Y&apos;&apos;
&#x9;&#x9;&#x9;&#x9;GROUP BY ORGANIZATION_NAME, PROJECT_NAME, SUBPROJECT_NAME, USER_NAME, DOMAIN_NAME, ENVIRONMENT_NAME
&#x9;&#x9;&#x9;) g
&#x9;&#x9;&#x9;ON c.ORGANIZATION_NAME = g.ORGANIZATION_NAME
&#x9;&#x9;&#x9;AND c.PROJECT_NAME = g.PROJECT_NAME
            AND c.SUBPROJECT_NAME = g.SUBPROJECT_NAME
&#x9;&#x9;&#x9;AND c.USER_NAME = g.USER_NAME
&#x9;&#x9;&#x9;AND c.DOMAIN_NAME = g.DOMAIN_NAME
&#x9;&#x9;&#x9;AND c.ENVIRONMENT_NAME = g.ENVIRONMENT_NAME
&#x9;&#x9;&#x9;AND c.ISACTIVE = &apos;&apos;Y&apos;&apos;
&#x9;&#x9;&#x9;AND g.cnt &gt; 0
&#x9;&#x9;&#x9;ORDER BY c.ORGANIZATION_NAME, c.PROJECT_NAME, c.SUBPROJECT_NAME, c.USER_NAME, c.DOMAIN_NAME, c.ENVIRONMENT_NAME&apos;;

&#x9;&#x9;if (debug is not null and UPPER(debug) = &apos;Y&apos;) then
&#x9;&#x9;&#x9;call print(moduleName || &apos; : sqlStatement=&apos;||SUBSTRING(moduleName || &apos; : sqlStatement=&apos;||sqlStatement,1,63900));
&#x9;&#x9;end if;

&#x9;&#x9;open duplicateCursor for sqlStatement;
&#x9;&#x9;FOR dup AS duplicateCursor DO
&#x9;&#x9;&#x9;SET duplicate = true;
&#x9;&#x9;&#x9;-- Duplicate rows were found so log the message but do not update
&#x9;&#x9;&#x9;IF (dup.cnt &gt; 1) THEN
&#x9;&#x9;&#x9;&#x9;SET duplicateRowMsg = duplicateRowMsg || &apos; COUNT=&apos;||dup.cnt ||&apos;|&apos;||
&#x9;&#x9;&#x9;&#x9;&#x9;dup.ORGANIZATION_NAME ||&apos;|&apos;|| dup.PROJECT_NAME||&apos;|&apos;|| dup.USER_NAME||&apos;|&apos;|| dup.DOMAIN_NAME||&apos;|&apos;|| dup.ENVIRONMENT_NAME || &apos;|&apos;||&#x9;CHR(10);
&#x9;&#x9;&#x9;&#x9;SET duplicateRows = duplicateRows + dup.cnt - 1; -- subtract 1 for the original row so it is not counted.

&#x9;&#x9;&#x9;-- A single matching row was found so update it.
&#x9;&#x9;&#x9;ELSEIF (dup.cnt = 1) THEN 
&#x9;&#x9;&#x9;&#x9;set actionType = &apos;U&apos;;
&#x9;&#x9;&#x9;&#x9;IF (performInsertUpdate IS NOT NULL AND UPPER(performInsertUpdate) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;set sqlStatement = 
&#x9;&#x9;&#x9;&#x9;&apos;UPDATE &apos;||scriptPath||&apos;
                        SET
                        ORGANIZATION_NAME       = &apos;||NVL2(inORGANIZATION_NAME,      &apos;&apos;&apos;&apos;||inORGANIZATION_NAME||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        PROJECT_NAME            = &apos;||NVL2(inPROJECT_NAME,           &apos;&apos;&apos;&apos;||inPROJECT_NAME||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        SUBPROJECT_NAME         = &apos;||NVL2(inSUBPROJECT_NAME,        &apos;&apos;&apos;&apos;||inSUBPROJECT_NAME||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        USER_NAME               = &apos;||NVL2(inUSER_NAME,              &apos;&apos;&apos;&apos;||inUSER_NAME||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        USER_DESC               = &apos;||NVL2(inUSER_DESC,              &apos;&apos;&apos;&apos;||inUSER_DESC||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        DOMAIN_NAME             = &apos;||NVL2(inDOMAIN_NAME,            &apos;&apos;&apos;&apos;||inDOMAIN_NAME||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        ENVIRONMENT_NAME        = &apos;||NVL2(inENVIRONMENT_NAME,       &apos;&apos;&apos;&apos;||UPPER(inENVIRONMENT_NAME)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        USER_PWD                = &apos;||NVL2(password,                 &apos;&apos;&apos;&apos;||password||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        FORCE_USER              = &apos;||NVL2(inFORCE_USER,             &apos;&apos;&apos;&apos;||inFORCE_USER||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        GROUP_LIST              = &apos;||NVL2(inGROUP_LIST,             &apos;&apos;&apos;&apos;||inGROUP_LIST||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        USER_NAME_LOWERCASE     = &apos;||NVL2(inUSER_NAME,              &apos;&apos;&apos;&apos;||lower(inUSER_NAME)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;
                    &apos;||TRIM(whereClause)||&apos;
                      AND ISACTIVE = &apos;&apos;Y&apos;&apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;if (debug is not null and UPPER(debug) = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName || &apos; : sqlStatement=&apos;||SUBSTRING(moduleName || &apos; : sqlStatement=&apos;||sqlStatement,1,63900));
&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;execute immediate sqlStatement;
&#x9;&#x9;&#x9;&#x9;&#x9;set message = &apos;SUCCESS UPDATING &apos;||TRIM(whereClause); 
&#x9;&#x9;&#x9;&#x9;&#x9;SET rowsProcessed = rowsProcessed + 1;
&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;set message = &apos;SUCCESS TO BE UPDATED: &apos;||TRIM(whereClause); 
&#x9;&#x9;&#x9;&#x9;END IF; 
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END FOR;

&#x9;&#x9;-- No matching row was found so insert it.
&#x9;&#x9;IF (NOT duplicate) THEN
&#x9;&#x9;&#x9;set actionType = &apos;I&apos;;
&#x9;&#x9;&#x9;IF(performInsertUpdate IS NOT NULL AND UPPER(performInsertUpdate) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;set sqlStatement = 
&#x9;&#x9;&#x9;&#x9;&apos;insert into &apos;||scriptPath||&apos; (
                    ORGANIZATION_NAME,
                    PROJECT_NAME,
                    SUBPROJECT_NAME,
                    USER_NAME,
                    USER_DESC,
                    DOMAIN_NAME,
                    ENVIRONMENT_NAME,
                    USER_PWD,
                    FORCE_USER,
                    GROUP_LIST,
                    USER_NAME_LOWERCASE,
                    ISACTIVE)
                    values (&apos;||NVL2(inORGANIZATION_NAME,      &apos;&apos;&apos;&apos;||inORGANIZATION_NAME||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inPROJECT_NAME,           &apos;&apos;&apos;&apos;||inPROJECT_NAME||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inSUBPROJECT_NAME,        &apos;&apos;&apos;&apos;||inSUBPROJECT_NAME||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inUSER_NAME,              &apos;&apos;&apos;&apos;||inUSER_NAME||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inUSER_DESC,              &apos;&apos;&apos;&apos;||inUSER_DESC||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inDOMAIN_NAME,            &apos;&apos;&apos;&apos;||inDOMAIN_NAME||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inENVIRONMENT_NAME,       &apos;&apos;&apos;&apos;||UPPER(inENVIRONMENT_NAME)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(password,                 &apos;&apos;&apos;&apos;||password||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inFORCE_USER,             &apos;&apos;&apos;&apos;||inFORCE_USER||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inGROUP_LIST,             &apos;&apos;&apos;&apos;||inGROUP_LIST||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inUSER_NAME,              &apos;&apos;&apos;&apos;||lower(inUSER_NAME)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;&apos;Y&apos;&apos;
                        )&apos;;

&#x9;&#x9;&#x9;&#x9;if (debug is not null and UPPER(debug) = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName || &apos; : sqlStatement=&apos;||SUBSTRING(moduleName || &apos; : sqlStatement=&apos;||sqlStatement,1,63900));
&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;-- Execute the SQL INSERT
&#x9;&#x9;&#x9;&#x9;execute immediate sqlStatement;

&#x9;&#x9;&#x9;&#x9;set message = &apos;SUCCESS INSERTING &apos;|| 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;inORGANIZATION_NAME ||&apos;|&apos;|| inPROJECT_NAME||&apos;|&apos;|| TRIM(NVL(inSUBPROJECT_NAME,&apos;  &apos;))||&apos;|&apos;|| inUSER_NAME||&apos;|&apos;|| inDOMAIN_NAME||&apos;|&apos;|| inENVIRONMENT_NAME || &apos;|&apos;;
&#x9;&#x9;&#x9;&#x9;SET rowsProcessed = rowsProcessed + 1;
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;set message = &apos;SUCCESS TO BE INSERTED: &apos;|| 
&#x9;&#x9;&#x9;&#x9;&#x9;inORGANIZATION_NAME ||&apos;|&apos;|| inPROJECT_NAME||&apos;|&apos;|| TRIM(NVL(inSUBPROJECT_NAME,&apos;  &apos;))||&apos;|&apos;|| inUSER_NAME||&apos;|&apos;|| inDOMAIN_NAME||&apos;|&apos;|| inENVIRONMENT_NAME || &apos;|&apos;;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END IF;
&#x9;elseif (setInactive is not null and upper(setInactive) = &apos;Y&apos;) then
&#x9;&#x9;set actionType = &apos;S&apos;;
&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getPrivilegeDatasourceToScriptMapping(&apos;CU&apos;, datasource, scriptPath);
&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getSQLUsers(
&#x9;&#x9;&#x9;&#x9;datasource, inENVIRONMENT_NAME, inORGANIZATION_NAME, inPROJECT_NAME, inSUBPROJECT_NAME, inUSER_NAME, inDOMAIN_NAME, 
&#x9;&#x9;&#x9;&#x9;debug, sqlStatement, fromClause, whereClause);

&#x9;&#x9;-- Set row inactive from COMPOSITE_USER using the USERID
&#x9;if (inUSERID is not null) then
&#x9;&#x9;&#x9;set sqlStatement = &apos;select count(*) cnt from &apos;||scriptPath||&apos; where USERID = &apos;||inUSERID;
&#x9;&#x9;&#x9;open countCursor for sqlStatement;
&#x9;&#x9;&#x9;fetch countCursor into cnt;
&#x9;&#x9;&#x9;close countCursor;
&#x9;&#x9;&#x9;SET rowsProcessed = cnt;
&#x9;&#x9;&#x9;if (cnt &gt; 0) then
&#x9;&#x9;&#x9;&#x9;-- Update ISACTIVE from COMPOSITE_USER table
&#x9;&#x9;&#x9;&#x9;set sqlStatement = &apos;UPDATE &apos;||scriptPath||&apos;&#x9;SET ISACTIVE = &apos;&apos;N&apos;&apos; WHERE USERID = &apos;||inUSERID;
&#x9;&#x9;&#x9;&#x9;if (debug is not null and UPPER(debug) = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName || &apos; : sqlStatement=&apos;||SUBSTRING(moduleName || &apos; : sqlStatement=&apos;||sqlStatement,1,63900));
&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;execute immediate sqlStatement;
&#x9;&#x9;&#x9;&#x9;set message = &apos;SUCCESS SETTING INACTIVE USERID=&apos;|| inUSERID;
&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;set message = &apos;No rows exists.&apos;;
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;else
&#x9;&#x9;&#x9;-- Set rows inactive using adhoc where clause
&#x9;&#x9;&#x9;set sqlStatement = &apos;select count(*) cnt from &apos;||scriptPath||&apos; &apos;||TRIM(whereClause);
&#x9;&#x9;&#x9;open countCursor for sqlStatement;
&#x9;&#x9;&#x9;fetch countCursor into cnt;
&#x9;&#x9;&#x9;close countCursor;

&#x9;&#x9;&#x9;SET rowsProcessed = cnt;
&#x9;&#x9;&#x9;if (cnt &gt; 0) then
&#x9;&#x9;&#x9;&#x9;-- Update ISACTIVE from COMPOSITE_USER table
&#x9;&#x9;&#x9;&#x9;set sqlStatement = 
&#x9;&#x9;&#x9;&#x9;&apos;update &apos;||scriptPath||&apos;
                    set ISACTIVE = &apos;&apos;N&apos;&apos;
                &apos; ||TRIM(whereClause);

&#x9;&#x9;&#x9;&#x9;if (debug is not null and UPPER(debug) = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName || &apos; : sqlStatement=&apos;||SUBSTRING(moduleName || &apos; : sqlStatement=&apos;||sqlStatement,1,63900));
&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;execute immediate sqlStatement;
&#x9;&#x9;&#x9;&#x9;set message = &apos;SUCCESS SETTING INACTIVE &apos;||TRIM(whereClause); 
&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;set message = &apos;No rows exists.&apos;;
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;end if;
&#x9;elseif (performDelete is not null and upper(performDelete) = &apos;Y&apos;) then
&#x9;&#x9;set actionType = &apos;D&apos;;
&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getPrivilegeDatasourceToScriptMapping(&apos;CU&apos;, datasource, scriptPath);
&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getSQLUsers(
&#x9;&#x9;&#x9;&#x9;datasource, inENVIRONMENT_NAME, inORGANIZATION_NAME, inPROJECT_NAME, inSUBPROJECT_NAME, inUSER_NAME, inDOMAIN_NAME, 
&#x9;&#x9;&#x9;&#x9;debug, sqlStatement, fromClause, whereClause);

&#x9;&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;&#x9;-- Delete a row from COMPOSITE_USER using the USERID
&#x9;&#x9;&#x9;if (inUSERID is not null) then
&#x9;&#x9;&#x9;&#x9;set sqlStatement = &apos;select count(*) cnt from &apos;||scriptPath||&apos; where USERID = &apos;||inUSERID;
&#x9;&#x9;&#x9;&#x9;open countCursor for sqlStatement;
&#x9;&#x9;&#x9;&#x9;fetch countCursor into cnt;
&#x9;&#x9;&#x9;&#x9;close countCursor;
&#x9;&#x9;&#x9;&#x9;set rowsProcessed = cnt;
&#x9;&#x9;&#x9;&#x9;if (cnt &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;-- Delete row from COMPOSITE_USER table using USERID
&#x9;&#x9;&#x9;&#x9;&#x9;set sqlStatement = &apos;DELETE FROM &apos;||scriptPath||&apos; WHERE USERID = &apos;||inUSERID;
&#x9;&#x9;&#x9;&#x9;&#x9;if (debug is not null and UPPER(debug) = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName || &apos; : sqlStatement=&apos;||SUBSTRING(moduleName || &apos; : sqlStatement=&apos;||sqlStatement,1,63900));
&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;execute immediate sqlStatement;
&#x9;&#x9;&#x9;&#x9;&#x9;set message = &apos;SUCCESS DELETING USERID=&apos;|| inUSERID;
&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;set message = &apos;No rows exists.&apos;;
&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;-- Delete rows from COMPOSITE_USER table using adhoc SQL
&#x9;&#x9;&#x9;&#x9;-- Create the fromClause pointing to the correct /Formatting layer database table
&#x9;&#x9;&#x9;&#x9;set fromClause = &apos;FROM &apos;||scriptPath;
&#x9;&#x9;&#x9;&#x9;-- Create the SELCT COUNT(*) CNT statement
&#x9;&#x9;&#x9;&#x9;set sqlStatement2 = &apos;SELECT COUNT(*) rowsDeleted &apos;||fromClause||CHR(10)||&apos;         &apos;||whereClause;&#x9;&#x9;&#x9;&#x9;
&#x9;&#x9;&#x9;&#x9;-- Create the DELETE statement
&#x9;&#x9;&#x9;&#x9;set sqlStatement3 = &apos;DELETE &apos;||fromClause||CHR(10)||&apos;         &apos;||whereClause;
&#x9;&#x9;&#x9;&#x9;-- Print out debug
&#x9;&#x9;&#x9;&#x9;if (debug is not null and UPPER(debug) = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;call print(SUBSTRING(moduleName || &apos; : fromClause=&apos;||fromClause,1,63900));
&#x9;&#x9;&#x9;&#x9;&#x9;call print(SUBSTRING(moduleName || &apos; : whereClause=&apos;||whereClause,1,63900));
&#x9;&#x9;&#x9;&#x9;&#x9;call print(SUBSTRING(moduleName || &apos; : sqlStatement2=&apos;||sqlStatement2,1,63900));
&#x9;&#x9;&#x9;&#x9;&#x9;call print(SUBSTRING(moduleName || &apos; : sqlStatement3=&apos;||sqlStatement3,1,63900));
&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;-- Execute the SELECT COUNT statement
&#x9;&#x9;&#x9;&#x9;open countCursor for sqlStatement2;
&#x9;&#x9;&#x9;&#x9;fetch countCursor into cnt;
&#x9;&#x9;&#x9;&#x9;close countCursor;
&#x9;&#x9;&#x9;&#x9;if (debug is not null and UPPER(debug) = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName || &apos; : Number of privilege rows=&apos;||cnt);
&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;-- Execute the DELETE statement
&#x9;&#x9;&#x9;&#x9;set rowsProcessed = cnt;
&#x9;&#x9;&#x9;&#x9;if (cnt &gt; 0 and performDelete is not null and UPPER(performDelete) = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;-- Execute the DELETE statement
&#x9;&#x9;&#x9;&#x9;&#x9;if (debug is not null and UPPER(debug) = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName || &apos; : Deleting &apos;||cnt||&apos; privileges rows.&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;execute immediate sqlStatement3;
&#x9;&#x9;&#x9;&#x9;&#x9;set message = &apos;SUCCESS DELETING &apos;||TRIM(whereClause); 
&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;set message = &apos;No rows exists.&apos;;
&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;EXCEPTION
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;raise;
&#x9;&#x9;END;

&#x9;&#x9;-- Clean up supporting tables: Delete SUBPROJECT_TYPE and PROJECT_TYPE and ORGANIZATION_TYPE if available and valid to delete.
&#x9;&#x9;if (inSUBPROJECT_NAME is not null) then
&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/ModifyDBPrivileges/TableMaintenance/modify_05_SUBPROJECT_TYPE(datasource, null, performDelete, inSUBPROJECT_NAME, inPROJECT_NAME, inORGANIZATION_NAME, msg);
&#x9;&#x9;elseif (inPROJECT_NAME is not null) then
&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/ModifyDBPrivileges/TableMaintenance/modify_04_PROJECT_TYPE(datasource, null, performDelete, inPROJECT_NAME, inORGANIZATION_NAME, msg);
&#x9;&#x9;elseif (inORGANIZATION_NAME is not null) then
&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/ModifyDBPrivileges/TableMaintenance/modify_01_ORGANIZATION_TYPE(datasource, null, performDelete, inORGANIZATION_NAME, msg);
&#x9;&#x9;end if;
&#x9;else
&#x9;&#x9;set message = &apos;Invalid command provided.&apos;;
&#x9;end if;
&#x9;call print(moduleName||&apos; : &apos;||message);
END</attribute>
  <attribute name="creationDate" type="LONG">1491944720784</attribute>
  <attribute name="creatorUserDomain" type="STRING">ldap</attribute>
  <attribute name="creatorUserId" type="INTEGER">4005</attribute>
  <attribute name="creatorUserName" type="STRING">zkxl6un</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1564075714164</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserId" type="INTEGER">4005</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">9/230</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/410</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/362</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/390</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/409</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/308</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/407</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/418</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">7/450</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/408</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/339</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/263</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/426</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
  </attribute>
  <attribute name="resourceModifiedDateOnSourceCISSite" type="LONG">1491944720784</attribute>
</metadata>