<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:e931daa6-7fda-456a-badf-4cdb1c228a1a -->
<metadata name="generateViewsLoopXML" path="/shared/ASAssets/BestPractices_v81/Procedures/generateViewsLoopXML" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>&lt;![CDATA[
&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

]]&gt;</annotation>
  <parameters>
    <parameter name="generateType" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="overwrite" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="copyAnnotation" direction="IN" nullable="true">
      <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
    </parameter>
    <parameter name="copyPrivilegeMode" direction="IN" nullable="true">
      <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
    </parameter>
    <parameter name="generateUnsupportedColumnType" direction="IN" nullable="true">
      <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
    </parameter>
    <parameter name="ConfigParamsXML" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="startingFolderXML" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="exactMatch" direction="IN" nullable="true">
      <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
    </parameter>
    <parameter name="excludeDsPathsList" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="inProjectFolderName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="newColumnList" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="result" direction="OUT" nullable="true">
      <datatype name="generateViewsRow" type="TABLE" refId="256">
        <element name="datasourceName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="projectFolderName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="greatGrandParentName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="grandParentName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="parentName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="containerName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="containerType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="columnName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="logicalColumnName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="logicalColumnType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="logicalStatus">
          <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
        </element>
        <element name="containerPath">
          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
        </element>
        <element name="duration">
          <datatype name="IntervalDay" type="INTERVAL_DAY" intervalMode="INTERVAL_HOUR_TO_SECOND" intervalPrecision="2" fractionalSecondPrecision="6"/>
        </element>
      </datatype>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/resource/ResourceExists" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="path" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="type" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="version" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceVersion" type="STRING" maxLength="255"/>
      </element>
      <element name="exists" direction="OUT">
        <datatype type="BOOLEAN"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/services/webservices/system/admin/resource/operations/updateResources" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="updateResources" direction="IN">
        <datatype name="updateResources" extendedName="{http://www.compositesw.com/services/system/admin/resource}updateResources" namespace="http://www.compositesw.com/services/system/admin/resource" referenceDefinitionSet="/services/webservices/system/admin/resource/operations/ResourceSchema" referenceType="{http://www.compositesw.com/services/system/admin/resource}updateResources" subType="ELEMENT_DECL" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="ELEMENT" componentName="{http://www.compositesw.com/services/system/admin/resource}updateResources">
          <schemaDatatype>
            <datatype name="updateResources" namespace="http://www.compositesw.com/services/system/admin/resource" superTypeName="updateResourcesRequest" superTypeNamespace="http://www.compositesw.com/services/system/admin/resource" subType="ELEMENT_DECL" type="TREE" refId="257">
              <element name="resources" namespace="http://www.compositesw.com/services/system/admin/resource">
                <datatype name="resourceList" namespace="http://www.compositesw.com/services/system/admin/resource" superTypeName="anyType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="COMPLEX_TYPE" type="TREE" refId="513">
                  <element name="resource" namespace="http://www.compositesw.com/services/system/admin/resource" maxOccurs="2147483647" minOccurs="0">
                    <datatype name="resource" namespace="http://www.compositesw.com/services/system/admin/resource" superTypeName="anyType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="COMPLEX_TYPE" type="TREE" refId="769">
                      <element name="name" namespace="http://www.compositesw.com/services/system/admin/resource">
                        <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="path" namespace="http://www.compositesw.com/services/system/admin/resource">
                        <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="type" namespace="http://www.compositesw.com/services/system/admin/resource">
                        <datatype name="resourceType" namespace="http://www.compositesw.com/services/system/admin/resource" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="subtype" namespace="http://www.compositesw.com/services/system/admin/resource">
                        <datatype name="resourceSubType" namespace="http://www.compositesw.com/services/system/admin/resource" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="id" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                        <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="changeId" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                        <datatype name="int" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="long" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
                      </element>
                      <element name="version" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                        <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="introspectState" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                        <datatype name="introspectState" namespace="http://www.compositesw.com/services/system/admin/resource" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="ownerDomain" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                        <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="ownerName" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                        <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="impactLevel" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                        <datatype name="impactLevel" namespace="http://www.compositesw.com/services/system/admin/resource" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="impactMessage" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                        <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="enabled" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                        <datatype name="boolean" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="INTEGER" minValue="0" maxValue="1"/>
                      </element>
                      <element name="lockState" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                        <datatype name="lockState" namespace="http://www.compositesw.com/services/system/admin/resource" superTypeName="anyType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="COMPLEX_TYPE" type="TREE" refId="1025">
                          <element name="lockOwnerDomain" namespace="http://www.compositesw.com/services/system/admin/resource">
                            <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                          </element>
                          <element name="lockOwnerName" namespace="http://www.compositesw.com/services/system/admin/resource">
                            <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                          </element>
                          <element name="lockCreateTime" namespace="http://www.compositesw.com/services/system/admin/resource">
                            <datatype name="dateTime" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="DATETIME"/>
                          </element>
                          <element name="lockParentPath" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                            <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                          </element>
                        </datatype>
                      </element>
                      <element name="hints" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                        <datatype superTypeName="anyType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="COMPLEX_TYPE" type="TREE" refId="1281">
                          <element name="hint" namespace="http://www.compositesw.com/services/system/admin/resource" maxOccurs="2147483647" minOccurs="0">
                            <datatype name="attribute" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="anyType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="COMPLEX_TYPE" type="TREE" refId="1537">
                              <element name="name" namespace="http://www.compositesw.com/services/system/util/common">
                                <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                              </element>
                              <element name="type" namespace="http://www.compositesw.com/services/system/util/common">
                                <datatype name="attributeType" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
                              </element>
                              <element name="value" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                                <datatype name="attributeSimpleValue" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
                              </element>
                              <element name="valueList" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                                <datatype name="attributeTypeValueList" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="attributeComplexValue" superTypeNamespace="http://www.compositesw.com/services/system/util/common" subType="COMPLEX_TYPE" type="TREE" refId="1793">
                                  <element name="item" namespace="http://www.compositesw.com/services/system/util/common" maxOccurs="2147483647" minOccurs="0">
                                    <datatype name="attributeTypeValue" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="anyType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="COMPLEX_TYPE" type="TREE" refId="2049">
                                      <element name="type" namespace="http://www.compositesw.com/services/system/util/common">
                                        <datatype name="attributeType" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
                                      </element>
                                      <element name="value" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                                        <datatype name="attributeSimpleValue" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
                                      </element>
                                      <element name="valueList" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                                        <reference refId="1793"/>
                                      </element>
                                      <element name="valueMap" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                                        <datatype name="attributeTypeValueMap" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="attributeComplexValue" superTypeNamespace="http://www.compositesw.com/services/system/util/common" subType="COMPLEX_TYPE" type="TREE" refId="2305">
                                          <element name="entry" namespace="http://www.compositesw.com/services/system/util/common" maxOccurs="2147483647" minOccurs="0">
                                            <datatype superTypeName="anyType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="COMPLEX_TYPE" type="TREE" refId="2561">
                                              <element name="key" namespace="http://www.compositesw.com/services/system/util/common">
                                                <reference refId="2049"/>
                                              </element>
                                              <element name="value" namespace="http://www.compositesw.com/services/system/util/common">
                                                <reference refId="2049"/>
                                              </element>
                                            </datatype>
                                          </element>
                                        </datatype>
                                      </element>
                                      <element name="valueArray" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                                        <datatype name="attributeSimpleValueList" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="attributeComplexValue" superTypeNamespace="http://www.compositesw.com/services/system/util/common" subType="COMPLEX_TYPE" type="TREE" refId="2817">
                                          <element name="item" namespace="http://www.compositesw.com/services/system/util/common" maxOccurs="2147483647" minOccurs="0">
                                            <datatype name="attributeSimpleValue" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
                                          </element>
                                        </datatype>
                                      </element>
                                    </datatype>
                                  </element>
                                </datatype>
                              </element>
                              <element name="valueMap" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                                <reference refId="2305"/>
                              </element>
                              <element name="valueArray" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                                <reference refId="2817"/>
                              </element>
                              <element name="unset" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                                <datatype name="boolean" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="INTEGER" minValue="0" maxValue="1"/>
                              </element>
                            </datatype>
                          </element>
                        </datatype>
                      </element>
                      <element name="annotation" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                        <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="attributes" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                        <datatype name="attributeList" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="anyType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="COMPLEX_TYPE" type="TREE" refId="3073">
                          <element name="attribute" namespace="http://www.compositesw.com/services/system/util/common" maxOccurs="2147483647" minOccurs="0">
                            <reference refId="1537"/>
                          </element>
                        </datatype>
                      </element>
                    </datatype>
                  </element>
                </datatype>
              </element>
              <element name="detail" namespace="http://www.compositesw.com/services/system/admin/resource">
                <datatype name="detailLevel" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
              </element>
            </datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="updateResourcesResponse" direction="OUT">
        <datatype name="updateResourcesResponse" extendedName="{http://www.compositesw.com/services/system/admin/resource}updateResourcesResponse" namespace="http://www.compositesw.com/services/system/admin/resource" referenceDefinitionSet="/services/webservices/system/admin/resource/operations/ResourceSchema" referenceType="{http://www.compositesw.com/services/system/admin/resource}updateResourcesResponse" subType="ELEMENT_DECL" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="ELEMENT" componentName="{http://www.compositesw.com/services/system/admin/resource}updateResourcesResponse">
          <schemaDatatype>
            <datatype name="updateResourcesResponse" namespace="http://www.compositesw.com/services/system/admin/resource" superTypeName="updateResourcesResponse" superTypeNamespace="http://www.compositesw.com/services/system/admin/resource" subType="ELEMENT_DECL" type="TREE" refId="3329">
              <element name="resources" namespace="http://www.compositesw.com/services/system/admin/resource">
                <reference refId="513"/>
              </element>
            </datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="fault" direction="OUT">
        <datatype name="fault" extendedName="{http://www.compositesw.com/services/system/util/common}fault" namespace="http://www.compositesw.com/services/system/util/common" referenceDefinitionSet="/services/webservices/system/util/common/operations/CommonSchema" referenceType="{http://www.compositesw.com/services/system/util/common}fault" subType="ELEMENT_DECL" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="ELEMENT" componentName="{http://www.compositesw.com/services/system/util/common}fault">
          <schemaDatatype>
            <datatype name="fault" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="fault" superTypeNamespace="http://www.compositesw.com/services/system/util/common" subType="ELEMENT_DECL" type="TREE" refId="3585">
              <element name="errorEntry" namespace="http://www.compositesw.com/services/system/util/common" maxOccurs="2147483647" minOccurs="0">
                <datatype name="messageEntry" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="anyType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="COMPLEX_TYPE" type="TREE" refId="3841">
                  <element name="code" namespace="http://www.compositesw.com/services/system/util/common">
                    <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                  </element>
                  <element name="name" namespace="http://www.compositesw.com/services/system/util/common">
                    <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                  </element>
                  <element name="message" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                    <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                  </element>
                  <element name="detail" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                    <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                  </element>
                  <element name="severity" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                    <datatype name="messageSeverity" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
                  </element>
                </datatype>
              </element>
            </datatype>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/checkDuplicateColumn" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inColumnListStr" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inNewColumnListStr" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inColumnAliasOrName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="columnListStrOut" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="columnAliasOrName" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="dropColumn" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/generateLink" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="resourcePath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="publishToFolder" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="overwrite" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="copyAnnotation" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="copyPrivilegeMode" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/getDataSourceName" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="resourcePath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="cacheStorageDataSourcePath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="excludePathsList" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="datasourceAncestor" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inIgnoreResourceDoesNotExist" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="datasourceName" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="datasourcePath" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/getDefaultValuesXML" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="scriptsPath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="defaultValuesXML" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/getNameXML" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inLogicalID" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="inContainerList" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inProjectFolderName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inGreatGrandParentName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inGrandParentName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inParentName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inContainerName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inResourceName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="columnType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="applyReservedWordList" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="ConfigParamsXML" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="containerList" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="logicalName" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="logicalType" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="compositeTransformation" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="annotation" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="status" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/isDerivedPathMatch" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="exactMatch" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="derivedFilterPath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="sourcepath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="resourcePath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="excludePathsList" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/isUnsupportedColumnType" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="columnType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="isUnsupported" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/retrieveName/replaceSymbol" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="direction" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="inReplaceStr" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="outReplaceStr" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/retrieveName/retrieveNewColumnList" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inProjectFolderName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inGreatGrandParentName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inGrandParentName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inParentName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inContainerName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="resultCursor" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="datasourceName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="projectFolderName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="greatGrandParentName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="grandParentName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="parentName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="containerName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="physicalName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="physicalType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resourceNum">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="logicalName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="logicalType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="annotation">
            <datatype type="STRING" maxLength="32767"/>
          </element>
          <element name="logicalTransformation">
            <datatype type="STRING" maxLength="1024"/>
          </element>
          <element name="physicalNameEncoded">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/numOccurrences" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="searchString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inStringToSearch" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="num" direction="OUT">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="tagName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inXMLDoc" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="resultValue" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/_ProjectMaintenance/defaultValues" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/log/logDebugMessage" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="moduleName" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="moduleNameType" type="STRING" maxLength="4096"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="messageText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inPath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inWord" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/copyResourcesPrivilegesV2" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="updatePrivilegesRecursively" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="copyPrivilegeMode" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inCopyPrivilegeEntries" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="257"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/createAllFoldersPrivileges" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inSourceFolderPath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="updatePrivilegesRecursively" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="copyPrivilegeMode" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="257"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/createResource" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceSubType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="createResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="257"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <reference refId="257"/>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/definitions/RepositoryDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getBasicResourceCursor" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceCursor" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="name">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="path">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="type">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="id">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="changeid">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="version">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="introspectState">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ownerDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ownerName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="impactLevel">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="impactMessage">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="annotation">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="explicitlyDesigned">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="tableType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="sqlText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="scriptText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="childCount">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="dataSourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getBasicResourceCursor_PROCEDURE_CURSOR" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="fullResourcePath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="cursorNum" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="resourceCursor" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="resourceName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resourcePath">
            <datatype type="STRING" maxLength="4096"/>
          </element>
          <element name="resourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="annotation">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="tableType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="sqlText">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="columnName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="columnType">
            <datatype type="STRING" maxLength="4096"/>
          </element>
          <element name="columnBaseType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="dataType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="paramDirection">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="nativeBaseType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="nativeType">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getBasicResourceCursor_SQL_TABLE" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="fullResourcePath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceCursor" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="resourceName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resourcePath">
            <datatype type="STRING" maxLength="1024"/>
          </element>
          <element name="resourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="annotation">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="explicitlyDesigned">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="tableType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="sqlText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="proprietaryModel">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="columnName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="columnType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="nativeBaseType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="nativeType">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getBasicResourceCursor_SQL_TABLE_SQLINDEXES" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceCursor" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="sqlIndexName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="sqlIndexType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="sqlIndexUnique">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="sqlIndexColName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="sqlIndexColOrder">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getDependentResourcesCursor" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="resourceName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resourcePath">
            <datatype type="STRING" maxLength="4096"/>
          </element>
          <element name="resourceType">
            <datatype type="STRING" maxLength="40"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="40"/>
          </element>
          <element name="id">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="ownerDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ownerName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="impactLevel">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="impactMessage">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getResourceCacheConfigCursor" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="inType" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="configured">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="cachePolicy">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="storageMode">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="storageDataSourcePath">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="storageTargetName">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="storagePath">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="storageType">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="refreshMode">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="scheduleMode">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="startTime">
            <datatype type="DATETIME"/>
          </element>
          <element name="fromTimeInADay">
            <datatype type="INTEGER"/>
          </element>
          <element name="endTimeInADay">
            <datatype type="INTEGER"/>
          </element>
          <element name="recurringDay">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="interval">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="period">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="count">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="isCluster">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="expirationPeriod">
            <datatype type="INTEGER"/>
          </element>
          <element name="clearRule">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="allOrNothing">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="incremental">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="storageBucketMode">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="storageBucketCatalog">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="storageBucketSchema">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="storageBucketPrefix">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="storageBucketNumBuckets">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="storageDropCreateIdx">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="firstRefreshCallback">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="secondRefreshCallback">
            <datatype type="STRING" maxLength="32768"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getResourceListRecursive" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="resourceTreeList" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="name">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resPath">
            <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
          </element>
          <element name="resType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="creationDate">
            <datatype type="DATETIME"/>
          </element>
          <element name="creationDateBigint">
            <datatype type="INTEGER"/>
          </element>
          <element name="creatorUserDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="creatorUserName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="lastModifiedDate">
            <datatype type="DATETIME"/>
          </element>
          <element name="lastModifiedDateBigint">
            <datatype type="INTEGER"/>
          </element>
          <element name="lastModifiedUserDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="lastModifiedUserName">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/returnFolderNameAndFolderPath" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="mode" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="folderName" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="folderPath" direction="OUT">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/updateImpactedResource" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="resourcePath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="message" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/TextUtils/RegexPosition" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="Input Text" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Regular Expression" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Occurrence" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/extractBiDelimitedText" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="searchTerm" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="openingDelim" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="closingDelim" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inOccurrence" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inTrimText" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inCaseSensitive" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/extractDelimitedText" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inputString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="delimiter" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="occurrence" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="reverseInputText" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="reverseOutput" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="trimText" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="includeDelimiter" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="object">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/getDelimitedOccurrence" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="mode" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="delimiter" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inOccurrence" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inTrimText" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/numOccurrences" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="searchString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="stringToSearch" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="num" direction="OUT">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/xml/extractXMLOccurrence" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inContentXML" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inTagName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inOccurrence" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inIncludeDelimiter" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inTrimText" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inCaseSensitive" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="status" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* 
&#x9;generateViewsXML: 
&#x9;-- Data Virtualization Best Practices --

&#x9;This is the main procedure used for generating any layer of views from data sources or other view layers including
&#x9;&#x9;&quot;Physical Views&quot;, &quot;Formatting Views&quot;, &quot;Logical Views&quot;, and  &quot;Client Views&quot;

&#x9;Whether you have 10&apos;s, 100&apos;s or 1000&apos;s of relational tables that you want to map into a canonical
&#x9;format, this auto-generation utility will aid in the mapping of data abstraction layers to the 
&#x9;physical tables.
&#x9;
&#x9;1) Edit the /&lt;project-name&gt;/generationScripts/ConfigureParams and ConfigureStartingFolders file to set up the processing
&#x9;&#x9;startingFolderXML - 
&#x9;&#x9;&#x9;defines which data source folders to process, 
&#x9;&#x9;&#x9;where the views get generated, 
&#x9;&#x9;&#x9;and whether the sub-folders are derived from the source or defined absolutely

&#x9;2) Execute the top level procedure which is:
&#x9;&#x9;/&lt;project-name&gt;/generationScripts/generatePhysicalViews
&#x9;&#x9;/&lt;project-name&gt;/generationScripts/generateFormattingViews
&#x9;3) Refresh Studio to see the Views that were generated

&#x9;Cautions:
&#x9;   CAUTION(1): Overlapping sourceFolderPath definitions will result in duplicated views being produced
&#x9;&#x9;Take the 2 source folder paths expressed below.  The 2nd one is a sub-directory of the first one.
&#x9;&#x9;This will result in the same source folders being processed twice which generates the same mapping views
&#x9;&#x9;but in different target folders.
&#x9;    (1,&apos;PV&apos;,&apos;D&apos;,&apos;/shared/DataAbstractSample/PhysicalLayer&apos;,&#x9;&#x9;null, &apos;/shared/DataAbstractSample/FormattingLayer&apos;),
&#x9;    (1,&apos;PV&apos;,&apos;D&apos;,&apos;/shared/DataAbstractSample/PhysicalLayer/ORDERS&apos;,&#x9;null, &apos;/shared/DataAbstractSample/FormattingLayer/Orders&apos;)

&#x9;    CAUTION(2): Source Folder Path definitions are case sensitive and must match the actual source path that you
&#x9;&#x9;want to introspect to create mapping views from.

&#x9;    CAUTION(3): Only relational sources are supported at this time.

&#x9;Input:
&#x9;&#x9;&#x9;-- allows user to decide whether they want to overwrite an existing view or not.
&#x9;&#x9;&#x9;-- 0=false=do not overwrite the composite published database resource.  If the resource exists, raise an exception.
&#x9;&#x9;&#x9;-- 1=true=do overwrite the composite published database resource if it exists.
&#x9;&#x9;overwrite

&#x9;&#x9;&#x9;-- allows user to decide whether they want to copy annotations or not form both resource and columns.
&#x9;&#x9;&#x9;-- 0=false=do not copy the annotation from the target resource
&#x9;&#x9;&#x9;-- 1=true=do copy the annotation from the target resource
&#x9;&#x9;copyAnnotation

&#x9;&#x9;&#x9;-- flag indicating the mode in which to copy privileges.  Privileges are only copied from the parent when creating new resources including folders.
&#x9;&#x9;&#x9;-- null (default) - do not set any privileges at all
&#x9;&#x9;&#x9;-- 0 - set mode to &quot;OVERWRITE_APPEND&quot; - merges and does not update privileges for users or groups not mentioned.
&#x9;&#x9;&#x9;-- 1 - set the mode to &quot;SET_EXACTLY&quot; - makes privileges look exactly like those provided in the call.
&#x9;&#x9;copyPrivilegeMode

&#x9;&#x9;&#x9;-- flag indicating whether to ignore or generate unsupported column types.  For example in Oracle an SDO spatial type gets imported into Composite at &apos;OTHER&apos;.
&#x9;&#x9;&#x9;-- 0/null (default) - ignore column type = &apos;OTHER&apos; and do not generate that column
&#x9;&#x9;&#x9;-- 1 - generate columns where the column type = &apos;OTHER&apos;
&#x9;&#x9;generateUnsupportedColumnType

&#x9;&#x9;&#x9;-- The XML of configuration parameters.  A full description can be found in /generationScripts/Configure/ConfigureParams
&#x9;&#x9;ConfigParamsXML

&#x9;&#x9;&#x9;-- The XML of starting folders including source, target and derived filter path
&#x9;&#x9;startingFolderXML

&#x9;&#x9;&#x9;-- the name of the project folder (defaultValue.basePath)(projectName)
&#x9;&#x9;inProjectFolderName

&#x9;&#x9;&#x9;--(used when generateMode=&apos;G&apos;)
&#x9;&#x9;&#x9;-- A formatted list of new columns to add to the end of the view.  The column will not be added if it already exists.
&#x9;&#x9;&#x9;-- The format is as follows:  column1&amp;&amp;type1&amp;&amp;value1//column2&amp;&amp;type2&amp;&amp;value2//column3&amp;&amp;type3&amp;&amp;value3
&#x9;&#x9;newColumnList

&#x9;Output:
&#x9;&#x9;-- View Generation results
&#x9;&#x9;&#x9;generateViewsRow - &#x9;CURSOR (
&#x9;&#x9; &#x9;&#x9;datasourceName&#x9;&#x9;&#x9;VARCHAR(255), 
&#x9;&#x9;&#x9;&#x9;projectFolderName&#x9;&#x9;VARCHAR(255), 
&#x9;&#x9;&#x9;&#x9;greatGrandParentName&#x9;VARCHAR(255), 
&#x9;&#x9;&#x9;&#x9;grandParentName&#x9;&#x9;&#x9;VARCHAR(255), 
&#x9;&#x9;&#x9;&#x9;parentName&#x9;&#x9;&#x9;&#x9;VARCHAR(255),
&#x9;&#x9;        containerName &#x9;&#x9;&#x9;VARCHAR(255), 
&#x9;&#x9;        containerType &#x9;&#x9;&#x9;VARCHAR(255), - the resource type of the container resource (i.e. TABLE)
&#x9;&#x9;        columnName &#x9;&#x9;&#x9;&#x9;VARCHAR(255), - the name of the original column within the source resource.
&#x9;&#x9;        logicalColumnName &#x9;&#x9;VARCHAR(255), - the name of the target column that will be created.
        &#x9;&#x9;logicalColumnType &#x9;&#x9;VARCHAR(255), - the type of the target column that will be created.
&#x9;&#x9;        logicalStatus &#x9;&#x9;&#x9;VARCHAR(4000), - the status for the usage of this column
 &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- on input, when generateMode = &apos;G&apos; possible values are:
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- &#x9;&#x9;GENERATED - generated the column name based on rules supplied
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- &#x9;&#x9;UNCHANGED - remains unchanged when it cannot match to the physical resourceName and the ConfigureParams.generateWithSourceColumn=1
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- on input, when generateMode = &apos;R&apos; possible values are:
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- &#x9;&#x9;FOUND - found when it finds a match to physical name in the spreadsheet
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- &#x9;&#x9;UNCHANGED - remains unchanged when it cannot match to the physical resourceName and the ConfigureParams.generateWithSourceColumn=1
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- &#x9;&#x9;DROPPED - gets dropped from the list when it cannot match to the physical resourceName and the ConfigureParams.generateWithSourceColumn=0
       &#x9;&#x9;&#x9;containerPath &#x9;&#x9;&#x9;VARCHAR(4000) - the full path to the container resource.
&#x9;&#x9;&#x9;&#x9;duration&#x9;&#x9;&#x9;&#x9;INTERVAL HOUR TO SECOND
&#x9;&#x9;&#x9;)
&#x9;&#x9;&#x9;Values: example:
parentName,&#x9;containerName,&#x9;containerType,&#x9;columnName,&#x9;&#x9;&#x9;logicalColumnName,&#x9;logicalColumnType,logicalStatus,containerPath
----------&#x9;---------------&#x9;---------------&#x9;-------------------&#x9;-------------------&#x9;---------------&#x9;---------------&#x9;---------------------------------
[NULL],&#x9;&#x9;CISORADEMO,&#x9;&#x9;TABLE,&#x9;&#x9;&#x9;CUSTOMERS,&#x9;&#x9;&#x9;Customers,&#x9;&#x9;&#x9;TABLE,&#x9;&#x9;&#x9;FOUND,&#x9;&#x9;&#x9;/shared/BestPractices/DataAbstractionSample/Physical/Formatting/CISORADEMO
CISORADEMO,&#x9;CUSTOMERS,&#x9;&#x9;INTEGER,&#x9;&#x9;CUSTOMER_ID,&#x9;&#x9;CustomerId,&#x9;&#x9;&#x9;INTEGER,&#x9;&#x9;FOUND,&#x9;&#x9;&#x9;/shared/BestPractices/DataAbstractionSample/Physical/Formatting/CISORADEMO
CISORADEMO,&#x9;CUSTOMERS,&#x9;&#x9;VARCHAR(50),&#x9;COMPANY_NAME,&#x9;&#x9;CompanyName,&#x9;&#x9;VARCHAR(50),&#x9;FOUND,&#x9;&#x9;&#x9;/shared/BestPractices/DataAbstractionSample/Physical/Formatting/CISORADEMO
CISORADEMO,&#x9;CUSTOMERS,&#x9;&#x9;VARCHAR(30),&#x9;CONTACT_FIRST_NAME,&#x9;ContactFirstName,&#x9;VARCHAR(30),&#x9;FOUND,&#x9;&#x9;&#x9;/shared/BestPractices/DataAbstractionSample/Physical/Formatting/CISORADEMO
CISORADEMO,&#x9;CUSTOMERS,&#x9;&#x9;VARCHAR(50),&#x9;CONTACT_LAST_NAME,&#x9;ContactLastName,&#x9;VARCHAR(50),&#x9;FOUND,&#x9;&#x9;&#x9;/shared/BestPractices/DataAbstractionSample/Physical/Formatting/CISORADEMO
CISORADEMO,&#x9;CUSTOMERS,&#x9;&#x9;VARCHAR(255),&#x9;BILLING_ADDRESS,&#x9;BillingAddress,&#x9;&#x9;VARCHAR(255),&#x9;FOUND,&#x9;&#x9;&#x9;/shared/BestPractices/DataAbstractionSample/Physical/Formatting/CISORADEMO
CISORADEMO,&#x9;CUSTOMERS,&#x9;&#x9;VARCHAR(50),&#x9;CITY,&#x9;&#x9;&#x9;&#x9;City,&#x9;&#x9;&#x9;&#x9;VARCHAR(50),&#x9;FOUND,&#x9;&#x9;&#x9;/shared/BestPractices/DataAbstractionSample/Physical/Formatting/CISORADEMO
CISORADEMO,&#x9;CUSTOMERS,&#x9;&#x9;VARCHAR(20),&#x9;STATE_OR_PROVINCE,&#x9;StateOrProvince,&#x9;VARCHAR(20),&#x9;FOUND,&#x9;&#x9;&#x9;/shared/BestPractices/DataAbstractionSample/Physical/Formatting/CISORADEMO
CISORADEMO,&#x9;CUSTOMERS,&#x9;&#x9;VARCHAR(20),&#x9;POSTAL_CODE,&#x9;&#x9;PostalCode,&#x9;&#x9;&#x9;VARCHAR(20),&#x9;FOUND,&#x9;&#x9;&#x9;/shared/BestPractices/DataAbstractionSample/Physical/Formatting/CISORADEMO
CISORADEMO,&#x9;CUSTOMERS,&#x9;&#x9;VARCHAR(50),&#x9;COUNTRY_REGION,&#x9;&#x9;CountryRegion,&#x9;&#x9;VARCHAR(50),&#x9;FOUND,&#x9;&#x9;&#x9;/shared/BestPractices/DataAbstractionSample/Physical/Formatting/CISORADEMO
CISORADEMO,&#x9;CUSTOMERS,&#x9;&#x9;VARCHAR(50),&#x9;CONTACT_TITLE,&#x9;&#x9;ContactTitle,&#x9;&#x9;VARCHAR(50),&#x9;FOUND,&#x9;&#x9;&#x9;/shared/BestPractices/DataAbstractionSample/Physical/Formatting/CISORADEMO
CISORADEMO,&#x9;CUSTOMERS,&#x9;&#x9;VARCHAR(30),&#x9;PHONE_NUMBER,&#x9;&#x9;PhoneNumber,&#x9;&#x9;VARCHAR(30),&#x9;FOUND,&#x9;&#x9;&#x9;/shared/BestPractices/DataAbstractionSample/Physical/Formatting/CISORADEMO
CISORADEMO,&#x9;CUSTOMERS,&#x9;&#x9;VARCHAR(30),&#x9;FAX_NUMBER,&#x9;&#x9;&#x9;FaxNumber,&#x9;&#x9;&#x9;VARCHAR(30),&#x9;FOUND,&#x9;&#x9;&#x9;/shared/BestPractices/DataAbstractionSample/Physical/Formatting/CISORADEMO
CISORADEMO,&#x9;CUSTOMERS,&#x9;&#x9;TIMESTAMP,&#x9;&#x9;MOD_DT,&#x9;&#x9;&#x9;&#x9;ModifiedDate,&#x9;&#x9;TIMESTAMP,&#x9;&#x9;FOUND,&#x9;&#x9;&#x9;/shared/BestPractices/DataAbstractionSample/Physical/Formatting/CISORADEMO
CISORADEMO,&#x9;CUSTOMERS,&#x9;&#x9;TIMESTAMP,&#x9;&#x9;CAST(CURRENT_DATE() AS DATE) AS,CurrentDate,DATE,&#x9;&#x9;FOUND,&#x9;&#x9;&#x9;/shared/BestPractices/DataAbstractionSample/Physical/Formatting/CISORADEMO
[NULL],&#x9;&#x9;CISORADEMO,&#x9;&#x9;TABLE,&#x9;&#x9;&#x9;EMPLOYEES,&#x9;&#x9;&#x9;Employees,&#x9;&#x9;&#x9;TABLE,&#x9;&#x9;&#x9;FOUND,&#x9;&#x9;&#x9;/shared/BestPractices/DataAbstractionSample/Physical/Formatting/CISORADEMO
CISORADEMO,&#x9;EMPLOYEES,&#x9;&#x9;INTEGER,&#x9;&#x9;EMPLOYEE_ID,&#x9;&#x9;EmployeeId,&#x9;&#x9;&#x9;INTEGER,&#x9;&#x9;FOUND,&#x9;&#x9;&#x9;/shared/BestPractices/DataAbstractionSample/Physical/Formatting/CISORADEMO
CISORADEMO,&#x9;EMPLOYEES,&#x9;&#x9;VARCHAR(50),&#x9;FIRST_NAME,&#x9;&#x9;&#x9;FirstName,&#x9;&#x9;&#x9;VARCHAR(50),&#x9;FOUND,&#x9;&#x9;&#x9;/shared/BestPractices/DataAbstractionSample/Physical/Formatting/CISORADEMO
CISORADEMO,&#x9;EMPLOYEES,&#x9;&#x9;VARCHAR(50),&#x9;LAST_NAME,&#x9;&#x9;&#x9;LastName,&#x9;&#x9;&#x9;VARCHAR(50),&#x9;FOUND,&#x9;&#x9;&#x9;/shared/BestPractices/DataAbstractionSample/Physical/Formatting/CISORADEMO
CISORADEMO,&#x9;EMPLOYEES,&#x9;&#x9;VARCHAR(50),&#x9;TITLE,&#x9;&#x9;&#x9;&#x9;Title,&#x9;&#x9;&#x9;&#x9;VARCHAR(50),&#x9;FOUND,&#x9;&#x9;&#x9;/shared/BestPractices/DataAbstractionSample/Physical/Formatting/CISORADEMO
CISORADEMO,&#x9;EMPLOYEES,&#x9;&#x9;VARCHAR(30),&#x9;EXTENSION,&#x9;&#x9;&#x9;Extension,&#x9;&#x9;&#x9;VARCHAR(30),&#x9;FOUND,&#x9;&#x9;&#x9;/shared/BestPractices/DataAbstractionSample/Physical/Formatting/CISORADEMO
CISORADEMO,&#x9;EMPLOYEES,&#x9;&#x9;VARCHAR(30),&#x9;WORK_PHONE,&#x9;&#x9;&#x9;WorkPhone,&#x9;&#x9;&#x9;VARCHAR(30),&#x9;FOUND,&#x9;&#x9;&#x9;/shared/BestPractices/DataAbstractionSample/Physical/Formatting/CISORADEMO
CISORADEMO,&#x9;EMPLOYEES,&#x9;&#x9;TIMESTAMP,&#x9;&#x9;MOD_DT,&#x9;&#x9;&#x9;&#x9;ModifiedDate,&#x9;&#x9;&#x9;TIMESTAMP,&#x9;FOUND,&#x9;&#x9;&#x9;/shared/BestPractices/DataAbstractionSample/Physical/Formatting/CISORADEMO

&#x9;Exceptions:  none

&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;CSW Version:&#x9;Reason:
&#x9;09/30/2012&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.2.0&#x9;&#x9;&#x9;Created new
&#x9;04/22/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.2.0&#x9;&#x9;&#x9;Added logicalType for Best Pracices 7.1
&#x9;05/02/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.2.0&#x9;&#x9;&#x9;Updated for Best Practices 7.1 - added overwrite, copyAnnotation, updatePrivilegesRecursively, copyPrivilegeMode, publishToFolder, targetResource
&#x9;07/31/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.0.0&#x9;&#x9;&#x9;B.P. 7.3: Upgrade utilities.  Fix generateViewsLoop performance issue by only invoking updateImpactedResources when a view is created.
&#x9;10/28/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.2.2&#x9;&#x9;&#x9;B.P. 8.0: Added inProjectFolderName to the input parameters
&#x9;08/08/2014&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.2.6&#x9;&#x9;&#x9;B.P. 8.1.3: Added check for dependency views in target path.  Don&apos;t generate when 0 or 1.  Changed default overwrite=1 instead of 2.
&#x9;08/08/2014&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.2.5&#x9;&#x9;&#x9;B.P. 8.1.3: Modified ability generate cast statements under various conditions when generateMode=G or R and generateCast=0-5.
&#x9;&#x9;&#x9;Added generateCast=2,3,4,5 allowing for &quot;NO&quot; CAST around index columns and adding a CAST display column for index columns.
&#x9;&#x9;&#x9;--&#x9;0=Do not generate CAST statement.  Pass through column as is.  Default behavior.
&#x9;&#x9;&#x9;-- &#x9;1=Generate the CAST statement around the column
&#x9;&#x9;&#x9;--&#x9;2-Generate the CAST statement around the non-index columns only (No CAST on index columns)
&#x9;&#x9;&#x9;--&#x9;3-Generate the CAST statement around the non-index columns only and generate a &quot;display&quot; column for each index column.  (No CAST o nindex columns)
&#x9;&#x9;&#x9;--&#x9;4-Generate the CAST statement around the non-index columns and non-primary key index columns only (No CAST on primary key index columns)
&#x9;&#x9;&#x9;--&#x9;5-Generate the CAST statement around the non-index columns and non-primary key index columns only and generate a &quot;display&quot; column for each primary key index column.  (No CAST on primary key index columns)
&#x9;09/21/2015&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.x&#x9;&#x9;&#x9;B.P. 8.1.7: Added generateViews=2 for a select * projection.  Requires Utilities_2015Q3
&#x9;08/31/2016&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.x&#x9;&#x9;&#x9;B.P. 8.1.7.3: Increased generation efficiency when generateMode=2 (SELECT *) mode.  Don&apos;t evaluate all of the columns.
&#x9;04/22/2017&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.x&#x9;&#x9;&#x9;B.P. 8.1.8: Added call to createAllFoldersPrivileges for a published resource which creates the catalogs and schema folders as needed.
&#x9;01/24/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;8.0.0&#x9;&#x9;&#x9;B.P. 2019.1: Added the ability to handle columnCaseRule, resourcePrefix, resourceSuffix and newColumnList for generateMode=&apos;G&apos;. 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;B.P. 2019.1: Added support for Changed to make logicalID = &apos;F&apos; for folder so you can distinguish in getName how to apply prefix/suffix rules for T=table and C=columns.
&#x9;04/15/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;B.P. 2019.200: Added scriptsPath for flexibility of the location of the _scripts folder.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   Changed custom functions to explicit paths.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   Modified call from copyResourcesPrivileges to copyResourcesPrivilegesV2 to remove VECTOR usage
&#x9;06/12/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;B.P. 2019.200: Derived the new generateViewsLoopXML from generateViewsLoop to eliminate vector usage.

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

*/
PROCEDURE generateViewsLoopXML(
&#x9;&#x9;-- VIEW, LINK
&#x9;IN generateType&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR,

&#x9;&#x9;-- 0=&quot;FAIL_IF_EXISTS&quot;=do not overwrite the resource.  If the resource exists, raise an exception.
&#x9;&#x9;-- 1=&quot;SKIP_IF_EXISTS&quot;=skip the resource if it exists and continue processing
&#x9;&#x9;-- 2=&quot;OVERWRITE_IF_EXISTS&quot;=do overwrite the resource if it exists.
&#x9;IN overwrite&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER,

&#x9;&#x9;-- 0=false do not copy annotation
&#x9;&#x9;-- 1=true copy source annotation to target, 
&#x9;IN copyAnnotation&#x9;&#x9;&#x9;&#x9;BIT,

&#x9;&#x9;-- flag indicating the mode in which to copy privileges.  Privileges are only copied from the parent when creating new resources including folders.
&#x9;&#x9;-- null (default) - do not set any privileges at all
&#x9;&#x9;-- 0 - set mode to &quot;OVERWRITE_APPEND&quot; - merges and does not update privileges for users or groups not mentioned.
&#x9;&#x9;-- 1 - set the mode to &quot;SET_EXACTLY&quot; - makes privileges look exactly like those provided in the call.
&#x9;IN copyPrivilegeMode&#x9;&#x9;&#x9;BIT,

&#x9;&#x9;-- flag indicating whether to ignore or generate unsupported column types.  For example in Oracle an SDO spatial type gets imported into Composite as &apos;OTHER&apos;.
&#x9;&#x9;-- 0/null (default) - ignore column type = &apos;OTHER&apos; and do not generate that column
&#x9;&#x9;-- 1 - generate columns where the column type = &apos;OTHER&apos;
&#x9;IN generateUnsupportedColumnType BIT,

&#x9;&#x9;-- The XML of configuration parameters.  A full description can be found in /generationScripts/Configure/ConfigureParams
&#x9;IN ConfigParamsXML&#x9;&#x9;&#x9;&#x9;LONGVARCHAR,

&#x9;&#x9;-- The XML of starting folders including source, target and derived filter path
&#x9;IN startingFolderXML&#x9;&#x9;&#x9;LONGVARCHAR,

&#x9;&#x9;-- 0=fuzzy match - sourcePath + derivedFilterPath must simply be contained within resourcePath
&#x9;&#x9;-- 1=exact match - sourcePath + derivedFilterPath must match exactly in resourcePath
&#x9;IN exactMatch&#x9;&#x9;&#x9;&#x9;&#x9;SMALLINT,

&#x9;&#x9;-- comma separated list of resource paths or partials paths to exclude.  This may be useful when a data source has been moved and it&apos;s index or foreign keys
&#x9;&#x9;--&#x9;are pointing to another data source that does not exist anymore.  It may be necessary to exclude that path or paths.  If an exception is thrown during 
&#x9;&#x9;--&#x9;execution, try excluding those paths.
&#x9;&#x9;--&#x9;Values: /shared/MyPath/Physical/Metadata/MyDatasource
&#x9;IN excludeDsPathsList&#x9;&#x9;&#x9;LONGVARCHAR,

&#x9;&#x9;-- the name of the project folder (defaultValue.basePath)(projectName)
&#x9;IN inProjectFolderName &#x9;&#x9;&#x9;VARCHAR,

&#x9;&#x9;-- A formatted list of new columns to add to the end of the view.  The column will not be added if it already exists.
&#x9;&#x9;-- The format is as follows:  column1&amp;&amp;type1&amp;&amp;value1//column2&amp;&amp;type2&amp;&amp;value2//column3&amp;&amp;type3&amp;&amp;value3
&#x9;IN newColumnList&#x9;&#x9;&#x9;&#x9;LONGVARCHAR, --(used when generateMode=&apos;G&apos;)

    OUT result PIPE &#x9;&#x9;&#x9;&#x9;/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions.generateViewsRow
)
BEGIN
&#x9;DECLARE moduleName&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos; &apos;||&apos;generateViewsLoopXML&apos;;
&#x9;DECLARE scriptsPath&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE defaultValuesXML&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE debug&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1);
&#x9;DECLARE debug2&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1);
&#x9;DECLARE debug3&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1);
&#x9;DECLARE debugTime&#x9;&#x9;&#x9;&#x9;CHAR(1);
&#x9;DECLARE sfNum,idx&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE i,k, pos&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE colNum&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE status&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE resultNode&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE numStartingFolders&#x9;&#x9;INTEGER;
&#x9;DECLARE startingFolderExtendedRec /shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions.startingFolderExtendedType;
&#x9;&#x9;-- startingFolderExtendedRec.derivedFilterPath:
&#x9;&#x9;-- The path is derived by concatenating the partial filter path with the source path of the designated layer type.
&#x9;&#x9;-- The layerType and the groupId are used to filter the rows from the configureStartingFolders.  The source path is
&#x9;&#x9;--    defined in configureStartingFolders per the layerType and groupId combination.
&#x9;&#x9;--   e.g. layerType=CP and sourceFolderPath=/shared/BestPractices/DataAbstractionSample/L1_Mapping_Layer/Client_Views
&#x9;&#x9;--        The derivedFilterPath list=Orders_Closed,/Orders/Customers,Orders/Product
&#x9;&#x9;--        Even though there are several other views in the /Orders folder under the Client_Views only the ones specified
&#x9;&#x9;--&#x9;      will be generated to the Client_Published.  Views directly under the source path do not require any qualifying path except the view name.
&#x9;&#x9;--        Lastly, a leading &apos;/&apos; is not required but may be present if desired.
&#x9;&#x9;-- If null, generate views from all source folders as directed by the &quot;configure starting folders&quot; and the designated layer type.
&#x9;DECLARE targetFolderPath&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE targetResourcePath&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE targetResourceType&#x9;&#x9;VARCHAR;
&#x9;DECLARE targetResourceName&#x9;&#x9;VARCHAR;
&#x9;DECLARE&#x9;resourcePath&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE resourcePathReserved&#x9;VARCHAR(4000);
&#x9;DECLARE resourceType&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE childResCursor&#x9;&#x9;&#x9;CURSOR /shared/ASAssets/Utilities/repository/definitions/RepositoryDefinitions.childResourceType;
&#x9;DECLARE resultCursor&#x9;&#x9;&#x9;CURSOR /shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions.generateViewsRow;
&#x9;DECLARE newColumnListCursor&#x9;&#x9;CURSOR /shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions.CommonModelType;
&#x9;DECLARE containerList&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE datasourceNameList&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE datasourcePathList&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE greatGrandParentName&#x9;VARCHAR;
&#x9;DECLARE grandParentName&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE parentName&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE containerName&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE resourceName&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE containerType&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE igreatGrandParentName&#x9;VARCHAR;
&#x9;DECLARE igrandParentName&#x9;&#x9;VARCHAR;
&#x9;DECLARE iparentName&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE icontainerName&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE logicalType&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE logicalStatus&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE LOGICAL_STATUS_MAX_LEN&#x9;INTEGER DEFAULT 1024; -- This is the length of the above logicalStatus definition.
&#x9;DECLARE transformResourceName&#x9;LONGVARCHAR;
&#x9;DECLARE transformResourceNameOrig LONGVARCHAR;
&#x9;DECLARE annotation&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE targetPathMatch&#x9;&#x9;&#x9;BOOLEAN DEFAULT false;
&#x9;DECLARE namespaces&#x9;&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE xpath&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE xmlOut&#x9;&#x9;&#x9;&#x9;&#x9;XML;
&#x9;DECLARE success&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE skipIfExists&#x9;&#x9;&#x9;BIT;
&#x9;DECLARE isDerivedMatch&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE childResCursorProcessed boolean;
&#x9;DECLARE ex&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;EXCEPTION;
&#x9;DECLARE dependentResourceList&#x9;LONGVARCHAR;
&#x9;DECLARE resourceExists&#x9;&#x9;&#x9;BOOLEAN;
&#x9;DECLARE message&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
 &#x9;DECLARE impactMessage&#x9;&#x9;&#x9;LONGVARCHAR;

/**********************************
 * DECALRE from generateViewsCommon
 **********************************/
&#x9;DECLARE generateMode&#x9;&#x9;&#x9;CHAR(1);-- &apos;G&apos;=Generate the resource name, &apos;R&apos;=Retrieve the resource name  (resources include PATH names, VIEW names AND COLUMN names)
&#x9;DECLARE outputMode&#x9;&#x9;&#x9;&#x9;CHAR(1);-- &apos;A&apos;=Return All Columns, &apos;U&apos;=Return ONLY Unchanged columns that were NOT found.
&#x9;DECLARE generateIndexes&#x9;&#x9;&#x9;SMALLINT;
&#x9;DECLARE generateCast&#x9;&#x9;&#x9;SMALLINT;
&#x9;&#x9;&#x9;--&#x9;0=Do not generate CAST statement.  Pass through column as is.  Default behavior.
&#x9;&#x9;&#x9;-- &#x9;1=Generate the CAST statement around the column
&#x9;&#x9;&#x9;--&#x9;2-Generate the CAST statement around the non-index columns only (No CAST on index columns)
&#x9;&#x9;&#x9;--&#x9;3-Generate the CAST statement around the non-index columns only and generate a &quot;display&quot; column for each index column.  (No CAST o nindex columns)
&#x9;&#x9;&#x9;--&#x9;4-Generate the CAST statement around the non-index columns and non-primary key index columns only (No CAST on primary key index columns)
&#x9;&#x9;&#x9;--&#x9;5-Generate the CAST statement around the non-index columns and non-primary key index columns only and generate a &quot;display&quot; column for each primary key index column.  (No CAST on primary key index columns)
&#x9;DECLARE generateViews&#x9;&#x9;&#x9;SMALLINT;
&#x9;&#x9;&#x9;--     0=Do not generate - (browse only) print out what will happen but don&apos;t perform the generation
&#x9;&#x9;&#x9;--     1=Do generate [DEFAULT] - Perform the VIEW Generation with a column projection, 
&#x9;&#x9;&#x9;--     2= Do generate          - Perform the VIEW Generation with a select * projection, 
&#x9;DECLARE padAmount&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE padChar&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1) DEFAULT &apos; &apos;;
&#x9;-- These fields are for general processing
&#x9;DECLARE childRes&#x9;&#x9;&#x9;&#x9;/shared/ASAssets/Utilities/repository/definitions/RepositoryDefinitions.childResourceType;
&#x9;DECLARE CR&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1) DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.CR;
&#x9;DECLARE LF&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1) DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.LF;
&#x9;DECLARE TAB&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1) DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.TAB;
&#x9;DECLARE NEWLINE&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.newline;
&#x9;DECLARE selectScript&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE fromScript&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE defaultVariableScript&#x9;LONGVARCHAR DEFAULT &apos;&apos;;
&#x9;DECLARE procInputParamsScript&#x9;LONGVARCHAR DEFAULT &apos;&apos;;
&#x9;DECLARE reservedResourceName&#x9;VARCHAR;
&#x9;DECLARE columnName&#x9;&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE columnName2&#x9;&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE columnType&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE logicalID&#x9;&#x9;&#x9;&#x9;CHAR(1); -- C=column, T=table [alleviates confusion between the same physical name being a column or table.
&#x9;DECLARE logicalColumnName&#x9;&#x9;VARCHAR;
&#x9;DECLARE logicalColumnNameOrig&#x9;VARCHAR;
&#x9;DECLARE logicalSuffixName&#x9;&#x9;VARCHAR DEFAULT &apos;_display&apos;;
&#x9;DECLARE checkDupColumnOrAlias&#x9;VARCHAR;
&#x9;DECLARE&#x9;containerPath&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE createInput&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE createInputBody&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE createInputBegin&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE createInputEnd&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE createInputColumns&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE createInputIndexes&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE logicalSqlIndexColName&#x9;VARCHAR;
&#x9;DECLARE indexColumnList&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE uniqueIndex&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE lastIndexName&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE indexType&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE indexColPos&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE createResponse &#x9;&#x9;&#x9;XML;
&#x9;DECLARE faultResponse&#x9;&#x9;&#x9;XML;
&#x9;DECLARE continueLoop&#x9;&#x9;&#x9;BOOLEAN;
&#x9;DECLARE lastChar&#x9;&#x9;&#x9;&#x9;CHAR(1);
&#x9;DECLARE columnAnnotation&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE viewAnnotation&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE spreadsheetAnnotation&#x9;LONGVARCHAR;
&#x9;DECLARE isUnsupportedColumnType INTEGER;
&#x9;DECLARE&#x9;word&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE columnListStr&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE newColumnListStr&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE newColumnName&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE newColumnType&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE newColumnValue&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE newColumnTransformation&#x9;LONGVARCHAR;
&#x9;DECLARE dropColumn&#x9;&#x9;&#x9;&#x9;BIT;
&#x9;DECLARE applyReservedWordList&#x9;BIT;&#x9;-- 1=true, apply the reserved word list to the output, 0=false, do not apply reserved word list
&#x9;DECLARE pcFunctionList&#x9;&#x9;&#x9;LONGVARCHAR;--Parse Column Function List
&#x9;DECLARE pcColumnList&#x9;&#x9;&#x9;LONGVARCHAR;--Parse Column Column List
&#x9;DECLARE pcRecurseDepth&#x9;&#x9;&#x9;INTEGER;&#x9;--Parse Column Recurse Depth
&#x9;DECLARE generationStartTime&#x9;&#x9;TIMESTAMP; &#x9;-- The time processing starts for this generation invocation
&#x9;DECLARE createResourceStartTime&#x9;TIMESTAMP;  -- The time processing starts for creating/updating a view resource
&#x9;DECLARE impactedStartTime&#x9;&#x9;TIMESTAMP;  -- The time processing starts for updating impacted resources
&#x9;DECLARE viewStartTime&#x9;&#x9;&#x9;TIMESTAMP;&#x9;-- The time processing starts for a view
&#x9;DECLARE columnStartTime&#x9;&#x9;&#x9;TIMESTAMP;&#x9;-- The time the processing starts for a column
&#x9;DECLARE tempStartTime&#x9;&#x9;&#x9;TIMESTAMP;&#x9;-- The time the processing starts for a temporary time
&#x9;DECLARE duration&#x9;&#x9;&#x9;&#x9;INTERVAL HOUR to SECOND;
&#x9;DECLARE colDuration&#x9;&#x9;&#x9;&#x9;INTERVAL HOUR TO SECOND;
&#x9;-- flag indicating whether to update the children of the given resources or not.
&#x9;-- &#x9;&#x9;0 (false) or null - only update the given resource and not the children.
&#x9;-- &#x9;&#x9;1 (true) - update children recursively
&#x9;DECLARE updatePrivilegesRecursively&#x9;BIT DEFAULT 0;
&#x9;-- copyPrivilegeEntry - an XML representation of source and destination resources
&#x9;DECLARE copyPrivilegeEntry&#x9;&#x9;LONGVARCHAR;
&#x9;-- Ignore any resources that do not exist
&#x9;-- &#x9;&#x9;1 = Bypass the processing of that resource.
&#x9;-- &#x9;&#x9;0 = (default) Do not ignore any resources.  Throw an error that the resource does not exist.
&#x9;DECLARE inIgnoreResourceDoesNotExist&#x9;INTEGER DEFAULT 1;&#x9;
&#x9;-- Variables for resolveTargetFolders
&#x9;DECLARE pathDerivationFlag&#x9;&#x9;BOOLEAN;
&#x9;DECLARE remainResourceName&#x9;&#x9;VARCHAR;
&#x9;DECLARE remainFolderPath&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE derivedFolderPath &#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE folderLogicalName&#x9;&#x9;VARCHAR;
&#x9;DECLARE folderLogicalType&#x9;&#x9;VARCHAR;
&#x9;DECLARE&#x9;folderTransformation &#x9;LONGVARCHAR;
&#x9;DECLARE folderAnnotation&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE folderLogicalStatus&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE fgreatGrandParentName&#x9;VARCHAR;
&#x9;DECLARE fgrandParentName&#x9;&#x9;VARCHAR;
&#x9;DECLARE fparentName&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE fcontainerName&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE fresourceName&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE numOccurrences&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE cacheStorageDataSourcePath &#x9;VARCHAR(4000);
&#x9;DECLARE cacheStoragePath &#x9;&#x9;VARCHAR(4000);

/**************************
 * BEGIN CODE
 *************************/
&#x9;SET generationStartTime = CURRENT_TIMESTAMP;

&#x9;-- Set local Configuration parameters&#x9;
&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;debug&apos;, ConfigParamsXML, debug);
&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;debug2&apos;, ConfigParamsXML, debug2);
&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;debug3&apos;, ConfigParamsXML, debug3);
&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;generateViews&apos;, ConfigParamsXML, generateViews);
&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;generateMode&apos;, ConfigParamsXML, generateMode);
&#x9;SET generateMode = UPPER(generateMode);
&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;outputMode&apos;, ConfigParamsXML, outputMode);
&#x9;SET outputMode = SUBSTRING(UPPER(outputMode),1,1);
&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;generateCast&apos;, ConfigParamsXML, generateCast);
&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;generateIndexes&apos;, ConfigParamsXML, generateIndexes);
&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;padAmount&apos;, ConfigParamsXML, padAmount);
&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;scriptsPath&apos;, ConfigParamsXML, scriptsPath);

&#x9;-- Set default configuration parameters&#x9;
&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/getDefaultValuesXML(scriptsPath, defaultValuesXML);
&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;debugTime&apos;, defaultValuesXML, debugTime);

&#x9;SET createInputEnd =&#x9;&apos;&#x9;&#x9;&#x9;&lt;/resource:sqlIndexes&gt;&apos;||NEWLINE||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&lt;/resource:resource&gt;&apos;||NEWLINE||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&lt;/resource:resources&gt;&apos;||NEWLINE||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&lt;resource:detail&gt;FULL&lt;/resource:detail&gt;&apos;||NEWLINE||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&lt;/resource:updateResources&gt;&apos;;

/* ------------------------------------------------------------------------
 * Begin the processing loop
 * ------------------------------------------------------------------------*/
&#x9;SET sfNum = 1;
&#x9;CALL /shared/ASAssets/Utilities/string/numOccurrences(&apos;&lt;startingFolderExtendedType&gt;&apos;, startingFolderXML, numStartingFolders);
&#x9;StartingFolderLoop:
&#x9;WHILE (sfNum &lt;= numStartingFolders) DO
&#x9;&#x9;CALL /shared/ASAssets/Utilities/&quot;xml&quot;/extractXMLOccurrence(startingFolderXML, &apos;startingFolderExtendedType&apos;, sfNum, 0, 0, 0, status, resultNode);
&#x9;&#x9;CALL /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;sourceFolderPath&apos;, resultNode, startingFolderExtendedRec.sourceFolderPath);
&#x9;&#x9;CALL /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;targetFolderPath&apos;, resultNode, startingFolderExtendedRec.targetFolderPath);
&#x9;&#x9;CALL /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;derivedFilterPath&apos;, resultNode, startingFolderExtendedRec.derivedFilterPath);
&#x9;&#x9;CALL /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;process&apos;, resultNode, startingFolderExtendedRec.process);
&#x9;&#x9;CALL /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;pathDerivation&apos;, resultNode, startingFolderExtendedRec.pathDerivation);

&#x9;&#x9;IF (startingFolderExtendedRec.process = 1 and startingFolderExtendedRec.sourceFolderPath IS NOT NULL AND LENGTH(&apos;|&apos;||startingFolderExtendedRec.sourceFolderPath||&apos;|&apos;) &gt; 2) THEN

&#x9;&#x9;  if (debug = &apos;Y&apos;) then
&#x9;&#x9;  &#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;&apos;);
&#x9;&#x9;  &#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos; SOURCE FOLDER=&apos;||NVL(startingFolderExtendedRec.sourceFolderPath,&apos;null&apos;));
&#x9;&#x9;  &#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos; TARGET FOLDER=&apos;||NVL(startingFolderExtendedRec.targetFolderPath,&apos;null&apos;));
&#x9;&#x9; &#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;DERIVED FILTER=&apos;||NVL(startingFolderExtendedRec.derivedFilterPath,&apos;null&apos;));
&#x9;&#x9;  &#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;&apos;);
&#x9;&#x9;  end if;

&#x9;&#x9;  -- Get the specific resource type for the target resource
&#x9;&#x9;  set resourceType = null;
&#x9;&#x9;  FOR resource AS SELECT * FROM /shared/ASAssets/Utilities/repository/getBasicResourceCursor(startingFolderExtendedRec.sourceFolderPath, resourceType) DO
&#x9;&#x9;&#x9;set resourceType = resource.&quot;type&quot;;
&#x9;&#x9;  END FOR;

&#x9;&#x9;  IF (resourceType is not null) THEN

&#x9;&#x9;&#x9;/************************************************************************
&#x9;&#x9;&#x9; * Get the Resource List from the SOURCE folder
&#x9;&#x9;&#x9; ************************************************************************/
&#x9;&#x9;&#x9;FOR list AS 
&#x9;&#x9;&#x9;&#x9;SELECT name, resPath, resType, subType 
&#x9;&#x9;&#x9;&#x9;FROM /shared/ASAssets/Utilities/repository/getResourceListRecursive(startingFolderExtendedRec.sourceFolderPath, resourceType) 
&#x9;&#x9;&#x9;DO
/* getResourceTreeList returns:&#x9; TYPE resourceTreeType ROW (name VARCHAR, resPath pathType, resType VARCHAR, subType VARCHAR);
name: &#x9;&#x9;&#x9;resPath:&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resType:&#x9;subType:
INVENTORY&#x9;&#x9;/shared/ViewGenerator/PhysicalLayer/INVENTORY&#x9;&#x9;&#x9;&#x9;CONTAINER&#x9;FOLDER_CONTAINER
ds_inventory&#x9;/shared/ViewGenerator/PhysicalLayer/INVENTORY/ds_inventory &#x9;DATA_SOURCE&#x9;RELATIONAL_DATA_SOURCE
ORDERS&#x9;&#x9;&#x9;/shared/ViewGenerator/PhysicalLayer/ORDERS&#x9;&#x9;&#x9;&#x9;&#x9;CONTAINER&#x9;FOLDER_CONTAINER
ds_orders&#x9;&#x9;/shared/ViewGenerator/PhysicalLayer/ORDERS/ds_orders&#x9;&#x9;DATA_SOURCE&#x9;RELATIONAL_DATA_SOURCE
*/&#x9;
&#x9;&#x9;&#x9;&#x9;-- Only process rows that come back from the recursive resource tree list that are actually Data Sources
&#x9;&#x9;&#x9;&#x9;-- Folders will be derived because the full path is provided to the resource
&#x9;&#x9;&#x9;&#x9;-- Allow TYPE=PROCEDURE and SUB_TYPE=STREAM_TRANSFORM_PROCEDURE
&#x9;&#x9;&#x9;&#x9;IF &#x9;(list.resType = &apos;TABLE&apos; OR list.resType = &apos;PROCEDURE&apos;) THEN

&#x9;&#x9;&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;BEGIN: ========================================================================================&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;-- Determine if the source path is a match to the derivedFilterPath
&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/isDerivedPathMatch(debug, exactMatch, startingFolderExtendedRec.derivedFilterPath, startingFolderExtendedRec.sourceFolderPath, list.resPath, excludeDsPathsList, isDerivedMatch);
&#x9;&#x9;&#x9;&#x9;&#x9;if (isDerivedMatch  = 1) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Start the time for the resource
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET viewStartTime = CURRENT_TIMESTAMP;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Set the containerType
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET containerType = list.resType;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**************************************************************************************************************
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; * 1. Get the Data Source for the resource
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *    If the Formatting layer points to the Metadata table then the path of the metadata table is returned
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *      and used to compare with the data source location.  This is required in order to establish the container
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *      lineage.  The container lineage is used to generate the spreadsheet.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *    When the resource path lineage is 1 to 1 like in the Physical layer subfolders Formatting or Physical
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *      then the datasourcePathList will contain only 1 path.  This is the expectation.  However, if this
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *      procedure is run against top level views such as those in the Application or Business layers, then the
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *      results may yield multiple paths as there may be many views to many data sources.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; **************************************************************************************************************/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- If the view is cached, then get the storage data source path
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set cacheStorageDataSourcePath = null;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set cacheStoragePath = null;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FOR cc AS SELECT * FROM /shared/ASAssets/Utilities/repository/getResourceCacheConfigCursor(list.resPath, list.resType) DO
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set cacheStorageDataSourcePath = cc.storageDataSourcePath;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set cacheStoragePath = cc.storagePath;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END FOR;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Get the data source name for this resource. There can be a list of data sources
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/getDataSourceName(list.resPath, list.resType, cacheStorageDataSourcePath, null, 1, inIgnoreResourceDoesNotExist, debug2, datasourceNameList, datasourcePathList);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Apply double quotes around data source path list when there is more than one path present in the list
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (POSITION(&apos;,&apos; IN datasourceNameList) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set datasourceNameList = &apos;&quot;&apos;||datasourceNameList||&apos;&quot;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/*****
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; * Extract the remaining source path when the path matches the physical data source location.  The remaining path will be the datasource + children resources.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;This scenario is only true for the Formatting sub-layer when it point directly to the Metadata sub-layer or when the Physical sub-layer points to the Metadata sub-layer.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;All other layers will simply extract based on the folder paths as is.  The Common Model Spreadsheets need to be composed with this in mind since they
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; * &#x9;can contain entries for both Formatting and other layers.  In the example below, the Formating sub-layer is the target layer and the source sub-layer is the
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; * &#x9;Metadata sub-layer.  Therefore, the generateViewsLoop will iterate over the Metadata sub-layer as per the groupId definition and provide a list of children
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;tables or procedures.   The getDataSourceName which was executed previously determines the lineage to the Composite data source resource which is used for
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;the comparison and extraction of remaining path.  The steps are provided below with example output.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;Example Source Path:
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;&#x9;resourcePath=/shared/ASAssets/BestPractices_v81/DataAbstractionSample/Physical/Metadata/SQLServerSource/cisSServerDemoDS/SServerDemoCat/dbo/Customers
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;Example Physical Metadata path:
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;&#x9;datasourcePathList=/shared/ASAssets/BestPractices_v81/DataAbstractionSample/Physical/Metadata/SQLServerSource/cisSServerDemoDS
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;&#x9;datasourceNameList=cisSServerDemoDS
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; * &#x9;&#x9;1) RegexPosition - Find the position of the last &apos;/&apos; in the actual data source path and return that position.  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;&#x9;&#x9;RegexPosition(datasourcePathList, &apos;\/&apos;, -1))
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;&#x9;&#x9;e.g. 92 - position of the path just before the data source name
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;&#x9;2) SUBSTRING - Extract the beginning of the data source path just before the data source name. 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;&#x9;&#x9;SUBSTRING(datasourcePathList, 1, &lt;RegexPosition_Result&gt;)
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;&#x9;&#x9;e.g. /shared/aSAssets/BestPractices_v81/DataAbstractionSample/Physical/Metadata/SQLServerSource/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;&#x9;3) REPLACE - Extract the remaining path by setting the source string part that matches the data source path to a blank.  If it does not match it does not get replaced.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;&#x9;&#x9;REPLACE(list.resPath, &lt;SUBSTRING_Result&gt;, &apos;&apos;)
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;&#x9;&#x9;e.g. cisSServerDemoDS/SServerDemoCat/dbo/Customers - remaining string
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;&#x9;3) getDelimitedOccurrence(resourcePath, &apos;R&apos;, &apos;/&apos;, 2, 0) - Retrieve containerName which is he second occurrence in the remaining path using the &apos;/&apos; delimiter traversing from the right (end) 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;&#x9;&#x9;e.g. containerName=dbo
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;&#x9;4) getDelimitedOccurrence(resourcePath, &apos;R&apos;, &apos;/&apos;, 2, 0) - Retrieve parentName which is he third occurrence in the remaining path using the &apos;/&apos; delimiter traversing from the right (end) 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;&#x9;&#x9;e.g. parentName=SServerDemoCat
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;&#x9;5) getDelimitedOccurrence(resourcePath, &apos;R&apos;, &apos;/&apos;, 2, 0) - Retrieve grandParentName which is he fourth occurrence in the remaining path using the &apos;/&apos; delimiter traversing from the right (end) 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;&#x9;&#x9;e.g. grandParentName=cisSServerDemoDS
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;******/
--call print(&apos;Extracted_datasourcePathList=&apos;||SUBSTRING(datasourcePathList, 1, RegexPosition(datasourcePathList, &apos;\/&apos;, -1)));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(list.resPath, &apos;F&apos;, resourcePathReserved);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/string/TextUtils/RegexPosition(datasourcePathList, &apos;\/&apos;, -1, pos);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set resourcePath = REPLACE(resourcePathReserved, SUBSTRING(datasourcePathList, 1, pos), &apos;&apos;);
--call print(&apos;Extracted_resourcePath=&apos;||NVL(resourcePath,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/string/getDelimitedOccurrence(resourcePath, &apos;R&apos;, &apos;/&apos;, 2, 0, containerName);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/string/getDelimitedOccurrence(resourcePath, &apos;R&apos;, &apos;/&apos;, 3, 0, parentName);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/string/getDelimitedOccurrence(resourcePath, &apos;R&apos;, &apos;/&apos;, 4, 0, grandParentName);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set greatGrandParentName = &#x9;&apos;&apos;; -- always initialized to blank for the first row which is the resource row.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (containerName is null) then set containerName = &apos;&apos;; end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (parentName is null) then set parentName = &apos;&apos;;  end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (grandParentName is null) then set grandParentName = &apos;&apos;;  end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
--set debug=&apos;Y&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Display debug results
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;   (MATCH):____sourceFolderPath=&apos;||NVL(startingFolderExtendedRec.sourceFolderPath,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;   (MATCH):___derivedFilterPath=&apos;||NVL(startingFolderExtendedRec.derivedFilterPath,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;   (MATCH):________resourcePath=&apos;||list.resPath);&#x9;
&#x9;&#x9;&#x9;&#x9;   &#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;   (MATCH):__datasourcePathList=&apos;||NVL(datasourcePathList,&apos;null&apos;));&#x9;
&#x9;&#x9;&#x9;&#x9;   &#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;   (MATCH):__datasourceNameList=&apos;||NVL(datasourceNameList,&apos;null&apos;));&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;   (MATCH): inProjectFolderName=&apos;||NVL(inProjectFolderName,&apos;null&apos;));&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;   (MATCH):greatGrandParentName=&apos;||NVL(greatGrandParentName,&apos;null&apos;));&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;   (MATCH):_____grandParentName=&apos;||NVL(grandParentName,&apos;null&apos;));&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;   (MATCH):__________parentName=&apos;||NVL(parentName,&apos;null&apos;));&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;   (MATCH):_______containerName=&apos;||NVL(containerName,&apos;null&apos;));&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;   (MATCH):_______containerType=&apos;||NVL(containerType,&apos;null&apos;));&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;   (MATCH):________resourceName=&apos;||list.name);&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;   (MATCH):________resourceType=&apos;||list.resType);&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;   (MATCH):____________sub_type=&apos;||list.subType);&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;------------------------------------------------------------------------------------------------------&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
--set debug=&apos;N&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Apply reserved list to path
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(list.resPath, &apos;F&apos;, resourcePath);

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Provides the ability to return metadata on Composite Views (a.k.a. resource type = TABLE).
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (list.resType = &apos;TABLE&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/* 2016-08-31 mtinius: 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;When generatMode=2 (SELECT *) mode, it is not necessary to select all of the columns except for
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;the first null row which provides the TABLE information.   It will be more efficient especially
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;with very wide TABLES upwords of 1000+ columns.   CIS will automatically refresh the COLUMN information
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;by virtue of the SELECT * statement.&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;*/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (generateViews = 2) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;   (MATCH):_EXEC. SELECT * MODE:    list.resType=[&apos;||list.resType||&apos;]  resourcePath=[&apos;||resourcePath||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- When generateViews=2 (SELECT *) behavior, then there is no need to retrieve all of the columns 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;except for the first null row indicating that the table exists.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;OPEN childResCursor FOR 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SELECT resourceName, resourcePath, resourceType, columnName, columnType, annotation
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FROM /shared/ASAssets/Utilities/repository/getBasicResourceCursor_SQL_TABLE(resourcePath, list.resType)
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHERE columnName IS NULL;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE -- Default behavior 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;   (MATCH):_EXEC. REGULAR MODE:    list.resType=[&apos;||list.resType||&apos;]  resourcePath=[&apos;||resourcePath||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- This is the default behavior to select all of the COLUMN rows.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;OPEN childResCursor FOR 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SELECT resourceName, resourcePath, resourceType, columnName, columnType, annotation
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FROM /shared/ASAssets/Utilities/repository/getBasicResourceCursor_SQL_TABLE(resourcePath, list.resType);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
/* &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Important Note:  The FIRST ROW FOR a TABLE returns a NULL IN the columnName.  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;This IS used TO determine the start OF a new TABLE.  Don&apos;t change the XSLT -- getResourceResponseXSLT_SQL_TABLE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   getResourceResponseXSLT_SQL_TABLE returns the following:
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;select--&gt; resourceName: RDS_T_FGRT
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;select--&gt; resourcePath: /shared/DeutscheBank/Central/RDS3/L4_Physical_Layer/L4_1_Physical_Views/dbInstrument/RDS/RDS_T_FGRT
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;select--&gt; resourceType: TABLE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  subtype: &#x9;&#x9;SQL_TABLE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  enabled: &#x9;&#x9;1
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;select--&gt; annotation: &#x9;this is a view comment
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  tableType: &#x9;VIEW
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  sqlText: &#x9;&#x9;[NULL]
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;select--&gt; columnName: &#x9;FGRT_TYP
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;select--&gt; columnType: &#x9;VARCHAR(20)
*/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Provides the ability to return metadata on Composite XSLT Procedures (a.k.a. resource type = PROCEDURE).
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (list.resType = &apos;PROCEDURE&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- The procedure must return a cursor and it must be the first cursor only
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;OPEN childResCursor FOR 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SELECT resourceName, resourcePath, resourceType, columnName, columnType, annotation
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FROM /shared/ASAssets/Utilities/repository/getBasicResourceCursor_PROCEDURE_CURSOR(resourcePath, list.resType, 1)
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHERE paramDirection = &apos;OUT&apos;;
/* &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Important Note:  The FIRST ROW FOR a TABLE returns a NULL IN the columnName.  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;This IS used TO determine the start OF a new TABLE.  Don&apos;t change the XSLT -- getResourceResponseXSLT_SQL_TABLE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   getResourceResponseXSLT_SQL_TABLE returns the following:
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;select--&gt; resourceName: RDS_T_FGRT
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;select--&gt; resourcePath: /shared/DeutscheBank/Central/RDS3/L4_Physical_Layer/L4_1_Physical_Views/dbInstrument/RDS/RDS_T_FGRT
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;select--&gt; resourceType: TABLE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  &#x9;&#x9;  subtype: &#x9;&#x9;SQL_TABLE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  &#x9;&#x9;  enabled: &#x9;&#x9;1
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;select--&gt; annotation: &#x9;this is a procedure comment
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  tableType: &#x9;VIEW
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  sqlText: &#x9;&#x9;[NULL]
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;select--&gt; columnName: &#x9;FGRT_TYP
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;select--&gt; columnType: &#x9;VARCHAR(20)
*/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Initialize the variables for each loop through a resource
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET skipIfExists = 0;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET columnListStr = &apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET newColumnListStr = &apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET defaultVariableScript = &apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET procInputParamsScript = &apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET childResCursorProcessed = false;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET createInputIndexes = &apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET createInputColumns = &apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET lastIndexName = &apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET greatGrandParentName = &#x9;&apos;&apos;; -- always initialized to blank for the first row which is the resource row.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET selectScript = &apos;&apos;; &#x9;&#x9;&#x9;&#x9;&#x9;-- Reset the SQL Script to collect a new set of fields for a new SQL Table View
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET indexColumnList = &apos; &apos;; -- this needs to start with a space
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug2 = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug2, &apos;------------------------&apos;);&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug2, &apos; child resource:&apos;);&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug2, &apos;------------------------&apos;);&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/***********************************************
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; * Loop through the source resource column list
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; ***********************************************/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;childResLoop:
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FOR childRes AS childResCursor DO&#x9;  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET columnStartTime = CURRENT_TIMESTAMP;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set childResCursorProcessed = true;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Retrieve the resource row attributes
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set resourceName = childRes.resourceName;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set resourcePath = childRes.resourcePath;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set resourceType = childRes.resourceType;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set columnName = childRes.columnName;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set columnType = childRes.columnType;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET annotation = childRes.annotation;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Print out the resource column
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug2 = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug2,&apos;[childRes] resourceName=&apos;||NVL(resourceName,&apos;null&apos;)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;  Type=&apos;||NVL(resourceType,&apos;null&apos;)||&apos;  Column=[&apos;||NVL(columnName,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/*********************************************************************************
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *********************************************************************************
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; * First row of cursor is always null indicating start of the resource attributes
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *********************************************************************************
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *********************************************************************************/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Collect the entire list of columns before generating this view
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--    1st row of the TABLE or PROCEDURE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (columnName IS NULL OR columnType = &apos;CURSOR&apos;) THEN 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set colNum = 0;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/*****************************************
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; * Get Logical Name of View or Procedure
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *****************************************/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Logical VIEW/TABLE name is retrieved by the container and source (resource) name
/**********************
 * GETNAME()
 **********************/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set logicalID = &apos;T&apos;; -- Retrieve table information
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set containerList = NULL;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set applyReservedWordList = 0;&#x9;-- 1=true, apply the reserved word list to the output, 0=false, do not apply reserved word list
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL  /shared/ASAssets/BestPractices_v81/Procedures/getNameXML(logicalID, containerList, inProjectFolderName, greatGrandParentName, grandParentName, parentName, containerName, resourceName,  null, applyReservedWordList, ConfigParamsXML, containerList, targetResourceName, targetResourceType, transformResourceName, spreadsheetAnnotation, logicalStatus); 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug3 = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;******getName()******: VIEW:    logicalID=&apos;||logicalID||&apos;  logicalStatus=&apos;||NVL(logicalStatus,&apos;null&apos;)||&apos;  greatGrandParentName=&apos;||NVL(greatGrandParentName,&apos;null&apos;)||&apos;  grandParentName=&apos;||NVL(grandParentName,&apos;null&apos;)||&apos;  parentName=&apos;||NVL(parentName,&apos;null&apos;)||&apos; containerName=&apos;||NVL(containerName,&apos;null&apos;)||&apos;  resourceName=&apos;||NVL(resourceName,&apos;null&apos;)||&apos;  targetResourceName=&apos;||NVL(targetResourceName,&apos;null&apos;)||&apos;  spreadsheetAnnotation=&apos;||NVL(annotation,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**************************************************************************************
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; * Resolve the target folder path based on the path derivation of absolute or derived
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; **************************************************************************************
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;&#x9;pathDerivation - the path derivation is either absolute or derived
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;&#x9;&#x9;Values: &apos;A&apos; or &apos;D&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;&#x9;&#x9;&#x9;&apos;A&apos;=Absolute path as described by targetFolderPath, 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;&#x9;&#x9;&#x9;&apos;D&apos;=(Default setting) Derived from the targetFolderPath + adding on the remaining path from the actual resource after subtracting the sourceFolderPath.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;&#x9;&#x9;&#x9;Example:
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9; &#x9;&#x9;&#x9;&#x9;sourceFolderPath     = /shared/examples
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;&#x9;&#x9; &#x9;&#x9;actual resource path = /shared/examples/ds_orders/customers
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;&#x9;&#x9; &#x9;&#x9;targetFolderPath   = /shared/examples/TargetLayer
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;&#x9;&#x9;&#x9;subtract the sourceFolderPath(/shared/examples) from the actual resource path 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;&#x9;&#x9;&#x9;(/shared/examples/ds_orders/customers) to get the derived remaining folder (ds_orders/customers). 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;&#x9;&#x9;&#x9;Apply naming convention rules on each folder part to derive the canonical names for the folders such as (/DataSourceOrders/Customers).
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;&#x9;&#x9;&#x9;Take the targetFolderPath (/shared/examples/TargetLayer) and concatenate the remaining folder to arrive at the 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;&#x9;&#x9;&#x9;final dervied target folder (/shared/examples/TargetLayer/DataSourceOrders/Customers)
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;&#x9;resultTargetFolderPath - the resulting target folder path
 &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;&#x9;examples:
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;&#x9;&#x9;when pathDerivation = &apos;A&apos;, 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;&#x9;&#x9;&#x9;result=/shared/ViewGenerator/FormattingLayer
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;&#x9;&#x9;when pathDerivation = &apos;D&apos; and useAliasRule=1  and caseRule=&apos;C&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;&#x9;&#x9;&#x9;result=/shared/ViewGenerator/FormattingLayer/Inventory/DsInventory
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;&#x9;&#x9;when pathDerivation = &apos;D&apos; and useAliasRule=0 and caseRule=&apos;O&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;&#x9;&#x9;&#x9;result=/shared/ViewGenerator/FormattingLayer/INVENTORY/ds_inventory
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;&#x9;&#x9;when pathDerivation = &apos;D&apos; and useAliasRule=1 and caseRule=&apos;O&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;&#x9;&#x9;&#x9;result=/shared/ViewGenerator/FormattingLayer/INVENTORY/ds_inventory
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; ***********************************************************************/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Determine whether the pathDerivation is &apos;A&apos; absolute and based on targetFolderPath only or
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- it should be &apos;D&apos; derived from targetFolderPath and the actual resource folder.  The default is to derive it.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET pathDerivationFlag = TRUE;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(startingFolderExtendedRec.pathDerivation) = &apos;A&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET pathDerivationFlag = FALSE;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Start by setting the result to be the default Target Folder Path as is.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET targetFolderPath = startingFolderExtendedRec.targetFolderPath;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Insure that the Source Folder Path is wholly contained within the Resource Path
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- It should be because the original acquisition of resources was based on the Source Folder Path
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- If not, then the result is already set with the Target Folder Path
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (POSITION(startingFolderExtendedRec.sourceFolderPath IN resourcePath) &gt; 0 AND pathDerivationFlag) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug3 = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3,&apos;resolveTargetFolders:: targetFolderPath=&apos;||NVL(targetFolderPath,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3,&apos;resolveTargetFolders:: pathDerivation=&apos;||NVL(startingFolderExtendedRec.pathDerivation,&apos;null&apos;)||&apos;  pathDerivationFlag=&apos;|| CAST(pathDerivationFlag AS VARCHAR(255)) );
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Retrieve the non-matching, end portion of the Resource Path
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Get the canonical name for each portion of this folder path
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Add it on to the end of the Target Folder Path that was passed into this procedure
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/repository/returnFolderNameAndFolderPath(resourcePath, &apos;E&apos;, remainResourceName, remainFolderPath);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/string/getDelimitedOccurrence(remainFolderPath, &apos;R&apos;, &apos;/&apos;, 2, 0, fcontainerName);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/string/getDelimitedOccurrence(remainFolderPath, &apos;R&apos;, &apos;/&apos;, 3, 0, fparentName);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/string/getDelimitedOccurrence(remainFolderPath, &apos;R&apos;, &apos;/&apos;, 4, 0, fgrandParentName);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/string/getDelimitedOccurrence(remainFolderPath, &apos;R&apos;, &apos;/&apos;, 5, 0, fgreatGrandParentName);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET remainFolderPath = SUBSTRING(remainFolderPath,LENGTH(startingFolderExtendedRec.sourceFolderPath)+1,LENGTH(remainFolderPath));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug3 = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3,&apos;resolveTargetFolders:: remainFolderPath=&apos;||remainFolderPath);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Determine the depth of the remaining folder path so that it can be iterated from back to front
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/numOccurrences(&apos;/&apos;, remainFolderPath, numOccurrences);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**************************************************************
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; * Loop through the remaining folder path and apply &quot;getName&quot;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *   to resolve any alias, case rules when generateMode=&quot;G&quot;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *   or spreadsheet lookup rules when generateMode=&quot;R&quot;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *************************************************************/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET derivedFolderPath = &apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET i = 1;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHILE (i &lt;= numOccurrences) DO
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Work through the folders in reverse
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/string/getDelimitedOccurrence(remainFolderPath, &apos;R&apos;, &apos;/&apos;, i, 0, fresourceName);
/**********************
 * GETNAME()
 **********************/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- 1/24/19 mtinius: Changed to make logicalID = &apos;F&apos; for folder so you can distinguish in getName how to apply prefix/suffix rules for T=table and C=columns.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set logicalID = &apos;F&apos;; -- Retrieve table information
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET applyReservedWordList = 0;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/BestPractices_v81/Procedures/getNameXML(logicalID, containerList, inProjectFolderName, fgreatGrandParentName, fgrandParentName, fparentName, fcontainerName, fresourceName, null, applyReservedWordList, ConfigParamsXML, containerList, folderLogicalName, folderLogicalType, folderTransformation, folderAnnotation, folderLogicalStatus);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug3 = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;******getName()******: FOLDER:    logicalID=&apos;||logicalID||&apos;  logicalStatus=&apos;||NVL(folderLogicalStatus,&apos;null&apos;)||&apos;  greatGrandParentName=&apos;||NVL(fgreatGrandParentName,&apos;null&apos;)||&apos;  grandParentName=&apos;||NVL(fgrandParentName,&apos;null&apos;)||&apos;  parentName=&apos;||NVL(fparentName,&apos;null&apos;)||&apos; containerName=&apos;||NVL(fcontainerName,&apos;null&apos;)||&apos;  resourceName=&apos;||NVL(fresourceName,&apos;null&apos;)||&apos;  logicalName=&apos;||NVL(folderLogicalName,&apos;null&apos;)||&apos;  logicalType=&apos;||NVL(folderLogicalType,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (folderLogicalName IS NOT NULL AND LENGTH(folderLogicalName) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET derivedFolderPath = &apos;/&apos;||NVL(folderLogicalName,&apos;null&apos;)||derivedFolderPath;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug3 = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3,&apos;resolveTargetFolders:: derivedFolderPath=&apos;||NVL(derivedFolderPath,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Shift the resources in the remaining path is traversed so that the lookup can find the resource when generateMode=&quot;R&quot;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set fgreatGrandParentName = fgrandParentName;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set fgrandParentName = fparentName;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set fparentName = fcontainerName;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set fcontainerName = fresourceName;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET i = i + 1;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END WHILE;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Make sure there is only a single separator
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET targetFolderPath = targetFolderPath || derivedFolderPath;&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug3 = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3,&apos;resolveTargetFolders:: Resolved Target Folder Path=&apos;||targetFolderPath);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- set the target resource path
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set targetResourcePath = targetFolderPath||&apos;/&apos;||targetResourceName;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/*****************************
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; * End Resolve Target Folders
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *****************************/

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**************************************************************
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; * Determine resource type (either LINK or TABLE (VIEW))
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *************************************************************/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (generateType = &apos;LINK&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set targetResourceType = &apos;LINK&apos;;&#x9;-- Composite link from a published data service to a resource in /shared folder structure.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set targetResourceType = &apos;TABLE&apos;;&#x9;-- Composite table/view type of resource found in /shared folder structure.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**************************************************************
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; * Determine overwrite
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; **************************************************************
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *  Throw an error when (overwrite = 0 or 1) and resource exists
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *    0=&quot;FAIL_IF_EXISTS&quot;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *    1=&quot;SKIP_IF_EXISTS&quot;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *************************************************************/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Determine if the resource exists
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /lib/resource/ResourceExists(targetResourcePath, targetResourceType, null, resourceExists);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- 2014-08-04: mtinius - added check to see if a dependent resource already exists in the target namespace.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set dependentResourceList = &apos;&apos;;
    &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FOR dep AS 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SELECT * FROM /shared/ASAssets/Utilities/repository/getDependentResourcesCursor(resourcePath, resourceType) 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHERE REPLACE(resourcePath, &apos;/&apos;||resourceName, &apos;&apos;) = targetFolderPath
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DO
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set dependentResourceList = dependentResourceList || dep.resourcePath ||&apos;,&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END FOR;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- When overwrite = 0 or 1 and a resource dependent exists or the actual resource exists determine
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF ((overwrite = 0 or overwrite = 1) and (LENGTH(dependentResourceList) &gt; 0 OR resourceExists)) THEN    
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set message = &apos;&apos;;&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (LENGTH(dependentResourceList) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set message = &apos;Dependent resource exists: &apos;||NVL(dependentResourceList,&apos;null&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (resourceExists) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (LENGTH(message) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set message = message || &apos;  &apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set message = message || &apos;Target resource exists.&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (LENGTH(message) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set message = message || &apos;  &apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set message = message || &apos;targetResourcePath=&apos;||NVL(targetResourcePath,&apos;null&apos;);

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Determine whether to throw an exception or deliver a SKIPPED: message with qualifier message text.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (overwrite = 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;raise ex value &apos;Operation not permitted.  Overwrite=0 (false). &apos;||message;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set skipIfExists = 1;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set logicalStatus = SUBSTRING(&apos;SKIPPED: &apos;||NVL(message,&apos;null&apos;),1,LOGICAL_STATUS_MAX_LEN);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**************************************************************
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; * Determine if any more procesing should be done
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *************************************************************/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (skipIfExists = 1) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**************************************************************
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; * INSERT: Return the resource information with status
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *************************************************************/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set duration = CURRENT_TIMESTAMP - viewStartTime;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debugTime = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debugTime,&apos;row=0,   RES: view init duration=&apos;||cast(duration as varchar)||&apos;  resourceName=&apos;||list.name);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug3 = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3,&apos;Leaving childResLoop=&apos;||NVL(logicalStatus,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INSERT INTO result VALUES(datasourceNameList, inProjectFolderName, greatGrandParentName, grandParentName, parentName, containerName, containerType, resourceName, targetResourceName, targetResourceType, logicalStatus, targetFolderPath, duration);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Leave the childResLoop as it is not necessary to loop through all of the child columns
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;leave childResLoop;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**************************************************************
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; * LINK: Process the generateLink
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *************************************************************/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- If generating a link do the following
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (generateType = &apos;LINK&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (skipIfExists = 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Create all non-existent folders and copy the privileges from the parent of the targetFolderPath
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Be sure and update the folders recursively for privileges
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/repository/createAllFoldersPrivileges(targetFolderPath, 1, copyPrivilegeMode, success, faultResponse); -- Generate all necessary folders

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/generateLink(resourcePath, resourceType, targetFolderPath, resourceName, overwrite, copyAnnotation, copyPrivilegeMode, success);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (success = 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;raise ex value &apos;The link was unable to be created for resourcePath=[&apos;||NVL(resourcePath,&apos;null&apos;)||&apos;]  resourceType=[&apos;||NVL(resourceType,&apos;null&apos;)||&apos;]  targetFolderPath=[&apos;||NVL(targetFolderPath,&apos;null&apos;)||&apos;]&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**************************************************************
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; * INSERT: Return the resource information with status
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *************************************************************/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set duration = CURRENT_TIMESTAMP - viewStartTime;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debugTime = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debugTime,&apos;row=0,   RES: view init duration=&apos;||cast(duration as varchar)||&apos;  resourceName=&apos;||list.name);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INSERT INTO result VALUES(datasourceNameList, inProjectFolderName, greatGrandParentName, grandParentName, parentName, containerName, containerType, resourceName, targetResourceName, targetResourceType, logicalStatus, targetFolderPath, duration);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Leave the childResLoop as it is not necessary to loop through all of the child columns
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;leave childResLoop;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;EXCEPTION
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;raise ex value CAST(CURRENT_EXCEPTION.TRACE AS LONGVARCHAR);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END;

/**************************************
 * CODE BEGIN from generateViewsCommon
 **************************************/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**************************************************************
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; * TABLE: Process the generateViews
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *************************************************************/

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/*******************************************************************
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; * Process annotations
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *******************************************************************/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Determine whether to copy the annotation or not.  Set to empty if user decides not to copy the annotation
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set viewAnnotation = annotation;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (copyAnnotation = 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set viewAnnotation = &apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- if the spreadsheet annotation is not empty then use it, otherwise use the annotation passed in from the resource
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (spreadsheetAnnotation IS NOT NULL AND LENGTH(&apos;|&apos;||spreadsheetAnnotation||&apos;|&apos;) &gt; 2) then  --notEmpty
--&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (isEmpty(spreadsheetAnnotation) = notEmpty) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set viewAnnotation = spreadsheetAnnotation;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
--&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call print(&apos;copyAnnotation=&apos;||NVL(copyAnnotation,&apos;null&apos;));
--&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call print(&apos;viewAnnotation=&apos;||CAST(XMLTEXT(NVL(viewAnnotation,&apos;null&apos;)) AS LONGVARCHAR));
--&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call print(&apos;spreadsheetAnnotation=&apos;||CAST(XMLTEXT(NVL(spreadsheetAnnotation,&apos;null&apos;)) AS LONGVARCHAR));

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/*********************************************
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; * Generate XML input begin for updateResources
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *********************************************/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set createInputBegin =
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&lt;?xml version=&quot;1.0&quot;?&gt;&apos;||NEWLINE||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&lt;resource:updateResources xmlns:resource=&quot;http://www.compositesw.com/services/system/admin/resource&quot;&gt;&apos;||NEWLINE||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;   &lt;resource:resources&gt;&apos;||NEWLINE||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&lt;resource:resource xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:type=&quot;resource:tableResource&quot;&gt;&apos;||NEWLINE||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&lt;resource:name&gt;&apos;||CAST(XMLTEXT(targetResourceName) AS LONGVARCHAR)||&apos;&lt;/resource:name&gt;&apos;||NEWLINE||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&lt;resource:path&gt;&apos;||CAST(XMLTEXT(targetResourcePath) AS LONGVARCHAR)||&apos;&lt;/resource:path&gt;&apos;||NEWLINE||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&lt;resource:type&gt;TABLE&lt;/resource:type&gt;&apos;||NEWLINE||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&lt;resource:subtype&gt;SQL_TABLE&lt;/resource:subtype&gt;&apos;||NEWLINE||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&lt;resource:ownerDomain&gt;composite&lt;/resource:ownerDomain&gt;&apos;||NEWLINE||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&lt;resource:ownerName&gt;admin&lt;/resource:ownerName&gt;&apos;||NEWLINE||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&lt;resource:impactLevel&gt;NONE&lt;/resource:impactLevel&gt;&apos;||NEWLINE||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&lt;resource:enabled&gt;true&lt;/resource:enabled&gt;&apos;||NEWLINE||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&lt;resource:annotation&gt;&apos;||CAST(XMLTEXT(NVL(viewAnnotation,&apos;null&apos;)) AS LONGVARCHAR)||&apos;&lt;/resource:annotation&gt;&apos;||NEWLINE||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&lt;resource:columns&gt;&apos;||NEWLINE;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/*******************************************************************
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; * SOURCE=TABLE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; * Generate from clause for the target view.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *******************************************************************/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (resourceType = &apos;TABLE&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Put quotes around &quot;_folder&quot; or &quot;1_folder&quot; but in a way that it is not hard-coded if _ or 0-9 exists in the first charcater of the folder name
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Put quotes around a folder portion if it contains &apos;.&apos;,&apos;-&apos; or contains any composite reserved words (see Reference Manual: Consolodated List of Reserved Words)
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord(resourceName, null, word);

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Generate the from clause
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(resourcePath, &apos;F&apos;, resourcePathReserved);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET fromScript = &apos;FROM&apos;|| NEWLINE || TAB || resourcePathReserved || &apos; &apos; || word;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/*******************************************************************
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; * SOURCE=PROCEDURE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; * Generate view declaration statements and procedure parameters.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; * Generate from clause for the target view.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *******************************************************************/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (resourceType = &apos;PROCEDURE&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FOR r as 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SELECT * FROM /shared/ASAssets/Utilities/repository/getBasicResourceCursor_PROCEDURE_CURSOR(resourcePath, resourceType, 1) 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHERE paramDirection = &apos;IN&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DO
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/* Example of default variable input for a view
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{DECLARE decl_productFilter&#x9;&#x9;VARCHAR DEFAULT null} input_productFilter,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{DECLARE decl_productIDFilter&#x9;BIGINT DEFAULT null} input_productIDFilter,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{DECLARE decl_unitPriceFilter&#x9;DECIMAL(32,6) DEFAULT null} input_unitPriceFilter,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{DECLARE decl_OrdersRequest &#x9;XML DEFAULT null} input_OrdersRequest,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{DECLARE decl_inputXML&#x9;&#x9;&#x9;XML DEFAULT null} input_inputXML,

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  Example of procedure input parameters in a view:
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;.../ds_XML/productCatalog_Transformation_input(decl_productFilter, decl_productIDFilter, decl_unitPriceFilter, decl_OrdersRequest, decl_inputXML) productCatalog_Transformation_input
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;*/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Add to the list of procedure input parameters
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (LENGTH(procInputParamsScript) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set procInputParamsScript = procInputParamsScript ||&apos;, &apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set procInputParamsScript = procInputParamsScript ||&apos;decl_&apos;||r.columnName;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Add to the list of default view declaration statements
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- NOTE:  For xmlType, the columnType for &quot;TYPED&quot; xml variables will contain the following as an example:
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;/shared/BestPracticesTest/Application/DefinitionSets/OrderTransactionsWSDL.&quot;{http://www.compositesw.com/example/transaction/orders/v1.0}OrdersRequest&quot;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--      However, Composite does not support this xml definition for Views.  It only supports it for procedures.  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- &#x9;&#x9;Therefore, the columnBaseType of XML must be used for these definitions.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (r.dataType = &apos;xmlType&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set defaultVariableScript = defaultVariableScript ||NEWLINE || TAB ||&apos;{DECLARE &apos;||&apos;decl_&apos;||r.columnName||&apos; &apos;||r.columnBaseType||&apos; DEFAULT null} input_&apos;||r.columnName||&apos;,&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set defaultVariableScript = defaultVariableScript ||NEWLINE || TAB ||&apos;{DECLARE &apos;||&apos;decl_&apos;||r.columnName||&apos; &apos;||r.columnType||&apos; DEFAULT null} input_&apos;||r.columnName||&apos;,&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END FOR;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Put quotes around &quot;_folder&quot; or &quot;1_folder&quot; but in a way that it is not hard-coded if _ or 0-9 exists in the first charcater of the folder name
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Put quotes around a folder portion if it contains &apos;.&apos;,&apos;-&apos; or contains any composite reserved words (see Reference Manual: Consolodated List of Reserved Words)
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord(resourceName, null, word);

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Generate the from clause
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(resourcePath, &apos;F&apos;, resourcePathReserved);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET fromScript = &apos;FROM&apos;|| NEWLINE || TAB || resourcePathReserved || &apos;(&apos;||procInputParamsScript||&apos;) &apos; || word;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Extract any indexes from the source table or view
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--call print(&apos;INDEX: table resourcePath=&apos;||NVL(resourcePath,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set idx = 0;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FOR r AS 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SELECT * 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FROM /shared/ASAssets/Utilities/repository/getBasicResourceCursor_SQL_TABLE_SQLINDEXES(resourcePath, resourceType)
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DO
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Add the COLUMN_NAME{INDEX_TYPE} to the index column list if it does not exist
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (POSITION(r.sqlIndexColName||&apos;{&apos; IN indexColumnList) = 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set indexColumnList = indexColumnList || r.sqlIndexColName || &apos;{&apos;||r.sqlIndexType||&apos;} &apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Get the INDEX_TYPE for the existing COLUMN_NAME
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/string/extractBiDelimitedText(indexColumnList, r.sqlIndexColName, &apos;{&apos;, &apos;}&apos;, 1, 1, 1, indexType);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- There should only be one reference to a column across all indexes and the reference should indicate when it is a PRIMARY_KEY vs. OTHER
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   Replace the COLUMN_NAME{INDEX_TYPE} in the index column list when the INDEX_TYPE != PRIMARY_KEY
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (indexType != &apos;PRIMARY_KEY&apos; and r.sqlIndexType = &apos;PRIMARY_KEY&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set indexColumnList = REPLACE(indexColumnList, r.sqlIndexColName || &apos;{&apos;||indexType||&apos;} &apos;, r.sqlIndexColName || &apos;{&apos;||r.sqlIndexType||&apos;} &apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/*********************************************
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; * Generate Indexes for the target view
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *********************************************/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (generateIndexes = 1) then
--&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call print(&apos;INDEX:    resourcePath=&apos;||NVL(resourcePath,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Shift the resources in preparation for column processing for index columns
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set igreatGrandParentName = grandParentName;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set igrandParentName = parentName;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set iparentName = containerName;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set icontainerName = resourceName;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Retrieve the logical index column name (logicalSqlIndexColName) from r.sqlIndexColName
/**********************
 * GETNAME()
 **********************/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set logicalID = &apos;C&apos;; -- Retrieve column information
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET applyReservedWordList = 0;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL  /shared/ASAssets/BestPractices_v81/Procedures/getNameXML(logicalID, containerList, inProjectFolderName, greatGrandParentName, igrandParentName, iparentName, icontainerName, r.sqlIndexColName,  null, applyReservedWordList, ConfigParamsXML, containerList, logicalSqlIndexColName, logicalType, transformResourceName, spreadsheetAnnotation, logicalStatus); 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug3 = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;******getName()******: INDEX:    logicalID=&apos;||logicalID||&apos;  logicalStatus=&apos;||NVL(logicalStatus,&apos;null&apos;)||&apos;  greatGrandParentName=&apos;||NVL(greatGrandParentName,&apos;null&apos;)||&apos;  grandParentName=&apos;||NVL(grandParentName,&apos;null&apos;)||&apos;  parentName=&apos;||NVL(parentName,&apos;null&apos;)||&apos; containerName=&apos;||NVL(containerName,&apos;null&apos;)||&apos;  resourceName/r.sqlIndexColName=&apos;||NVL(r.sqlIndexColName,&apos;null&apos;)||&apos;  logicalSqlIndexColName=&apos;||NVL(logicalSqlIndexColName,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Perform additional processing if the logical status of the resource is not &apos;DROPPED&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- &#x9;&#x9;Note: There are no annotations for indexes.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (logicalStatus &lt;&gt; &apos;DROPPED&apos;) THEN 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (r.sqlIndexName != lastIndexName) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Close out the previous index XML
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (idx &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set createInputIndexes = createInputIndexes ||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/resource:columns&gt;&apos;||NEWLINE||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&#x9;&#x9;&lt;/resource:index&gt;&apos;||NEWLINE;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Determine whether it is unique or not
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (r.sqlIndexUnique = 1) THEN &#x9;&#x9;&#x9;&#x9;&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set uniqueIndex = &apos;true&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set uniqueIndex = &apos;false&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Start the index text
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set createInputIndexes = createInputIndexes || 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&#x9;&#x9;&lt;resource:index&gt;&apos;||NEWLINE||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;resource:name&gt;&apos;||CAST(XMLTEXT(r.sqlIndexName) AS LONGVARCHAR)||&apos;&lt;/resource:name&gt;&apos;||NEWLINE||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;resource:type&gt;&apos;||CAST(XMLTEXT(r.sqlIndexType) AS LONGVARCHAR)||&apos;&lt;/resource:type&gt;&apos;||NEWLINE||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;resource:unique&gt;&apos;||CAST(XMLTEXT(uniqueIndex) AS LONGVARCHAR)||&apos;&lt;/resource:unique&gt;&apos;||NEWLINE||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;resource:columns&gt;&apos;||NEWLINE;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set idx = 1;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set idx = idx + 1;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Set the columns
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set createInputIndexes = createInputIndexes ||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;column&gt;&apos;||NEWLINE||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;resource:name&gt;&apos;||CAST(XMLTEXT(logicalSqlIndexColName) AS LONGVARCHAR)||&apos;&lt;/resource:name&gt;&apos;||NEWLINE||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;resource:order&gt;&apos;||CAST(XMLTEXT(r.sqlIndexColOrder) AS LONGVARCHAR)||&apos;&lt;/resource:order&gt;&apos;||NEWLINE||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/column&gt;&apos;||NEWLINE;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set lastIndexName = r.sqlIndexName;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END FOR;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Close out the index XML
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (generateIndexes = 1 and idx &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set createInputIndexes = createInputIndexes ||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/resource:columns&gt;&apos;||NEWLINE||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&#x9;&#x9;&lt;/resource:index&gt;&apos;||NEWLINE;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set idx = 0; -- reinitialize idx back to 0
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--call print(&apos;createInputIndexes=&apos;||NVL(createInputIndexes,&apos;null&apos;));

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**************************************************************************
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; * If Retrieval is on, get the list of &quot;NEW&quot; columns from the spreadsheet
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; **************************************************************************/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Retrieve the new columns at the beginning of the view in preparation for checking for duplicates as the columns are processed.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (generateMode = &apos;R&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Perform the shift of columns within the context of invoking retrieveNewColumnList: inProjectFolderName, greatGrandParentName, grandParentName, parentName,    containerName, debug3, newColumnListCursor
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/retrieveName/retrieveNewColumnList(inProjectFolderName, grandParentName,      parentName,      containerName, resourceName,  debug3, newColumnListCursor);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/*&#x9;OUT resultCursor&#x9;CURSOR (
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;datasourceName &#x9;&#x9;&#x9;VARCHAR(255), 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;projectFolderName &#x9;&#x9;VARCHAR(255), 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;greatGrandParentName &#x9;VARCHAR(255), 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;grandParentName &#x9;&#x9;VARCHAR(255), 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;parentName &#x9;&#x9;&#x9;&#x9;VARCHAR(255), 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;containerName &#x9;&#x9;&#x9;VARCHAR(255), 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resourceName &#x9;&#x9;&#x9;VARCHAR(255),
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resourceNum&#x9;&#x9;&#x9;&#x9;INTEGER, 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;logicalName &#x9;&#x9;&#x9;VARCHAR(255), &#x9;&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;logicalType &#x9;&#x9;&#x9;VARCHAR(255), &#x9;&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;annotation &#x9;&#x9;&#x9;&#x9;VARCHAR(32767), &#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;compositeTransformation VARCHAR(32767),&#x9;&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resourceNameEncoded&#x9;&#x9;VARCHAR(255)    )
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;*/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FOR newColumn AS newColumnListCursor DO
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set newColumnListStr = newColumnListStr || NVL(newColumn.logicalName,&apos;null&apos;)||&apos;|&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END FOR;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**************************************************************
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; * INSERT: Return the resource information with status
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *************************************************************/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set duration = CURRENT_TIMESTAMP - viewStartTime;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debugTime = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debugTime,&apos;row=0,   RES: view init duration=&apos;||cast(duration as varchar)||&apos;  resourceName=&apos;||list.name);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INSERT INTO result VALUES(datasourceNameList, inProjectFolderName, greatGrandParentName, grandParentName, parentName, containerName, containerType, resourceName, targetResourceName, targetResourceType, logicalStatus, targetFolderPath, duration);

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/************************************************************
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; * Shift the resources in preparation for column processing
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; ************************************************************/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set greatGrandParentName = grandParentName;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set grandParentName = parentName;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set parentName = containerName;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set containerName = resourceName;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET duration = CURRENT_TIMESTAMP - columnStartTime;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debugTime = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debugTime,&apos;         first row duration=&apos;||cast(duration as varchar));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;/*********************************************************************************
&#x9; *********************************************************************************
&#x9; *
&#x9; * COLUMN PROCESSING:  Subsequent row of the TABLE or PROCEDURE with the column list
&#x9; *
&#x9; *********************************************************************************
&#x9; *********************************************************************************/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set colNum = colNum + 1;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Set the containerType
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET containerType = list.resType;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set tempStartTime = CURRENT_TIMESTAMP;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Unique name is retrieved by the container and source (resource) name
/**********************
 * GETNAME()
 **********************/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set logicalID = &apos;C&apos;; -- Retrieve column information
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET applyReservedWordList = 1;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL  /shared/ASAssets/BestPractices_v81/Procedures/getNameXML(logicalID, containerList, inProjectFolderName, greatGrandParentName, grandParentName, parentName, containerName,  columnName, columnType, applyReservedWordList, ConfigParamsXML, containerList, logicalColumnName, logicalType, transformResourceName, spreadsheetAnnotation, logicalStatus);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug3 = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;******getName()******: COLUMNS:    logicalID=&apos;||logicalID||&apos;  logicalStatus=&apos;||NVL(logicalStatus,&apos;null&apos;)||&apos;  greatGrandParentName=&apos;||NVL(greatGrandParentName,&apos;null&apos;)||&apos;  grandParentName=&apos;||NVL(grandParentName,&apos;null&apos;)||&apos;  parentName=&apos;||NVL(parentName,&apos;null&apos;)||&apos; containerName=&apos;||NVL(containerName,&apos;null&apos;)||&apos;  columnName=&apos;||NVL(columnName,&apos;null&apos;)||&apos;  logicalColumnName=&apos;||NVL(logicalColumnName,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET duration = CURRENT_TIMESTAMP - tempStartTime;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debugTime = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debugTime,&apos;         getName duration=&apos;||cast(duration as varchar)||&apos;  logicalColumnName=&apos;||NVL(logicalColumnName,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- 2014-08-04 mtinius: 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--    When generate mode is G or R and the column is contained within an index then don&apos;t create a CAST() transformation because this will affect push-down query performance.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set transformResourceNameOrig = null;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set indexColPos = POSITION(&apos; &apos;||columnName||&apos;{&apos; IN indexColumnList);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if ((generateMode = &apos;G&apos; or generateMode = &apos;R&apos;)
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and generateCast &gt;= 2&#x9;-- see comments below for values
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and indexColPos &gt; 0) &#x9;-- the column name was found in the index list
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;0=Do not generate CAST statement.  Pass through column as is.  Default behavior.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- &#x9;1=Generate the CAST statement around the column
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;2-Generate the CAST statement around the non-index columns only (No CAST on index columns)
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;3-Generate the CAST statement around the non-index columns only and generate a &quot;display&quot; CAST column for each index column.  (No CAST o nindex columns)
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;4-Generate the CAST statement around the non-index columns and non-primary key index columns only (No CAST on primary key index columns)
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;5-Generate the CAST statement around the non-index columns and non-primary key index columns only and generate a &quot;display&quot; CAST column for each primary key index column.  (No CAST on primary key index columns)
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/string/extractBiDelimitedText(indexColumnList, columnName, &apos;{&apos;, &apos;}&apos;, 1, 1, 1, indexType);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--call print(&apos;columnName=&apos;||columnName||&apos;  indexType=&apos;||indexType||&apos;  indexColumnList=&apos;||indexColumnList);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set indexType = NVL(indexType, &apos; &apos;); -- this is just a safeguard to protect against null
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- This saves the original transformation so it can be used for a CAST on the &quot;display&quot; column
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (generateCast = 3 or (generateCast = 5 and indexType = &apos;PRIMARY_KEY&apos;)) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set transformResourceNameOrig = transformResourceName;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- This insures that there is no CAST statement applied in these scenarios
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (generateCast = 2 or generateCast = 3 or (generateCast = 4 and indexType = &apos;PRIMARY_KEY&apos;) or (generateCast = 5 and indexType = &apos;PRIMARY_KEY&apos;)) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set transformResourceName = &apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--call print(&apos;transformResourceNameOrig=&apos;||NVL(transformResourceNameOrig,&apos;null&apos;)||&apos;  indexType=&apos;||indexType||&apos;   indexColumnList=&apos;||indexColumnList);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Determine whether to copy the annotation or not.  Set to empty if user decides not to copy the annotation
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set columnAnnotation = annotation;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (copyAnnotation = 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set columnAnnotation = &apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- if the spreadsheet annotation is not empty then use it, otherwise use the annotation passed in from the resource
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (spreadsheetAnnotation IS NOT NULL AND LENGTH(&apos;|&apos;||spreadsheetAnnotation||&apos;|&apos;) &gt; 2) then  --notEmpty
--&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (isEmpty(spreadsheetAnnotation) = notEmpty) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set columnAnnotation = spreadsheetAnnotation;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--call print(&apos;columnAnnotation=&apos;||CAST(XMLTEXT(NVL(columnAnnotation,&apos;null&apos;)) AS LONGVARCHAR));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--call print(&apos;spreadsheetAnnotation=&apos;||CAST(XMLTEXT(NVL(spreadsheetAnnotation,&apos;null&apos;)) AS LONGVARCHAR));

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- If the logicalType is empty use the physical column type otherwise use the logical type.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (logicalType IS NULL OR LENGTH(&apos;|&apos;||logicalType||&apos;|&apos;) = 2) then  --Empty
--&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (isEmpty(logicalType) = Empty) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set logicalType = columnType;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/isUnsupportedColumnType(logicalType, isUnsupportedColumnType);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if ((generateUnsupportedColumnType is null or generateUnsupportedColumnType = 0) and isUnsupportedColumnType = 1) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set logicalStatus = &apos;DROPPED&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Add the column to the list as long as it is not reported as [DROPPED]&#x9;&#x9;&#x9;&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (logicalStatus &lt;&gt; &apos;DROPPED&apos;) THEN 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord(resourceName, null, reservedResourceName);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord(columnName, null, columnName2);

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Check for a transformation else just add the column
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (POSITION(&apos;?&apos; IN transformResourceName) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET transformResourceName = REPLACE(transformResourceName, &apos;?&apos;, reservedResourceName ||&apos;.&apos;|| columnName2);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET transformResourceName = reservedResourceName ||&apos;.&apos;|| columnName2;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Format the SELECT statement so that each column is on it&apos;s own line
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set logicalColumnNameOrig = logicalColumnName;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord(logicalColumnName, null, logicalColumnName);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Check Duplicate Column Alias or Name
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--     mtinius: 2013/10/03
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--     Determine if a column alias or column name is a duplicate from the source.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--     Take into account the possibility that the spreadsheet may contain an alias that already resolve the duplicate name.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--     Append a sequential numerical value to the end of the alias &quot;logicalColumnName&quot; that is returned.
--call print(&apos;&apos;);
--call print(&apos;Retrieve Existing Column List: &apos;);
--call print(&apos;checkDuplicateColumn IN: columnListStr=&apos;||columnListStr);
--call print(&apos;checkDuplicateColumn IN: newColumnListStr=&apos;||NVL(newColumnListStr,&apos;null&apos;));
--call print(&apos;checkDuplicateColumn IN: columnName2=&apos;||columnName2);
--call print(&apos;checkDuplicateColumn IN: logicalColumnName=&apos;||logicalColumnName);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- A column alias was found so use it as the column alias to return
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (logicalColumnName is not null and LENGTH(logicalColumnName) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set checkDupColumnOrAlias = logicalColumnName;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- otherwise the column alias was not found so the column name should be set as the alias to be returned
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set checkDupColumnOrAlias = columnName2;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/checkDuplicateColumn(columnListStr, newColumnListStr, checkDupColumnOrAlias, columnListStr, logicalColumnName, dropColumn);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord(logicalColumnName, null, logicalColumnName);
--call print(&apos;checkDuplicateColumn OUT: columnListStr=&apos;||columnListStr);
--call print(&apos;checkDuplicateColumn OUT: logicalColumnName=&apos;||logicalColumnName);

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (dropColumn = 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/***********************************************
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; * Compose the SQL Script and Column List
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; ***********************************************/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Append the column to the SQL Script
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET selectScript = selectScript||TAB|| transformResourceName ||&apos; &apos;|| logicalColumnName ||&apos;,&apos;||NEWLINE;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set createInputColumns = createInputColumns ||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&#x9;&#x9;&lt;resource:column&gt;&apos;||NEWLINE||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;resource:name&gt;&apos;||CAST(XMLTEXT(TRIM(NVL(logicalColumnName,&apos;  &apos;))) AS LONGVARCHAR)||&apos;&lt;/resource:name&gt;&apos;||NEWLINE;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (logicalType IS NOT NULL AND LENGTH(&apos;|&apos;||logicalType||&apos;|&apos;) &gt; 2) then  --notEmpty
--&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (isEmpty(logicalType) = notEmpty) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set createInputColumns = createInputColumns ||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;resource:dataType&gt;&apos;||NEWLINE||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;common:sqlType xmlns:common=&quot;http://www.compositesw.com/services/system/util/common&quot;&gt;&apos;||NEWLINE||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;common:definition&gt;&apos;||CAST(XMLTEXT(TRIM(NVL(logicalType,&apos;  &apos;))) AS LONGVARCHAR)||&apos;&lt;/common:definition&gt;&apos;||NEWLINE||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/common:sqlType&gt;&apos;||NEWLINE||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/resource:dataType&gt;&apos;||NEWLINE;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set createInputColumns = createInputColumns ||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;resource:annotation&gt;&apos;||CAST(XMLTEXT(TRIM(NVL(columnAnnotation,&apos;  &apos;))) AS LONGVARCHAR)||&apos;&lt;/resource:annotation&gt;&apos;||NEWLINE||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&#x9;&#x9;&lt;/resource:column&gt;&apos;||NEWLINE;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- 2014-08-04 mtinius: 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;Added features for generateCast=3 and 5 to create a display column with original casting for the column that had an index
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if ((generateMode = &apos;G&apos; or generateMode = &apos;R&apos;)&#x9;&#x9;-- Perform this operation for either &quot;G&quot;enerating views or &quot;R&quot;etrieving views
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and (generateCast = 3 or generateCast = 5)&#x9;&#x9;-- 3=generate a display column for all indexes, 5=generate a display column for PK indexes only
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and indexColPos &gt; 0&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- the columnName was found in the indexColumnList
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and transformResourceNameOrig is not null)  &#x9;-- only generate a display column when the original column transformation was saved
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;then &#x9;-- &apos;G&apos; or &apos;R&apos; and column is an index
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Check for a transformation else just add the column
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (POSITION(&apos;?&apos; IN transformResourceNameOrig) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET transformResourceNameOrig = REPLACE(transformResourceNameOrig, &apos;?&apos;, reservedResourceName ||&apos;.&apos;|| columnName2);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET transformResourceNameOrig = reservedResourceName ||&apos;.&apos;|| columnName2;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Format the SELECT statement so that each column is on it&apos;s own line
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord(logicalColumnNameOrig || logicalSuffixName, null, logicalColumnNameOrig);

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET selectScript = selectScript||TAB|| transformResourceNameOrig ||&apos; &apos;|| logicalColumnNameOrig ||&apos;,&apos;||NEWLINE;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set createInputColumns = createInputColumns ||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&#x9;&#x9;&lt;resource:column&gt;&apos;||NEWLINE||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;resource:name&gt;&apos;||CAST(XMLTEXT(TRIM(NVL(logicalColumnNameOrig,&apos;  &apos;))) AS LONGVARCHAR)||&apos;&lt;/resource:name&gt;&apos;||NEWLINE;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (logicalType IS NOT NULL AND LENGTH(&apos;|&apos;||logicalType||&apos;|&apos;) &gt; 2) then  --notEmpty
--&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (isEmpty(logicalType) = notEmpty) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set createInputColumns = createInputColumns ||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;resource:dataType&gt;&apos;||NEWLINE||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;common:sqlType xmlns:common=&quot;http://www.compositesw.com/services/system/util/common&quot;&gt;&apos;||NEWLINE||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;common:definition&gt;&apos;||CAST(XMLTEXT(TRIM(NVL(logicalType,&apos;  &apos;))) AS LONGVARCHAR)||&apos;&lt;/common:definition&gt;&apos;||NEWLINE||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/common:sqlType&gt;&apos;||NEWLINE||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/resource:dataType&gt;&apos;||NEWLINE;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set createInputColumns = createInputColumns ||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;resource:annotation&gt;&apos;||CAST(XMLTEXT(TRIM(NVL(columnAnnotation,&apos;  &apos;))) AS LONGVARCHAR)||&apos;&lt;/resource:annotation&gt;&apos;||NEWLINE||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&#x9;&#x9;&lt;/resource:column&gt;&apos;||NEWLINE;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set logicalStatus = &apos;DROPPED&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF; -- IF (dropColumn=0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF; -- IF (logicalStatus &lt;&gt; &apos;DROPPED&apos;) THEN 

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/****************************************************
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; * INSERT: Return the column information with status
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; ****************************************************/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set duration = CURRENT_TIMESTAMP - viewStartTime;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set colDuration = CURRENT_TIMESTAMP - columnStartTime;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Report on all columns and their possible status [GENERATED, FOUND, UNCHANGED, DROPPED]
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (outputMode = &apos;A&apos;) THEN
&#x9;&#x9;&#x9;--------- INSERT ---------
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INSERT INTO result VALUES(datasourceNameList, inProjectFolderName, greatGrandParentName, grandParentName, parentName, containerName, columnType, columnName, logicalColumnName, logicalType, logicalStatus, targetFolderPath||&apos;/&apos;||NVL(containerName,&apos;null&apos;), duration);

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- 2014-08-04 mtinius: Create a display column with original casting for the column that had an index
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if ((generateMode = &apos;G&apos; or generateMode = &apos;R&apos;)&#x9;&#x9;-- Perform this operation for either &quot;G&quot;enerating views or &quot;R&quot;etrieving views
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and (generateCast = 3 or generateCast = 5)&#x9;&#x9;-- 3=generate a display column for all indexes, 5=generate a display column for PK indexes only
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and indexColPos &gt; 0&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- the columnName was found in the indexColumnList
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and transformResourceNameOrig is not null)  &#x9;-- only generate a display column when the original column transformation was saved
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;then &#x9;-- &apos;G&apos; or &apos;R&apos; and column is an index
&#x9;&#x9;&#x9;--------- INSERT ---------
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INSERT INTO result VALUES(datasourceNameList, inProjectFolderName, greatGrandParentName, grandParentName, parentName, containerName, columnType, columnName, logicalColumnNameOrig, logicalType, logicalStatus, targetFolderPath||&apos;/&apos;||NVL(containerName,&apos;null&apos;), duration);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE -- otherwise only report on columns when their status is [UNCHANGED or DROPPED]
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (outputMode = &apos;U&apos; AND (logicalStatus = &apos;UNCHANGED&apos; OR logicalStatus = &apos;DROPPED&apos;)) THEN
&#x9;&#x9;&#x9;--------- INSERT ---------
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INSERT INTO result VALUES(datasourceNameList, inProjectFolderName, greatGrandParentName, grandParentName, parentName, containerName, columnType, columnName, logicalColumnName, logicalType, logicalStatus, targetFolderPath||&apos;/&apos;||NVL(containerName,&apos;null&apos;), duration);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug3 = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, RPAD(&apos;RESOURCE=[&apos;||resourceName||&apos;]&apos;,padAmount,padChar) ||&apos;  &apos;||RPAD(&apos;COLUMN=[&apos;||columnName||&apos;]&apos;,padAmount,padChar) || RPAD(&apos;  LOGICAL=[&apos;||logicalColumnName||&apos;]&apos;,padAmount,padChar) || logicalStatus);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debugTime = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debugTime,&apos;row=&apos;||colNum||&apos;, EXIST: incremental duration=&apos;||cast(duration as varchar)||&apos;  colDuration=&apos;||cast(colDuration as varchar)||&apos;  resourceName=&apos;||columnName);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
/**********************************
 * CODE END from generateViewsCommon
 **********************************/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;   &#x9;    
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END FOR;

&#x9;/*********************************************************************************
&#x9; *********************************************************************************
&#x9; *
&#x9; * Create the target folders and view
&#x9; *
&#x9; *********************************************************************************
&#x9; *********************************************************************************/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (childResCursorProcessed and generateType = &apos;VIEW&apos;) then
/**************************************
 * CODE BEGIN from generateViewsCommon
 **************************************/ 

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**************************************************************************
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; * If Retrieval is on, generate the list of &quot;NEW&quot; columns from the newColumnList variable
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; **************************************************************************/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/* 2019-01-24 mtinius: 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Add new columns from the newColumnList variables.  Extract from the format below:
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Format: column1&amp;&amp;type1&amp;&amp;value1//column2&amp;&amp;type2&amp;&amp;value2//column3&amp;&amp;type3&amp;&amp;value3&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;*/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Add New Columns to the end of the View. 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (generateMode = &apos;G&apos; AND newColumnList IS NOT NULL AND LENGTH(TRIM(newColumnList)) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FOR c AS
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SELECT * FROM /shared/ASAssets/Utilities/string/extractDelimitedText(newColumnList,&apos;//&apos;,0,0,0,1,0) 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHERE object IS NOT NULL AND length(object) &gt; 0
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DO
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Set the start time for the column
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set columnStartTime = CURRENT_TIMESTAMP;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Increment the column number
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set colNum = colNum + 1;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET newColumnName = null;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET newColumnType = null;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET newColumnValue = null;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET k = 0;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FOR item AS
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SELECT * FROM /shared/ASAssets/Utilities/string/extractDelimitedText(c.object,&apos;&amp;&amp;&apos;,0,0,0,1,0) 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHERE object IS NOT NULL AND length(object) &gt; 0
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DO
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET k = k + 1;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CASE 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN k = 1 THEN set newColumnName = item.object;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN k = 2 THEN set newColumnType = item.object;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN k = 3 THEN set newColumnValue = item.object;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END CASE;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END FOR;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (newColumnName IS NOT NULL AND newColumnType IS NOT NULL AND newColumnValue IS NOT NULL) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF ((INSTR(UPPER(newColumnType), &apos;CHAR&apos;) &gt; 0 OR INSTR(UPPER(newColumnType), &apos;TIMESTAMP&apos;) &gt; 0 OR INSTR(UPPER(newColumnType), &apos;DATE&apos;) &gt; 0 OR INSTR(UPPER(newColumnType), &apos;TIME&apos;) &gt; 0) AND
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(UPPER(newColumnValue) &lt;&gt; &apos;CURRENT_TIMESTAMP&apos; AND UPPER(newColumnValue) &lt;&gt; &apos;CURRENT_DATE&apos; AND UPPER(newColumnValue) &lt;&gt; &apos;CURRENT_TIME&apos;)) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET newColumnTransformation = &apos;CAST(&apos;&apos;&apos;||newColumnValue||&apos;&apos;&apos; AS &apos;||newColumnType||&apos;)&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET newColumnTransformation = &apos;CAST(&apos;||newColumnValue||&apos; AS &apos;||newColumnType||&apos;)&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Determine if the LogicalName column is a duplicate and add a sequence number to it if it is.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/checkDuplicateColumn(columnListStr, null, newColumnName, columnListStr, newColumnName, dropColumn);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord(newColumnName, null, newColumnName);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--call print(&apos;columnListStr=&apos;||columnListStr);

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Format the SELECT statement so that each column is on it&apos;s own line
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET selectScript = selectScript||TAB|| newColumnTransformation ||&apos; &apos;|| newColumnName ||&apos;,&apos;||NEWLINE;&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET columnAnnotation = &apos;&apos;;
&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (dropColumn = 0) THEN&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set createInputColumns = createInputColumns ||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&#x9;&#x9;&lt;resource:column&gt;&apos;||NEWLINE||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;resource:name&gt;&apos;||CAST(XMLTEXT(TRIM(NVL(newColumnName,&apos;  &apos;))) AS LONGVARCHAR)||&apos;&lt;/resource:name&gt;&apos;||NEWLINE;
&#x9;&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (newColumnType IS NOT NULL AND LENGTH(&apos;|&apos;||newColumnType||&apos;|&apos;) &gt; 2) then  --notEmpty
--&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (isEmpty(newColumnType) = notEmpty) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set createInputColumns = createInputColumns ||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;resource:dataType&gt;&apos;||NEWLINE||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;common:sqlType xmlns:common=&quot;http://www.compositesw.com/services/system/util/common&quot;&gt;&apos;||NEWLINE||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;common:definition&gt;&apos;||CAST(XMLTEXT(TRIM(NVL(newColumnType,&apos;  &apos;))) AS LONGVARCHAR)||&apos;&lt;/common:definition&gt;&apos;||NEWLINE||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/common:sqlType&gt;&apos;||NEWLINE||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/resource:dataType&gt;&apos;||NEWLINE;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set createInputColumns = createInputColumns ||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;resource:annotation&gt;&apos;||CAST(XMLTEXT(TRIM(NVL(columnAnnotation,&apos;  &apos;))) AS LONGVARCHAR)||&apos;&lt;/resource:annotation&gt;&apos;||NEWLINE||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&#x9;&#x9;&lt;/resource:column&gt;&apos;||NEWLINE;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Report on all new columns with a status of [FOUND]
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set duration = CURRENT_TIMESTAMP - viewStartTime;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set colDuration = CURRENT_TIMESTAMP - columnStartTime;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debugTime = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debugTime,&apos;row=&apos;||colNum||&apos;,   NEW: incremental duration=&apos;||cast(duration as varchar)||&apos;  colDuration=&apos;||cast(colDuration as varchar)||&apos;  resourceName=&apos;||logicalColumnName);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (outputMode = &apos;A&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--------- INSERT ---------
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INSERT INTO result VALUES(datasourceNameList, inProjectFolderName, greatGrandParentName, grandParentName, parentName, containerName, &apos;&apos;, newColumnTransformation, newColumnName, newColumnType, &apos;GENERATED&apos;, targetFolderPath||&apos;/&apos;||NVL(containerName,&apos;null&apos;), duration);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF; -- IF (dropColumn = 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF; -- IF (newColumnName IS NOT NULL AND newColumnType IS NOT NULL AND newColumnValue IS NOT NULL) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END FOR; -- FOR c AS
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF; -- IF (generateMode = &apos;G&apos; AND newColumnList IS NOT NULL AND LENGTH(TRIM(newColumnList)) &gt; 0) THEN


&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**************************************************************************
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; * If Retrieval is on, get the list of &quot;NEW&quot; columns from the spreadsheet
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; **************************************************************************/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/* 2016-08-31 mtinius: 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Retrieval of spreadsheet columns is not required when generateViews=2
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;since there is no projection of columns when doing SELECT * mode.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Added &quot;AND generateViews = 1&quot; to the IF THEN statement.&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;*/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (generateMode = &apos;R&apos; AND generateViews = 1) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/retrieveName/retrieveNewColumnList(inProjectFolderName, greatGrandParentName, grandParentName, parentName, containerName, debug3, newColumnListCursor);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FOR newColumn AS newColumnListCursor DO
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/*&#x9;OUT resultCursor&#x9;CURSOR (
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;datasourceName &#x9;&#x9;&#x9;VARCHAR(255), 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;projectFolderName &#x9;&#x9;VARCHAR(255), 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;greatGrandParentName &#x9;VARCHAR(255), 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;grandParentName &#x9;&#x9;VARCHAR(255), 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;parentName &#x9;&#x9;&#x9;&#x9;VARCHAR(255), 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;containerName &#x9;&#x9;&#x9;VARCHAR(255), 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resourceName &#x9;&#x9;&#x9;VARCHAR(255),
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resourceNum&#x9;&#x9;&#x9;&#x9;INTEGER, 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;logicalName &#x9;&#x9;&#x9;VARCHAR(255), &#x9;&#x9;x
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;logicalType &#x9;&#x9;&#x9;VARCHAR(255), &#x9;&#x9;x
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;annotation &#x9;&#x9;&#x9;&#x9;VARCHAR(32767), &#x9;x
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;logicalTransformation &#x9;VARCHAR(32767),&#x9;&#x9;x
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resourceNameEncoded&#x9;&#x9;VARCHAR(255)    )
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;*/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Set the start time for the column
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set columnStartTime = CURRENT_TIMESTAMP;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Increment the column number
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set colNum = colNum + 1;
 &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Replace symbols on the annotation
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/BestPractices_v81/Procedures/retrieveName/replaceSymbol(&apos;F&apos;, newColumn.annotation, spreadsheetAnnotation);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Apply the reserved word to the logical column name
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord(newColumn.logicalName, null, logicalColumnName);

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- mtinius: 2013/10/03
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Determine if a column alias or column name is a duplicate.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Append a sequential numerical value to the end of the alias &quot;logicalColumnName&quot; that is returned.
--call print(&apos;&apos;);
--call print(&apos;Retrieve New Column List: &apos;);
--call print(&apos;checkDuplicateColumn IN: columnListStr=&apos;||columnListStr);
--call print(&apos;checkDuplicateColumn IN: logicalColumnName=&apos;||logicalColumnName);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/checkDuplicateColumn(columnListStr, null, logicalColumnName, columnListStr, logicalColumnName, dropColumn);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord(logicalColumnName, null, logicalColumnName);
--call print(&apos;checkDuplicateColumn OUT: columnListStr=&apos;||columnListStr);
--call print(&apos;checkDuplicateColumn OUT: logicalColumnName=&apos;||logicalColumnName);

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Format the SELECT statement so that each column is on it&apos;s own line
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET selectScript = selectScript||TAB|| newColumn.logicalTransformation ||&apos; &apos;|| logicalColumnName ||&apos;,&apos;||NEWLINE;&#x9;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Determine whether to copy the annotation or not.  Set to empty if user decides not to copy the annotation
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set columnAnnotation = spreadsheetAnnotation;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (copyAnnotation = 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set columnAnnotation = &apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--call print(&apos;columnAnnotation=&apos;||CAST(XMLTEXT(NVL(columnAnnotation,&apos;null&apos;)) AS LONGVARCHAR));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--call print(&apos;spreadsheetAnnotation=&apos;||CAST(XMLTEXT(NVL(spreadsheetAnnotation,&apos;null&apos;)) AS LONGVARCHAR));

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set createInputColumns = createInputColumns ||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&#x9;&#x9;&lt;resource:column&gt;&apos;||NEWLINE||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;resource:name&gt;&apos;||CAST(XMLTEXT(TRIM(NVL(logicalColumnName,&apos;  &apos;))) AS LONGVARCHAR)||&apos;&lt;/resource:name&gt;&apos;||NEWLINE;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (logicalType IS NOT NULL AND LENGTH(&apos;|&apos;||logicalType||&apos;|&apos;) &gt; 2) then  --notEmpty
--&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (isEmpty(logicalType) = notEmpty) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set createInputColumns = createInputColumns ||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;resource:dataType&gt;&apos;||NEWLINE||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;common:sqlType xmlns:common=&quot;http://www.compositesw.com/services/system/util/common&quot;&gt;&apos;||NEWLINE||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;common:definition&gt;&apos;||CAST(XMLTEXT(TRIM(NVL(newColumn.logicalType,&apos;  &apos;))) AS LONGVARCHAR)||&apos;&lt;/common:definition&gt;&apos;||NEWLINE||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/common:sqlType&gt;&apos;||NEWLINE||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/resource:dataType&gt;&apos;||NEWLINE;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set createInputColumns = createInputColumns ||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;resource:annotation&gt;&apos;||CAST(XMLTEXT(TRIM(NVL(columnAnnotation,&apos;  &apos;))) AS LONGVARCHAR)||&apos;&lt;/resource:annotation&gt;&apos;||NEWLINE||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&#x9;&#x9;&lt;/resource:column&gt;&apos;||NEWLINE;


&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug3 = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;RPAD(&apos;RESOURCE=[&apos;|| NVL(containerName,&apos;null&apos;)||&apos;]&apos;,padAmount,padChar) ||&apos;  &apos;||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;RPAD(&apos;COLUMN=[&apos;||NVL(newColumn.logicalTransformation,&apos;null&apos;)||&apos;]&apos;,padAmount,padChar) || &apos;  &apos;||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;RPAD(&apos;LOGICAL COL=[&apos;||NVL(logicalColumnName,&apos;null&apos;)||&apos;]&apos;,padAmount,padChar) || 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;RPAD(&apos;LOGICAL TYPE=[&apos;||NVL(newColumn.logicalType,&apos;null&apos;)||&apos;]&apos;,padAmount,padChar) || 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;STATUS=[&apos;||NVL(logicalStatus,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Report on all new columns with a status of [FOUND]
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set duration = CURRENT_TIMESTAMP - viewStartTime;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set colDuration = CURRENT_TIMESTAMP - columnStartTime;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debugTime = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debugTime,&apos;row=&apos;||colNum||&apos;,   NEW: incremental duration=&apos;||cast(duration as varchar)||&apos;  colDuration=&apos;||cast(colDuration as varchar)||&apos;  resourceName=&apos;||logicalColumnName);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (outputMode = &apos;A&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--------- INSERT ---------
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INSERT INTO result VALUES(datasourceNameList, inProjectFolderName, greatGrandParentName, grandParentName, parentName, containerName, columnType, newColumn.logicalTransformation, logicalColumnName, newColumn.logicalType, &apos;FOUND&apos;, targetFolderPath||&apos;/&apos;||NVL(containerName,&apos;null&apos;), duration);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END FOR;    
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/* 2016-08-31 mtinius: 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Moved his block of code to occur outside the LENGTH(selectScript) so that generateViews=2
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mode is forced to override the selectScript and perform the resource creation.&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;*/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Update the SQL Table View with the corresponding View SQL to map to the physical Table
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--     1=[default] Do generate - Perform the VIEW Generation with a column projection, 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--     2=          Do generate - Perform the VIEW Generation with a select * projection, 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (generateViews = 1 AND LENGTH(selectScript) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- remove the last comma in the string
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET continueLoop = true;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHILE (continueLoop) DO
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET selectScript = TRIM(selectScript);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET lastChar = SUBSTRING(selectScript,LENGTH(selectScript),1);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (lastChar = LF OR lastChar = CR OR lastChar = &apos;,&apos;) THEN 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET selectScript = SUBSTRING(selectScript,1,LENGTH(selectScript)-1);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET continueLoop = false;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END WHILE;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET selectScript = &apos;SELECT &apos;|| defaultVariableScript || NEWLINE || TAB || selectScript || &apos; &apos; || NEWLINE || fromScript;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (generateViews = 2) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET selectScript = &apos;SELECT * &apos; || NEWLINE || fromScript;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Make sure there is something to select before creating the view
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET createResourceStartTime = CURRENT_TIMESTAMP;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (LENGTH(selectScript) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug2 = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Log all of the interesting variables
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug2,&apos;targetResourcePath=&apos;||targetResourcePath);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug2,&apos;  targetFolderPath=&apos;||targetFolderPath);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug2,&apos;targetResourceName=&apos;||targetResourceName);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug2,&apos;       logicalType=TABLE&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug3 = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3,&apos;  selectScript SQL=&apos;||REPLACE(selectScript, CHR(10), &apos; &apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3,&apos;    viewAnnotation=&apos;||TRIM(NVL(viewAnnotation,&apos; &apos;)));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

/* 2016-08-31 mtinius: commented out - moved block of code up
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- remove the last comma in the string
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET continueLoop = true;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHILE (continueLoop) DO
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET selectScript = TRIM(selectScript);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET lastChar = SUBSTRING(selectScript,LENGTH(selectScript),1);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (lastChar = LF OR lastChar = CR OR lastChar = &apos;,&apos;) THEN 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET selectScript = SUBSTRING(selectScript,1,LENGTH(selectScript)-1);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET continueLoop = false;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END WHILE;
*/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Generate the views
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (generateViews &gt;= 1) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Create all non-existent folders and copy the privileges from the parent of the targetFolderPath
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Be sure and update the folders recursively for privileges
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/repository/createAllFoldersPrivileges(targetFolderPath, 1, copyPrivilegeMode, success, faultResponse); -- Generate all necessary folders

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Create the resource if it does not exist
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /lib/resource/ResourceExists(targetResourcePath, &apos;TABLE&apos;, null, resourceExists);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--call print(&apos;targetResourcePath=&apos;||targetResourcePath||&apos;  resourceExists=&apos;||resourceExists);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (NOT resourceExists) THEN&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Create a new SQL Table View in the folder
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/repository/createResource(targetFolderPath, targetResourceName, &apos;TABLE&apos;, &apos;SQL_TABLE&apos;, success, createResponse, faultResponse); 
/* 2016-08-31 mtinius: commented out
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Update the SQL Table View with the corresponding View SQL to map to the physical Table
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--     1=[default] Do generate - Perform the VIEW Generation with a column projection, 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--     2=          Do generate - Perform the VIEW Generation with a select * projection, 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (generateViews = 1) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET selectScript = &apos;SELECT &apos;|| defaultVariableScript || NEWLINE || TAB || selectScript || &apos; &apos; || NEWLINE || fromScript;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (generateViews = 2) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET selectScript = &apos;SELECT * &apos; || NEWLINE || fromScript;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3,&apos;selectScript SQL=&apos;||selectScript);
*/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Create the XML input for the SQL Script body
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET createInputBody = 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&#x9;&lt;/resource:columns&gt;&apos;||NEWLINE||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&#x9;&lt;resource:tableType&gt;VIEW&lt;/resource:tableType&gt;&apos;||NEWLINE||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&#x9;&lt;resource:explicitlyDesigned&gt;false&lt;/resource:explicitlyDesigned&gt;&apos;||NEWLINE||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&#x9;&lt;resource:sqlText&gt;&apos;||CAST(XMLTEXT(selectScript) AS LONGVARCHAR)||&apos;&lt;/resource:sqlText&gt;&apos;||NEWLINE||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&#x9;&lt;resource:sqlIndexes&gt;&apos;||NEWLINE;

/*
call print(&apos;createInputBegin=&apos;||NVL(createInputBegin,&apos;null&apos;));
call print(&apos;createInputColumns=&apos;||NVL(createInputColumns,&apos;null&apos;));
call print(&apos;createInputBody=&apos;||NVL(createInputBody,&apos;null&apos;));
call print(&apos;createInputIndexes=&apos;||NVL(createInputIndexes,&apos;null&apos;));
call print(&apos;createInputEnd=&apos;||NVL(createInputEnd,&apos;null&apos;));
*/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Create the XML input for the SQL Script body
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET createInput = createInputBegin || createInputColumns || createInputBody || createInputIndexes || createInputEnd;
--set debug3 = &apos;Y&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug3 = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;CREATE RESOURCE:&apos;||CHR(10)||createInput);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--Replace XML carriage return/line feed with a space
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (POSITION(&apos;&amp;#xd;&apos; IN createInput) &gt; 0 or POSITION(&apos;&amp;#xD&apos; IN createInput) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--call print(&apos;********************* FOUND: XML Carriage Return representation.&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set createInput = TRIM(REPLACE(REPLACE(createInput,&apos;&amp;#xd;&apos;,&apos; &apos;),&apos;&amp;#xD;&apos;,&apos; &apos;)); -- XML Carriage Return representation
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (POSITION(&apos;&amp;#xa;&apos; IN createInput) &gt; 0 or POSITION(&apos;&amp;#xA&apos; IN createInput) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--call print(&apos;********************* FOUND: XML Line Feed representation.&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set createInput = TRIM(REPLACE(REPLACE(createInput,&apos;&amp;#xa;&apos;,&apos; &apos;),&apos;&amp;#xA;&apos;,&apos; &apos;)); -- XML Line Feed representation
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/***************************
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; * updateResources
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; ***************************/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /services/webservices/system/admin/resource/operations/updateResources(createInput, createResponse, faultResponse);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (faultResponse is not null) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;raise ex value CAST(faultResponse AS LONGVARCHAR);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Update the resource privileges
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (updatePrivilegesRecursively is not null and copyPrivilegeMode is not null and copyPrivilegeMode = 1) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set copyPrivilegeEntry = 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;  &lt;resource:copyPrivilegeEntry&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;    &lt;resource:srcResource&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;      &lt;resource:path&gt;&apos; || CAST(XMLTEXT(targetFolderPath) AS LONGVARCHAR) || &apos;&lt;/resource:path&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;      &lt;resource:type&gt;CONTAINER&lt;/resource:type&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;    &lt;/resource:srcResource&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;    &lt;resource:dstResource&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;      &lt;resource:path&gt;&apos; || CAST(XMLTEXT(targetResourcePath) AS LONGVARCHAR) || &apos;&lt;/resource:path&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;      &lt;resource:type&gt;TABLE&lt;/resource:type&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;    &lt;/resource:dstResource&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;  &lt;/resource:copyPrivilegeEntry&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&apos;;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Invoke the copyResourcesPrivileges procedure
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/copyResourcesPrivilegesV2(
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;updatePrivilegesRecursively, copyPrivilegeMode, copyPrivilegeEntry, success, faultResponse);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (faultResponse is not null) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;raise ex value CAST(faultResponse AS LONGVARCHAR);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- 0=&quot;FAIL_IF_EXISTS&quot;=do not overwrite the resource.  If the resource exists, raise an exception.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (overwrite = 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;raise ex value &apos;Operation not permitted.  Overwrite=0 (false) and the resource exists: &apos;||targetResourcePath;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- 1=&quot;SKIP_IF_EXISTS&quot;=skip the resource if it exists and continue processing
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (overwrite = 1) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- DO NOTHING, JUST KEEP PROCESSING
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- 2=&quot;OVERWRITE_IF_EXISTS&quot;=do overwrite the resource if it exists.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (overwrite = 2) THEN
/* 2016-08-31 mtinius: commented out
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Update the SQL Table View with the corresponding View SQL to map to the physical Table
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (generateViews = 1) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET selectScript = &apos;SELECT &apos;|| defaultVariableScript || NEWLINE || TAB || selectScript || &apos; &apos; || NEWLINE || fromScript;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (generateViews = 2) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET selectScript = &apos;SELECT * &apos; || NEWLINE || fromScript;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3,&apos;  selectScript SQL=&apos;||selectScript);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3,&apos;targetResourcePath=&apos;||targetResourcePath);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3,&apos;    viewAnnotation=&apos;||viewAnnotation);
*/

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set createInputBody = 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&#x9;&lt;/resource:columns&gt;&apos;||NEWLINE||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&#x9;&lt;resource:tableType&gt;VIEW&lt;/resource:tableType&gt;&apos;||NEWLINE||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&#x9;&lt;resource:explicitlyDesigned&gt;false&lt;/resource:explicitlyDesigned&gt;&apos;||NEWLINE||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&#x9;&lt;resource:sqlText&gt;&apos;||CAST(XMLTEXT(selectScript) AS LONGVARCHAR)||&apos;&lt;/resource:sqlText&gt;&apos;||NEWLINE||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;&#x9;&lt;resource:sqlIndexes&gt;&apos;||NEWLINE;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET createInput = createInputBegin || createInputColumns || createInputBody || createInputIndexes || createInputEnd;
--set debug3 = &apos;Y&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug3 = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;UPDATE RESOURCE:&apos;||CHR(10)||createInput);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
--set debug3 = &apos;N&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--Replace XML carriage return/line feed with a space
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (POSITION(&apos;&amp;#xd;&apos; IN createInput) &gt; 0 or POSITION(&apos;&amp;#xD&apos; IN createInput) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--call print(&apos;********************* FOUND: XML Carriage Return representation.&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set createInput = TRIM(REPLACE(REPLACE(createInput,&apos;&amp;#xd;&apos;,&apos; &apos;),&apos;&amp;#xD;&apos;,&apos; &apos;)); -- XML Carriage Return representation
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (POSITION(&apos;&amp;#xa;&apos; IN createInput) &gt; 0 or POSITION(&apos;&amp;#xA&apos; IN createInput) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--call print(&apos;********************* FOUND: XML Line Feed representation.&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set createInput = TRIM(REPLACE(REPLACE(createInput,&apos;&amp;#xa;&apos;,&apos; &apos;),&apos;&amp;#xA;&apos;,&apos; &apos;)); -- XML Line Feed representation
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/***************************
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; * updateResources
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; ***************************/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /services/webservices/system/admin/resource/operations/updateResources(createInput, createResponse, faultResponse);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (faultResponse is not null) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;raise ex value CAST(faultResponse AS LONGVARCHAR);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Update the resource privileges
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (updatePrivilegesRecursively is not null and copyPrivilegeMode is not null and copyPrivilegeMode = 1) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set copyPrivilegeEntry = 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;  &lt;resource:copyPrivilegeEntry&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;    &lt;resource:srcResource&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;      &lt;resource:path&gt;&apos; || CAST(XMLTEXT(targetFolderPath) AS LONGVARCHAR) || &apos;&lt;/resource:path&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;      &lt;resource:type&gt;CONTAINER&lt;/resource:type&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;    &lt;/resource:srcResource&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;    &lt;resource:dstResource&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;      &lt;resource:path&gt;&apos; || CAST(XMLTEXT(targetResourcePath) AS LONGVARCHAR) || &apos;&lt;/resource:path&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;      &lt;resource:type&gt;TABLE&lt;/resource:type&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;    &lt;/resource:dstResource&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;  &lt;/resource:copyPrivilegeEntry&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&apos;;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Invoke the copyResourcesPrivileges procedure
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/copyResourcesPrivilegesV2(
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;updatePrivilegesRecursively, copyPrivilegeMode, copyPrivilegeEntry, success, faultResponse);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (faultResponse is not null) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;raise ex value CAST(faultResponse AS LONGVARCHAR);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE -- otherwise just report on what would happen if you were generating the views
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug3 = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /lib/resource/ResourceExists(targetFolderPath, &apos;CONTAINER&apos;, null, resourceExists);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (resourceExists) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug3 = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3,&apos;CREATE Target Folders=&apos;||targetFolderPath);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /lib/resource/ResourceExists(targetResourcePath, &apos;TABLE&apos;, null, resourceExists);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (resourceExists) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug3 = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3,&apos;CREATE SQL TABLE=&apos;||targetResourceName);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug3 = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3,&apos;UPDATE SQL TABLE=&apos;||targetResourceName);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug2 = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug2,&apos;The following resource will **NOT** be created due to all columns DROPPED.&apos;);&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug2,&apos;targetResourcePath=&apos;||targetResourcePath);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug2,&apos;  targetFolderPath=&apos;||targetFolderPath);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug2,&apos;targetResourceName=&apos;||targetResourceName);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug2,&apos;       logicalType=TABLE&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET duration = CURRENT_TIMESTAMP - createResourceStartTime;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debugTime = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debugTime,&apos;create/update resource duration=&apos;||cast(duration as varchar)||&apos;  resourceName=&apos;||list.name);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
/**********************************
 * CODE END from generateViewsCommon
 **********************************/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;EXCEPTION
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;raise ex value CAST(CURRENT_EXCEPTION.TRACE AS LONGVARCHAR);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END;


&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/****************************************************************************************
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; * Determine if the target resource that was just created is impacted and try to fix it.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; ***************************************************************************************/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET impactedStartTime = CURRENT_TIMESTAMP;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (childResCursorProcessed and targetResourcePath is not null) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/updateImpactedResource(debug2, targetResourcePath, targetResourceType, success, impactMessage);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (success = 0 and impactMessage is not null) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;raise ex value impactMessage;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF; 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET duration = CURRENT_TIMESTAMP - impactedStartTime;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debugTime = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debugTime,&apos;update impacted resource duration=&apos;||cast(duration as varchar)||&apos;  resourceName=&apos;||list.name);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;EXCEPTION
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;ERROR updateImpactedResource:  &apos;||NVL(CAST(CURRENT_EXCEPTION.TRACE AS LONGVARCHAR),&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set duration = CURRENT_TIMESTAMP - columnStartTime;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debugTime = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debugTime,&apos;retrieve new rows duration=&apos;||cast(duration as varchar)||&apos;  resourceName=&apos;||list.name);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set duration = CURRENT_TIMESTAMP - viewStartTime;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debugTime = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debugTime, &apos;overall view processing duration=&apos;||cast(duration as varchar)||&apos;  resourceName=&apos;||list.name||NEWLINE);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF; -- IF (isDerivedPathMatch() = 1)
&#x9;&#x9;&#x9;&#x9;END IF; --IF (list.resType = &apos;TABLE&apos; or list.resType = &apos;PROCEDURE&apos;) THEN
&#x9;&#x9;&#x9;END FOR; -- FOR list AS  
&#x9;&#x9;  END IF; -- if (resourceType is not null) THEN
&#x9;&#x9;END IF;-- IF (startingFolderExtendedRec.process = 1) THEN
&#x9;&#x9;SET sfNum = sfNum + 1;
&#x9;END WHILE;

&#x9;set duration = CURRENT_TIMESTAMP - generationStartTime;
&#x9;if (debugTime = &apos;Y&apos;) then
&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debugTime,&apos;View Generation Complete: duration=&apos;||cast(duration as varchar));
&#x9;end if;

&#x9;INSERT INTO result VALUES(&apos;View Generation Complete&apos;, &apos;&apos;, &apos;&apos;, &apos;&apos;, &apos;&apos;, &apos;&apos;, &apos;&apos;, &apos;&apos;, &apos;&apos;, &apos;&apos;, &apos;&apos;, &apos;&apos;, duration);
&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;---VIEW GENERATION IS COMPLETE---&apos;);&#x9;
&#x9;end if;
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1564599498273</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="p:5:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="p:6:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="references" type="NULL"/>
</metadata>