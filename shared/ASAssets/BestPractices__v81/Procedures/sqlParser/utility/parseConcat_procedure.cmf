<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:9a66723c-3693-47f1-a1f0-d7811996f9d5 -->
<metadata name="parseConcat" path="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/parseConcat" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>&lt;![CDATA[
&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

]]&gt;</annotation>
  <parameters>
    <parameter name="inColumnExpression" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="concatVect" direction="OUT" nullable="true">
      <datatype name="concatVect" type="ARRAY" maxLength="0">
        <itemDatatype>
          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
        </itemDatatype>
      </datatype>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/numOccurrences" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="searchString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inStringToSearch" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="num" direction="OUT">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/_ProjectMaintenance/defaultValues" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/log/logDebugMessage" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="moduleName" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="moduleNameType" type="STRING" maxLength="4096"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="messageText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/*
&#x9;parseConcat - parse the column expression to determine if the expression is primarily a concat (expr1 || expr2 || expr3)
&#x9;EXAMPLES:
&#x9;&#x9;concat=1 :: x||y
&#x9;&#x9;concat=1 :: func(x) || func(y)
&#x9;&#x9;concat=0 :: func(x||func(y||z))
&#x9;&#x9;concat=1 :: func(x||func(y||z)) || funct(a||b)
&#x9;&#x9;concat=0 :: case w||x when 1 then 2 else y||z end
&#x9;&#x9;concat=1 :: case w||x when 1 then 2 else y||z end || case a||b when 1 then 2 else c||d end
&#x9;&#x9;concat=1 :: case x||y when 1 then 2 else 3 end || func(case x||y when 1 then 2 else 3 end)||funct(c||d)

&#x9;IN
&#x9;&#x9;inColumnExpression - the incoming column expression
&#x9;OUT
&#x9;&#x9;concatVect - Vector of concatentation parts

&#x9;Exceptions:  none

&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;CSW Version:&#x9;Reason:
&#x9;11/11/2011&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.2.0&#x9;&#x9;&#x9;Created new
&#x9;03/15/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.2.0&#x9;&#x9;&#x9;Modifications for Best Practices 7.0
&#x9;06/24/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.0.0&#x9;&#x9;&#x9;7.2: Multiple instances of Best Practices supported
&#x9;04/15/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;B.P. 2019.200: Added scriptsPath for flexibility of the location of the _scripts folder.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   Changed custom functions to explicit paths.

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

*/
PROCEDURE parseConcat(
&#x9;IN&#x9;inColumnExpression&#x9;LONGVARCHAR, -- The column text to pars
&#x9;OUT concatVect&#x9;&#x9;&#x9;VECTOR(LONGVARCHAR)
)
BEGIN
&#x9;DECLARE moduleName&#x9;&#x9;VARCHAR DEFAULT &apos;parseConcat&apos;;
&#x9;DECLARE debug&#x9;&#x9;&#x9;CHAR(1) DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.debugSqlParser3;
&#x9;DECLARE columnExpression LONGVARCHAR DEFAULT TRIM(inColumnExpression);
&#x9;DECLARE numVect&#x9;&#x9;&#x9;INTEGER DEFAULT 0;
&#x9;DECLARE exprLen&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE ch&#x9;&#x9;&#x9;&#x9;CHAR(1);
&#x9;DECLARE word&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;&apos;;
&#x9;DECLARE separators&#x9;&#x9;VARCHAR DEFAULT &apos; ()|,&apos;;
&#x9;DECLARE i &#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE caseEndPos&#x9;&#x9;INTEGER DEFAULT 0;
&#x9;DECLARE numCaseBeg&#x9;&#x9;INTEGER DEFAULT 0;
&#x9;DECLARE numCaseEnd&#x9;&#x9;INTEGER DEFAULT 0;
&#x9;DECLARE numLeftParen&#x9;INTEGER DEFAULT 0;
&#x9;DECLARE numRightParen&#x9;INTEGER DEFAULT 0;
&#x9;DECLARE numConcat&#x9;&#x9;INTEGER DEFAULT 0;
&#x9;DECLARE lastConcatPos&#x9;INTEGER DEFAULT 1;
&#x9;DECLARE quote&#x9;&#x9;&#x9;INTEGER DEFAULT 0; -- 0=off, 1=on -- quotes come in pairs so turn on when 1st one found and turn off when second one found.  Everything in between is ignored.
&#x9;DECLARE concatFound&#x9;&#x9;INTEGER;

&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/numOccurrences(&apos;||&apos;,columnExpression, numConcat);
&#x9;set concatFound = 0;
&#x9;set concatVect = VECTOR[null];

&#x9;IF (numConcat &gt; 0) THEN
&#x9;&#x9;-- Initialize all occurrences of &apos;||||&apos; to &apos;||&apos; until there are no more duplicates
&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/numOccurrences(&apos;||||&apos;, columnExpression, numConcat);
&#x9;&#x9;WHILE (numConcat &gt; 0) DO
&#x9;&#x9;&#x9;set columnExpression = REPLACE(columnExpression, &apos;||||&apos;, &apos;||&apos;);
&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/numOccurrences(&apos;||||&apos;, columnExpression, numConcat);
&#x9;&#x9;END WHILE;

&#x9;&#x9;-- Start the normal processing
&#x9;&#x9;set i = 1;
&#x9;&#x9;set exprLen = LENGTH(columnExpression);
&#x9;&#x9;WHILE (i &lt;= exprLen) DO
&#x9;&#x9;&#x9;set ch = SUBSTRING(columnExpression,i,1);
&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;ch=[&apos;||ch||&apos;]&apos;);
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;-- When a single quote is found turn off processing until the end quote is found.  Nothing should be processed in between quotes
&#x9;&#x9;&#x9;IF (ch = &apos;&apos;&apos;&apos;) THEN
&#x9;&#x9;&#x9;&#x9;IF (quote = 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;set quote = 1;
&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;set quote = 0;
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;-- Keep processing if not a quote
&#x9;&#x9;&#x9;IF (quote = 0) THEN
&#x9;&#x9;&#x9;&#x9;-- If a separator is found then detect whether a CASE/END statment has been found
&#x9;&#x9;&#x9;&#x9;IF (POSITION(ch IN separators) &gt; 0 OR ch = chr(13) or ch = chr(11) or i = exprLen) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;IF (i = exprLen) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set word = word || ch;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;IF (TRIM(UPPER(word)) = &apos;CASE&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set numCaseBeg = numCaseBeg + 1;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;IF (TRIM(UPPER(word)) = &apos;END&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set numCaseEnd = numCaseEnd + 1;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (numCaseBeg = numCaseEnd) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set numCaseBeg = 0;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set numCaseEnd = 0;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;word=[&apos;||word||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;set word = &apos;&apos;;
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;-- Look for functions and concat pipes &apos;||&apos;
&#x9;&#x9;&#x9;&#x9;CASE ch
&#x9;&#x9;&#x9;&#x9;&#x9;WHEN &apos;(&apos; THEN 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set numLeftParen = numLeftParen + 1;
&#x9;&#x9;&#x9;&#x9;&#x9;WHEN &apos;)&apos; THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set numRightParen = numRightParen + 1;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Reset the function parenthesis count when they are equal.  Equal opening and closing pairs have been found.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (numLeftParen = numRightParen) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set numLeftParen = 0;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set numRightParen = 0;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;WHEN &apos;|&apos; THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (SUBSTRING(columnExpression,i+1,1) = &apos;|&apos;) THEN&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set numConcat = numConcat + 1;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;isConcat:: ch=[&apos;||NVL(ch,&apos;null&apos;)||&apos;]  i=&apos;||i||&apos;  lastConcatPos=&apos;||lastConcatPos||&apos;  numLeftParen=&apos;||numLeftParen||&apos;  numRightParen=&apos;||numRightParen);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;isConcat:: ch=[&apos;||NVL(ch,&apos;null&apos;)||&apos;]  i=&apos;||i||&apos;  lastConcatPos=&apos;||lastConcatPos||&apos;  numCaseBeg=&apos;||numCaseBeg||&apos;  numCaseEnd=&apos;||numCaseEnd);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (numLeftParen=0 AND numRightParen=0 AND numCaseBeg = 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;parseConcat:: pattern found (concat w/function): [expr1 || expr2]&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set concatFound = 1;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set numVect = numVect + 1;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set concatVect[numVect] = SUBSTRING(columnExpression,lastConcatPos,i-lastConcatPos);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set concatVect = extend(concatVect,1);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set lastConcatPos = i + 2;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSEif (numCaseBeg=0 AND numCaseEnd=0 AND numLeftParen=0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;parseConcat:: pattern found (concat w/case): [expr1 || expr2]&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set concatFound = 1;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set numVect = numVect + 1;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set concatVect[numVect] = TRIM(SUBSTRING(columnExpression,lastConcatPos,i-lastConcatPos));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set concatVect = extend(concatVect,1);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set lastConcatPos = i + 2;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set word = word || ch;
&#x9;&#x9;&#x9;&#x9;END CASE;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;set i = i + 1;
&#x9;&#x9;END WHILE;
&#x9;END IF;
&#x9;IF (concatFound &gt; 0) THEN
&#x9;&#x9;set numVect = numVect + 1;
&#x9;&#x9;set concatVect[numVect] = TRIM(SUBSTRING(columnExpression,lastConcatPos,i-lastConcatPos));
&#x9;&#x9;set concatVect = extend(concatVect,1);
&#x9;END IF;
&#x9;set concatVect = truncate(concatVect,1);

END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1554898129804</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="p:1:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="references" type="NULL"/>
</metadata>