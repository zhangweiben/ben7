<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:e931daa6-7fda-456a-badf-4cdb1c228a1a -->
<metadata name="getCodedString" path="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedString" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>&lt;![CDATA[
&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

]]&gt;</annotation>
  <parameters>
    <parameter name="inCodingType" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="inEncodingActions" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="codingList" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="inString" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="inModuleNameInvoking" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="inDebug" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="inStringName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="outString" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/encodedValues" type="DEFINITION_SET">
    <datatype name="Tree" type="TREE" refId="257"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/_ProjectMaintenance/defaultValues" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/log/logDebugMessage" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="moduleName" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="moduleNameType" type="STRING" maxLength="4096"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="messageText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/TextUtils/RegexReplace" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="Input Text" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Regular Expression" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Replacement Text" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Occurrence" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/extractDelimitedText" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inputString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="delimiter" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="occurrence" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="reverseInputText" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="reverseOutput" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="trimText" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="includeDelimiter" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="object">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/*
&#x9;getCodedString - Perform encoding or decoding of special characters within double quoted, single quoted or parenthesis pair strings

&#x9;Input:
&#x9;&#x9;codingType&#x9;&#x9;- The type of coding to perform. E=encode special characters, D=decode special characters
&#x9;&#x9;&#x9;e.g. when codingType=E then encode from /a/b/&quot;1_002e3_0020c&quot;/&quot;_0020d_0020&quot;/&quot;1_002c2_0021&quot;/&quot;_0020_0021_0020_0025_0020_0028_0020_0029_0020_002a_0020_002b_0020_002d_0020_002f_0020&quot;
&#x9;&#x9;&#x9;e.g. when codingType=D then decode from /a/b/&quot;1.3 c&quot;/&quot; d &quot;/&quot;1,2!&quot;/&quot; ! % ( ) * + - / &quot;
&#x9;&#x9;encodingAction&#x9;- A directive on which action to take. 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;P=encode/decode between Parenthesis, 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;D=encode/decode between double quotes, 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;S=encode/decode between single quotes, 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;null when codingType=D (this parameter is ignored)
&#x9;&#x9;codingList&#x9;&#x9;- A comma separate list of encoded values to encode or decode.  e.g. _0020,_002c,_002e
&#x9;&#x9;inString&#x9;&#x9;- The string to encode or decode
&#x9;Output:
&#x9;&#x9;outString&#x9;&#x9;- The resulting string
&#x9;Exceptions:  none

&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;CSW Version:&#x9;Reason:
&#x9;10/28/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.2.0&#x9;&#x9;&#x9;8.0: new.  Perform a string encode or decode of special characters
&#x9;11/20/2014&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.2.6&#x9;&#x9;&#x9;8.1.5: Added implementation for DECODE to recognize encodingActions=P,D,S
&#x9;04/15/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;B.P. 2019.200: Added scriptsPath for flexibility of the location of the _scripts folder.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   Changed custom functions to explicit paths.

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

*/
PROCEDURE getCodedString(
&#x9;IN  inCodingType&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1),&#x9;-- The type of coding to perform. E=encode special characters, D=decode special characters
&#x9;IN  inEncodingActions&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;-- A directive on which action to take.  A space or comma separated list of directives below:
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   P=encode/decode between Parenthesis
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   D=encode/decode between double quotes
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   S=encode/decode between single quotes
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   N=encode/decode anywhere in the string
&#x9;IN  codingList&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;-- A comma separate list of encoded values to encode or decode.  e.g. _0020,_002c,_002e
&#x9;IN  inString&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR,-- The string to encode or decode
&#x9;IN  inModuleNameInvoking&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;-- The module from which this script is being invoked.
&#x9;IN  inDebug&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1),&#x9;-- Debug: Y or N
&#x9;IN  inStringName&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;-- The name or type of inString being encoded/decoded to be used for debugging purposes.
&#x9;OUT outString&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR -- The resulting string
)
BEGIN
&#x9;DECLARE moduleName&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;getCodedString&apos;;
&#x9;DECLARE debug&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1) DEFAULT inDebug;
&#x9;DECLARE codingType&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1) DEFAULT UPPER(inCodingType);
&#x9;DECLARE encodingActions&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT UPPER(inEncodingActions);
&#x9;DECLARE moduleNameInvoking&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT NVL(inModuleNameInvoking,&apos;null&apos;);
&#x9;DECLARE newline&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.newline;
&#x9;DECLARE regexSize&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.regexSize;
&#x9;DECLARE encodingAction&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1); -- P D S
&#x9;DECLARE actualValue&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE codedValue&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE escapeValueList&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;&quot;&quot;$^\&apos;&apos;&apos;;
&#x9;-- Append the actual value to this string.  This is not the encoded value.
&#x9;-- encodingAction=P
&#x9;DECLARE regexReplacePatternParentheses&#x9;VARCHAR DEFAULT &apos;(?=[^()]{0,&apos;||regexSize||&apos;}\))&apos;;
&#x9;-- encodingAction=DQ
&#x9;DECLARE regexReplacePatternDoubleQuote &#x9;VARCHAR DEFAULT &apos;(?=[^&quot;]{0,&apos;||regexSize||&apos;}&quot;(?:[^&quot;\r\n]{0,&apos;||regexSize||&apos;}&quot;[^&quot;]{0,&apos;||regexSize||&apos;}&quot;){0,&apos;||regexSize||&apos;}[^&quot;\r\n]{0,&apos;||regexSize||&apos;}$)&apos;;
&#x9;-- encodingAction=SQ
&#x9;DECLARE regexReplacePatternSingleQuote &#x9;VARCHAR DEFAULT &apos;(?=[^&apos;&apos;]{0,&apos;||regexSize||&apos;}&apos;&apos;(?:[^&apos;&apos;\r\n]{0,&apos;||regexSize||&apos;}&apos;&apos;[^&apos;&apos;]{0,&apos;||regexSize||&apos;}&apos;&apos;){0,&apos;||regexSize||&apos;}[^&apos;&apos;\r\n]{0,&apos;||regexSize||&apos;}$)&apos;;
&#x9;DECLARE regexPattern&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE startTime&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;TIMESTAMP DEFAULT CURRENT_TIMESTAMP;
&#x9;DECLARE duration&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INTERVAL MINUTE TO SECOND;
&#x9;DECLARE seconds&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DECIMAL(32,3);
&#x9;DECLARE debugTime&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1) DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.debugTime;
&#x9;DECLARE defaultActionType&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;NO_ACTION:&apos;;
&#x9;DECLARE actionType&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT defaultActionType;
&#x9;DECLARE inStringTemp&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE encodedDoubleDoubleQuote&#x9;&#x9;VARCHAR DEFAULT /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/encodedValues.encodedDoubleDoubleQuote;

&#x9;set outString = inString;
&#x9;if (outString is not null and LENGTH(outString) &gt; 0) then

&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName||&apos;&lt;--&apos;||moduleNameInvoking,debug,&apos;ORIGINAL: codingType=[&apos;||codingType||&apos;]  encodingActions=[&apos;||encodingActions||&apos;]  inStringName=&apos;||inStringName||&apos; inString=[&apos;||inString||&apos;]  codingList=[&apos;||codingList||&apos;]&apos;);

&#x9;&#x9;&#x9;-- Loop through the coding list
&#x9;&#x9;&#x9;for r as select * from /shared/ASAssets/Utilities/string/extractDelimitedText(codingList, &apos;,&apos;,0,0,0,1,0) do
&#x9;&#x9;&#x9;&#x9;set codedValue = r.object;
&#x9;&#x9;&#x9;&#x9;CASE codedValue
&#x9;&#x9;&#x9;&#x9;&#x9;WHEN /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/encodedValues.encodedSpace &#x9;&#x9;&#x9;THEN set actualValue = &apos; &apos;;&#x9;-- _0020 = space
&#x9;&#x9;&#x9;&#x9;&#x9;WHEN /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/encodedValues.encodedComma &#x9;&#x9;&#x9;THEN set actualValue = &apos;,&apos;;&#x9;-- _002C = comma
&#x9;&#x9;&#x9;&#x9;&#x9;WHEN /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/encodedValues.encodedPeriod &#x9;&#x9;&#x9;THEN set actualValue = &apos;.&apos;;&#x9;-- _002E = period
&#x9;&#x9;&#x9;&#x9;&#x9;WHEN /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/encodedValues.encodedPipe&#x9; &#x9;&#x9;&#x9;THEN set actualValue = &apos;|&apos;;&#x9;-- _007C = pipe
&#x9;&#x9;&#x9;&#x9;&#x9;WHEN /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/encodedValues.encodedOpFact &#x9;&#x9;&#x9;THEN set actualValue = &apos;!&apos;;&#x9;-- _0021 = factorial operator
&#x9;&#x9;&#x9;&#x9;&#x9;WHEN /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/encodedValues.encodedDollar &#x9;&#x9;&#x9;THEN set actualValue = &apos;$&apos;;&#x9;-- _0024 = dollar sign
&#x9;&#x9;&#x9;&#x9;&#x9;WHEN /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/encodedValues.encodedOpMod &#x9;&#x9;&#x9;THEN set actualValue = &apos;%&apos;;&#x9;-- _0025 = modulo operator
&#x9;&#x9;&#x9;&#x9;&#x9;WHEN /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/encodedValues.encodedLParen &#x9;&#x9;&#x9;THEN set actualValue = &apos;(&apos;;&#x9;-- _0028 = left parenthesis
&#x9;&#x9;&#x9;&#x9;&#x9;WHEN /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/encodedValues.encodedRParen &#x9;&#x9;&#x9;THEN set actualValue = &apos;)&apos;;&#x9;-- _0029 = right parenthesis
&#x9;&#x9;&#x9;&#x9;&#x9;WHEN /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/encodedValues.encodedOpMult &#x9;&#x9;&#x9;THEN set actualValue = &apos;*&apos;;&#x9;-- _002A = multiplication operator
&#x9;&#x9;&#x9;&#x9;&#x9;WHEN /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/encodedValues.encodedOpAdd &#x9;&#x9;&#x9;THEN set actualValue = &apos;+&apos;;&#x9;-- _002B = addition operator
&#x9;&#x9;&#x9;&#x9;&#x9;WHEN /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/encodedValues.encodedOpSub &#x9;&#x9;&#x9;THEN set actualValue = &apos;-&apos;;&#x9;-- _002D = substraction operator
&#x9;&#x9;&#x9;&#x9;&#x9;WHEN /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/encodedValues.encodedOpDiv &#x9;&#x9;&#x9;THEN set actualValue = &apos;/&apos;;&#x9;-- _002F = division operator
&#x9;&#x9;&#x9;&#x9;&#x9;WHEN /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/encodedValues.encodedQuestionMark &#x9;&#x9;THEN set actualValue = &apos;?&apos;;&#x9;-- _003F = question mark
&#x9;&#x9;&#x9;&#x9;&#x9;WHEN /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/encodedValues.encodedLeftBracket &#x9;&#x9;THEN set actualValue = &apos;[&apos;;&#x9;-- _005B = left square bracket
&#x9;&#x9;&#x9;&#x9;&#x9;WHEN /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/encodedValues.encodedBackslash&#x9;&#x9;&#x9;THEN set actualValue = &apos;\&apos;;&#x9;-- _005C = backslash
&#x9;&#x9;&#x9;&#x9;&#x9;WHEN /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/encodedValues.encodedRightBracket&#x9;&#x9;THEN set actualValue = &apos;]&apos;;&#x9;-- _005D = right square bracket
&#x9;&#x9;&#x9;&#x9;&#x9;WHEN /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/encodedValues.encodedCarat &#x9;&#x9;&#x9;THEN set actualValue = &apos;^&apos;;&#x9;-- _005E = carat
&#x9;&#x9;&#x9;&#x9;&#x9;WHEN /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/encodedValues.encodedLeftCurlyBracket &#x9;THEN set actualValue = &apos;{&apos;;&#x9;-- _007B = left curly bracket
&#x9;&#x9;&#x9;&#x9;&#x9;WHEN /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/encodedValues.encodedRightCurlyBracket THEN set actualValue = &apos;}&apos;;&#x9;-- _007D = right curly bracket
&#x9;&#x9;&#x9;&#x9;&#x9;WHEN /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/encodedValues.encodedSingleQuote &#x9;&#x9;THEN set actualValue = &apos;&apos;&apos;&apos;;-- _0027 = single quote
&#x9;&#x9;&#x9;&#x9;&#x9;WHEN /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/encodedValues.encodedDoubleDoubleQuote&#x9;THEN set actualValue = &apos;&quot;&quot;&apos;;-- _0022_0022 = Double double quote
&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;END CASE;
&#x9;&#x9;&#x9;&#x9;-- Perform an encoding of the string
&#x9;&#x9;&#x9;&#x9;/************************
&#x9;&#x9;&#x9;&#x9; * ENCODE codingType=&apos;E&apos;
&#x9;&#x9;&#x9;&#x9; ***********************/
&#x9;&#x9;&#x9;&#x9;if (codingType = &apos;E&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;if (POSITION(actualValue IN outString) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (POSITION(&apos;N&apos; IN encodingActions) = 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (actualValue = &apos;&quot;&quot;&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set actualValue = &apos;&quot;\&quot;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/* ENCODE list of encoding values between left parens and right parens */
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (POSITION(&apos;P&apos; IN encodingActions) &gt; 0 AND (POSITION(&apos;(&apos; IN outString) &gt; 0 or POSITION(&apos;)&apos; IN outString) &gt; 0)) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set regexPattern = &apos;\&apos;||actualValue||regexReplacePatternParentheses;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set actionType = &apos;ENCODE:P():&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName||&apos;&lt;--&apos;||moduleNameInvoking,debug,actionType||&apos; actual=[&apos;||actualValue||&apos;]  code=[&apos;||codedValue||&apos;]  regexPattern=&apos;||regexPattern);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/string/TextUtils/RegexReplace(outString, regexPattern, codedValue, 0, outString);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName||&apos;&lt;--&apos;||moduleNameInvoking,debug,actionType||&apos; outString=[&apos;||outString||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/* ENCODE list of encoding values between double quotes */
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (POSITION(&apos;D&apos; IN encodingActions) &gt; 0 AND POSITION(&apos;&quot;&apos; IN outString) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set regexPattern = &apos;\&apos;||actualValue||regexReplacePatternDoubleQuote;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set actionType = &apos;ENCODE:D&quot;&quot;:&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName||&apos;&lt;--&apos;||moduleNameInvoking,debug,actionType||&apos; actual=[&apos;||actualValue||&apos;]  code=[&apos;||codedValue||&apos;]  regexPattern=&apos;||regexPattern);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/string/TextUtils/RegexReplace(outString, regexPattern, codedValue, 0, outString);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName||&apos;&lt;--&apos;||moduleNameInvoking,debug,actionType||&apos; outString=[&apos;||outString||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/* ENCODE list of encoding values between single quotes except when the encoded value is a single quote */
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (POSITION(&apos;S&apos; IN encodingActions) &gt; 0 AND POSITION(&apos;&apos;&apos;&apos; IN outString) &gt; 0 AND actualValue != &apos;&apos;&apos;&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set regexPattern = &apos;\&apos;||actualValue||regexReplacePatternSingleQuote;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set actionType = &apos;ENCODE:S&apos;&apos;&apos;&apos;:&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName||&apos;&lt;--&apos;||moduleNameInvoking,debug,actionType||&apos; actual=[&apos;||actualValue||&apos;]  code=[&apos;||codedValue||&apos;]  regexPattern=&apos;||regexPattern);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/string/TextUtils/RegexReplace(outString, regexPattern, codedValue, 0, outString);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName||&apos;&lt;--&apos;||moduleNameInvoking,debug,actionType||&apos; outString=[&apos;||outString||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/* ENCODE list of encoding values between left parens and right parens */
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (POSITION(&apos;N&apos; IN encodingActions) &gt; 0 AND POSITION(actualValue IN outString) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set regexPattern = &apos;\&apos;||actualValue;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set actionType = &apos;ENCODE:N:&lt;ANY&gt;:&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName||&apos;&lt;--&apos;||moduleNameInvoking,debug,actionType||&apos; actual=[&apos;||actualValue||&apos;]  code=[&apos;||codedValue||&apos;]  regexPattern=&apos;||regexPattern);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/string/TextUtils/RegexReplace(outString, regexPattern, codedValue, 0, outString);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName||&apos;&lt;--&apos;||moduleNameInvoking,debug,actionType||&apos; outString=[&apos;||outString||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;/************************
&#x9;&#x9;&#x9;&#x9; * DECODE codingType=&apos;D&apos;
&#x9;&#x9;&#x9;&#x9; ***********************/
&#x9;&#x9;&#x9;&#x9;-- Perform a decoding of the string
&#x9;&#x9;&#x9;&#x9;&#x9;if (POSITION(codedValue IN outString) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- If the encoding action is &quot;NOT&quot; N and the actualValue is in the escape list for actualValues then escape it otherwise don&apos;t
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (POSITION(&apos;N&apos; IN encodingActions) = 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (POSITION(actualValue IN escapeValueList) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (actualValue = &apos;&quot;&quot;&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set actualValue = &apos;\&quot;\&quot;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set actualValue = &apos;\&apos;||actualValue;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/* DECODE list of encoding values between left parens and right parens */
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (POSITION(&apos;D&apos; IN encodingActions) &gt; 0 AND POSITION(&apos;&quot;&apos; IN outString) &gt; 0) then

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set regexPattern = codedValue||regexReplacePatternDoubleQuote;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set actionType = &apos;DECODE:D&quot;&quot;:&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName||&apos;&lt;--&apos;||moduleNameInvoking,debug,actionType||&apos; actual=[&apos;||actualValue||&apos;]  code=[&apos;||codedValue||&apos;]  regexPattern=&apos;||regexPattern);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/string/TextUtils/RegexReplace(outString, regexPattern, actualValue, 0, outString);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName||&apos;&lt;--&apos;||moduleNameInvoking,debug,actionType||&apos; outString=[&apos;||outString||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/* DECODE list of encoding values between double quotes */
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (POSITION(&apos;P&apos; IN encodingActions) &gt; 0 AND (POSITION(&apos;(&apos; IN outString) &gt; 0 OR POSITION(&apos;)&apos; IN outString) &gt; 0) ) then

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set regexPattern = codedValue||regexReplacePatternParentheses;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set actionType = &apos;DECODE:P():&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName||&apos;&lt;--&apos;||moduleNameInvoking,debug,actionType||&apos; actual=[&apos;||actualValue||&apos;]  code=[&apos;||codedValue||&apos;]  regexPattern=&apos;||regexPattern);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/string/TextUtils/RegexReplace(outString, regexPattern, actualValue, 0, outString);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName||&apos;&lt;--&apos;||moduleNameInvoking,debug,actionType||&apos; outString=[&apos;||outString||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/* DECODE list of encoding values between single quotes except when the encoded value is a single quote */
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (POSITION(&apos;S&apos; IN encodingActions) &gt; 0 AND POSITION(&apos;&apos;&apos;&apos; IN outString) &gt; 0 AND actualValue != &apos;&apos;&apos;&apos;) then

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set regexPattern = codedValue||regexReplacePatternSingleQuote;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set actionType = &apos;DECODE:S&apos;&apos;&apos;&apos;:&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName||&apos;&lt;--&apos;||moduleNameInvoking,debug,actionType||&apos; actual=[&apos;||actualValue||&apos;]  code=[&apos;||codedValue||&apos;]  regexPattern=&apos;||regexPattern);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/string/TextUtils/RegexReplace(outString, regexPattern, actualValue, 0, outString);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName||&apos;&lt;--&apos;||moduleNameInvoking,debug,actionType||&apos; outString=[&apos;||outString||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/* DECODE list of encoding values anywhere in the string */
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (POSITION(&apos;N&apos; IN encodingActions) &gt; 0 AND POSITION(codedValue IN outString) &gt; 0) then

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set regexPattern = codedValue;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set actionType = &apos;DECODE:N&lt;ANY&gt;:&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName||&apos;&lt;--&apos;||moduleNameInvoking,debug,actionType||&apos; actual=[&apos;||actualValue||&apos;]  code=[&apos;||codedValue||&apos;]  regexPattern=&apos;||regexPattern);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set outString = REPLACE(outString, regexPattern, actualValue);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName||&apos;&lt;--&apos;||moduleNameInvoking,debug,actionType||&apos; outString=[&apos;||outString||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;end for;

&#x9;&#x9;if (actionType = defaultActionType and debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,actionType||&apos; outString=[&apos;||outString|| &apos;]&apos;);
&#x9;&#x9;end if;
&#x9;end if;
&#x9;set duration = CURRENT_TIMESTAMP - startTime;
&#x9;set seconds = EXTRACT(SECONDS FROM duration);
&#x9;if (seconds &gt; .05 and debugTime = &apos;Y&apos;) then
&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName||&apos;&lt;--&apos;||moduleNameInvoking,debugTime,actionType||&apos; duration=&apos;||cast(duration as varchar));
&#x9;end if;
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1560603906783</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="p:1:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="references" type="NULL"/>
</metadata>