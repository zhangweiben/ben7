<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:9a66723c-3693-47f1-a1f0-d7811996f9d5 -->
<metadata name="parseFromClause" path="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/parseFromClause" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>&lt;![CDATA[&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.
]]&gt;</annotation>
  <parameters>
    <parameter name="inFromClause" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="codingList" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="fromClauseVector" direction="OUT" nullable="true">
      <datatype name="fromClauseVector" type="ARRAY" maxLength="0">
        <itemDatatype>
          <datatype name="FromClause_Type" referenceDefinitionSet="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/TypeDefinitions" referenceType="FromClause_Type" type="TREE" refId="257">
            <element name="resourcePath">
              <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
            </element>
            <element name="resourceType">
              <datatype name="VARCHAR" type="STRING" maxLength="255"/>
            </element>
            <element name="resourceAlias">
              <datatype name="VARCHAR" type="STRING" maxLength="255"/>
            </element>
            <element name="resourceName">
              <datatype name="VARCHAR" type="STRING" maxLength="255"/>
            </element>
          </datatype>
        </itemDatatype>
      </datatype>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/TypeDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedString" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inCodingType" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="inEncodingActions" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="codingList" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inModuleNameInvoking" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inDebug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="inStringName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="outString" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/isFromClauseKeyword" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="keyword" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="foundKeyword" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/removeSqlOptions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inSqlText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="outSqlText" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/_ProjectMaintenance/defaultValues" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/log/logDebugMessage" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="moduleName" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="moduleNameType" type="STRING" maxLength="4096"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="messageText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getBasicResourceCursor" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceCursor" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="name">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="path">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="type">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="id">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="changeid">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="version">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="introspectState">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ownerDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ownerName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="impactLevel">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="impactMessage">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="annotation">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="explicitlyDesigned">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="tableType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="sqlText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="scriptText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="childCount">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="dataSourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/extractDelimitedText" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inputString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="delimiter" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="occurrence" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="reverseInputText" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="reverseOutput" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="trimText" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="includeDelimiter" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="object">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/getDelimitedOccurrence" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="mode" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="delimiter" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inOccurrence" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inTrimText" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/*
&#x9;parseFromClause - Parse the FROM clause and return each from path in a vector.

&#x9;TO DO:
&#x9;&#x9;1) handle simple paths with no separator (/)

&#x9;Scenarios tested:
&#x9;&#x9;No spaces/no double quotes
&#x9;&#x9;/shared/BestPractices_TestCases/Physical/Metadata/OracleSource/cisOraDemoDS/CISORADEMO/CUSTOMERS
&#x9;&#x9;/shared/BestPractices_TestCases/Physical/Metadata/OracleSource/cisOraDemoDS/CISORADEMO/CUSTOMERS CUSTOMERS

&#x9;&#x9;No spaces in path/double quotes in alias
&#x9;&#x9;/shared/BestPractices_TestCases/Physical/Metadata/OracleSource/cisOraDemoDS/CISORADEMO/CUSTOMERS &quot;MY CUSTOMERS&quot;

&#x9;&#x9;Space/Double quote in table name and alias
&#x9;&#x9;/shared/BestPractices_TestCases/Physical/Metadata/MyData/CACHE_DB/CIS/dbo/&quot;Drilling Activity&quot;
&#x9;&#x9;/shared/BestPractices_TestCases/Physical/Metadata/MyData/CACHE_DB/CIS/dbo/&quot;Drilling Activity&quot; &quot;Drilling Activity&quot;

&#x9;&#x9;Space/Double quote in path and table name
&#x9;&#x9;/shared/BestPractices_TestCases/Physical/Metadata/&quot;My Data&quot;/CACHE_DB/CIS/dbo/&quot;Drilling Activity&quot;
&#x9;&#x9;/shared/BestPractices_TestCases/Physical/Metadata/&quot;My Data&quot;/CACHE_DB/CIS/dbo/&quot;Drilling Activity&quot; &quot;Drilling Activity&quot;

&#x9;&#x9;Complex from clause with spaces/double quotes on both sides of the join keywords
&#x9;&#x9;/shared/BestPractices_TestCases/Physical/Metadata/&quot;My Data&quot;/CACHE_DB/CIS/dbo/&quot;Drilling Activity&quot; &quot;Drilling Activity&quot; inner join 
&#x9;&#x9;&#x9;/shared/BestPractices_TestCases/Physical/Metadata/&quot;My Data&quot;/CACHE_DB/CIS/dbo/&quot;Drilling Activity&quot; &quot;Drilling Activity2&quot;

&#x9;&#x9;/shared/BestPractices_TestCases/Physical/Metadata/&quot;My Data&quot;/CACHE_DB/CIS/dbo/&quot;Drilling Activity&quot; &quot;Drilling Activity&quot; inner join 
&#x9;&#x9;&#x9;/shared/BestPractices_TestCases/Physical/Metadata/OracleSource/cisOraDemoDS/CISORADEMO/CUSTOMERS CUSTOMERS


&#x9;Exceptions:  none

&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;CSW Version:&#x9;Reason:
&#x9;11/11/2011&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.2.0&#x9;&#x9;&#x9;Created new
&#x9;03/15/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.2.0&#x9;&#x9;&#x9;Modifications for Best Practices 7.0
&#x9;09/13/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.1.0&#x9;&#x9;&#x9;Fixed issue with double quotes in table name with no alias
&#x9;10/25/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.1.0&#x9;&#x9;&#x9;8.0: Added a replace of spaces inside double quotes &quot; &quot; to an encoded space &quot;_0020&quot; to resolve regexSplit.
&#x9;11/15/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.1.0&#x9;&#x9;&#x9;8.0: Added codingList to the input parameter.
&#x9;12/19/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.1.0&#x9;&#x9;&#x9;8.1: Forced the table alias to be the resource name which averts the issue when the alias name is different than the table name
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;     and causes the generateDatasourceList to generate rows inconsistent with the source view.   The generateFormattingViews
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;     requires the lookup of the spreadsheet based on the source view name.
&#x9;03/28/2014&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.2.0&#x9;&#x9;&#x9;8.1.1: Added &quot;resourceType&quot; to the debug message.
&#x9;11/20/2014&#x9;&#x9;Alex Dedov&#x9;&#x9;&#x9;6.2.6&#x9;&#x9;&#x9;8.1.5: Added exception block around getBasicResourceCursor() call to catch invalid path errors.
&#x9;11/20/2014&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.2.6&#x9;&#x9;&#x9;8.1.5: Added &apos;D N&apos; to the getCodedString(&apos;D&apos;, &apos;D N&apos;, ...) invocation because of a change to getCodedString.
&#x9;03/02/2018&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.5&#x9;&#x9;&#x9;Replaced RegexSplit with extractDelimitedText
&#x9;04/15/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;B.P. 2019.200: Added scriptsPath for flexibility of the location of the _scripts folder.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   Changed custom functions to explicit paths.

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.
*/
PROCEDURE parseFromClause(
&#x9;IN inFromClause&#x9;&#x9;&#x9;LONGVARCHAR,
&#x9;IN codingList&#x9;&#x9;&#x9;VARCHAR(4000),
&#x9;OUT fromClauseVector&#x9;VECTOR(/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/TypeDefinitions.FromClause_Type) 
/*     DECLARE PUBLIC TYPE FromClause_Type ROW (
        resourcePath LONGVARCHAR, 
&#x9;&#x9;resourceAlias VARCHAR  );
*/
)
BEGIN
&#x9;DECLARE moduleName&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;parseFromClause&apos;;
&#x9;DECLARE debug&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1) DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.debugSqlParser3;
&#x9;DECLARE newline&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.newline;
&#x9;DECLARE fromClause &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR DEFAULT TRIM(inFromClause);
&#x9;DECLARE tempString&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR DEFAULT &apos;&apos;;
&#x9;DECLARE fromPath&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR DEFAULT &apos;&apos;;
&#x9;DECLARE pairCount&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER DEFAULT 0;
&#x9;DECLARE vectorCount&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER DEFAULT 0;
&#x9;DECLARE fromPos&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE wherePos&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE orderByPos&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE groupByPos&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE onPos&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE pos&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE occurrences &#x9;&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DEcLARE keyword&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE keywordFound&#x9;&#x9;&#x9;&#x9;&#x9;BIT;
&#x9;DECLARE pathNotComplete&#x9;&#x9;&#x9;&#x9;&#x9;BOOLEAN;&#x9;
&#x9;DECLARE startTime&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;TIMESTAMP DEFAULT CURRENT_TIMESTAMP;
&#x9;DECLARE duration&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INTERVAL MINUTE TO SECOND;
&#x9;DECLARE seconds&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DECIMAL(32,3);
&#x9;DECLARE debugTime&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1) DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.debugTime;

&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;------------------- Begin Parse From Clause -------------------&apos;);
&#x9;&#x9;-- Print out the parsing algorithms to turn spaces into encoded spaces
&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;&apos;);

&#x9;&#x9;-- Print out FROM Clause
&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;1. Orig fromClause=&apos;||fromClause||newline);
&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;1. Orig codingList=&apos;||codingList||newline);
&#x9;end if;

&#x9;-- 1. Remove keywords and sections that are not pertinent to a from clause
&#x9;set fromPos = POSITION(&apos;FROM&apos; in UPPER(fromClause));
&#x9;if (fromPos &gt; 0) then
&#x9;&#x9;set fromClause = TRIM(SUBSTRING(fromClause, fromPos+4, LENGTH(fromClause)));
&#x9;end if;
&#x9;-- Remove OFFSET clause
&#x9;set orderByPos = POSITION(&apos;OFFSET&apos; IN UPPER(fromClause));
&#x9;if (orderByPos &gt; 0) then
&#x9;&#x9;set fromClause = SUBSTRING(fromClause,1,orderByPos-1);
&#x9;end if;
&#x9;-- Remove ORDER BY clause
&#x9;set orderByPos = POSITION(&apos;ORDER BY&apos; IN UPPER(fromClause));
&#x9;if (orderByPos &gt; 0) then
&#x9;&#x9;set fromClause = SUBSTRING(fromClause,1,orderByPos-1);
&#x9;end if;
&#x9;-- Remove HAVING clause
&#x9;set orderByPos = POSITION(&apos;HAVING&apos; IN UPPER(fromClause));
&#x9;if (orderByPos &gt; 0) then
&#x9;&#x9;set fromClause = SUBSTRING(fromClause,1,orderByPos-1);
&#x9;end if;
&#x9;-- Remove GROUP BY clause
&#x9;set groupByPos = POSITION(&apos;GROUP BY&apos; IN UPPER(fromClause));
&#x9;if (groupByPos &gt; 0) then
&#x9;&#x9;set fromClause = SUBSTRING(fromClause,1,groupByPos-1);
&#x9;end if;
&#x9;-- Remove WHERE clause
&#x9;set wherePos = POSITION(&apos;WHERE&apos; IN UPPER(fromClause));
&#x9;if (wherePos &gt; 0) then
&#x9;&#x9;set fromClause = SUBSTRING(fromClause,1,wherePos-1);
&#x9;end if;
&#x9;-- Remove SQL Option { OPTION }
&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/removeSqlOptions(fromClause,fromClause);

--  1) Remove extraneous keywords
&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;2. remove keywords fromClause=&apos;||fromClause||newline);
&#x9;end if;

&#x9;-- Initialize variables
&#x9;set fromClauseVector = VECTOR[(null)];

&#x9;-- Extract word parts based on space &apos; &apos; delimiter as a cursor
&#x9;for r as select * from /shared/ASAssets/Utilities/string/extractDelimitedText(fromClause,&apos; &apos;,0,0,0,0,0) do
&#x9;&#x9;set keyword = r.object;
&#x9;&#x9;if (keyword IS NOT NULL AND LENGTH(&apos;|&apos;||keyword||&apos;|&apos;) &gt; 2) then  --notEmpty
&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/isFromClauseKeyword(keyword,keywordFound);
&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;keyword=[&apos;||keyword||&apos;]  keywordFound=&apos;||keywordFound);
&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;if (keywordFound = 0) then
&#x9;&#x9;&#x9;&#x9;-- A pair is a table resource path and table alias
&#x9;&#x9;&#x9;&#x9;if (pairCount = 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;if (POSITION(&apos;/shared/&apos; IN keyword) &gt; 0 or POSITION(&apos;/users/&apos; IN keyword) &gt; 0 or POSITION(&apos;/services/&apos; IN keyword) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Initialize the vector
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (vectorCount &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set fromClauseVector = EXTEND(fromClauseVector,1);-- always increase the vector when a table path is found
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set vectorCount = vectorCount + 1;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- If the from clause is a procedure, then strip off the parenthesis forward - /path/proc()
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set pos = POSITION(&apos;(&apos; IN keyword);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (pos = 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set fromClauseVector[vectorCount].resourcePath = TRIM(keyword);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set fromClauseVector[vectorCount].resourcePath = TRIM(SUBSTRING(keyword,1,pos-1));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Get the resource name from the resource path
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/string/getDelimitedOccurrence(fromClauseVector[vectorCount].resourcePath, &apos;R&apos;, &apos;/&apos;, 1, 0, fromClauseVector[vectorCount].resourceName);

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Replace &quot; with empty.  Replace encodeSpace _0020 with an actual space &apos; &apos;, Replace encodedPeriod _002E with an actual &apos;.&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Decode anywhere in the path
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedString(&apos;D&apos;, &apos;D N&apos;, codingList, REPLACE(fromClauseVector[vectorCount].resourcePath,&apos;&quot;&apos;,&apos;&apos;), moduleName, debug, &apos;fromResourcePath&apos;, fromClauseVector[vectorCount].resourcePath);

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;1. fromClauseVector[&apos;||vectorCount||&apos;].resourcePath=&apos;||fromClauseVector[vectorCount].resourcePath||&apos;  resourceType=&apos;||fromClauseVector[vectorCount].resourceType);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

-- 20141113#DA CHANGE Begin: Handle Admin API exceptions
BEGIN 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for r1 as select * from /shared/ASAssets/Utilities/repository/getBasicResourceCursor(fromClauseVector[vectorCount].resourcePath,null) do
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set fromClauseVector[vectorCount].resourceType = r1.&quot;type&quot;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end for;
EXCEPTION
&#x9;ELSE
&#x9;&#x9;set fromClauseVector[vectorCount].resourceType = &apos;&apos;;
&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,&apos;Y&apos;,&apos;Failed to retrieve resource info: &apos;||CAST(CURRENT_EXCEPTION.MESSAGE AS LONGVARCHAR));
END;
-- 20141113#DA CHANGE End
 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set pairCount = pairCount + 1;--the path is the first of the pair (path,alias)
&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;else -- The table path was found since pairCount &gt; 0
&#x9;&#x9;&#x9;&#x9;&#x9;-- Just in case check to see if the resource is a path (in case no alias was provided)
&#x9;&#x9;&#x9;&#x9;&#x9;if (POSITION(&apos;/shared/&apos; IN keyword) &gt; 0 or POSITION(&apos;/users/&apos; IN keyword) &gt; 0 or POSITION(&apos;/services/&apos; IN keyword) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set fromClauseVector = EXTEND(fromClauseVector,1);-- always increase the vector when a table path is found
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set vectorCount = vectorCount + 1; -- increase the vector since no alias was found

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Get the resource name from the resource path
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/string/getDelimitedOccurrence(fromClauseVector[vectorCount].resourcePath, &apos;R&apos;, &apos;/&apos;, 1, 0, fromClauseVector[vectorCount].resourceName);

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Replace &quot; with empty.  Replace encodeSpace _0020 with an actual space &apos; &apos;, Replace encodedPeriod _002E with an actual &apos;.&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Decode anywhere in the path
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedString(&apos;D&apos;, &apos;D N&apos;, codingList, REPLACE(fromClauseVector[vectorCount].resourcePath,&apos;&quot;&apos;,&apos;&apos;), moduleName, debug, &apos;fromResourcePath&apos;, fromClauseVector[vectorCount].resourcePath);


-- 20141113#DA CHANGE Begin: Handle Admin API exceptions
BEGIN 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for r1 as select * from /shared/ASAssets/Utilities/repository/getBasicResourceCursor(fromClauseVector[vectorCount].resourcePath,null) do
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set fromClauseVector[vectorCount].resourceType = r1.&quot;type&quot;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end for;
EXCEPTION
&#x9;ELSE
&#x9;&#x9;set fromClauseVector[vectorCount].resourceType = &apos;&apos;;
&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,&apos;Y&apos;,&apos;Failed to retrieve resource info: &apos;||CAST(CURRENT_EXCEPTION.MESSAGE AS LONGVARCHAR));
END;
-- 20141113#DA CHANGE End


&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set pairCount = pairCount + 1;--the path is the first of the pair (path,alias)
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;2. fromClauseVector[&apos;||vectorCount||&apos;].resourcePath=&apos;||fromClauseVector[vectorCount].resourcePath||&apos;  resourceType=&apos;||fromClauseVector[vectorCount].resourceType);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;else -- This is definitely an alias and not a path
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Decode anywhere in the path
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedString(&apos;D&apos;, &apos;D N&apos;, codingList, keyword, moduleName, debug, &apos;fromResourceAlias&apos;, fromClauseVector[vectorCount].resourceAlias);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set pairCount = 0;--reset the pairCount to zero since both path and alias were found
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;3. fromAlias=&apos;||fromClauseVector[vectorCount].resourceAlias);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;set pairCount = 0;
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;end if;
&#x9;end for;

&#x9;-- Make sure each table has an alias (use the last / delimited word as the alias if it has none
&#x9;set vectorCount = 1;
&#x9;WHILE (vectorCount &lt;= CARDINALITY(fromClauseVector)) DO

&#x9;&#x9;-- Decode anywhere in the path
&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedString(&apos;D&apos;, &apos;D&apos;, codingList, fromClauseVector[vectorCount].resourceName, moduleName, debug, &apos;fromResourcePath&apos;, fromClauseVector[vectorCount].resourceName);

&#x9;&#x9;-- Force the alias to be the same as the resource name
&#x9;&#x9;set fromClauseVector[vectorCount].resourceAlias = fromClauseVector[vectorCount].resourceName;

&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;sourceName=&apos;||fromClauseVector[vectorCount].resourceName||&apos;  sourceAlias=&apos;||fromClauseVector[vectorCount].resourceAlias||&apos;  sourcePath=&apos;||fromClauseVector[vectorCount].resourcePath||&apos;  sourceType=&apos;||fromClauseVector[vectorCount].resourceType);
&#x9;&#x9;end if;
&#x9;&#x9;set vectorCount = vectorCount + 1;
&#x9;END WHILE;
&#x9;set duration = CURRENT_TIMESTAMP - startTime;
&#x9;set seconds = EXTRACT(SECONDS FROM duration);
&#x9;if (seconds &gt; .05 and debugTime = &apos;Y&apos;) then
&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debugTime,&apos;duration=&apos;||cast(duration as varchar)||&apos;  inFromClause=&apos;||inFromClause);
&#x9;end if;
&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;------------------- End Parse From Clause -------------------&apos;);
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1560603906783</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="p:1:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="p:2:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="references" type="NULL"/>
</metadata>