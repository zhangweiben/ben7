<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:9a66723c-3693-47f1-a1f0-d7811996f9d5 -->
<metadata name="parseCase" path="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/parseCase" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>&lt;![CDATA[
&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

]]&gt;</annotation>
  <parameters>
    <parameter name="inColumnExpression" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="function" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="columnList" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/parseCaseExtract" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="columnExpression" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="begPos" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="endPos" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inColumnList" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="columnList" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/_ProjectMaintenance/defaultValues" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/log/logDebugMessage" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="moduleName" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="moduleNameType" type="STRING" maxLength="4096"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="messageText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/*
&#x9;parseCase - parse the column expression and extract expressions from the case statement
&#x9;&#x9;There are two kinds of case statements &quot;simple syntax&quot; and &quot;searched syntax&quot;
&#x9;&#x9;&quot;simple syntax&quot;
&#x9;&#x9;&#x9;CASE &lt;comparison-value&gt;
&#x9;&#x9;&#x9;&#x9;WHEN &lt;conditional-expression 1&gt; THEN &lt;scalar-expression 1&gt;
&#x9;&#x9;&#x9;&#x9;WHEN &lt;conditional-expression 2&gt; THEN &lt;scalar-expression 2&gt;
&#x9;&#x9;&#x9;&#x9;WHEN &lt;conditional-expression 3&gt; THEN &lt;scalar-expression 3&gt;
&#x9;&#x9;&#x9;&#x9;[ELSE &lt;default-scalar-expression&gt;]
&#x9;&#x9;&#x9;END
&#x9;&#x9;&quot;searched syntax&quot;
&#x9;&#x9;&#x9;CASE
&#x9;&#x9;&#x9;&#x9;WHEN &lt;conditional-expression 1&gt; THEN &lt;scalar-expression 1&gt;
&#x9;&#x9;&#x9;&#x9;WHEN &lt;conditional-expression 2&gt; THEN &lt;scalar-expression 2&gt;
&#x9;&#x9;&#x9;&#x9;WHEN &lt;conditional-expression 3&gt; THEN &lt;scalar-expression 3&gt;
&#x9;&#x9;&#x9;&#x9;[ELSE &lt;default-scalar-expression&gt;]
&#x9;&#x9;&#x9;END
&#x9;&#x9;Use the strategy of finding the 1st CASE keyword and matching END keyword.  There may be nested case statements.
&#x9;&#x9;Remove literal single quoted strings as they are not relevant
&#x9;&#x9;Remove CASE keywords including [CASE,WHEN,THEN,ELSE,END]
&#x9;&#x9;Remove operands including[IS,NOT,NULL,=,&lt;,&gt;,&lt;=,&gt;=,&lt;&gt;,&lt;,&gt;,&amp;le;,&amp;ge;,&lt;&gt;]

&#x9;IN
&#x9;&#x9;inColumnExpression - the incoming column expression
&#x9;OUT
&#x9;&#x9;function - primary function found
&#x9;&#x9;columnList - a list of column expressions found that are not literal strings or numbers.
&#x9;&#x9;&#x9;this may contain additional function expressions

&#x9;Exceptions:  none

&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;CSW Version:&#x9;Reason:
&#x9;11/11/2011&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.2.0&#x9;&#x9;&#x9;Created new
&#x9;03/15/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.2.0&#x9;&#x9;&#x9;Modifications for Best Practices 7.0
&#x9;04/15/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;B.P. 2019.200: Added scriptsPath for flexibility of the location of the _scripts folder.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   Changed custom functions to explicit paths.

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

*/
PROCEDURE parseCase(
-- CASE table.col1 WHEN 1 then &apos;A&apos; WHEN 2 then &apos;B&apos; ELSE &apos;C&apos; END
-- case trim ( CAST ( TRIM ( col1 ) as varchar (255 ) )  ) when 1 then &apos;a&apos; when 2 then &apos;b&apos; else &apos;c&apos; end
-- case when trim ( CAST ( TRIM ( col1 ) as varchar ( 255 ) )  ) = 1 then col2 else col3 end
&#x9;IN&#x9;inColumnExpression&#x9;LONGVARCHAR, -- The column text to pars
&#x9;OUT function&#x9;&#x9;&#x9;LONGVARCHAR,
&#x9;OUT columnList&#x9;&#x9;&#x9;LONGVARCHAR
)
BEGIN
&#x9;DECLARE moduleName&#x9;&#x9;VARCHAR DEFAULT &apos;parseCase&apos;;
&#x9;DECLARE debug&#x9;&#x9;&#x9;CHAR(1) DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.debugSqlParser3;
&#x9;DECLARE columnExpression LONGVARCHAR DEFAULT &apos;&apos;;
&#x9;DECLARE sep&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;^&apos;; -- separator
&#x9;DECLARE caseType&#x9;&#x9;VARCHAR DEFAULT &apos;&apos;;&#x9;-- Simple or Searched
&#x9;DECLARE exprLen&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE expression&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE expression2&#x9;&#x9;LONGVARCHAR DEFAULT &apos;&apos;;
&#x9;DECLARE ch&#x9;&#x9;&#x9;&#x9;CHAR(1);
&#x9;DECLARE word&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;&apos;;
&#x9;DECLARE separators&#x9;&#x9;VARCHAR DEFAULT &apos; ,&apos;;
&#x9;DECLARE i,j&#x9;&#x9;&#x9;&#x9;INTEGER DEFAULT 1;
&#x9;DECLARE numCase&#x9;&#x9;&#x9;INTEGER DEFAULT 0;
&#x9;DECLARE numWhen&#x9;&#x9;&#x9;INTEGER DEFAULT 0;
&#x9;DECLARE numThen&#x9;&#x9;&#x9;INTEGER DEFAULT 0;
&#x9;DECLARE casePos&#x9;&#x9;&#x9;INTEGER DEFAULT 0; -- CASE(expr WHEN expr2 THEN res1 ELSE res2 END)
&#x9;DECLARE whenPos&#x9;&#x9;&#x9;INTEGER DEFAULT 0; -- WHEN expr2 THEN res1 ELSE res2 END)
&#x9;DECLARE thenPos&#x9;&#x9;&#x9;INTEGER DEFAULT 0; -- THEN res1 ELSE res2 END)
&#x9;DECLARE elsePos&#x9;&#x9;&#x9;INTEGER DEFAULT 0; -- ELSE res2 END)
&#x9;DECLARE endPos&#x9;&#x9;&#x9;INTEGER DEFAULT 0; -- END)
&#x9;DECLARE quote&#x9;&#x9;&#x9;INTEGER DEFAULT 0; -- 0=off, 1=on -- quotes come in pairs so turn on when 1st one found and turn off when second one found.  Everything in between is ignored.

&#x9;set function = &apos;&apos;;
&#x9;set columnList =&apos;&apos;;

&#x9;set columnExpression = TRIM(inColumnExpression);
&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;columnExpression=&apos;||NVL(columnExpression,&apos;null&apos;));
&#x9;end if;

&#x9;-- Determine the type of case statement &apos;Simple&apos; or &apos;Searched&apos;
&#x9;set casePos = INSTR(UPPER(columnExpression),&apos;CASE &apos;,1);
&#x9;set whenPos = INSTR(UPPER(columnExpression),&apos;WHEN &apos;,1);
&#x9;if (casePos &gt; 0 and whenPos &gt; 0)  then
&#x9;&#x9;set word = TRIM(SUBSTRING(columnExpression,casePos+5,whenPos-casePos-5));
&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;between case/when=[&apos;||NVL(word,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;end if;
&#x9;&#x9;if (word IS NULL OR LENGTH(&apos;|&apos;||word||&apos;|&apos;) = 2) then  --Empty
&#x9;&#x9;&#x9;set caseType = &apos;Searched&apos;;
&#x9;&#x9;else
&#x9;&#x9;&#x9;set caseType = &apos;Simple&apos;;
&#x9;&#x9;end if;
&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;case type=&apos;||caseType||&apos; Syntax  between case/when=[&apos;||NVL(word,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;end if;
/* Searched CASE example to parse.   Note: &quot;else&quot; is optional in a case statement.
&#x9;case 
&#x9;&#x9;when State = &apos;CA&apos; then 
&#x9;&#x9;&#x9;case 
&#x9;&#x9;&#x9;&#x9;when SUBSTR(Zip,1,2) = &apos;94&apos; then State||&apos; region 1&apos;
&#x9;&#x9;&#x9;&#x9;when SUBSTR(Zip,1,2) = &apos;93&apos; then State||&apos; region 2&apos;
&#x9;&#x9;&#x9;&#x9;else State||&apos; region 3&apos;
&#x9;&#x9;&#x9;&#x9;end
&#x9;&#x9;when State = &apos;PA&apos; then 
&#x9;&#x9;&#x9;case
&#x9;&#x9;&#x9;&#x9;when SUBSTR(Zip,1,3) = &apos;195&apos; then State||&apos; region 4&apos;
&#x9;&#x9;&#x9;&#x9;when SUBSTR(Zip,1,2) = &apos;196&apos; then State||&apos; region 5&apos;
&#x9;&#x9;&#x9;&#x9;else State||&apos; region 6&apos;
&#x9;&#x9;&#x9;&#x9;end
&#x9;&#x9;else State || &apos; region 7&apos;
&#x9;end Region,
*/
&#x9;&#x9;set word = &apos;&apos;;
&#x9;&#x9;set i = 1;
&#x9;&#x9;set exprLen = LENGTH(columnExpression);
&#x9;&#x9;WHILE (i &lt;= exprLen) DO
&#x9;&#x9;&#x9;set ch = SUBSTRING(columnExpression,i,1);
&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;ch=[&apos;||ch||&apos;]&apos;);
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;-- If a separator is found then detect whether a CASE/END statment has been found
&#x9;&#x9;&#x9;-- Look for a separator and start processing the word
&#x9;&#x9;&#x9;IF (POSITION(ch IN separators) &gt; 0 or i=exprLen) THEN
&#x9;&#x9;&#x9;&#x9;IF (i = exprLen) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;set word = word || ch;
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;word=[&apos;||word||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;IF (TRIM(UPPER(word)) = &apos;CASE&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;set numCase = numCase + 1;
&#x9;&#x9;&#x9;&#x9;&#x9;IF (numCase = 1) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set function = &apos;CASE&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set casePos = i;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;CASE:  beg=&apos;||cast(casePos as varchar));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;IF (TRIM(UPPER(word)) = &apos;WHEN&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;set numWhen = numWhen + 1;
&#x9;&#x9;&#x9;&#x9;&#x9;IF (numCase = 1) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set whenPos = i;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Extract the columList between CASE and WHEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (numWhen = 1) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;Extract the columList between CASE and WHEN:  beg=&apos;||cast(casePos as varchar)||&apos; endPos=&apos;||cast(whenPos-4 as varchar));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/parseCaseExtract(columnExpression,casePos,whenPos-4,columnList,columnList);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Extract the columnList between THEN and WHEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSEIF&#x9;(numThen &gt; 0 and numWhen &gt; 0 and numWhen &gt; numThen) THEN&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;Extract the columList between THEN and WHEN:  beg=&apos;||cast(thenPos as varchar)||&apos; endPos=&apos;||cast(whenPos-4 as varchar));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/parseCaseExtract(columnExpression,thenPos,whenPos-4,columnList,columnList);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;IF (TRIM(UPPER(word)) = &apos;THEN&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;set numThen = numThen + 1;
&#x9;&#x9;&#x9;&#x9;&#x9;IF (numCase = 1) THEN 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set thenPos = i;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Extract the columnList between WHEN and THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (whenPos &lt; thenPos) THEN 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;Extract the columList between WHEN and THEN:  beg=&apos;||cast(whenPos as varchar)||&apos; endPos=&apos;||cast(thenPos-4 as varchar));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/parseCaseExtract(columnExpression,whenPos,thenPos-4,columnList,columnList);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;IF (TRIM(UPPER(word)) = &apos;ELSE&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;IF (numCase = 1) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set elsePos = i;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Extract the columnList between the last THEN and ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF&#x9;(elsePos &gt; thenPos) THEN&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;Extract the columList between the last THEN and ELSE:  beg=&apos;||cast(thenPos as varchar)||&apos; endPos=&apos;||cast(elsePos-4 as varchar));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/parseCaseExtract(columnExpression,thenPos,elsePos-4,columnList,columnList);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;IF (TRIM(UPPER(word)) = &apos;END&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;set numCase = numCase - 1;
&#x9;&#x9;&#x9;&#x9;&#x9;IF (numCase = 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set endPos = i;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Extract the columnList between ELSE and END
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (elsePos &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;Extract the columList between ELSE and END:  beg=&apos;||cast(elsePos as varchar)||&apos; endPos=&apos;||cast(endPos-3 as varchar));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/parseCaseExtract(columnExpression,elsePos,endPos-3,columnList,columnList);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Extract the columnList between the last THEN and END
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;Extract the columList between THEN and END:  beg=&apos;||cast(thenPos as varchar)||&apos; endPos=&apos;||cast(endPos-3 as varchar));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/parseCaseExtract(columnExpression,thenPos,endPos-3,columnList,columnList);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;set word = &apos;&apos;;
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;set word = word || ch;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;set i = i + 1;
&#x9;&#x9;END WHILE;
&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;if (caseType = &apos;Simple&apos;) then
&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;Function &quot;Simple Case&quot; Pattern: CASE expr1 WHEN expr2 THEN res1 WHEN val2 THEN res2 ELSE res3 END&apos;);
&#x9;&#x9;&#x9;elseif (caseType = &apos;Searched&apos;) then
&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;Function &quot;Searched Case&quot; Pattern: CASE WHEN expr1 [&lt;, =, &gt;, &lt;=, &gt;=, &lt;&gt;] expr2 THEN res1 ELSE res2 END&apos;);
&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;Case pattern not found.&apos;);
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;end if;
&#x9;end if;
&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;Return function=[&apos;||NVL(function,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;Return columnList=[&apos;||NVL(columnList,&apos;null&apos;)||&apos;]&apos;);
&#x9;end if;
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1554898110523</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="p:1:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="references" type="NULL"/>
</metadata>