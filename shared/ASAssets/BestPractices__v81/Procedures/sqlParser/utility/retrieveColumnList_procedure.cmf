<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:9a66723c-3693-47f1-a1f0-d7811996f9d5 -->
<metadata name="retrieveColumnList" path="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/retrieveColumnList" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>&lt;![CDATA[
&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

]]&gt;</annotation>
  <parameters>
    <parameter name="inColumnExpression" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="fromClauseVector" direction="IN" nullable="true">
      <datatype name="fromClauseVector" type="ARRAY" maxLength="0">
        <itemDatatype>
          <datatype name="FromClause_Type" referenceDefinitionSet="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/TypeDefinitions" referenceType="FromClause_Type" type="TREE" refId="257">
            <element name="resourcePath">
              <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
            </element>
            <element name="resourceType">
              <datatype name="VARCHAR" type="STRING" maxLength="255"/>
            </element>
            <element name="resourceAlias">
              <datatype name="VARCHAR" type="STRING" maxLength="255"/>
            </element>
            <element name="resourceName">
              <datatype name="VARCHAR" type="STRING" maxLength="255"/>
            </element>
          </datatype>
        </itemDatatype>
      </datatype>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="codingListColumns" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="result" direction="OUT" nullable="true">
      <datatype name="result" type="TABLE" refId="256">
        <element name="columnExpression">
          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
        </element>
      </datatype>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/TypeDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedString" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inCodingType" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="inEncodingActions" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="codingList" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inModuleNameInvoking" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inDebug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="inStringName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="outString" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/isComment" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="keyword" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="isComment" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/returnOccurrence" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="mode" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="delimiter" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="trimText" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="remainderText" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="resultText" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/_ProjectMaintenance/defaultValues" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/log/logDebugMessage" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="moduleName" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="moduleNameType" type="STRING" maxLength="4096"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="messageText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inWord" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getBasicResourceCursor_PROCEDURE_CURSOR" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="fullResourcePath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="cursorNum" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="resourceCursor" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="resourceName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resourcePath">
            <datatype type="STRING" maxLength="4096"/>
          </element>
          <element name="resourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="annotation">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="tableType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="sqlText">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="columnName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="columnType">
            <datatype type="STRING" maxLength="4096"/>
          </element>
          <element name="columnBaseType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="dataType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="paramDirection">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="nativeBaseType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="nativeType">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getBasicResourceCursor_SQL_TABLE" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="fullResourcePath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceCursor" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="resourceName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resourcePath">
            <datatype type="STRING" maxLength="1024"/>
          </element>
          <element name="resourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="annotation">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="explicitlyDesigned">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="tableType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="sqlText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="proprietaryModel">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="columnName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="columnType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="nativeBaseType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="nativeType">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/TextUtils/RegexReplace" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="Input Text" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Regular Expression" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Replacement Text" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Occurrence" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/*
&#x9;retrieveColumnList - Retrieve the complete column list for the sql projection.

&#x9;  Handle the following use cases:
&#x9;&#x9;1. select *
&#x9;&#x9;2. select table1.*
&#x9;&#x9;3. select table1.    * -- remove the spaces first
&#x9;&#x9;otherwise just return the expression as is with no processing.

&#x9;Exceptions:  none

&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;CSW Version:&#x9;Reason:
&#x9;11/11/2011&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.2.0&#x9;&#x9;&#x9;Created new
&#x9;03/15/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.2.0&#x9;&#x9;&#x9;Modifications for Best Practices 7.0
&#x9;06/24/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.0.0&#x9;&#x9;&#x9;7.2: Multiple instances of Best Practices supported
&#x9;12/18/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.2.0&#x9;&#x9;&#x9;8.1: Fixed issue with quoting reserved words around the column expression using applyReservedListToWord().
&#x9;03/28/2014&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.2.0&#x9;&#x9;&#x9;8.1.1: Added ability to parse PROCEDURE types and return the column list.
&#x9;11/20/2014&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.2.6&#x9;&#x9;&#x9;8.1.5: Added &apos;D S&apos; to the getCodedString(&apos;D&apos;, &apos;D S&apos;, ...) invocation because of a change to getCodedString.
&#x9;04/15/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;B.P. 2019.200: Added scriptsPath for flexibility of the location of the _scripts folder.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   Changed custom functions to explicit paths.

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

*/
PROCEDURE retrieveColumnList(
&#x9;IN inColumnExpression&#x9;LONGVARCHAR,
&#x9;IN fromClauseVector&#x9;&#x9;VECTOR(/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/TypeDefinitions.FromClause_Type),
&#x9;IN codingListColumns&#x9;VARCHAR(4000),
&#x9;OUT result &#x9;&#x9;&#x9;&#x9;PIPE(columnExpression LONGVARCHAR)
)
BEGIN
&#x9;DECLARE moduleName&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;retrieveColumnList&apos;;
&#x9;DECLARE debug&#x9;&#x9;&#x9;&#x9;CHAR(1)DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.debugSqlParser3;
&#x9;DECLARE columnExpression &#x9;LONGVARCHAR DEFAULT inColumnExpression;
&#x9;DECLARE columnExpressionTmp&#x9;LONGVARCHAR;
&#x9;DECLARE remainder&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE i&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER DEFAULT 1;
&#x9;DECLARE sourceAlias&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE fromResourcePath&#x9;LONGVARCHAR;
&#x9;DECLARE fromResourceType&#x9;VARCHAR;
&#x9;DECLARE padNum&#x9;&#x9;&#x9;&#x9;INTEGER DEFAULT 80;
&#x9;DECLARE regexPattern&#x9;&#x9;VARCHAR DEFAULT &apos;(?&lt;=\*)\s* |\s(?=\*)|\s*(?=\*)|(?&lt;=\.)&apos;;
&#x9;DECLARE isComment&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE debugTime&#x9;&#x9;&#x9;CHAR(1) DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.debugTime;
&#x9;DECLARE startTime&#x9;&#x9;&#x9;TIMESTAMP DEFAULT CURRENT_TIMESTAMP;
&#x9;DECLARE duration&#x9;&#x9;&#x9;INTERVAL MINUTE TO SECOND;
&#x9;DECLARE seconds&#x9;&#x9;&#x9;&#x9;DECIMAL(32,3);
&#x9;DECLARE columnName&#x9;&#x9;&#x9;VARCHAR;

&#x9;-- Remove the space between . and * (TABLE.   *) using a regex pattern.
&#x9;call /shared/ASAssets/Utilities/string/TextUtils/RegexReplace(inColumnExpression, regexPattern, &apos;&apos;, 0, columnExpressionTmp);
&#x9;set columnExpressionTmp = TRIM(columnExpressionTmp);
&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;RegexReplace columnExpression=&apos;||columnExpressionTmp);
&#x9;end if;

&#x9;-- Skip column expressions that are comments.
&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/isComment(columnExpressionTmp, isComment);
&#x9;if (isComment = 0) then
&#x9;&#x9;-- Look for SQL wildcard projection: select * from...
&#x9;&#x9;if (POSITION(&apos;*&apos; in columnExpressionTmp) &gt; 0) then
&#x9;--&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;  vector resourceAlias=&apos;||fromClauseVector[1].resourceAlias);
&#x9;--&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;  vector resourcePath=&apos;||fromClauseVector[1].resourcePath);
&#x9;--&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;  vector resourceType=&apos;||fromClauseVector[1].resourceType);
&#x9;&#x9;&#x9;-- Use case 1: [select *] - this is a single asterisk &quot;*&quot; by itself with no other column projections.
&#x9;&#x9;&#x9;if (columnExpressionTmp = &apos;*&apos;) then
&#x9;&#x9;&#x9;&#x9;set fromResourcePath = fromClauseVector[1].resourcePath;
&#x9;&#x9;&#x9;&#x9;set fromResourceType = fromClauseVector[1].resourceType;
&#x9;&#x9;&#x9;&#x9;if (fromResourceType = &apos;TABLE&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;for r as 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;select * from /shared/ASAssets/Utilities/repository/getBasicResourceCursor_SQL_TABLE(fromResourcePath,fromResourceType)
&#x9;&#x9;&#x9;&#x9;&#x9;do
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (r.columnName is not null) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set columnName = r.columnName;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Make sure any reserved words are quoted.   
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- 2014-11-21: mtinius 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   Handle the unique situation where there is a double quote in the column name.  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   In CIS there must be 2 double quotes present in the view to escape a single double quote for the view to be valid.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (INSTR(columnName, &apos;&quot;&apos;) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set columnName = REPLACE(columnName, &apos;&quot;&apos;, &apos;&quot;&quot;&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set columnName = &apos;&quot;&apos;||columnName||&apos;&quot;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--Pattern:  COLUMN_NAME:[mycolumn]
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord(columnName, null, columnName);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set columnExpressionTmp = fromClauseVector[1].resourceAlias||&apos;.&apos;|| columnName;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Encode the column expression
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedString(&apos;E&apos;, &apos;D S&apos;, codingListColumns, columnExpressionTmp, moduleName, debug, &apos;columnExpression&apos;, columnExpression);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,RPAD(&apos;* column=&apos;||r.columnName,padNum,&apos; &apos;)||&apos;  columnExpression=&apos;||columnExpressionTmp||&apos;  columnExpressionEncoded=&apos;||columnExpression);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;insert into result values(columnExpression);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;end for;
&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;if (fromResourceType = &apos;PROCEDURE&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;for r as 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;select * from /shared/ASAssets/Utilities/repository/getBasicResourceCursor_PROCEDURE_CURSOR(fromResourcePath,fromResourceType, 1) WHERE columnType != &apos;CURSOR&apos; 
&#x9;&#x9;&#x9;&#x9;&#x9;do
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (r.columnName is not null) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set columnName = r.columnName;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Make sure any reserved words are quoted.   
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- 2014-11-21: mtinius 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   Handle the unique situation where there is a double quote in the column name.  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   In CIS there must be 2 double quotes present in the view to escape a single double quote for the view to be valid.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (INSTR(columnName, &apos;&quot;&apos;) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set columnName = REPLACE(columnName, &apos;&quot;&apos;, &apos;&quot;&quot;&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set columnName = &apos;&quot;&apos;||columnName||&apos;&quot;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--Pattern:  COLUMN_NAME:[mycolumn]
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord(columnName, null, columnName);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set columnExpressionTmp = fromClauseVector[1].resourceAlias||&apos;.&apos;|| columnName;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Encode the column expression
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedString(&apos;E&apos;, &apos;D S&apos;, codingListColumns, columnExpressionTmp, moduleName, debug, &apos;columnExpression&apos;, columnExpression);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,RPAD(&apos;* column=&apos;||r.columnName,padNum,&apos; &apos;)||&apos;  columnExpression=&apos;||columnExpressionTmp||&apos;  columnExpressionEncoded=&apos;||columnExpression);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;insert into result values(columnExpression);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;end for;
&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;elseif (POSITION(&apos;.*&apos; in columnExpressionTmp) &gt; 0) then -- Use case 2: select table1.*
&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/returnOccurrence(columnExpressionTmp,&apos;B&apos;,&apos;.*&apos;,1,remainder,sourceAlias);

&#x9;&#x9;&#x9;&#x9;-- Replace the encoded commas with real commas
&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedString(&apos;D&apos;, &apos;D S&apos;, codingListColumns, sourceAlias, moduleName, debug, &apos;sourceAlias&apos;, sourceAlias);
&#x9;&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;table.* remainder=&apos;||remainder||&apos;  sourceAlias=&apos;||sourceAlias);
&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;WHILE (i &lt;= CARDINALITY(fromClauseVector)) DO
&#x9;&#x9;&#x9;&#x9;&#x9;set fromResourcePath = fromClauseVector[i].resourcePath;
&#x9;&#x9;&#x9;&#x9;&#x9;set fromResourceType = fromClauseVector[i].resourceType;
&#x9;&#x9;&#x9;&#x9;&#x9;if (sourceAlias = fromClauseVector[i].resourceAlias) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;table.* sourceAlias=&apos;||sourceAlias);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;vector resourceAlias=&apos;||fromClauseVector[i].resourceAlias);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;vector resourcePath=&apos;||fromClauseVector[i].resourcePath);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;vector resourceType=&apos;||fromClauseVector[i].resourceType);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (fromResourceType = &apos;TABLE&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for r as 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;select * from /shared/ASAssets/Utilities/repository/getBasicResourceCursor_SQL_TABLE(fromResourcePath, fromResourceType)
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;do
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (r.columnName is not null) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set columnName = r.columnName;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Make sure any reserved words are quoted.   
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- 2014-11-21: mtinius 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   Handle the unique situation where there is a double quote in the column name.  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   In CIS there must be 2 double quotes present in the view to escape a single double quote for the view to be valid.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (INSTR(columnName, &apos;&quot;&apos;) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set columnName = REPLACE(columnName, &apos;&quot;&apos;, &apos;&quot;&quot;&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set columnName = &apos;&quot;&apos;||columnName||&apos;&quot;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--Pattern:  COLUMN_NAME:[mycolumn]
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord(columnName, null, columnName);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set columnExpressionTmp = fromClauseVector[i].resourceAlias ||&apos;.&apos;|| columnName;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Encode the column expression
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedString(&apos;E&apos;, &apos;D S&apos;, codingListColumns, columnExpressionTmp, moduleName, debug, &apos;columnExpression&apos;, columnExpression);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,RPAD(&apos;table.* column=&apos;||r.columnName,padNum,&apos; &apos;)||&apos;  columnExpression=&apos;||columnExpressionTmp||&apos;  columnExpressionEncoded=&apos;||columnExpression);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;insert into result values(columnExpression);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end for;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (fromResourceType = &apos;PROCEDURE&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for r as 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;select * from /shared/ASAssets/Utilities/repository/getBasicResourceCursor_PROCEDURE_CURSOR(fromResourcePath,fromResourceType, 1) WHERE columnType != &apos;CURSOR&apos; 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;do
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (r.columnName is not null) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set columnName = r.columnName;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Make sure any reserved words are quoted.   
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- 2014-11-21: mtinius 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   Handle the unique situation where there is a double quote in the column name.  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   In CIS there must be 2 double quotes present in the view to escape a single double quote for the view to be valid.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (INSTR(columnName, &apos;&quot;&apos;) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set columnName = REPLACE(columnName, &apos;&quot;&apos;, &apos;&quot;&quot;&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set columnName = &apos;&quot;&apos;||columnName||&apos;&quot;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--Pattern:  COLUMN_NAME:[mycolumn]
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord(columnName, null, columnName);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set columnExpressionTmp = fromClauseVector[i].resourceAlias||&apos;.&apos;|| columnName;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Encode the column expression
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedString(&apos;E&apos;, &apos;D S&apos;, codingListColumns, columnExpressionTmp, moduleName, debug, &apos;columnExpression&apos;, columnExpression);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,RPAD(&apos;table.* column=&apos;||r.columnName,padNum,&apos; &apos;)||&apos;  columnExpression=&apos;||columnExpressionTmp||&apos;  columnExpressionEncoded=&apos;||columnExpression);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;insert into result values(columnExpression);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end for;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;set i = i + 1;
&#x9;&#x9;&#x9;&#x9;END WHILE;
&#x9;&#x9;&#x9;else -- regular column
&#x9;&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;regular1 column=&apos;||columnExpression||&apos;  columnExpression=&apos;||columnExpression);
&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;insert into result values(columnExpression);
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;else -- regular column
&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;regular2 column=&apos;||columnExpression||&apos;  columnExpression=&apos;||columnExpression);
&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;insert into result values(columnExpression);
&#x9;&#x9;end if;
&#x9;else  -- regular commented column
&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;commented column=&apos;||columnExpression||&apos;  columnExpression=&apos;||columnExpression);
&#x9;&#x9;end if;

&#x9;&#x9;insert into result values(columnExpression);
&#x9;end if;
&#x9;set duration = CURRENT_TIMESTAMP - startTime;
&#x9;set seconds = EXTRACT(SECONDS FROM duration);
&#x9;if (seconds &gt; .05 and debugTime = &apos;Y&apos;) then
&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debugTime,&apos;duration=&apos;||cast(duration as varchar)||&apos;  columnExpression=&apos;||NVL(columnExpression,&apos;null&apos;));
&#x9;end if;
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1560603906783</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="p:1:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="references" type="NULL"/>
</metadata>