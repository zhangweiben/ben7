<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:9a66723c-3693-47f1-a1f0-d7811996f9d5 -->
<metadata name="numOccurrences" path="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/numOccurrences" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>&lt;![CDATA[findString:
&#x9;Given two input strings, this function returns an integer value representing the starting 
&#x9;position of the first string within the second string.  The third parameter indicates which direction
&#x9;to begin searching.  When &apos;F&apos;, begin searching forward from the beginning of the second string.
&#x9;When &apos;R&apos;, begin search in reverse from the end of the second string.
&#x9;&#x9;* This function is case-sensitive.
&#x9;&#x9;* All string types, all numeric types, and all data types are accepted as input arguments.
&#x9;&#x9;* The output is always an integer provided none of the input strings is NULL. Otherwise, NULL is returned.
&#x9;&#x9;* If any of the arguments is NULL, the function returns NULL.
&#x9;&#x9;* If the first argument is a blank string, the function returns 1 (one).
&#x9;&#x9;* If the first argument is not found within the second argument, the function returns 0 (zero).
 
&#x9;Input:
&#x9;&#x9;searchString - The search string is what you are looking for.  If this value is null, then the output is null
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;A blank (&apos;&apos;) non-null string for the search string always produces 1 for an output.
&#x9;&#x9;&#x9;Values: Any text value
&#x9;&#x9;stringToSearch - The string to search within for the search string. If this value is null, then the output is null
&#x9;&#x9;&#x9;Values: Any text value
&#x9;&#x9;direction - The direction which you want to search
&#x9;&#x9;&#x9;Values: &apos;F&apos;=search forward, &apos;R&apos;=search in reverse
&#x9;Output:
&#x9;&#x9;pos - an integer value representing the position of the string
&#x9;&#x9;&#x9;Values: null, or any positive integer

&#x9;&#x9;Examples: 
&#x9;  &#x9;&#x9;direction=&apos;F&apos;
&#x9;&#x9;&#x9;&#x9;POSITION(‘it’ IN ‘case-sensitivity’),  
&#x9;&#x9;&#x9;&#x9;&#x9;Output: 10           ^
&#x9;&#x9;&#x9;&#x9;POSITION(‘’ IN ‘mistake’) -- a blank non-null string for the search string always produces 1 for an output.
&#x9;&#x9;&#x9;&#x9;&#x9;Output: 1
&#x9;&#x9;&#x9;&#x9;POSITION(‘no’ IN ’yes’)
&#x9;&#x9;&#x9;&#x9;&#x9;Output: 0
&#x9;  &#x9;&#x9;direction=&apos;R&apos;
&#x9;&#x9;&#x9;&#x9;POSITION(‘it’ IN ‘case-sensitivity’)
&#x9;&#x9;&#x9;&#x9;&#x9;Output: 14               ^
&#x9;&#x9;&#x9;&#x9;POSITION(‘no’ IN ’yes’)
&#x9;&#x9;&#x9;&#x9;&#x9;Output: 0

&#x9;Exceptions:  none
&#x9;Author:      Mike Tinius
&#x9;Date:        8/17/2010
&#x9;CSW Version: 5.1.0

    Copyright (c) 2010
    Composite Software, Inc.
    All Rights Reserved
&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

]]&gt;</annotation>
  <parameters>
    <parameter name="searchString" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="inStringToSearch" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="num" direction="OUT" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <attribute name="Script" type="STRING">/* 
&#x9;numOccurrences:
&#x9;Given two input strings, this function returns an integer value representing the starting 
&#x9;position of the first string within the second string.  The third parameter indicates which direction
&#x9;to begin searching.  When &apos;F&apos;, begin searching forward from the beginning of the second string.
&#x9;When &apos;R&apos;, begin search in reverse from the end of the second string.
&#x9;&#x9;* This function is case-sensitive.
&#x9;&#x9;* All string types, all numeric types, and all data types are accepted as input arguments.
&#x9;&#x9;* The output is always an integer provided none of the input strings is NULL. Otherwise, NULL is returned.
&#x9;&#x9;* If any of the arguments is NULL, the function returns NULL.
&#x9;&#x9;* If the first argument is a blank string, the function returns 1 (one).
&#x9;&#x9;* If the first argument is not found within the second argument, the function returns 0 (zero).
 
&#x9;Input:
&#x9;&#x9;searchString - The search string is what you are looking for.  If this value is null, then the output is null
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;A blank (&apos;&apos;) non-null string for the search string always produces 1 for an output.
&#x9;&#x9;&#x9;Values: Any text value
&#x9;&#x9;stringToSearch - The string to search within for the search string. If this value is null, then the output is null
&#x9;&#x9;&#x9;Values: Any text value
&#x9;Output:
&#x9;&#x9;num - an integer value representing the number of occurrences of the string
&#x9;&#x9;&#x9;Values: null, or any positive integer

&#x9;&#x9;Examples: 
&#x9;&#x9;&#x9;&#x9;POSITION(‘it’ IN ‘case-sensitivity’),  
&#x9;&#x9;&#x9;&#x9;&#x9;Output: 10           ^
&#x9;&#x9;&#x9;&#x9;POSITION(‘’ IN ‘mistake’) -- a blank non-null string for the search string always produces 1 for an output.
&#x9;&#x9;&#x9;&#x9;&#x9;Output: 1
&#x9;&#x9;&#x9;&#x9;POSITION(‘no’ IN ’yes’)
&#x9;&#x9;&#x9;&#x9;&#x9;Output: 0

&#x9;Exceptions:  none

&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;CSW Version:&#x9;Reason:
&#x9;11/11/2011&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.2.0&#x9;&#x9;&#x9;Created new
&#x9;03/15/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.2.0&#x9;&#x9;&#x9;Modifications for Best Practices 7.0

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

*/
PROCEDURE numOccurrences(
&#x9;IN searchString&#x9;&#x9;LONGVARCHAR,
&#x9;IN inStringToSearch&#x9;LONGVARCHAR,
&#x9;OUT num&#x9;&#x9;&#x9;&#x9;INTEGER&#x9;
)
BEGIN
&#x9;DECLARE nextpos&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE countpos&#x9;&#x9;INTEGER DEFAULT 0;
&#x9;DECLARE stringToSearch&#x9;LONGVARCHAR DEFAULT inStringToSearch;
&#x9;DECLARE pos&#x9;&#x9;&#x9;&#x9;INTEGER;

--&#x9;call print(&apos;searchString=[&apos;||emptyStr(searchString)||&apos;]&apos;);
--&#x9;call print(&apos;stringToSearch=[&apos;||emptyStr(stringToSearch)||&apos;]&apos;);
&#x9;set num = 0;
&#x9;IF (searchString is not null and stringToSearch is not null) THEN
&#x9;&#x9;posLoop:
&#x9;&#x9;WHILE (true) DO
&#x9;&#x9;&#x9;set nextpos = POSITION(searchString IN stringToSearch);
&#x9;&#x9;&#x9;set countpos = countpos + nextpos;
&#x9;&#x9;&#x9;IF (nextpos = 0 or nextpos is null) THEN
&#x9;&#x9;&#x9;&#x9;leave posLoop;
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;set stringToSearch = SUBSTRING(stringToSearch, nextpos+1, LENGTH(stringToSearch));
&#x9;&#x9;&#x9;&#x9;set num = num + 1;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END WHILE;
&#x9;END IF;
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1513829825991</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
</metadata>