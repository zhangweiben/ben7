<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:e931daa6-7fda-456a-badf-4cdb1c228a1a -->
<metadata name="parseArithmeticOperators" path="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/parseArithmeticOperators" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>&lt;![CDATA[
&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

]]&gt;</annotation>
  <parameters>
    <parameter name="inColumnList" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="columnList" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/isNumber" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="valueString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/numOccurrences" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="searchString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inStringToSearch" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="num" direction="OUT">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/_ProjectMaintenance/defaultValues" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/log/logDebugMessage" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="moduleName" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="moduleNameType" type="STRING" maxLength="4096"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="messageText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/TextUtils/RegexPosition" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="Input Text" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Regular Expression" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Occurrence" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/TextUtils/RegexReplace" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="Input Text" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Regular Expression" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Replacement Text" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Occurrence" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/extractDelimitedText" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inputString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="delimiter" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="occurrence" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="reverseInputText" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="reverseOutput" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="trimText" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="includeDelimiter" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="object">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/*
&#x9;parseArithmeticOperators - parse a column expression that contains mathematic operators and return the column list
&#x9;&#x9;with separators as needed.

&#x9;&#x9;Arithmetic Operators:  ADD (+), DIVIDE (/), MODULO (%), MULTIPLY (*), NEGATE (-), SUBTRACT (-) and FACTORIAL(!)
&#x9;&#x9;&#x9;Of these, all the operators except NEGATE take two arguments, whereas Negate takes only one.
&#x9;&#x9;&#x9;The following section lists the input and output types for each of the built-in arithmetic operators.
&#x9;IN
&#x9;&#x9;inColumnList - the existing column list to add to
&#x9;OUT
&#x9;&#x9;columnList - a list of column expressions found that are not literal strings or numbers.
&#x9;&#x9;&#x9;this may contain additional function expressions

&#x9;Exceptions:  none

&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;CSW Version:&#x9;Reason:
&#x9;11/11/2011&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.2.0&#x9;&#x9;&#x9;Created new
&#x9;03/15/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.2.0&#x9;&#x9;&#x9;Modifications for Best Practices 7.0
&#x9;06/24/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.0.0&#x9;&#x9;&#x9;7.2: Multiple instances of Best Practices supported
&#x9;10/25/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.2.0&#x9;&#x9;&#x9;8.0: Removed the TRIM around the SUBSTRING for wordPart and wordToken as the space separator is required
&#x9;03/02/2018&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.5&#x9;&#x9;&#x9;Replaced RegexSplit with extractDelimitedText

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

*/
PROCEDURE parseArithmeticOperators(
&#x9;IN inColumnList&#x9;&#x9;LONGVARCHAR,
&#x9;OUT columnList&#x9;&#x9;LONGVARCHAR
)
BEGIN
&#x9;DECLARE moduleName&#x9;&#x9;VARCHAR DEFAULT &apos;parseArithmeticOperators&apos;;
&#x9;DECLARE debug&#x9;&#x9;&#x9;CHAR(1) DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.debugSqlParser3;
&#x9;DECLARE regex&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;[\+\-\/\*\%\!]&apos;;
&#x9;DECLARE recordSeparator&#x9;VARCHAR DEFAULT &apos;001f&apos;;
&#x9;DECLARE sep&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;^&apos;; -- separator
&#x9;DECLARE expression&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE columnListTmp&#x9;LONGVARCHAR;
&#x9;DECLARE word&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE wordPart&#x9;&#x9;LONGVARCHAR DEFAULT &apos;&apos;;
&#x9;DECLARE wordToken&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE embeddedCase&#x9;BOOLEAN DEFAULT false;
&#x9;DECLARE numDoubleQuotes INTEGER;
&#x9;DECLARE pos1,pos2&#x9;&#x9;INTEGER;
&#x9;DECLARE isNumber&#x9;&#x9;INTEGER;

&#x9;set columnList = &apos;&apos;;
&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;inColumnList=[&apos;||NVL(inColumnList,&apos;null&apos;)||&apos;]&apos;);
&#x9;end if;

&#x9;-- Split the incoming expression into its existing delimiter &quot;^&quot;
&#x9;for r as select * from /shared/ASAssets/Utilities/string/extractDelimitedText(inColumnList,sep,0,0,0,0,0) do
&#x9;&#x9;set word = r.object;
&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;split word=[&apos;||NVL(word,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;end if;

&#x9;&#x9;-- Look for double quotes first.  They always come in pairs.
&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/numOccurrences(&apos;&quot;&apos;, word, numDoubleQuotes);
&#x9;&#x9;set numDoubleQuotes = numDoubleQuotes + 1;

&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;numDoubleQuotes=[&apos;||NVL(cast(numDoubleQuotes as varchar),&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;end if;

&#x9;&#x9;set wordPart = &apos;&apos;;
&#x9;&#x9;while (numDoubleQuotes &gt; 0 AND word IS NOT NULL AND LENGTH(&apos;|&apos;||word||&apos;|&apos;) &gt; 2) do  --notEmpty
&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;word=[&apos;||NVL(word,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;if (numDoubleQuotes &gt;= 2) then
&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/string/TextUtils/RegexPosition(word,&apos;&quot;&apos;,1, pos1);
&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/string/TextUtils/RegexPosition(word,&apos;&quot;&apos;,2, pos2);
&#x9;&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;pos1=[&apos;||NVL(cast(pos1 as varchar),&apos;null&apos;)||&apos;]  pos2=[&apos;||NVL(cast(pos2 as varchar),&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;-- Double Quote found in first position &quot;table&quot;.&quot;col1&quot;
&#x9;&#x9;&#x9;&#x9;if (pos1 = 1 and pos2 &gt; pos1) then
&#x9;&#x9;&#x9;&#x9;&#x9;set wordToken = SUBSTRING(word,pos1,pos2);
&#x9;&#x9;&#x9;&#x9;&#x9;set wordPart = wordPart || TRIM(SUBSTRING(word,pos1,pos2));
&#x9;&#x9;&#x9;&#x9;&#x9;set numDoubleQuotes = numDoubleQuotes - 2;
&#x9;&#x9;&#x9;&#x9;&#x9;set word = SUBSTRING(word,pos2+1);
&#x9;&#x9;&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;1. wordToken=[&apos;||NVL(wordToken,&apos;null&apos;)||&apos;]  wordPart=[&apos;||NVL(wordPart,&apos;null&apos;)||&apos;]  word=[&apos;||NVL(word,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;-- Double Quote found in pos1 and pos2
&#x9;&#x9;&#x9;&#x9;elseif (pos1 &gt; 1 and pos2 &gt; pos1) then
&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/string/TextUtils/RegexReplace(SUBSTRING(word,1,pos1-1), regex, recordSeparator, 0, wordToken);
&#x9;&#x9;&#x9;&#x9;&#x9;set wordPart = wordPart || wordToken;
&#x9;&#x9;&#x9;&#x9;&#x9;set word = SUBSTRING(word,pos1);
&#x9;&#x9;&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;2. wordToken=[&apos;||NVL(wordToken,&apos;null&apos;)||&apos;]  wordPart=[&apos;||NVL(wordPart,&apos;null&apos;)||&apos;]  word=[&apos;||NVL(word,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;if (word is not null and LENGTH(word) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/string/TextUtils/RegexReplace(word, regex, recordSeparator, 0, wordToken);
&#x9;&#x9;&#x9;&#x9;&#x9;set wordPart = wordPart || wordToken;
&#x9;&#x9;&#x9;&#x9;&#x9;set word = SUBSTRING(word,pos1);
&#x9;&#x9;&#x9;&#x9;&#x9;set numDoubleQuotes = numDoubleQuotes - 1;
&#x9;&#x9;&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;3. wordToken=[&apos;||NVL(wordToken,&apos;null&apos;)||&apos;]  wordPart=[&apos;||NVL(wordPart,&apos;null&apos;)||&apos;]  word=[&apos;||NVL(word,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;end while;

&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;wordPart[&apos;||NVL(wordPart,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;end if;

&#x9;&#x9;&#x9;--- Split into words based on aritmetic separators
&#x9;&#x9;&#x9;for s as select * from /shared/ASAssets/Utilities/string/extractDelimitedText(wordPart,recordSeparator,0,0,0,1,0) do
&#x9;&#x9;&#x9;&#x9;set wordToken = s.object;
&#x9;&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;math word=[&apos;||NVL(wordToken,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/isNumber(wordToken, isNumber);
&#x9;&#x9;&#x9;&#x9;if (wordToken IS NOT NULL AND LENGTH(&apos;|&apos;||wordToken||&apos;|&apos;) &gt; 2 and isNumber = 0) then  --notEmpty
&#x9;&#x9;&#x9;&#x9;&#x9;if (columnList IS NOT NULL AND LENGTH(&apos;|&apos;||columnList||&apos;|&apos;) &gt; 2 and wordToken != &apos;.&apos;) then  --notEmpty
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set columnList = columnList || sep;
&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;set columnList = columnList || wordToken;
&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;end for;
&#x9;end for;
&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;columnList=[&apos;||NVL(columnList,&apos;null&apos;)||&apos;]&apos;);
&#x9;end if;
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1554566369823</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
</metadata>