<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:9a66723c-3693-47f1-a1f0-d7811996f9d5 -->
<metadata name="generateDatasourceListCSV" path="/shared/ASAssets/BestPractices_v81/Procedures/generateDatasourceListCSV" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>&lt;![CDATA[
&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

]]&gt;</annotation>
  <parameters>
    <parameter name="csvFullPath" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="bufferSize" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="generateHeader" direction="IN" nullable="true">
      <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
    </parameter>
    <parameter name="generateLogicalNames" direction="IN" nullable="true">
      <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
    </parameter>
    <parameter name="targetResource" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="layerType" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="groupIds" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="derivedFilterPath" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="ConfigParamsVector" direction="IN" nullable="true">
      <datatype name="ConfigParamsVector" type="ARRAY" maxLength="0">
        <itemDatatype>
          <datatype name="ConfigParamsType" referenceDefinitionSet="/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions" referenceType="ConfigParamsType" type="TREE" refId="257">
            <element name="generateMode">
              <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
            </element>
            <element name="outputMode">
              <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
            </element>
            <element name="generateViews">
              <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
            </element>
            <element name="resourceCaseRule">
              <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
            </element>
            <element name="columnCaseRule">
              <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
            </element>
            <element name="separator">
              <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
            </element>
            <element name="useAliasRule">
              <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
            </element>
            <element name="resourcePrefix">
              <datatype name="VARCHAR" type="STRING" maxLength="255"/>
            </element>
            <element name="resourceSuffix">
              <datatype name="VARCHAR" type="STRING" maxLength="255"/>
            </element>
            <element name="generateWithSourceColumn">
              <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
            </element>
            <element name="generateCast">
              <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
            </element>
            <element name="generateIndexes">
              <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
            </element>
            <element name="debug">
              <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
            </element>
            <element name="debug2">
              <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
            </element>
            <element name="debug3">
              <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
            </element>
            <element name="basePath">
              <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
            </element>
            <element name="scriptsPath">
              <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
            </element>
            <element name="padAmount">
              <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
            </element>
          </datatype>
        </itemDatatype>
      </datatype>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed</attribute>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/generateDatasourceListXMLCSV" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="csvFullPath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="bufferSize" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="generateHeader" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="generateLogicalNames" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="targetResource" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="layerType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="groupIds" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="derivedFilterPath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="ConfigParamsXML" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* 
&#x9;generateDatasourceListCSV:
&#x9;-- Data Virtualization Best Practices --

&#x9;Output to a CSV file the data source structure an any given layer designated by the layerType parameter 
&#x9;or target folder name.

&#x9;Input:
&#x9;&#x9;&#x9;-- full server path to write out the CSV file
&#x9;&#x9;csvFullPath

&#x9;&#x9;&#x9;-- number of rows to buffer
&#x9;&#x9;bufferSize &#x9;

&#x9;&#x9;&#x9;-- 0 (FALSE) - do not generate the header
&#x9;&#x9;&#x9;-- 1 (TRUE) - do generate the header
&#x9;&#x9;generateHeader - generate the header or not

&#x9;&#x9;&#x9;-- 0 (FALSE) - generate datasource list only with no logical names, 
    &#x9;&#x9;-- 1 (TRUE) - generate datasource list with logical names
  &#x9;&#x9;generateLogicalNames - generate the logical names choice

&#x9;&#x9;&#x9;-- The target folder in CIS to begin searching for views to generate the view list or
&#x9;&#x9;&#x9;-- a target view (exact path) to generate for.
&#x9;&#x9;&#x9;-- If this is set it supercedes layerType, inGroupIDs and derivedFilterPath
&#x9; &#x9;targetResource

 &#x9;&#x9;-- If inTargetFolder is blank, then layerType, inGroupIds must be set with derivedFilterPath being optional
&#x9;&#x9;&#x9;-- PM=Physical Metadata - generateDatasourceList physical metadata tables
&#x9;&#x9;&#x9;-- FV=Formatting Views &#x9;- generateDatasourceList formatting views
&#x9;&#x9;&#x9;-- BV=Business Views &#x9;- generateDatasourceList business views (only single source)
&#x9;&#x9;&#x9;-- LV=Logical Views &#x9;- generateDatasourceList logical views (only single source)
&#x9;&#x9;&#x9;-- CV=Client Views &#x9;&#x9;- generateDatasourceList client views (only single source)
&#x9;&#x9;&#x9;-- CP=Client Published &#x9;- generateDatasourceList client published views (only single source)
 &#x9;&#x9;layerType - the designator for the layer in which to generate from

&#x9;&#x9;&#x9;-- This is a filter that allows the user to only generate for a specific group or list of groups
&#x9;&#x9;&#x9;--   found in the /generationScripts/Configure/ConfigureStartingFolders.
&#x9;&#x9;&#x9;--   Pass in null to select all groupIds.
&#x9;&#x9;inGroupIds - This is a comma separate list group ids to process. 

&#x9;&#x9;&#x9;-- The list &quot;derivedFilterPath&quot; is a comma-separated list of resources and may be used with either generateToFolder (option 1) to groupId (option 2) 
&#x9;&#x9;&#x9;-- The path is derived by concatenating the partial filter path with the target path of the designated layer type.
&#x9;&#x9;&#x9;-- The layerType and the groupId are used to filter the rows from the configureStartingFolders.  The target path is
&#x9;&#x9;&#x9;--    defined in configureStartingFolders per the layerType and groupId combination.
&#x9;&#x9;&#x9;--   e.g. layerType=PV and targetFolderPath=/shared/BestPractices/DataAbstractionSample/L1_Physical_Layer/Physical_Views
&#x9;&#x9;&#x9;--        The derivedFilterPath list=CUSTOMERS,EMPLOYEES
&#x9;&#x9;&#x9;--        Even though there are several other views in the /CISORADEMO folder under the Physical_Views only the ones specified
&#x9;&#x9;&#x9;--&#x9;      will be generated.  Views directly under the target path do not require any qualifying path except the view name.
&#x9;&#x9;&#x9;--        Lastly, a leading &apos;/&apos; is not required but may be present if desired.
&#x9;&#x9;&#x9;-- Correlate the groupId position with the derivedFilterPath position
&#x9;&#x9;&#x9;--&#x9;&#x9;derivedFilterPath=&quot;customers,orders&quot;,shippingmethods
&#x9;&#x9;&#x9;--                         |                     |
&#x9;&#x9;&#x9;--                         v                     v
&#x9;&#x9;&#x9;--&#x9;&#x9;          groupId=ds_inventory.tutorial,ds_orders.tutorial
&#x9;&#x9;&#x9;-- If null, generate views from all target folders as directed by the &quot;configure starting folders&quot; and the designated layer type.
&#x9;&#x9;derivedFilterPath&#x9;LONGVARCHAR, 

&#x9;&#x9;&#x9;-- The vector of configuration parameters.  A full description can be found in /generationScripts/Configure/ConfigureParams
&#x9;&#x9;ConfigParamsVector 
&#x9;Output:
&#x9;&#x9;A CSV file is output in the location specified by csvFullPath.  The output format is a comma separate file in this format:
&#x9;&#x9;&#x9;CommonModelV2Row ROW (
&#x9;&#x9;&#x9;&#x9;&quot;Data Source&quot; &#x9;&#x9;&#x9;&#x9;VARCHAR(255), -- The name of the data source in composite (data lineage-used resources)
--[NOT CURRENTLY IMPLEMENTED] Published&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(255), -- Indicates whether this element is published in composite (data lineage-dependent resources)
&#x9;&#x9;&#x9;&#x9;&quot;Parent Name&quot; &#x9;&#x9;&#x9;&#x9;VARCHAR(255), -- The name of the parent container - parent to the parent (a.k.a. grand parent)
&#x9;&#x9;&#x9;&#x9;&quot;Container Name&quot; &#x9;&#x9;&#x9;VARCHAR(255), -- The name of the container - parent to the resource
&#x9;&#x9;&#x9;&#x9;&quot;Physical Name&quot;&#x9;&#x9;&#x9;&#x9;VARCHAR(255), -- The physical column name (a.k.a. source column name)
&#x9;&#x9;&#x9;&#x9;&quot;Physical Type&quot;&#x9;&#x9;&#x9;&#x9;VARCHAR(255), -- The physical type (a.k.a. source column native type)
&#x9;&#x9;&#x9;&#x9;&quot;Logical Name&quot;&#x9;&#x9;&#x9;&#x9;VARCHAR(255), -- The logical column name (a.k.a. table/view alias)
&#x9;&#x9;&#x9;&#x9;&quot;Logical Type&quot; &#x9;&#x9;&#x9;&#x9;VARCHAR(255), -- The logical column type
&#x9;&#x9;&#x9;&#x9;&quot;Logial Transformation&quot;&#x9;&#x9;LONGVARCHAR,  -- The logical column transformation excluding outer cast statement
&#x9;&#x9;&#x9;&#x9;&quot;Logical Definition&quot;&#x9;&#x9;LONGVARCHAR,  -- The logical resource definition (a.k.a. view/table/column annotation)
&#x9;&#x9;&#x9;&#x9;&quot;Logical Path&quot;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR   -- The logical Path (this is not dumped to the spreadsheet)
&#x9;&#x9;&#x9;)

&#x9;Exceptions:  none

&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;CSW Version:&#x9;Reason:
&#x9;03/15/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.2.0&#x9;&#x9;&#x9;created new for modifications for Best Practices 7.0
&#x9;05/22/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.0.0&#x9;&#x9;&#x9;Modified for Best Practices 7.1
&#x9;07/31/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.0.0&#x9;&#x9;&#x9;B.P. 7.3: Fixed issue with generating when there is a header.
&#x9;01/24/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;8.0.0&#x9;&#x9;&#x9;B.P. 2019.1: Added the ability to handle columnCaseRule, resourcePrefix, resourceSuffix and newColumnList for generateMode=&apos;G&apos;. 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;newColumnList Format: column1&amp;&amp;type1&amp;&amp;value1//column2&amp;&amp;type2&amp;&amp;value2//column3&amp;&amp;type3&amp;&amp;value3
&#x9;04/15/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;B.P. 2019.200: Added scriptsPath for flexibility of the location of the _scripts folder.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   Changed custom functions to explicit paths.

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

*/
PROCEDURE generateDatasourceListCSV(
&#x9;&#x9;-- full server path to write out the CSV file
&#x9;IN csvFullPath&#x9;&#x9;&#x9;LONGVARCHAR,

&#x9;&#x9;-- number of rows to buffer
&#x9;IN bufferSize&#x9;&#x9;&#x9;INTEGER,
 &#x9;&#x9;
&#x9;&#x9;-- generate the header or not
&#x9;&#x9;-- 0 (FALSE) - do not generate the header
&#x9;&#x9;-- 1 (TRUE) - do generate the header
&#x9;IN generateHeader&#x9;&#x9;BIT,

&#x9;&#x9;-- 0 (FALSE) - generate datasource list only with no logical names, 
    &#x9;-- 1 (TRUE) - generate datasource list with logical names
   &#x9;IN generateLogicalNames&#x9;BIT, &#x9;&#x9;&#x9;

&#x9;&#x9;-- The target folder in CIS to begin searching for views to generate the view list or
&#x9;&#x9;-- a target view (exact path) to generate for.
&#x9;&#x9;-- If this is set it supercedes layerType, inGroupIDs and derivedFilterPath
&#x9;IN targetResource&#x9;&#x9;LONGVARCHAR,

&#x9;-- If inTargetFolder is blank, then layerType, inGroupIds must be set with derivedFilterPath being optional
&#x9;&#x9;-- PM=Physical Metadata - generateDatasourceList physical metadata tables
&#x9;&#x9;-- FV=Formatting Views &#x9;- generateDatasourceList formatting views
&#x9;&#x9;-- BV=Business Views &#x9;- generateDatasourceList business views (only single source)
&#x9;&#x9;-- LV=Logical Views &#x9;- generateDatasourceList logical views (only single source)
&#x9;&#x9;-- CV=Client Views &#x9;&#x9;- generateDatasourceList client views (only single source)
&#x9;&#x9;-- CP=Client Published &#x9;- generateDatasourceList client published views (only single source)
   &#x9;IN layerType&#x9;&#x9;&#x9;VARCHAR,

&#x9;&#x9;-- This is a comma separate list group ids to process. 
&#x9;&#x9;-- This is a filter that allows the user to only generate for a specific group or list of groups
&#x9;&#x9;--   found in the /generationScripts/Configure/ConfigureStartingFolders.
&#x9;&#x9;--   Pass in null to select all groupIds.
&#x9;IN groupIds&#x9;&#x9;&#x9;&#x9;LONGVARCHAR, 

&#x9;&#x9;-- The list &quot;derivedFilterPath&quot; is a comma-separated list of resources and may be used with either generateToFolder (option 1) to groupId (option 2) 
&#x9;&#x9;-- The path is derived by concatenating the partial filter path with the source path of the designated layer type.
&#x9;&#x9;-- The layerType and the groupId are used to filter the rows from the configureStartingFolders.  The source path is
&#x9;&#x9;--    defined in configureStartingFolders per the layerType and groupId combination.
&#x9;&#x9;--   e.g. layerType=CP and sourceFolderPath=/shared/BestPractices/DataAbstractionSample/L1_Mapping_Layer/Client_Views
&#x9;&#x9;--        The derivedFilterPath list=Orders_Closed,/Orders/Customers,Orders/Product
&#x9;&#x9;--        Even though there are several other views in the /Orders folder under the Client_Views only the ones specified
&#x9;&#x9;--&#x9;      will be generated to the Client_Published.  Views directly under the source path do not require any qualifying path except the view name.
&#x9;&#x9;--        Lastly, a leading &apos;/&apos; is not required but may be present if desired.
&#x9;&#x9;-- Correlate the groupId position with the derivedFilterPath position
&#x9;&#x9;--&#x9;&#x9;derivedFilterPath=&quot;customers,orders&quot;,shippingmethods
&#x9;&#x9;--                         |                     |
&#x9;&#x9;--                         v                     v
&#x9;&#x9;--&#x9;&#x9;          groupId=ds_inventory.tutorial,ds_orders.tutorial
&#x9;&#x9;-- If null, generate views from all source folders as directed by the &quot;configure starting folders&quot; and the designated layer type.
&#x9;IN derivedFilterPath&#x9;LONGVARCHAR, 

&#x9;&#x9;-- The vector of configuration parameters.  A full description can be found in /generationScripts/Configure/ConfigureParams
&#x9;IN ConfigParamsVector&#x9;VECTOR(/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions.ConfigParamsType)
)
BEGIN
&#x9;DECLARE moduleName&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;generateDatasourceListCSV&apos;;
&#x9;DECLARE ConfigParamsXML&#x9;&#x9;LONGVARCHAR;

&#x9;SET ConfigParamsXML = 
&apos;&lt;ConfigParamsType&gt;
    &lt;generateMode&gt;&apos;||TRIM(NVL(ConfigParamsVector[1].generateMode,&apos;  &apos;))||&apos;&lt;/generateMode&gt;
    &lt;outputMode&gt;&apos;||TRIM(NVL(ConfigParamsVector[1].outputMode,&apos;  &apos;))||&apos;&lt;/outputMode&gt;
    &lt;generateViews&gt;&apos;||TRIM(NVL(CAST(ConfigParamsVector[1].generateViews AS VARCHAR),&apos;  &apos;))||&apos;&lt;/generateViews&gt;
    &lt;resourceCaseRule&gt;&apos;||TRIM(NVL(ConfigParamsVector[1].resourceCaseRule,&apos;  &apos;))||&apos;&lt;/resourceCaseRule&gt;
    &lt;columnCaseRule&gt;&apos;||TRIM(NVL(ConfigParamsVector[1].columnCaseRule,&apos;  &apos;))||&apos;&lt;/columnCaseRule&gt;
    &lt;separator&gt;&apos;||TRIM(NVL(ConfigParamsVector[1].separator,&apos;  &apos;))||&apos;&lt;/separator&gt;
    &lt;useAliasRule&gt;&apos;||TRIM(NVL(CAST(ConfigParamsVector[1].useAliasRule AS VARCHAR),&apos;  &apos;))||&apos;&lt;/useAliasRule&gt;
    &lt;resourcePrefix&gt;&apos;||TRIM(NVL(ConfigParamsVector[1].resourcePrefix,&apos;  &apos;))||&apos;&lt;/resourcePrefix&gt;
    &lt;resourceSuffix&gt;&apos;||TRIM(NVL(ConfigParamsVector[1].resourceSuffix,&apos;  &apos;))||&apos;&lt;/resourceSuffix&gt;
    &lt;generateWithSourceColumn&gt;&apos;||TRIM(NVL(CAST(ConfigParamsVector[1].generateWithSourceColumn AS VARCHAR),&apos;  &apos;))||&apos;&lt;/generateWithSourceColumn&gt;
    &lt;generateCast&gt;&apos;||TRIM(NVL(CAST(ConfigParamsVector[1].generateCast AS VARCHAR),&apos;  &apos;))||&apos;&lt;/generateCast&gt;
    &lt;generateIndexes&gt;&apos;||TRIM(NVL(CAST(ConfigParamsVector[1].generateIndexes AS VARCHAR),&apos;  &apos;))||&apos;&lt;/generateIndexes&gt;
    &lt;debug&gt;&apos;||TRIM(NVL(ConfigParamsVector[1].debug,&apos;  &apos;))||&apos;&lt;/debug&gt;
    &lt;debug2&gt;&apos;||TRIM(NVL(ConfigParamsVector[1].debug2,&apos;  &apos;))||&apos;&lt;/debug2&gt;
    &lt;debug3&gt;&apos;||TRIM(NVL(ConfigParamsVector[1].debug3,&apos;  &apos;))||&apos;&lt;/debug3&gt;
    &lt;basePath&gt;&apos;||TRIM(NVL(ConfigParamsVector[1].basePath,&apos;  &apos;))||&apos;&lt;/basePath&gt;
    &lt;scriptsPath&gt;&apos;||TRIM(NVL(ConfigParamsVector[1].scriptsPath,&apos;  &apos;))||&apos;&lt;/scriptsPath&gt;
    &lt;padAmount&gt;&apos;||TRIM(NVL(CAST(ConfigParamsVector[1].padAmount AS VARCHAR),&apos;  &apos;))||&apos;&lt;/padAmount&gt;
&lt;/ConfigParamsType&gt;&apos;;

&#x9;IF (UPPER(ConfigParamsVector[1].debug) = &apos;Y&apos;) THEN
&#x9;&#x9;CALL PRINT(moduleName||&apos;: ConfigParamsXML:&apos;||CHR(10)||NVL(ConfigParamsXML,&apos;null&apos;));
&#x9;END IF;

&#x9;-- Invoke the generateDatasourceListXMLCSV
&#x9;CALL /shared/ASAssets/BestPractices_v81/Procedures/generateDatasourceListXMLCSV(csvFullPath, bufferSize, generateHeader, generateLogicalNames, targetResource, layerType, groupIds, derivedFilterPath, ConfigParamsXML);
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1564602622827</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="p:8:Customized" type="STRING">datatype.changed;datatype.changed</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">8/188</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
  </attribute>
</metadata>