<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:e931daa6-7fda-456a-badf-4cdb1c228a1a -->
<metadata name="applyWordRule" path="/shared/ASAssets/BestPractices_v81/Procedures/generateName/applyWordRule" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>&lt;![CDATA[
&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

]]&gt;</annotation>
  <parameters>
    <parameter name="caseRule" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="separator" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="useAliasRule" direction="IN" nullable="true">
      <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
    </parameter>
    <parameter name="basePath" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="debug3" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="word" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="result" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/generateName/applyAliasRule" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="useAliasRule" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="word" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="basePath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="debug3" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="alias" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/generateName/applyCaseRule" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="caseType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="word" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="debug3" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/log/logDebugMessage" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="moduleName" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="moduleNameType" type="STRING" maxLength="4096"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="messageText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inPath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/extractDelimitedText" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inputString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="delimiter" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="occurrence" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="reverseInputText" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="reverseOutput" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="trimText" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="includeDelimiter" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="object">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* applyWordRule:
&#x9;-- Composite Best Practices --
&#x9;Apply the rules for parsing a word into its word parts and applying various rules for case and aliasing.
 
&#x9;Input:
&#x9;&#x9;&#x9;-- &#x9;Assumption:  The original column name has to have separators (_) for this to work properly.
&#x9;&#x9;&#x9;--&#x9;&#x9;     If the original word has no separators then the case rule gets applied to the single word
&#x9;&#x9;&#x9;--&#x9;j=javaCase - 1st word part is lower case, following word parts are 1st is letter is upper and remaining word part is lower with no separators
&#x9;&#x9;&#x9;--&#x9;C=CamelCase - 1st letter of each word part is upper case and remaining word part is lower with no separators
&#x9;&#x9;&#x9;--&#x9;T=Title_Case - 1st letter of each word part is upper case and remaining word part is lower with separators retained
&#x9;&#x9;&#x9;--&#x9;U=UPPER_CASE - All word parts are UPPER case with separtors retained
&#x9;&#x9;&#x9;--&#x9;l=lower_case - All word parts are lower case with separators retained
&#x9;&#x9;&#x9;--&#x9;O=Original_case - The word is not changed at all -- just pass it through as is
&#x9;&#x9;caseRule - (used when generateMode=&apos;G&apos;) 

&#x9;&#x9;&#x9;-- separator (used when generateMode=&apos;G&apos;)
&#x9;&#x9;&#x9;--     1 character value such as _ or -.  Spaces are not allowed in column names.
&#x9;&#x9;&#x9;--&#x9;Example MY_COLUMN_NAME or MY-COLUMN-NAME&#x9; &#x9;
&#x9;&#x9;separator -- for example: &apos;_&apos;

&#x9;&#x9;&#x9;-- useAliasRule (used when generateMode=&apos;G&apos;)
&#x9;&#x9;&#x9;-- &#x9;When generating the abstract name from the data source, use the &quot;AliasNameRuleSet&quot; as a lookup procedure
&#x9;&#x9;&#x9;--&#x9;  to match a word part against the Alias table.  For exmaple:
&#x9;&#x9;&#x9;--&#x9;&#x9;word part=ds&#x9;&#x9;table alias=DS&#x9;&#x9;table rule=DataSource
&#x9;&#x9;&#x9;--&#x9;0=DO NOT perform alias rule lookup at all.  Word Part is passed through
&#x9;&#x9;&#x9;--&#x9;&#x9;result=ds
&#x9;&#x9;&#x9;--     &#x9;1=Use alias rule and MATCH CASE exactly
&#x9;&#x9;&#x9;--&#x9;&#x9;result=ds (the original word part &apos;ds&apos; is returned as no match is found becuase &apos;ds&apos; is not equal to &apos;DS&apos;
&#x9;&#x9;&#x9;--&#x9;2=Use alias rule and DO NOT MATCH CASE
&#x9;&#x9;&#x9;--&#x9;&#x9;result=DataSource (UPPER(&apos;ds&apos;) = &apos;DS&apos;, therefore DataSource is returned
&#x9;&#x9;useAliasRule -- 1=true (use alias rule), 0=false (do not use alias rule)

&#x9;&#x9;&#x9;-- the base path is the base CIS path to where AliasNameRuleSet() is located.
&#x9;&#x9;basePath

&#x9;&#x9;&#x9;-- Y=print debug, N=don&apos;t print debug&#x9;
&#x9;&#x9;debug3

&#x9;&#x9;&#x9;-- the word to apply the rules 
&#x9;&#x9;word
&#x9;Output:
&#x9;&#x9;result - the result of applying the various rules on a word

&#x9;Exceptions:  none

&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;CSW Version:&#x9;Reason:
&#x9;06/15/2010&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.2.0&#x9;&#x9;&#x9;Created new
&#x9;06/24/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.0.0&#x9;&#x9;&#x9;7.2: Multiple instances of Best Practices supported
&#x9;03/14/2014&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.2.5&#x9;&#x9;&#x9;Check for double quotes around word, remove for parsing.
&#x9;03/02/2018&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.5&#x9;&#x9;&#x9;Replaced parseWord with extractDelimitedText
&#x9;04/15/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;B.P. 2019.200: Changed custom functions to explicit paths.

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

*/
PROCEDURE applyWordRule(
&#x9;&#x9;-- caseRule (used when generateMode=&apos;G&apos;) 
&#x9;&#x9;-- &#x9;Assumption:  The original column name has to have separators (_) for this to work properly.
&#x9;&#x9;--&#x9;&#x9;     If the original word has no separators then the case rule gets applied to the single word
&#x9;&#x9;--&#x9;j=javaCase - 1st word part is lower case, following word parts are 1st is letter is upper and remaining word part is lower with no separators
&#x9;&#x9;--&#x9;C=CamelCase - 1st letter of each word part is upper case and remaining word part is lower with no separators
&#x9;&#x9;--&#x9;T=Title_Case - 1st letter of each word part is upper case and remaining word part is lower with separators retained
&#x9;&#x9;--&#x9;U=UPPER_CASE - All word parts are UPPER case with separtors retained
&#x9;&#x9;--&#x9;l=lower_case - All word parts are lower case with separators retained
&#x9;&#x9;--&#x9;O=Original_case - The word is not changed at all -- just pass it through as is
&#x9;IN&#x9;caseRule&#x9;&#x9;VARCHAR, 

&#x9;&#x9;-- separator (used when generateMode=&apos;G&apos;)
&#x9;&#x9;--     1 character value such as _ or -.  Spaces are not allowed in column names.
&#x9;&#x9;--&#x9;Example MY_COLUMN_NAME or MY-COLUMN-NAME&#x9; &#x9;
&#x9;IN&#x9;separator&#x9;&#x9;VARCHAR,   -- for example: &apos;_&apos;

&#x9;&#x9;-- useAliasRule (used when generateMode=&apos;G&apos;)
&#x9;&#x9;-- &#x9;When generating the abstract name from the data source, use the &quot;AliasNameRuleSet&quot; as a lookup procedure
&#x9;&#x9;--&#x9;  to match a word part against the Alias table.  For exmaple:
&#x9;&#x9;--&#x9;&#x9;word part=ds&#x9;&#x9;table alias=DS&#x9;&#x9;table rule=DataSource
&#x9;&#x9;--&#x9;0=DO NOT perform alias rule lookup at all.  Word Part is passed through
&#x9;&#x9;--&#x9;&#x9;result=ds
&#x9;&#x9;--     &#x9;1=Use alias rule and MATCH CASE exactly
&#x9;&#x9;--&#x9;&#x9;result=ds (the original word part &apos;ds&apos; is returned as no match is found becuase &apos;ds&apos; is not equal to &apos;DS&apos;
&#x9;&#x9;--&#x9;2=Use alias rule and DO NOT MATCH CASE
&#x9;&#x9;--&#x9;&#x9;result=DataSource (UPPER(&apos;ds&apos;) = &apos;DS&apos;, therefore DataSource is returned
&#x9;IN&#x9;useAliasRule&#x9;SMALLINT,  -- 1=true (use alias rule), 0=false (do not use alias rule)

&#x9;&#x9;-- the base path is the base CIS path to where AliasNameRuleSet() is located.
&#x9;&#x9;-- /shared/BestPractices/DataAbstractionSample/&quot;_generationScripts&quot;/Configure
&#x9;IN&#x9;basePath&#x9;&#x9;LONGVARCHAR,

&#x9;&#x9;-- Y=print debug, N=don&apos;t print debug&#x9;
&#x9;IN&#x9;debug3&#x9;&#x9;&#x9;CHAR(1),

&#x9;&#x9;-- the word to apply the rules 
&#x9;IN &#x9;word&#x9;&#x9;&#x9;VARCHAR,
&#x9;OUT result&#x9;&#x9;&#x9;LONGVARCHAR
)
BEGIN
&#x9;DECLARE indent&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;      &apos;;
&#x9;DECLARE moduleName&#x9;&#x9;VARCHAR DEFAULT indent||&apos;applyWordRule&apos;;
&#x9;DECLARE&#x9;tempWord&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE caseType&#x9;&#x9;VARCHAR;&#x9;&#x9;-- L=lower, U=UPPER, C=Camel, O=Original (default)
&#x9;DECLARE part&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE i&#x9;&#x9;&#x9;&#x9;INTEGER DEFAULT 1;
&#x9;DECLARE alias&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE basePath_&#x9;&#x9;LONGVARCHAR DEFAULT basePath;
&#x9;DECLARE wordPart&#x9;&#x9;LONGVARCHAR;

&#x9;SET tempWord = word;
&#x9;IF (tempWord is not null AND SUBSTRING(tempWord,1,1) = &apos;&quot;&apos; AND SUBSTRING(tempWord,LENGTH(tempWord),1) = &apos;&quot;&apos;) THEN
&#x9;&#x9;set tempWord = SUBSTRING(tempWord,2,LENGTH(tempWord)-2);
&#x9;END IF;
&#x9;IF (debug3 = &apos;Y&apos;) THEN
&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;tempWord=[&apos;||NVL(tempWord,&apos;null&apos;)||&apos;]&apos;);
&#x9;END IF;

&#x9;SET result = &apos;&apos;;
&#x9;FOR r AS SELECT * FROM /shared/ASAssets/Utilities/string/extractDelimitedText(tempWord,separator,0,0,0,0,0) DO
&#x9;&#x9;SET wordPart = r.object;
&#x9;&#x9;-- Determine the caseType to use for the first word part
&#x9;&#x9;IF (i = 1) THEN
&#x9;&#x9;    CASE UPPER(caseRule)
&#x9;&#x9;&#x9;WHEN &apos;J&apos; THEN 
&#x9;&#x9;&#x9;&#x9;SET caseType = &apos;L&apos;;
&#x9;&#x9;&#x9;WHEN &apos;C&apos; THEN 
&#x9;&#x9;&#x9;&#x9;SET caseType = &apos;C&apos;;
&#x9;&#x9;&#x9;WHEN &apos;T&apos; THEN 
&#x9;&#x9;&#x9;&#x9;SET caseType = &apos;C&apos;;
&#x9;&#x9;&#x9;WHEN &apos;U&apos; THEN 
&#x9;&#x9;&#x9;&#x9;SET caseType = &apos;U&apos;;
&#x9;&#x9;&#x9;WHEN &apos;L&apos; THEN 
&#x9;&#x9;&#x9;&#x9;SET caseType = &apos;L&apos;;
&#x9;&#x9;&#x9;WHEN &apos;O&apos; THEN 
&#x9;&#x9;&#x9;&#x9;SET caseType = &apos;O&apos;;
&#x9;&#x9;&#x9;ELSE 
&#x9;&#x9;&#x9;&#x9;SET caseType = &apos;O&apos;;
&#x9;&#x9;    END CASE;&#x9;&#x9;&#x9;
&#x9;&#x9;ELSE
&#x9;&#x9;-- Determine the caseType to use for the remaining word parts
&#x9;&#x9;    CASE UPPER(caseRule)
&#x9;&#x9;&#x9;WHEN &apos;J&apos; THEN 
&#x9;&#x9;&#x9;&#x9;SET caseType = &apos;C&apos;;
&#x9;&#x9;&#x9;WHEN &apos;C&apos; THEN 
&#x9;&#x9;&#x9;&#x9;SET caseType = &apos;C&apos;;
&#x9;&#x9;&#x9;WHEN &apos;T&apos; THEN 
&#x9;&#x9;&#x9;&#x9;SET caseType = &apos;C&apos;;
&#x9;&#x9;&#x9;WHEN &apos;U&apos; THEN 
&#x9;&#x9;&#x9;&#x9;SET caseType = &apos;U&apos;;
&#x9;&#x9;&#x9;WHEN &apos;L&apos; THEN 
&#x9;&#x9;&#x9;&#x9;SET caseType = &apos;L&apos;;
&#x9;&#x9;&#x9;WHEN &apos;O&apos; THEN 
&#x9;&#x9;&#x9;&#x9;SET caseType = &apos;O&apos;;
&#x9;&#x9;&#x9;ELSE 
&#x9;&#x9;&#x9;&#x9;SET caseType = &apos;O&apos;;
&#x9;&#x9;    END CASE;
&#x9;&#x9;END IF;

&#x9;&#x9;IF (useAliasRule = 0) THEN
&#x9;&#x9;&#x9;CALL /shared/ASAssets/BestPractices_v81/Procedures/generateName/applyCaseRule(caseType, wordPart, debug3, part);
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(basePath_, null, basePath_);
&#x9;&#x9;&#x9;CALL /shared/ASAssets/BestPractices_v81/Procedures/generateName/applyAliasRule(useAliasRule, wordPart, basePath_, debug3, alias);
&#x9;&#x9;&#x9;CALL /shared/ASAssets/BestPractices_v81/Procedures/generateName/applyCaseRule(caseType, alias, debug3, part);
&#x9;&#x9;END IF;

&#x9;&#x9;IF (i = 1) THEN 
&#x9;&#x9;    SET result = result || part;
&#x9;&#x9;ELSE
&#x9;&#x9;    CASE UPPER(caseRule)
&#x9;&#x9;&#x9;WHEN &apos;J&apos; THEN 
&#x9;&#x9;&#x9;&#x9;SET result = result || part;
&#x9;&#x9;&#x9;WHEN &apos;C&apos; THEN 
&#x9;&#x9;&#x9;&#x9;SET result = result || part;
&#x9;&#x9;&#x9;WHEN &apos;T&apos; THEN 
&#x9;&#x9;&#x9;&#x9;SET result = result || separator || part;
&#x9;&#x9;&#x9;WHEN &apos;U&apos; THEN 
&#x9;&#x9;&#x9;&#x9;SET result = result || separator || part;
&#x9;&#x9;&#x9;WHEN &apos;L&apos; THEN 
&#x9;&#x9;&#x9;&#x9;SET result = result || separator || part;
&#x9;&#x9;&#x9;WHEN &apos;O&apos; THEN 
&#x9;&#x9;&#x9;&#x9;SET result = result || separator || part;
&#x9;&#x9;&#x9;ELSE 
&#x9;&#x9;&#x9;&#x9;SET result = result || separator || part;
&#x9;&#x9;    END CASE;
&#x9;&#x9;END IF;
&#x9;&#x9;SET i = i + 1;
&#x9;&#x9;IF (debug3 = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;wordPart=[&apos;||part || &apos;]   result=[&apos;||result||&apos;]&apos;);
&#x9;&#x9;END IF;
&#x9;END FOR;
&#x9;IF (debug3 = &apos;Y&apos;) THEN
&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;result=[&apos;||result||&apos;]&apos;);
&#x9;END IF;
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1564600783568</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
</metadata>