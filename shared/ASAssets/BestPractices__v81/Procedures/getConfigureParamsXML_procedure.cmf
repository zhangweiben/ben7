<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:9a66723c-3693-47f1-a1f0-d7811996f9d5 -->
<metadata name="getConfigureParamsXML" path="/shared/ASAssets/BestPractices_v81/Procedures/getConfigureParamsXML" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>&lt;![CDATA[
&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

]]&gt;</annotation>
  <parameters>
    <parameter name="basePath" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="generateMode" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="outputMode" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="generateViews" direction="IN" nullable="true">
      <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
    </parameter>
    <parameter name="resourceCaseRule" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="columnCaseRule" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="useAliasRule" direction="IN" nullable="true">
      <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
    </parameter>
    <parameter name="resourcePrefix" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="resourceSuffix" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="generateWithSourceColumn" direction="IN" nullable="true">
      <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="generateCast" direction="IN" nullable="true">
      <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
    </parameter>
    <parameter name="generateIndexes" direction="IN" nullable="true">
      <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
    </parameter>
    <parameter name="ConfigParamsXML" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/util/GetEnvironment" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="variableName" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="PropertyName" type="STRING" maxLength="255"/>
      </element>
      <element name="result" direction="OUT">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="PropertyValue" type="STRING" maxLength="4096"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/util/Pause" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="timeInMilliSeconds" direction="IN">
        <datatype type="INTEGER"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/getDefaultValuesXML" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="scriptsPath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="defaultValuesXML" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="tagName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inXMLDoc" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="resultValue" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/xmlUpdateNodeValue" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="tagName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="updateValue" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inXMLDoc" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="outXMLDoc" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/log/logDebugMessage" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="moduleName" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="moduleNameType" type="STRING" maxLength="4096"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="messageText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* 
&#x9;getConfigureParamsXML:
&#x9;-- Data Virtualization Best Practices --
&#x9;Set up the ConfigParamsXML by merging the default settings with any any user settings.

&#x9;    &#x9;--&#x9; &#x9;G=Generate the resource names 
&#x9;    &#x9;--&#x9; &#x9;R=Retrieve the resource name,  (resources include PATH names, VIEW names AND COLUMN names)
   &#x9;&apos;G&apos;,&#x9;-- generateMode,

 &#x9;   &#x9;&#x9;--&#x9; &#x9;A=Return All abstract columns, 
&#x9;    &#x9;--&#x9; &#x9;U=Return ONLY Unchanged/Dropped columns that were NOT found.
   &#x9;&apos;A&apos;,&#x9;-- outputMode,

&#x9;&#x9;&#x9;--     0=Do not generate - (browse only) print out what will happen but don&apos;t perform the generation
&#x9;&#x9;&#x9;--     1=Do generate [DEFAULT] - Perform the VIEW Generation with a column projection, 
&#x9;&#x9;&#x9;--     2=Do generate           - Perform the VIEW Generation with a select * projection, 
&#x9;1,&#x9;&#x9;-- generateViews

&#x9;&#x9;&#x9;--  TABLES/PROCEDURES only.  This caseRule is only used for tables or procedures.
&#x9;&#x9;&#x9;--&#x9; &#x9;Assumption:  The original table name has to have separators (_) for this to work properly.
&#x9;&#x9;&#x9;--&#x9;&#x9;&#x9;     If the original word has no separators then the case rule gets applied to the single word
&#x9;&#x9;&#x9;--&#x9;&#x9;j=javaCase - 1st word part is lower case, following word parts are 1st is letter is upper and remaining word part is lower with no separators
&#x9;&#x9;&#x9;--&#x9;&#x9;C=CamelCase - 1st letter of each word part is upper case and remaining word part is lower with no separators
&#x9;&#x9;&#x9;--&#x9;&#x9;T=Title_Case - 1st letter of each word part is upper case and remaining word part is lower with separators retained
&#x9;&#x9;&#x9;--&#x9;&#x9;U=UPPER_CASE - All word parts are UPPER case with separtors retained
&#x9;&#x9;&#x9;--&#x9;&#x9;l=lower_case - All word parts are lower case with separators retained
&#x9;&#x9;&#x9;--&#x9;&#x9;O=Original_case - The word is not changed at all -- just pass it through as is
&#x9;&apos;O&apos;,&#x9;-- resourceCaseRule (used when generateMode=&apos;G&apos;) 

&#x9;&#x9;&#x9;--  COLUMNS only.  This caseRule is only used for columns.
&#x9;&#x9;&#x9;--&#x9; &#x9;Assumption:  The original column name has to have separators (_) for this to work properly.
&#x9;&#x9;&#x9;--&#x9;&#x9;&#x9;     If the original word has no separators then the case rule gets applied to the single word
&#x9;&#x9;&#x9;--&#x9;&#x9;j=javaCase - 1st word part is lower case, following word parts are 1st is letter is upper and remaining word part is lower with no separators
&#x9;&#x9;&#x9;--&#x9;&#x9;C=CamelCase - 1st letter of each word part is upper case and remaining word part is lower with no separators
&#x9;&#x9;&#x9;--&#x9;&#x9;T=Title_Case - 1st letter of each word part is upper case and remaining word part is lower with separators retained
&#x9;&#x9;&#x9;--&#x9;&#x9;U=UPPER_CASE - All word parts are UPPER case with separtors retained
&#x9;&#x9;&#x9;--&#x9;&#x9;l=lower_case - All word parts are lower case with separators retained
&#x9;&#x9;&#x9;--&#x9;&#x9;O=Original_case - The word is not changed at all -- just pass it through as is
&#x9;&apos;O&apos;,&#x9;-- columnCaseRule (used when generateMode=&apos;G&apos;) 

&#x9;&#x9;&#x9;--&#x9;&#x9;default=_
&#x9;&#x9;&#x9;--&#x9;    Word part separator consisting of a 1 character value such as &apos;_&apos;
&#x9;&#x9;&#x9;--&#x9;&#x9;which is used to separate the word parts within a column.  Spaces ARE NOT allowed IN COLUMN NAMES.
&#x9;&#x9;&#x9;--&#x9;&#x9;Example MY_COLUMN_NAME
&#x9;&apos;_&apos;,&#x9;-- separator (used when generateMode=&apos;G&apos;)

&#x9;&#x9;&#x9;--&#x9; &#x9;When generating the logical name from the data source, use the &quot;AliasNameRuleSet&quot; as a lookup procedure
&#x9;&#x9;&#x9;--&#x9;&#x9;  to match a word part against the Alias table.  For exmaple:
&#x9;&#x9;&#x9;--&#x9;&#x9;&#x9;word part=ds&#x9;&#x9;table alias=DS&#x9;&#x9;table rule=DataSource
&#x9;&#x9;&#x9;--&#x9;&#x9;0=[default] DO NOT perform alias rule lookup at all.  Word Part is passed through
&#x9;&#x9;&#x9;--&#x9;&#x9;&#x9;result=ds
&#x9;&#x9;&#x9;--&#x9;  &#x9;1=Use alias rule and MATCH CASE exactly
&#x9;&#x9;&#x9;--&#x9;&#x9;&#x9;result=ds (the original word part &apos;ds&apos; is returned as no match is found becuase &apos;ds&apos; is not equal to &apos;DS&apos;
&#x9;&#x9;&#x9;--&#x9;&#x9;2=Use alias rule and DO NOT MATCH CASE
&#x9;&#x9;&#x9;--&#x9;&#x9;&#x9;result=DataSource (UPPER(&apos;ds&apos;) = UPPER(&apos;DS&apos;), therefore DataSource is returned&#x9;
&#x9;2,&#x9;&#x9;-- useAliasRule (used when generateMode=&apos;G&apos;)

&#x9;&#x9;&#x9;-- &#x9;&#x9;Any set of characters used to prefix a table or procedure name.  Include underscores with the suffix if applicable.
&#x9;&#x9;&#x9;--&#x9;&#x9;Example: V_ MY_TABLE or V_MY_TABLE &#x9;
&#x9;null,&#x9;-- resourcePrefix (used when generateMode=&apos;G&apos;)

&#x9;&#x9;&#x9;--  &#x9;Any set of characters used to suffix a table or procedure name.  Include underscores with the suffix if applicable.
&#x9;&#x9;&#x9;--&#x9;&#x9;Example: _APP MY_TABLE or MY_TABLE_APP &#x9;
&#x9;null,&#x9;-- resourceSuffix (used when generateMode=&apos;G&apos;)

&#x9;&#x9;&#x9;--&#x9; &#x9;This parameter allows the user to control whether to generate the view with the original data source
&#x9;&#x9;&#x9;--&#x9;&#x9;   column or not.  It adds a level of control and flexibility into this automation process.
&#x9;&#x9;&#x9;--&#x9;&#x9;Regarding the retrieved logicalColumn from the mapping spreadsheet.
&#x9;&#x9;&#x9;--&#x9;&#x9;   When logicalColumn IS blank OR NULL then
&#x9;&#x9;&#x9;--&#x9;&#x9;   0=Do NOT generate the view with the source column (no pass through)-logical status is DROPPED
&#x9;&#x9;&#x9;--&#x9; &#x9;   1=[default] Generate the view with the source column (pass through)-logical status is UNCHANGED
&#x9;1,&#x9;&#x9;-- generateWithSourceColumn (used when generateMode=&apos;R&apos;)

&#x9;&#x9;&#x9;-- &#x9;&#x9;This parameter allows the user to control whether to generate the cast statement around the generated
&#x9;&#x9;&#x9;--&#x9;&#x9;   column or not.  It uses the column type from the source view.
&#x9;&#x9;&#x9;--&#x9;&#x9;0=[default] Do not generate CAST statement.  Pass through column as is.  Default behavior.
&#x9;&#x9;&#x9;-- &#x9;&#x9;1=Generate the CAST statement around the column
&#x9;0,&#x9;&#x9;--&#x9;generateCast (used when generateMode=&apos;G&apos;)

&#x9;&#x9;&#x9;-- &#x9;&#x9;This parameter allows the user to control whether to generate indexes on the target views 
&#x9;&#x9;&#x9;--&#x9;&#x9;   as derived from the underlying resources
&#x9;&#x9;&#x9;--&#x9;&#x9;0=[default] Do not generate indexes
&#x9;&#x9;&#x9;-- &#x9;&#x9;1=Generate indexes
&#x9;1,&#x9;&#x9;--&#x9;generateIndexes

&#x9;&apos;Y&apos;,&#x9;-- Debug level 1: &apos;Y&apos;=print to log and console window, &apos;F&apos;=no debug output to log or console
&#x9;&apos;N&apos;,&#x9;-- Debug level 2: &apos;Y&apos;=print to log and console window, &apos;F&apos;=no debug output to log or console
&#x9;&apos;N&apos;,&#x9;-- Debug level 3: &apos;Y&apos;=print to log and console window, &apos;F&apos;=no debug output to log or console
&#x9;NULL, &#x9;-- Path to the base project directory.  Path gets SET dynamically so it is initially set to NULL.
&#x9;NULL, &#x9;-- Path to the scripts subfolder of the project directory.  Path gets SET dynamically so it is initially set to NULL.

&#x9;&#x9;&#x9;-- The amount of padding to use when printing out the columnName (in the example below padding of 30 is used)
&#x9;40&#x9;&#x9;-- padAmount - The amount of padding to use when printing out the columnName (in the example below padding of 30 is used)

&#x9;Input:
&#x9;&#x9;basePath - Path to the base project directory  
    &#x9;generateMode - user setting (see above description)
    &#x9;outputMode - user setting (see above description)
    &#x9;generateViews - user setting (see above description)
    &#x9;caseRule - user setting (see above description)
    &#x9;useAliasRule - user setting (see above description)
    &#x9;generateWithSourceColumn - user setting (see above description)
    &#x9;generateCast - user setting (see above description)
&#x9;Output:
&#x9;&#x9;&lt;ConfigParams&gt;
&#x9;&#x9;&#x9;&lt;generateMode&gt;&lt;/generateMode&gt;
&#x9;&#x9;&#x9;&lt;outputMode&gt;&lt;/outputMode&gt;
&#x9;&#x9;&#x9;&lt;generateViews&gt;&lt;/generateViews&gt;
&#x9;&#x9;&#x9;&lt;resourceCaseRule&gt;&lt;/resourceCaseRule&gt;
&#x9;&#x9;&#x9;&lt;columnCaseRule&gt;&lt;/columnCaseRule&gt;
&#x9;&#x9;&#x9;&lt;separator&gt;&lt;/separator&gt;
&#x9;&#x9;&#x9;&lt;useAliasRule&gt;&lt;/useAliasRule&gt;
&#x9;&#x9;&#x9;&lt;resourcePrefix&gt;&lt;/resourcePrefix&gt;
&#x9;&#x9;&#x9;&lt;resourceSuffix&gt;&lt;/resourceSuffix&gt;
&#x9;&#x9;&#x9;&lt;generateWithSourceColumn&gt;&lt;/generateWithSourceColumn&gt;
&#x9;&#x9;&#x9;&lt;generateCast&gt;&lt;/generateCast&gt;
&#x9;&#x9;&#x9;&lt;generateIndexes&gt;&lt;/generateIndexes&gt;
&#x9;&#x9;&#x9;&lt;debug&gt;&lt;/debug&gt;
&#x9;&#x9;&#x9;&lt;debug2&gt;&lt;/debug2&gt;
&#x9;&#x9;&#x9;&lt;debug3&gt;&lt;/debug3&gt;
&#x9;&#x9;&#x9;&lt;basePath&gt;&lt;/basePath&gt;
&#x9;&#x9;&#x9;&lt;scriptsPath&gt;&lt;/scriptsPath&gt;
&#x9;&#x9;&#x9;&lt;padAmount&gt;&lt;/padAmount&gt;
&#x9;&#x9;&lt;/ConfigParams&gt;

&#x9;Exceptions:  none

&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;CSW Version:&#x9;Reason:
&#x9;06/15/2010&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.2.0&#x9;&#x9;&#x9;Created new
&#x9;09/21/2015&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.x&#x9;&#x9;&#x9;B.P. 8.1.7:  Added generateViews=2 for a select * projection.  Requires Utilities_2015Q3
&#x9;01/24/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;8.0.0&#x9;&#x9;&#x9;B.P. 2019.1: Added the ability to handle columnCaseRule, resourcePrefix and resourceSuffix. 
&#x9;04/15/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;B.P. 2019.200: Added scriptsPath for flexibility of the location of the _scripts folder.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   Changed custom functions to explicit paths.
&#x9;06/12/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;B.P. 2019.200: Derived the new getConfigureParamsXML from getConfigureParams to eliminate vector usage.

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

*/
PROCEDURE getConfigureParamsXML(
&#x9;IN basePath&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(4000),-- (MANDATORY FIELD)
&#x9; &#x9;&#x9;-- Path to the base project directory  
&#x9;&#x9;&#x9;-- Path gets SET dynamically so it is initially set to NULL.
    IN generateMode&#x9;&#x9;&#x9;&#x9;CHAR(1),--(OPTIONAL)
    IN outputMode&#x9;&#x9;&#x9;&#x9;CHAR(1),--(OPTIONAL)
    IN generateViews&#x9;&#x9;&#x9;SMALLINT,--(OPTIONAL)
    IN resourceCaseRule&#x9;&#x9;&#x9;CHAR(1),--(OPTIONAL)
    IN columnCaseRule&#x9;&#x9;&#x9;CHAR(1),--(OPTIONAL)
    IN useAliasRule&#x9;&#x9;&#x9;&#x9;SMALLINT,--(OPTIONAL)
    IN resourcePrefix&#x9;&#x9;&#x9;VARCHAR,--(OPTIONAL)
    IN resourceSuffix&#x9;&#x9;&#x9;VARCHAR,--(OPTIONAL)
    IN generateWithSourceColumn SMALLINT,--(OPTIONAL)
    IN generateCast &#x9;&#x9;&#x9;SMALLINT,--(OPTIONAL)
&#x9;IN generateIndexes&#x9;&#x9;&#x9;SMALLINT,--(OPTIONAL)
   OUT ConfigParamsXML&#x9;&#x9;&#x9;LONGVARCHAR
)
BEGIN
&#x9;DECLARE localDebug&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1) DEFAULT &apos;N&apos;;
&#x9;DECLARE debug&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1);
&#x9;DECLARE indent&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;&apos;;
&#x9;DECLARE moduleName&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT indent||&apos;getConfigureParamsXML&apos;;
&#x9;DECLARE sqlstmt&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(500);
&#x9;DECLARE ConfigParamsCursor&#x9;&#x9;&#x9;CURSOR (ConfigParamsXML LONGVARCHAR);
&#x9;DECLARE defaultValuesXML&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE ConfigParams_XML&#x9;&#x9;&#x9;XML;
&#x9;DECLARE scriptsPath&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE envValue&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE request&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE resultValue&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE message&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR DEFAULT &apos;&apos;;
&#x9;DECLARE no_basePath_provided&#x9;&#x9;EXCEPTION;
&#x9;DECLARE no_scriptsPath_provided&#x9;&#x9;EXCEPTION;
&#x9;DECLARE no_configParams_provided&#x9;EXCEPTION;

&#x9;-- Get environment variables
&#x9;call /lib/util/GetEnvironment(&apos;best.practices.scriptsPath&apos;,envValue);
&#x9;if (envValue IS NOT NULL AND UPPER(envValue) = &apos;[NULL]&apos;) then
&#x9;&#x9;set scriptsPath = null;
&#x9;else
&#x9;&#x9;set scriptsPath = envValue;
&#x9;end if;
&#x9;IF ((scriptsPath IS NULL) OR (LENGTH(TRIM(scriptsPath)) = 0)) THEN 
&#x9;&#x9;RAISE no_scriptsPath_provided;
&#x9;END IF;
 &#x9;IF ((basePath IS NULL) OR (LENGTH(TRIM(basePath)) = 0)) THEN 
&#x9;&#x9;RAISE no_basePath_provided;
&#x9;END IF;

    -- Get the ConfigureParams info and override with the any &quot;NOT NULL&quot; parameters that are passed in.
    -- Return NULL if basePath is not provided.
&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/getDefaultValuesXML(scriptsPath, defaultValuesXML);
&#x9;SET defaultValuesXML = REPLACE(REPLACE(defaultValuesXML, CHR(10), &apos;&apos;), CHR(13), &apos;&apos;);
&#x9;IF (UPPER(localDebug) = &apos;Y&apos;) THEN
&#x9;&#x9;CALL PRINT(&apos;defaultValuesXML:&apos;||CHR(10)||NVL(defaultValuesXML,&apos;null&apos;));
&#x9;END IF;
&#x9;-- Get the scriptsPath from the default value XML
&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;configureScriptsPath&apos;, defaultValuesXML, resultValue);
&#x9;IF (UPPER(localDebug) = &apos;Y&apos;) THEN
&#x9;&#x9;CALL PRINT(&apos;configureScriptsPath=&apos;||NVL(resultValue,&apos;null&apos;));
&#x9;END IF;
&#x9;IF (resultValue IS NULL OR LENGTH(resultValue) = 0 OR LOWER(resultValue) = &apos;null&apos;) THEN
&#x9;&#x9;RAISE no_scriptsPath_provided VALUE &apos;The configureScriptsPath is null or empty.&apos;;
&#x9;END IF;

&#x9;SET sqlstmt = REPLACE(&apos;SELECT * FROM &apos;|| resultValue || &apos;/ConfigureParams()&apos;, &apos;//&apos;, &apos;/&apos;);
&#x9;IF (UPPER(localDebug) = &apos;Y&apos;) THEN
&#x9;&#x9;CALL PRINT(&apos;sqlstmt=&apos;||NVL(sqlstmt,&apos;null&apos;));
&#x9;&#x9;CALL PAUSE(500);
&#x9;END IF;

&#x9;OPEN ConfigParamsCursor FOR sqlstmt;
&#x9;FOR r AS ConfigParamsCursor DO
&#x9;&#x9;SET ConfigParamsXML = r.ConfigParamsXML;
&#x9;END FOR;

&#x9;IF (ConfigParamsXML IS NULL OR LENGTH(TRIM(ConfigParamsXML)) = 0) THEN
&#x9;&#x9;RAISE no_configParams_provided VALUE &apos;The ConfigParamsXML procedure could not be found.&apos;;
&#x9;END IF;

&#x9;-- Set generateMode
&#x9;IF (generateMode IS NOT NULL) THEN
&#x9;&#x9;CALL /shared/ASAssets/BestPractices_v81/Procedures/xmlUpdateNodeValue(&apos;generateMode&apos;, generateMode, ConfigParamsXML, ConfigParamsXML);
&#x9;END IF;
&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;generateMode&apos;, ConfigParamsXML, resultValue);
&#x9;SET message = message || &apos;  generateMode=[&apos;||TRIM(NVL(resultValue,&apos;  &apos;))||&apos;]&apos;;

&#x9;-- Set outputMode
&#x9;IF (outputMode IS NOT NULL) THEN 
&#x9;&#x9;CALL /shared/ASAssets/BestPractices_v81/Procedures/xmlUpdateNodeValue(&apos;outputMode&apos;, outputMode, ConfigParamsXML, ConfigParamsXML);
&#x9;END IF;
&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;outputMode&apos;, ConfigParamsXML, resultValue);
&#x9;SET message = message || &apos;  outputMode=[&apos;||TRIM(NVL(resultValue,&apos;  &apos;))||&apos;]&apos;;

&#x9;-- Set generateViews
&#x9;IF (generateViews IS NOT NULL) THEN 
&#x9;&#x9;CALL /shared/ASAssets/BestPractices_v81/Procedures/xmlUpdateNodeValue(&apos;generateViews&apos;, CAST(generateViews AS VARCHAR), ConfigParamsXML, ConfigParamsXML);
&#x9;ELSE
&#x9;&#x9;CALL /shared/ASAssets/BestPractices_v81/Procedures/xmlUpdateNodeValue(&apos;generateViews&apos;, &apos;1&apos;, ConfigParamsXML, ConfigParamsXML);
&#x9;END IF;
&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;generateViews&apos;, ConfigParamsXML, resultValue);
&#x9;SET message = message || &apos;  generateViews=[&apos;||TRIM(NVL(resultValue,&apos;  &apos;))||&apos;]&apos;;

&#x9;-- Set resourceCaseRule
&#x9;IF (resourceCaseRule IS NOT NULL OR LENGTH(resourceCaseRule) &gt; 0) THEN 
&#x9;&#x9;CALL /shared/ASAssets/BestPractices_v81/Procedures/xmlUpdateNodeValue(&apos;resourceCaseRule&apos;, resourceCaseRule, ConfigParamsXML, ConfigParamsXML);
&#x9;ELSE
&#x9;&#x9;-- if null set default to &apos;O&apos; original
&#x9;&#x9;CALL /shared/ASAssets/BestPractices_v81/Procedures/xmlUpdateNodeValue(&apos;resourceCaseRule&apos;, &apos;O&apos;, ConfigParamsXML, ConfigParamsXML);
&#x9;END IF; 
&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;resourceCaseRule&apos;, ConfigParamsXML, resultValue);
&#x9;SET message = message || &apos;  resourceCaseRule=[&apos;||TRIM(NVL(resultValue,&apos;  &apos;))||&apos;]&apos;;

&#x9;-- Set columnCaseRule
&#x9;IF (columnCaseRule IS NOT NULL OR LENGTH(columnCaseRule) &gt; 0) THEN 
&#x9;&#x9;CALL /shared/ASAssets/BestPractices_v81/Procedures/xmlUpdateNodeValue(&apos;columnCaseRule&apos;, columnCaseRule, ConfigParamsXML, ConfigParamsXML);
&#x9;ELSE
&#x9;&#x9;-- if null set default to &apos;O&apos; original
&#x9;&#x9;CALL /shared/ASAssets/BestPractices_v81/Procedures/xmlUpdateNodeValue(&apos;columnCaseRule&apos;, &apos;O&apos;, ConfigParamsXML, ConfigParamsXML);
&#x9;END IF; 
&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;columnCaseRule&apos;, ConfigParamsXML, resultValue);
&#x9;SET message = message || &apos;  columnCaseRule=[&apos;||TRIM(NVL(resultValue,&apos;  &apos;))||&apos;]&apos;;

&#x9;-- Set useAliasRule
&#x9;IF (useAliasRule IS NOT NULL OR LENGTH(useAliasRule) &gt; 0) THEN 
&#x9;&#x9;CALL /shared/ASAssets/BestPractices_v81/Procedures/xmlUpdateNodeValue(&apos;useAliasRule&apos;, CAST(useAliasRule AS VARCHAR), ConfigParamsXML, ConfigParamsXML);
&#x9;ELSE
&#x9;&#x9;-- if null set default to &apos;0&apos; original
&#x9;&#x9;CALL /shared/ASAssets/BestPractices_v81/Procedures/xmlUpdateNodeValue(&apos;useAliasRule&apos;, &apos;0&apos;, ConfigParamsXML, ConfigParamsXML);
&#x9;END IF; 
&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;useAliasRule&apos;, ConfigParamsXML, resultValue);
&#x9;SET message = message || &apos;  useAliasRule=[&apos;||TRIM(NVL(resultValue,&apos;  &apos;))||&apos;]&apos;;

&#x9;-- Set resourcePrefix
&#x9;IF (resourcePrefix IS NOT NULL OR LENGTH(resourcePrefix) &gt; 0) THEN 
&#x9;&#x9;CALL /shared/ASAssets/BestPractices_v81/Procedures/xmlUpdateNodeValue(&apos;resourcePrefix&apos;, resourcePrefix, ConfigParamsXML, ConfigParamsXML);
&#x9;ELSE
&#x9;&#x9;-- set to null as default
&#x9;&#x9;CALL /shared/ASAssets/BestPractices_v81/Procedures/xmlUpdateNodeValue(&apos;resourcePrefix&apos;, null, ConfigParamsXML, ConfigParamsXML);
&#x9;END IF; 
&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;resourcePrefix&apos;, ConfigParamsXML, resultValue);
&#x9;SET message = message || &apos;  resourcePrefix=[&apos;||TRIM(NVL(resultValue,&apos;  &apos;))||&apos;]&apos;;

&#x9;-- Set resourceSuffix
&#x9;IF (resourceSuffix IS NOT NULL OR LENGTH(resourceSuffix) &gt; 0) THEN 
&#x9;&#x9;CALL /shared/ASAssets/BestPractices_v81/Procedures/xmlUpdateNodeValue(&apos;resourceSuffix&apos;, resourceSuffix, ConfigParamsXML, ConfigParamsXML);
&#x9;ELSE
&#x9;&#x9;-- set to null as default
&#x9;&#x9;CALL /shared/ASAssets/BestPractices_v81/Procedures/xmlUpdateNodeValue(&apos;resourceSuffix&apos;, null, ConfigParamsXML, ConfigParamsXML);
&#x9;END IF; 
&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;resourceSuffix&apos;, ConfigParamsXML, resultValue);
&#x9;SET message = message || &apos;  resourceSuffix=[&apos;||TRIM(NVL(resultValue,&apos;  &apos;))||&apos;]&apos;;

&#x9;-- Set generateWithSourceColumn
&#x9;IF (generateWithSourceColumn IS NOT NULL OR LENGTH(generateWithSourceColumn) &gt; 0) THEN 
&#x9;&#x9;CALL /shared/ASAssets/BestPractices_v81/Procedures/xmlUpdateNodeValue(&apos;generateWithSourceColumn&apos;, CAST(generateWithSourceColumn AS VARCHAR), ConfigParamsXML, ConfigParamsXML);
&#x9;ELSE
&#x9;&#x9;-- if null set default to &apos;1&apos; original
&#x9;&#x9;CALL /shared/ASAssets/BestPractices_v81/Procedures/xmlUpdateNodeValue(&apos;generateWithSourceColumn&apos;, &apos;1&apos;, ConfigParamsXML, ConfigParamsXML);
&#x9;END IF; 
&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;generateWithSourceColumn&apos;, ConfigParamsXML, resultValue);
&#x9;SET message = message || &apos;  generateWithSourceColumn=[&apos;||TRIM(NVL(resultValue,&apos;  &apos;))||&apos;]&apos;;

&#x9;-- Set generateCast
&#x9;IF (generateCast IS NOT NULL OR LENGTH(generateCast) &gt; 0) THEN 
&#x9;&#x9;CALL /shared/ASAssets/BestPractices_v81/Procedures/xmlUpdateNodeValue(&apos;generateCast&apos;, CAST(generateCast AS VARCHAR), ConfigParamsXML, ConfigParamsXML);
&#x9;ELSE
&#x9;&#x9;-- if null set default to &apos;0&apos; original
&#x9;&#x9;CALL /shared/ASAssets/BestPractices_v81/Procedures/xmlUpdateNodeValue(&apos;generateCast&apos;, &apos;0&apos;, ConfigParamsXML, ConfigParamsXML);
&#x9;END IF; 
&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;generateCast&apos;, ConfigParamsXML, resultValue);
&#x9;SET message = message || &apos;  generateCast=[&apos;||TRIM(NVL(resultValue,&apos;  &apos;))||&apos;]&apos;;

&#x9;-- Set generateIndexes
&#x9;IF (generateIndexes IS NOT NULL OR LENGTH(generateIndexes) &gt; 0) THEN 
&#x9;&#x9;CALL /shared/ASAssets/BestPractices_v81/Procedures/xmlUpdateNodeValue(&apos;generateIndexes&apos;, CAST(generateIndexes AS VARCHAR), ConfigParamsXML, ConfigParamsXML);
&#x9;ELSE
&#x9;&#x9;-- if null set default to &apos;0&apos; original
&#x9;&#x9;CALL /shared/ASAssets/BestPractices_v81/Procedures/xmlUpdateNodeValue(&apos;generateIndexes&apos;, &apos;0&apos;, ConfigParamsXML, ConfigParamsXML);
&#x9;END IF; 
&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;generateIndexes&apos;, ConfigParamsXML, resultValue);
&#x9;SET message = message || &apos;  generateIndexes=[&apos;||TRIM(NVL(resultValue,&apos;  &apos;))||&apos;]&apos;;

&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;debug&apos;, ConfigParamsXML, debug);
&#x9;SET message = message || &apos;  debug=[&apos;||TRIM(NVL(debug,&apos;  &apos;))||&apos;]&apos;;

&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;debug2&apos;, ConfigParamsXML, resultValue);
&#x9;SET message = message || &apos;  debug2=[&apos;||TRIM(NVL(resultValue,&apos;  &apos;))||&apos;]&apos;;

&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;debug3&apos;, ConfigParamsXML, resultValue);
&#x9;SET message = message || &apos;  debug3=[&apos;||TRIM(NVL(resultValue,&apos;  &apos;))||&apos;]&apos;;

&#x9;-- Set basePath
&#x9;CALL /shared/ASAssets/BestPractices_v81/Procedures/xmlUpdateNodeValue(&apos;basePath&apos;, basePath, ConfigParamsXML, ConfigParamsXML);
&#x9;SET message = message || &apos;  basePath=[&apos;||TRIM(NVL(basePath,&apos;  &apos;))||&apos;]&apos;;

&#x9;-- Set scriptsPath
&#x9;CALL /shared/ASAssets/BestPractices_v81/Procedures/xmlUpdateNodeValue(&apos;scriptsPath&apos;, scriptsPath, ConfigParamsXML, ConfigParamsXML);
&#x9;SET message = message || &apos;  scriptsPath=[&apos;||TRIM(NVL(scriptsPath,&apos;  &apos;))||&apos;]&apos;;

&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;padAmount&apos;, ConfigParamsXML, resultValue);
&#x9;SET message = message || &apos;  padAmount=[&apos;||TRIM(NVL(resultValue,&apos;  &apos;))||&apos;]&apos;;

&#x9;if (UPPER(debug) = &apos;Y&apos;) then
&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, message);
&#x9;end if;
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1573155473170</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">na</attribute>
  <attribute name="lastModifiedUserName" type="STRING">aiuhmb0</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="p:8:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="p:9:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">8/221</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>util</item>
        <item>Pause</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/220</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/212</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/207</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
  </attribute>
</metadata>