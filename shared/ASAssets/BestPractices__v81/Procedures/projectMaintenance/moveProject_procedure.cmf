<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:e931daa6-7fda-456a-badf-4cdb1c228a1a -->
<metadata name="moveProject" path="/shared/ASAssets/BestPractices_v81/Procedures/projectMaintenance/moveProject" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>&lt;![CDATA[
&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

]]&gt;</annotation>
  <parameters>
    <parameter name="debug" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="oldProjectPath" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="oldScriptsPath" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="newProjectPath" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="newScriptsPath" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="generateTestFolder" direction="IN" nullable="true">
      <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
    </parameter>
    <parameter name="updateScriptText" direction="IN" nullable="true">
      <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
    </parameter>
    <parameter name="overwrite" direction="IN" nullable="true">
      <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
    </parameter>
    <parameter name="message" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/resource/MoveResource" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="path" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="type" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="targetContainerPath" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="newName" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceName" type="STRING" maxLength="255"/>
      </element>
      <element name="overwrite" direction="IN">
        <datatype type="BOOLEAN"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/resource/RenameResource" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="path" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="type" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="newName" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceName" type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/resource/ResourceExists" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="path" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="type" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="version" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceVersion" type="STRING" maxLength="255"/>
      </element>
      <element name="exists" direction="OUT">
        <datatype type="BOOLEAN"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/projectMaintenance/upgradeProjectProcedures/upgradeUpdateTriggerResource" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="upgradeVectorRow" direction="IN">
        <datatype type="ARRAY" maxLength="0">
          <itemDatatype>
            <datatype name="upgradeType" type="TREE" refId="257">
              <element name="bestPracticesVersionFrom">
                <datatype name="DOUBLE" type="FLOAT" minValue="2.2250738585072014E-308" maxValue="1.7976931348623157E308"/>
              </element>
              <element name="bestPracticesVersionTo">
                <datatype name="DOUBLE" type="FLOAT" minValue="2.2250738585072014E-308" maxValue="1.7976931348623157E308"/>
              </element>
              <element name="resourceAction">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="resourcePath">
                <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
              </element>
              <element name="resourceType">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="srcResource">
                <datatype name="srcResource" type="ARRAY" maxLength="0">
                  <itemDatatype>
                    <datatype name="resourceType" referenceDefinitionSet="/shared/ASAssets/Utilities/repository/definitions/RepositoryDefinitions" referenceType="resourceType" type="TREE" refId="513">
                      <element name="path">
                        <datatype name="VARCHAR" referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
                      </element>
                      <element name="type">
                        <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                      </element>
                    </datatype>
                  </itemDatatype>
                </datatype>
              </element>
              <element name="dstResource">
                <datatype name="dstResource" type="ARRAY" maxLength="0">
                  <itemDatatype>
                    <datatype name="resourceType" type="TREE" refId="769">
                      <element name="path">
                        <datatype name="VARCHAR" referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
                      </element>
                      <element name="type">
                        <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                      </element>
                    </datatype>
                  </itemDatatype>
                </datatype>
              </element>
              <element name="updateStruct">
                <datatype name="updateStruct" type="ARRAY" maxLength="0">
                  <itemDatatype>
                    <datatype name="updateType" type="TREE" refId="1025">
                      <element name="updateAction">
                        <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                      </element>
                      <element name="occurrence">
                        <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
                      </element>
                      <element name="numLines">
                        <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
                      </element>
                      <element name="keyTextVerify">
                        <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                      </element>
                      <element name="searchText">
                        <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="replaceText">
                        <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
                      </element>
                    </datatype>
                  </itemDatatype>
                </datatype>
              </element>
            </datatype>
          </itemDatatype>
        </datatype>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/_ProjectMaintenance/defaultValues" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/conversions/convertBoolean" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="request" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="response" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/getUtilitiesVersion" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="version" direction="OUT">
        <datatype type="FLOAT" minValue="2.2250738585072014E-308" maxValue="1.7976931348623157E308"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/log/logDebugMessage" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="moduleName" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="moduleNameType" type="STRING" maxLength="4096"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="messageText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inPath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/copyResources" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="sourceFolderPath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="targetFolderPath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="257"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/createAllFolders" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inSourceFolderPath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="257"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/destroyResource" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="createResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="257"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <reference refId="257"/>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getBasicResourceCursor" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceCursor" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="name">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="path">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="type">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="id">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="changeid">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="version">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="introspectState">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ownerDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ownerName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="impactLevel">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="impactMessage">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="annotation">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="explicitlyDesigned">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="tableType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="sqlText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="scriptText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="childCount">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="dataSourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getResourceListRecursive" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="resourceTreeList" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="name">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resPath">
            <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
          </element>
          <element name="resType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="creationDate">
            <datatype type="DATETIME"/>
          </element>
          <element name="creationDateBigint">
            <datatype type="INTEGER"/>
          </element>
          <element name="creatorUserDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="creatorUserName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="lastModifiedDate">
            <datatype type="DATETIME"/>
          </element>
          <element name="lastModifiedDateBigint">
            <datatype type="INTEGER"/>
          </element>
          <element name="lastModifiedUserDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="lastModifiedUserName">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getScriptText" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inSubType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="scriptText" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getUsedResourcesCursor" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="usedResCursor" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="resourceName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resourcePath">
            <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
          </element>
          <element name="resourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="id">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="tableType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="explicitlyDesigned">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="sqlText">
            <datatype type="STRING" maxLength="32768"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/returnFolderNameAndFolderPath" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="mode" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="folderName" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="folderPath" direction="OUT">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/updateSqlScript" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="scripttext" direction="INOUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="createResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="257"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <reference refId="257"/>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/updateSqlTable" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="inScripttext" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="createResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="257"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <reference refId="257"/>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/getConstantV2" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="constantsPath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="constantsName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="optionReturn" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="outValue" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* moveProject:

&#x9;This procedure is used to rename an existing project and correctly update all of the necessary project paths
&#x9;&#x9;including the following:
&#x9;&#x9;&#x9;/shared/&lt;project&gt;/_scripts/Constants/defaultValues.basePath
&#x9;&#x9;&#x9;/shared/&lt;project&gt;/_scripts/Documentation/documentationTrigger.*
&#x9;&#x9;&#x9;/shared/&lt;project&gt;/_scripts/Generate/generate*
&#x9;&#x9;&#x9;All project resources are automatically rebound to the new path.
&#x9;&#x9;&#x9;The text for view (SQL_TABLE) and procedure (SQL_SCRIPT_PROCEDURE) resources are searched for text containing
&#x9;&#x9;&#x9;&#x9;the old path and replaced with the new path and then updated in the repository.

&#x9;If the project path already exists, this procedure will not copy over it.   You must delete it
&#x9;first before running this procedure again.  

&#x9;Input: 
&#x9;&#x9;debug - Y=debug, N=do not debug

&#x9;&#x9;oldProjectPath - the full project path to the older project
&#x9;&#x9;&#x9;e.g. /shared/PROJECT1

&#x9;&#x9;oldScriptsPath - the full path to the old project scripts folder.  
&#x9;&#x9;&#x9;e.g. /shared/PROJECT1/_scripts

&#x9;&#x9;newProjectPath - the full project path to the new project
&#x9;&#x9;&#x9;e.g. /shared/PROJECT2

&#x9;&#x9;newScriptsPath&#x9;- the full path to a project scripts.  
&#x9;&#x9;&#x9;e.g. /shared/PROJECT2/_scripts

&#x9;&#x9;&#x9;If it already exists in the old folder, it is retained and not generated.
&#x9;&#x9;&#x9;1=generate Test folder, 
&#x9;&#x9;&#x9;0 or null=do not generate Test folder (default)
&#x9;&#x9;generateTestFolder - determine whether to generate the Test folder or not.  

&#x9;&#x9;&#x9;1=modify the VIEW or PROCEDURE script text and replace old paths with new paths in the text. 
&#x9;&#x9;&#x9;0 or null=do not modify the VIEW or PROCEDURE script text (default)
&#x9;&#x9;updateScriptText - determine whether the VIEW or PROCEDURE text should be modified

&#x9;&#x9;&#x9;1=overwrite the project
&#x9;&#x9;&#x9;0=do not overwrite the project
&#x9;&#x9;overwrite

&#x9;Output:
&#x9;&#x9;message - a resulting message 
&#x9;&#x9;(you must click refresh upon completion for Studio to recognize changes to the new project)

&#x9;Exceptions:  ex

&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;CSW Version:&#x9;Reason:
&#x9;04/15/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.2.0&#x9;&#x9;&#x9;Created new
&#x9;03/01/2018&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.5&#x9;&#x9;&#x9;Replaced /shared/ASAssets/Utilities/repository/resourceExists with /lib/resource/ResourceExists
&#x9;04/15/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;B.P. 2019.200: Added scriptsPath for flexibility of the location of the _scripts folder.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   Changed custom functions to explicit paths.

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

*/
PROCEDURE moveProject(
&#x9;&#x9;-- Y=debug, N=do not debug
&#x9;IN debug&#x9;&#x9;&#x9;&#x9;CHAR(1),

&#x9;&#x9;-- the full path to the old project including the project name
&#x9;IN oldProjectPath&#x9;&#x9;VARCHAR(4000),

&#x9;&#x9;-- the full path to the old project scripts folder.  e.g. /shared/PROJECT1/_scripts
&#x9;IN oldScriptsPath&#x9;&#x9;VARCHAR(4000),

&#x9;&#x9;-- the full path to the new project including the project name
&#x9;IN newProjectPath&#x9;&#x9;VARCHAR(4000),

&#x9;&#x9;-- the full path to a new project scripts.  e.g. /shared/PROJECT2/_scripts
&#x9;IN newScriptsPath&#x9;&#x9;VARCHAR(4000),

&#x9;&#x9;-- 1=generate test folder, 0 or null (default)=do not generate test folder
&#x9;&#x9;-- 1=generate Test folder, 
&#x9;&#x9;-- 0 or null=do not generate Test folder
&#x9;IN generateTestFolder&#x9;BIT,
&#x9;
&#x9;&#x9;-- determine whether the VIEW or PROCEDURE text should be modified
&#x9;&#x9;-- 1=modify the VIEW or PROCEDURE scrpt text and replace old paths with new paths in the text. 
&#x9;&#x9;-- 0 or null=do not modify the VIEW or PROCEDURE script text
&#x9;IN updateScriptText &#x9;BIT,&#x9;&#x9;&#x9;

&#x9;&#x9;-- determine whether to overwrite the taget project path or not
&#x9;&#x9;-- 1=overwrite the target project
&#x9;&#x9;-- 0 or null=do not overwrite the target project
&#x9;IN overwrite&#x9;&#x9;&#x9;BIT,&#x9;&#x9;&#x9;

&#x9;OUT message&#x9;&#x9;&#x9;&#x9;LONGVARCHAR
)
BEGIN
&#x9;DECLARE moduleName&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;moveProject&apos;;
&#x9;DECLARE overwrite_&#x9;&#x9;&#x9;&#x9;BIT DEFAULT NVL(overwrite,0);
&#x9;DECLARE success&#x9;&#x9;&#x9;&#x9;&#x9;BIT; -- true(1) or false(0)
&#x9;DECLARE faultResponse &#x9;&#x9;&#x9;XML;
&#x9;DECLARE createResponse &#x9;&#x9;&#x9;XML;
&#x9;DECLARE result&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(255);
&#x9;DECLARE resultMessage&#x9;&#x9;&#x9;VARCHAR(4096);
&#x9;DECLARE bestPracticesRootPath&#x9;VARCHAR(4096) DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.bestPracticesRootPath;
&#x9;DECLARE utilitiesRootPath&#x9;&#x9;VARCHAR(4096) DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.utilitiesRootPath;
&#x9;DECLARE templatePath&#x9;&#x9;&#x9;VARCHAR(4096) DEFAULT bestPracticesRootPath||&apos;/DataAbstraction_GENERIC_Template&apos;;
&#x9;DECLARE docDriverPath &#x9;&#x9;&#x9;VARCHAR(4096) DEFAULT utilitiesRootPath||&apos;/documentation/getDocumentationDriver&apos;;
&#x9;DECLARE docRootPath&#x9;&#x9;&#x9;&#x9;VARCHAR(4096) DEFAULT  /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.docDefaultRootPath;
&#x9;DECLARE targetContainerPath &#x9;VARCHAR(4096);
&#x9;DECLARE newName&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE resourcePath&#x9;&#x9;&#x9;VARCHAR(4096);
&#x9;DECLARE rebindPath&#x9;&#x9;&#x9;&#x9;VARCHAR(4096);
&#x9;DECLARE scriptText&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE procedureParams&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE sleep&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER DEFAULT 5;
&#x9;DECLARE sleepCount&#x9;&#x9;&#x9;&#x9;INTEGER DEFAULT 1;
&#x9;DECLARE maxSleepCount&#x9;&#x9;&#x9;INTEGER DEFAULT 5;
&#x9;DECLARE version&#x9;&#x9;&#x9;&#x9;&#x9;DOUBLE;
&#x9;DECLARE minVersion&#x9;&#x9;&#x9;&#x9;DOUBLE DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.minVersion;
&#x9;DECLARE ex&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;EXCEPTION;
&#x9;DECLARE curs&#x9;&#x9;&#x9;&#x9;&#x9;CURSOR(basePath VARCHAR(4000));
&#x9;DECLARE sqlStatement&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE resourcePathList &#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE upgradeVectorRow &#x9;&#x9;/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions.upgradeVector;
&#x9;DECLARE oldProjectNameReserved&#x9;VARCHAR;
&#x9;DECLARE oldResourcePath&#x9;&#x9;&#x9;VARCHAR(4096);
&#x9;DECLARE oldResourceType&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE oldProjectPathReserved&#x9;VARCHAR(4096);
&#x9;DECLARE oldPublishedProjectPath&#x9;VARCHAR;
&#x9;DECLARE newResourcePath&#x9;&#x9;&#x9;VARCHAR(4096);
&#x9;DECLARE newProjectPathReserved&#x9;VARCHAR(4096);
&#x9;DECLARE newProjectNameReserved&#x9;VARCHAR;
&#x9;DECLARE newPublishedProjectPath&#x9;VARCHAR;
&#x9;DECLARE newPublishedProjectName&#x9;VARCHAR;
&#x9;DECLARE resourcePathReserved&#x9;VARCHAR(4096);
&#x9;DECLARE resourceExists&#x9;&#x9;&#x9;BOOLEAN;
&#x9;DECLARE responseBoolean&#x9;&#x9;&#x9;VARCHAR;

&#x9;/***************************************************************
&#x9; * Make sure the Utilities are up to date
&#x9; ***************************************************************/
&#x9;call /shared/ASAssets/Utilities/getUtilitiesVersion(version);
&#x9;if (version &lt;  minVersion) then
&#x9;&#x9;raise ex value &apos;Utilities &apos;||minVersion||&apos; or higher is required&apos;;
&#x9;end if;
&#x9;
&#x9;/***************************************************************
&#x9; * Don&apos;t continue if the old project does not exist
&#x9; ***************************************************************/
&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;call /lib/resource/ResourceExists(oldProjectPath, &apos;CONTAINER&apos;, null, resourceExists);
&#x9;&#x9;if (NOT resourceExists) then
&#x9;&#x9;&#x9;raise ex value &apos;Resource does not exist for path=&apos;||oldProjectPath;&#x9;
&#x9;&#x9;end if;
&#x9;EXCEPTION
&#x9;&#x9;ELSE raise ex value cast(CURRENT_EXCEPTION.TRACE as longvarchar);
&#x9;END;

&#x9;/***************************************************************
&#x9; * Don&apos;t allow a null or blank project
&#x9; ***************************************************************/
&#x9;if (newProjectPath IS NULL OR LENGTH(&apos;|&apos;||newProjectPath||&apos;|&apos;) = 2) then
&#x9;&#x9;raise ex value &apos;The new project path cannot be null or empty.  Please provide a path.&apos;;
&#x9;end if;
&#x9;if (newScriptsPath IS NULL OR LENGTH(&apos;|&apos;||newScriptsPath||&apos;|&apos;) = 2) then
&#x9;&#x9;raise ex value &apos;The new scripts path cannot be null or empty.  Please provide a path.&apos;;
&#x9;end if;

&#x9;/***************************************************************
&#x9; * Don&apos;t allow a path that does not start with /
&#x9; ***************************************************************/
&#x9;if (SUBSTRING(newProjectPath, 1, 1) != &apos;/&apos;) then
&#x9;&#x9;raise ex value &apos;The parameter newProjectName must start with a /.  Resource path=&apos;||newProjectPath;
&#x9;end if;

&#x9;/***************************************************************
&#x9; * Don&apos;t overwrite the project if it already exists
&#x9; ***************************************************************/
&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;call /lib/resource/ResourceExists(newProjectPath, &apos;CONTAINER&apos;, null, resourceExists);
&#x9;&#x9;if (resourceExists and overwrite_ = 0) then
&#x9;&#x9;&#x9;raise ex value &apos;Resource already exists.  Delete it first and try again or set overwrite=1. Resource path=&apos;||newProjectPath;
&#x9;&#x9;end if;
&#x9;EXCEPTION
&#x9;&#x9;ELSE raise ex value cast(CURRENT_EXCEPTION.TRACE as longvarchar);
&#x9;END;

&#x9;-- Apply reserved word list to old path
&#x9;call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(oldProjectPath, null, oldProjectPathReserved);
&#x9;set oldResourcePath = REPLACE(oldProjectPath,&apos;&quot;&apos;,&apos;&apos;);
&#x9;-- Get the old project name
&#x9;call /shared/ASAssets/Utilities/repository/returnFolderNameAndFolderPath(oldProjectPathReserved, &apos;E&apos;, oldProjectNameReserved, resourcePath);
&#x9;-- Apply reserved word list to new path
&#x9;call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(newProjectPath, null, newProjectPathReserved);
&#x9;set newResourcePath = REPLACE(newProjectPath,&apos;&quot;&apos;,&apos;&apos;);
&#x9;-- Get the new project name
&#x9;call /shared/ASAssets/Utilities/repository/returnFolderNameAndFolderPath(newProjectPathReserved, &apos;E&apos;, newProjectNameReserved, resourcePath);

&#x9;-- Get the old published project path from the defaultValues
&#x9;call /shared/ASAssets/Utilities/string/getConstantV2(oldScriptsPath||&apos;/Constants/defaultValues&apos;, &apos;compositeDatabasePath_&apos;, 1, oldPublishedProjectPath);
&#x9;set oldPublishedProjectPath = REPLACE(oldPublishedProjectPath, &apos;&quot;&apos;, &apos;&apos;);

&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;oldProjectPath=&apos;||NVL(oldProjectPath,&apos;null&apos;));
&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;oldResourcePath=&apos;||NVL(oldResourcePath,&apos;null&apos;));
&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;oldProjectPathReserved=&apos;||NVL(oldProjectPathReserved,&apos;null&apos;));
&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;oldProjectNameReserved=&apos;||NVL(oldProjectNameReserved,&apos;null&apos;));
&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;oldPublishedProjectPath=&apos;||NVL(oldPublishedProjectPath,&apos;null&apos;));

&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;newProjectPath=&apos;||NVL(newProjectPath,&apos;null&apos;));
&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;newResourcePath=&apos;||NVL(newResourcePath,&apos;null&apos;));
&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;newProjectNameReserved=&apos;||NVL(newProjectNameReserved,&apos;null&apos;));
&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;newProjectPathReserved=&apos;||NVL(newProjectPathReserved,&apos;null&apos;));

&#x9;/***************************************************************
&#x9; * Create all of the folders in the target path
&#x9; ***************************************************************/
&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;createAllFolders: resourcePath=&apos;||newResourcePath);
&#x9;&#x9;call /shared/ASAssets/Utilities/repository/createAllFolders(newResourcePath,success,faultResponse);
&#x9;EXCEPTION
&#x9;&#x9;ELSE raise ex value cast(CURRENT_EXCEPTION.TRACE as longvarchar);
&#x9;END;

&#x9;/***************************************************************
&#x9; * Rename the old project to new project folder
&#x9; ***************************************************************/
&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;moveResource: oldProjectPath=&apos;||oldResourcePath || &apos;  newProjectPath=&apos;||newResourcePath);
&#x9;&#x9;-- Extract the folder container and the new folder name
&#x9;&#x9;call /shared/ASAssets/Utilities/repository/returnFolderNameAndFolderPath(newResourcePath,&apos;E&apos;,newName,targetContainerPath);
&#x9;&#x9;-- Move the old path to the new path
&#x9;&#x9;call /shared/ASAssets/Utilities/conversions/convertBoolean(CAST(overwrite_ AS VARCHAR), responseBoolean);
&#x9;&#x9;call /lib/resource/MoveResource(oldResourcePath, &apos;CONTAINER&apos;, targetContainerPath, newName, responseBoolean);
&#x9;EXCEPTION
&#x9;&#x9;ELSE raise ex value cast(CURRENT_EXCEPTION.TRACE as longvarchar);
&#x9;END;

&#x9;/***************************************************************
&#x9; * Update project basePath in /Constants/defaultValues
&#x9; ***************************************************************/
&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;-- Get the defaultValues procedure script text 
&#x9;&#x9;call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(newScriptsPath||&apos;/Constants/defaultValues&apos;, null, resourcePath);
&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;Update defaultValues -- getScriptText: resourcePath=&apos;||resourcePath);
&#x9;&#x9;call /shared/ASAssets/Utilities/repository/getScriptText(resourcePath,&apos;PROCEDURE&apos;,&apos;SQL_SCRIPT_PROCEDURE&apos;,scriptText);

&#x9;&#x9;-- Replace the basePath with the actual path
&#x9;&#x9;set scriptText = REPLACE(scriptText, oldProjectPathReserved, newProjectPathReserved);
&#x9;&#x9;--call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, scriptText);

&#x9;&#x9;-- Replace the old database path &quot;/services/databases/&lt;oldProjectName&gt;&quot; with the &quot;/services/databases/&lt;newProjectName&gt;&quot; path
&#x9;&#x9;set scriptText = REPLACE(scriptText, &apos;/services/databases/&apos;||oldProjectNameReserved, &apos;/services/databases/&apos;||newProjectNameReserved);

&#x9;&#x9;-- Update the defaultValue procedure with the new script text
&#x9;&#x9;call /shared/ASAssets/Utilities/repository/updateSqlScript(resourcePath,scriptText,success,createResponse,faultResponse);
&#x9;&#x9;if (faultResponse IS NOT NULL or success = 0) then
&#x9;&#x9;&#x9;raise ex value cast(faultResponse as longvarchar);
&#x9;&#x9;end if;
&#x9;EXCEPTION
&#x9;&#x9;ELSE raise ex value cast(CURRENT_EXCEPTION.TRACE as longvarchar);
&#x9;END;

&#x9;/***************************************************************
&#x9; * Update Documentation trigger parameter paths
&#x9; ***************************************************************/

&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;-- UpdateTrigger PROJECT_PATH/_scripts/Documentation
&#x9;&#x9;set upgradeVectorRow = VECTOR[
&#x9;&#x9;&#x9;(8.0, 8.0, &apos;updateTrigger&apos;, null, null, null,

&#x9;&#x9;&#x9;VECTOR[(newScriptsPath||&apos;/Documentation&apos;,&apos;CONTAINER&apos;)],
&#x9;&#x9;&#x9;VECTOR[&#x9;--updateAction,&#x9;occur,numLines,&#x9;keyTextVerify,&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;searchText,&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;replaceText
&#x9;&#x9;&#x9;&#x9;  (&apos;replaceParam&apos;,&#x9;0,&#x9;0,&#x9;&#x9;&#x9;newResourcePath||&apos;/&apos;,&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;oldResourcePath||&apos;/&apos;,&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;newResourcePath||&apos;/&apos;)
&#x9;&#x9;&#x9;&#x9; ,(&apos;replaceParam&apos;,&#x9;0,&#x9;0,&#x9;&#x9;&#x9;newProjectPathReserved||&apos;/&apos;,&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;oldProjectPathReserved||&apos;/&apos;,&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;newProjectPathReserved||&apos;/&apos;)
&#x9;&#x9;&#x9;&#x9; ,(&apos;replaceParam&apos;,&#x9;0,&#x9;0,&#x9;&#x9;&#x9;REPLACE(newProjectNameReserved,&apos;&quot;&apos;,&apos;&apos;)||&apos;/&apos;,&#x9;&#x9;&#x9;&#x9;&#x9;REPLACE(oldProjectNameReserved,&apos;&quot;&apos;,&apos;&apos;)||&apos;/&apos;,&#x9;&#x9;&#x9;&#x9;&#x9;REPLACE(newProjectNameReserved,&apos;&quot;&apos;,&apos;&apos;)||&apos;/&apos;)
&#x9;&#x9;&#x9;&#x9; ,(&apos;replaceParam&apos;,&#x9;0,&#x9;0,&#x9;&#x9;&#x9;&apos;/services/databases/&apos;||REPLACE(newProjectNameReserved,&apos;&quot;&apos;,&apos;&apos;),&#x9;&apos;/services/databases/&apos;||REPLACE(oldProjectNameReserved,&apos;&quot;&apos;,&apos;&apos;),&apos;/services/databases/&apos;||REPLACE(newProjectNameReserved,&apos;&quot;&apos;,&apos;&apos;))
&#x9;&#x9;&#x9;&#x9; ,(&apos;replaceParam&apos;,&#x9;0,&#x9;0,&#x9;&#x9;&#x9;docRootPath||&apos;/&apos;||newProjectNameReserved||&apos;/&apos;,&#x9;&#x9;&#x9;&#x9;&#x9;docRootPath||&apos;/&apos;||oldProjectNameReserved||&apos;/&apos;,&#x9;&#x9;&#x9;&#x9;&#x9;docRootPath||&apos;/&apos;||newProjectNameReserved||&apos;/&apos;) 
&#x9;&#x9;&#x9;&#x9;]) ];

&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;:    Execute resourceAction[1]=updateTrigger   dstResource=&apos;||NVL(upgradeVectorRow[1].dstResource[1].&quot;path&quot;,&apos;null&apos;));
&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/projectMaintenance/upgradeProjectProcedures/upgradeUpdateTriggerResource(debug,upgradeVectorRow,success);
&#x9;&#x9;IF (success = 0) then
&#x9;&#x9;&#x9;raise ex value &apos;Update trigger failed.&apos;;
&#x9;&#x9;END IF;
&#x9;EXCEPTION
&#x9;&#x9;ELSE raise ex value cast(CURRENT_EXCEPTION.TRACE as longvarchar);
&#x9;END;

&#x9;/***************************************************************
&#x9; * Verify basePath has been updated
&#x9; ***************************************************************/
&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;-- Perform verifications on base path
&#x9;&#x9;call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(newScriptsPath, null, resourcePathReserved);
&#x9;&#x9;set sqlStatement = &apos;SELECT * from &apos;|| resourcePathReserved||&apos;/Constants/getBasePath()&apos;;

&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;&apos;);
&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;verify:    sqlStatement=&apos;||sqlStatement);
&#x9;&#x9;open curs for sqlStatement;
&#x9;&#x9;fetch curs into resourcePath;
&#x9;&#x9;close curs;
&#x9;&#x9;call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(resourcePath, null, resourcePathReserved);
&#x9;&#x9;if (resourcePathReserved != newProjectPathReserved) then
&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;verify:        basePath and newProjectPath DO NOT MATCH.&apos;);
&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;verify:        basePath=&apos;||resourcePathReserved);
&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;verify:    newProjectPath=&apos;||newProjectPathReserved);
&#x9;&#x9;&#x9;raise ex value &apos;The base path from getBasePath()=[&apos;||resourcePathReserved||&apos;] is not equal to the newProjectPath=[&apos;||newProjectPathReserved||&apos;]&apos;;
&#x9;&#x9;else
&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;verify:        basePath and newProjectPath MATCH.&apos;);
&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;verify:        basePath=&apos;||resourcePathReserved);
&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;verify:    newProjectPath=&apos;||newProjectPathReserved);
&#x9;&#x9;end if;
&#x9;EXCEPTION
&#x9;&#x9;ELSE raise ex value cast(CURRENT_EXCEPTION.TRACE as longvarchar);
&#x9;END;

&#x9;/***************************************************************
&#x9; * Verify rebind paths have been updated
&#x9; ***************************************************************/
&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;-- Verify rebind worked correctly
&#x9;&#x9;for r as select * from /shared/ASAssets/Utilities/repository/getResourceListRecursive(newProjectPath, &apos;CONTAINER&apos;) do
&#x9;&#x9;&#x9;if (r.resType != &apos;CONTAINER&apos;) then
&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;    INSPECTED: &apos;||r.resPath);
&#x9;&#x9;&#x9;&#x9;for u as select * from /shared/ASAssets/Utilities/repository/getUsedResourcesCursor(r.resPath, r.resType) do
&#x9;&#x9;&#x9;&#x9;&#x9;if (POSITION(oldProjectPath||&apos;/&apos; IN u.resourcePath||&apos;/&apos;) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (resourcePathList is null) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set resourcePathList = &apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set resourcePathList = resourcePathList || &apos;, &apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;        used path [not rebound]=&apos;||u.resourcePath); 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set resourcePathList = resourcePathList || u.resourcePath;
&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;end for;
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;end for;
&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;&apos;);
&#x9;&#x9;if (resourcePathList is not null) then
&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;verify:    resourcePathList not rebound=[&apos;||NVL(resourcePathList,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;raise ex value &apos;The following resources were not rebound: &apos;||resourcePathList;
&#x9;&#x9;else
&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;verify:    all resources successfully rebound.&apos;);
&#x9;&#x9;end if;
&#x9;EXCEPTION
&#x9;&#x9;ELSE raise ex value cast(CURRENT_EXCEPTION.TRACE as longvarchar);
&#x9;END;


&#x9;/***************************************************************
&#x9; * Generate the Test folder if the user requested it
&#x9; ***************************************************************/
&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;if (generateTestFolder is not null and generateTestFolder = 1) then
&#x9;&#x9;&#x9;call /lib/resource/ResourceExists(newProjectPath||&apos;/Test&apos;, &apos;CONTAINER&apos;, null, resourceExists);
&#x9;&#x9;&#x9;if (NOT resourceExists) then
&#x9;&#x9;&#x9;&#x9;-- Copy the Application directory to Test
&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;generateTest:      Copy Application folder=[&apos;||NVL(templatePath||&apos;/Test/Application&apos;,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/copyResources(templatePath||&apos;/Application&apos;, newProjectPath||&apos;/Test/Application&apos;, success, faultResponse);
&#x9;&#x9;&#x9;&#x9;if (faultResponse is not null) then
&#x9;&#x9;&#x9;&#x9;&#x9;raise ex value cast(faultResponse as longvarchar);
&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;-- Copy the Business directory to Test
&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;generateTest:      Copy Business folder=[&apos;||NVL(templatePath||&apos;/Test/Business&apos;,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/copyResources(templatePath||&apos;/Business&apos;, newProjectPath||&apos;/Test/Business&apos;, success, faultResponse);
&#x9;&#x9;&#x9;&#x9;if (faultResponse is not null) then
&#x9;&#x9;&#x9;&#x9;&#x9;raise ex value cast(faultResponse as longvarchar);
&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;-- Copy the Physical directory to Test
&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;generateTest:      Copy Physical folder=[&apos;||NVL(templatePath||&apos;/Test/Physical&apos;,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/copyResources(templatePath||&apos;/Physical&apos;, newProjectPath||&apos;/Test/Physical&apos;, success, faultResponse);
&#x9;&#x9;&#x9;&#x9;if (faultResponse is not null) then
&#x9;&#x9;&#x9;&#x9;&#x9;raise ex value cast(faultResponse as longvarchar);
&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;generateTest:    Resource already exists=[&apos;||NVL(newProjectPath||&apos;/Test&apos;,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;else
&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;generateTest:    User chose not to create a Test folder.&apos;);
&#x9;&#x9;end if;
&#x9;EXCEPTION
&#x9;&#x9;ELSE raise ex value cast(CURRENT_EXCEPTION.TRACE as longvarchar);
&#x9;END;

&#x9;/***************************************************************
&#x9; * Update old paths found in TABLE and SQL_SCRPT_PROCEDURE script &quot;text&quot; 
&#x9; ***************************************************************/

&#x9;  if (updateScriptText is not null and updateScriptText = 1) then
&#x9;&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;update Text:   view(table),procedure   newProjectPath=&apos;||newProjectPath);
&#x9;&#x9;&#x9;-- Get the list of resources
&#x9;&#x9;&#x9;for r as select * from /shared/ASAssets/Utilities/repository/getResourceListRecursive(newProjectPath, &apos;CONTAINER&apos;) do

&#x9;&#x9;&#x9;&#x9;if (r.resType = &apos;TABLE&apos; and r.subtype =&apos;SQL_TABLE&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;-- Get procedure script text 
&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/getScriptText(r.resPath,r.resType,r.subtype,scriptText);

&#x9;&#x9;&#x9;&#x9;&#x9;if (POSITION(oldProjectPathReserved||&apos;/&apos; IN scriptText) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;      UPDATED: &apos;||LPAD(&apos;[&apos;||r.resType||&apos;]&apos;,11,&apos; &apos;)||LPAD(&apos;[&apos;||r.subtype||&apos;]&apos;,22,&apos; &apos;)||&apos; resourcePath=&apos;||r.resPath);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Replace the basePath with the actual path
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set scriptText = REPLACE(scriptText, oldProjectPathReserved, newProjectPathReserved);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Update the table text
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/updateSqlTable(r.resPath,scriptText,success,createResponse,faultResponse);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (faultResponse is not null) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;        ERROR: &apos;||LPAD(&apos;[&apos;||r.resType||&apos;]&apos;,11,&apos; &apos;)||LPAD(&apos;[&apos;||r.subtype||&apos;]&apos;,22,&apos; &apos;)||&apos; resourcePath=&apos;||r.resPath);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;raise ex value cast(faultResponse as longvarchar);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;    INSPECTED: &apos;||LPAD(&apos;[&apos;||r.resType||&apos;]&apos;,11,&apos; &apos;)||LPAD(&apos;[&apos;||r.subtype||&apos;]&apos;,22,&apos; &apos;)||&apos; resourcePath=&apos;||r.resPath);
&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;if (r.resType = &apos;PROCEDURE&apos; and r.subtype = &apos;SQL_SCRIPT_PROCEDURE&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;-- Get procedure script text 
&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/getScriptText(r.resPath,r.resType,r.subtype,scriptText);

&#x9;&#x9;&#x9;&#x9;&#x9;if (POSITION(oldProjectPathReserved||&apos;/&apos; IN scriptText) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;      UPDATED: &apos;||LPAD(&apos;[&apos;||r.resType||&apos;]&apos;,11,&apos; &apos;)||LPAD(&apos;[&apos;||r.subtype||&apos;]&apos;,22,&apos; &apos;)||&apos; resourcePath=&apos;||r.resPath);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Replace the basePath with the actual path
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set scriptText = REPLACE(scriptText, oldProjectPathReserved, newProjectPathReserved);

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Update the script text
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/updateSqlScript(r.resPath,scriptText,success,createResponse,faultResponse);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (faultResponse is not null) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;        ERROR: &apos;||LPAD(&apos;[&apos;||r.resType||&apos;]&apos;,11,&apos; &apos;)||LPAD(&apos;[&apos;||r.subtype||&apos;]&apos;,22,&apos; &apos;)||&apos; resourcePath=&apos;||r.resPath);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;raise ex value cast(faultResponse as longvarchar);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;    INSPECTED: &apos;||LPAD(&apos;[&apos;||r.resType||&apos;]&apos;,11,&apos; &apos;)||LPAD(&apos;[&apos;||r.subtype||&apos;]&apos;,22,&apos; &apos;)||&apos; resourcePath=&apos;||r.resPath);
&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;end for;
&#x9;&#x9;EXCEPTION
&#x9;&#x9;&#x9;ELSE raise ex value cast(CURRENT_EXCEPTION.TRACE as longvarchar);
&#x9;&#x9;END;

&#x9;&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;&#x9;&#x9;-- Get the old published resource type
&#x9;&#x9;&#x9;&#x9;for t as select * from /shared/ASAssets/Utilities/repository/getBasicResourceCursor(oldPublishedProjectPath, null) do
&#x9;&#x9;&#x9;&#x9;&#x9;set oldResourceType = t.&quot;type&quot;;
&#x9;&#x9;&#x9;&#x9;end for;
&#x9;&#x9;EXCEPTION
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;set message = cast(CURRENT_EXCEPTION.TRACE as longvarchar);
&#x9;&#x9;&#x9;&#x9;if (INSTR(message, &apos;does not exist&apos;) = 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;raise ex value cast(CURRENT_EXCEPTION.TRACE as longvarchar);
&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;Resource DOES NOT EXIST:  oldResourceType=&apos;||NVL(oldResourceType,&apos;null&apos;)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;   oldPublishedProjectPath=&apos;||NVL(oldPublishedProjectPath,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;END;

&#x9;&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;&#x9;-- Get the new published project path from the defaultValues
&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/string/getConstantV2(newScriptsPath||&apos;/Constants/defaultValues&apos;, &apos;compositeDatabasePath_&apos;, 1, newPublishedProjectPath);
&#x9;&#x9;&#x9;set newPublishedProjectPath = REPLACE(newPublishedProjectPath, &apos;&quot;&apos;, &apos;&apos;);
&#x9;&#x9;&#x9;-- Get the new published project name
&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/returnFolderNameAndFolderPath(newPublishedProjectPath, &apos;E&apos;, newPublishedProjectName, resourcePath);

&#x9;&#x9;&#x9;if (oldResourceType is not null and oldPublishedProjectPath is not null and newPublishedProjectName is not null) then
&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;rename published resource:  oldPublishedProjectPath=&apos;||NVL(oldPublishedProjectPath,&apos;null&apos;)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;   newPublishedProjectName=&apos;||NVL(newPublishedProjectName,&apos;null&apos;));


&#x9;&#x9;&#x9;&#x9;-- Rename the old published resource to the new published name
&#x9;&#x9;&#x9;&#x9;call /lib/resource/RenameResource(oldPublishedProjectPath, oldResourceType, newPublishedProjectName);
&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;unable to rename published resource:  oldResourceType=&apos;||NVL(oldResourceType,&apos;null&apos;)||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;   oldPublishedProjectPath=&apos;||NVL(oldPublishedProjectPath,&apos;null&apos;)||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;   newPublishedProjectName=&apos;||NVL(newPublishedProjectName,&apos;null&apos;));
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;EXCEPTION
&#x9;&#x9;&#x9;ELSE raise ex value cast(CURRENT_EXCEPTION.TRACE as longvarchar);
&#x9;&#x9;END;

&#x9;  end if;

&#x9;/***************************************************************
&#x9; * Destroy the old resource if it still exists
&#x9; ***************************************************************/
&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;call /lib/resource/ResourceExists(oldProjectPath, &apos;CONTAINER&apos;, null, resourceExists);
&#x9;&#x9;if (resourceExists) then
&#x9;&#x9;&#x9;-- Destroy the resource
&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/destroyResource(oldProjectPath, NULL, &apos;CONTAINER&apos;, success, createResponse, faultResponse);

&#x9;&#x9;&#x9;if (faultResponse is not null) then
&#x9;&#x9;&#x9;&#x9;raise ex value cast(faultResponse as longvarchar);
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;set message = &apos;OLD Project [&apos;||NVL(oldProjectPath,&apos;null&apos;)||&apos;] successfully destroyed.&apos;;
&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, message);
&#x9;&#x9;else
&#x9;&#x9;&#x9;set message = &apos;OLD Project [&apos;||NVL(oldProjectPath,&apos;null&apos;)||&apos;] does not exist.&apos;;
&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, message);
&#x9;&#x9;end if;
&#x9;EXCEPTION
&#x9;&#x9;ELSE raise ex value cast(CURRENT_EXCEPTION.TRACE as longvarchar);
&#x9;END;

&#x9;set message = &apos;Project [&apos;||NVL(newProjectPath,&apos;null&apos;)||&apos;] successfully configured.  Click the refresh button in Studio.&apos;;
&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, message);
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1564600444846</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
</metadata>