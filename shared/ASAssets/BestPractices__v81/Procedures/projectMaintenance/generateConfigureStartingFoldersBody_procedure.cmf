<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:9a66723c-3693-47f1-a1f0-d7811996f9d5 -->
<metadata name="generateConfigureStartingFoldersBody" path="/shared/ASAssets/BestPractices_v81/Procedures/projectMaintenance/generateConfigureStartingFoldersBody" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>&lt;![CDATA[
&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

]]&gt;</annotation>
  <parameters>
    <parameter name="scriptsPath" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="procBody" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/shared/ASAssets/BestPractices_v81/_ProjectMaintenance/defaultValues" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inPath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* generateConfigureStartingFoldersBody:

&#x9;This procedure is used to generate the body text for ConfigureStartingFolders().

&#x9;Input: 
&#x9;&#x9;scriptsPath&#x9;- the full path to a project scripts folder
&#x9;&#x9;&#x9;e.g. /shared/PROJECT1

&#x9;Output:
&#x9;&#x9;procBody - the procedure body text

&#x9;Exceptions:  N/A

&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;CSW Version:&#x9;Reason:
&#x9;04/15/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.2.0&#x9;&#x9;&#x9;Created new
&#x9;04/23/2014&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.2.0&#x9;&#x9;&#x9;8.1.2/8.1.3 - Added applyReservedListToPath() around the paths to fix a bug.
&#x9;04/15/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;B.P. 2019.200: Added scriptsPath for flexibility of the location of the _scripts folder.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   Changed custom functions to explicit paths.

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

*/
PROCEDURE generateConfigureStartingFoldersBody(
&#x9;&#x9;IN scriptsPath&#x9;&#x9;&#x9;VARCHAR(4000), &#x9;-- the full path to a project scripts folder
&#x9;&#x9;OUT procBody&#x9;&#x9;&#x9;LONGVARCHAR
)
BEGIN
&#x9;DECLARE bestPracticesRootPath&#x9;&#x9;&#x9;VARCHAR(4000) DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.bestPracticesRootPath;
&#x9;DECLARE bestPracticesRootPathReserved&#x9;VARCHAR(4000);
&#x9;DECLARE scriptsPathReserved&#x9;&#x9;&#x9;&#x9;VARCHAR(4000);

&#x9;call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(bestPracticesRootPath,null,bestPracticesRootPathReserved);
&#x9;call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(scriptsPath,null,scriptsPathReserved);

&#x9;set procBody = &apos;/* ConfigureStartingFolders:
&#x9;Rows of directories that define physical layer sources and corresponding target folder
&#x9;At the present time, these configurations are used to generate &quot;Physical Views&quot; or &quot;Formatting Views&quot;.

&#x9;Note: As of v7.0, generating Physical Views has been deprecated as the best practice is to generated
&#x9;&#x9;  Formatting Views directly from the Physical Metadata.

Cursor Definition for startingFolderPipe:

(1st parameter)&#x9;groupId - Provides a way of grouping multiple rows together so that the user can identify
&#x9;which group they want to generate for.  It becomes a filter for view generation.

(2nd parameter)&#x9;process - Tells the generatViews whether to process the ConfigureStartingFolders row or not.
&#x9;Allows you to maintain the list but not process a configuration if you don&apos;&apos;t want to.
&#x9;0=Do Not process this configuration row.
&#x9;1=Do process this configuration row.

(3rd parameter)&#x9;layerType - Tells the generateViews what Layer it will be generating views for (target layer).
&#x9;&apos;&apos;PV&apos;&apos;=Physical Views - generatePhysicalViews inovkes generateViews (DEPRECATED)
&#x9;&apos;&apos;FV&apos;&apos;=Formatting Views - generateFormattingViews invokes generateViews
&#x9;&apos;&apos;BV&apos;&apos;=Business Views - use generateViews
&#x9;&apos;&apos;LV&apos;&apos;=Logical Views - generateLoicalViews invokes generateViews
&#x9;&apos;&apos;CV&apos;&apos;=Client Views - generateClientViews invokes generateViews
&#x9;&apos;&apos;CP&apos;&apos;=Client Published - generateClientPublished invokes generateViews

(4th parameter)&#x9;pathDerivation 
&#x9;&apos;&apos;A&apos;&apos;=Absolute path as described by targetFolderPath, 
&#x9;&apos;&apos;D&apos;&apos;=(Default setting) Derived from the targetFolderPath + adding on the remaining path from the actual resource 
&#x9;       after subtracting the sourceFolderPath - Example:
&#x9; &#x9;&#x9;sourceFolderPath     = /shared/examples
&#x9; &#x9;&#x9;actual resource path = /shared/examples/ds_orders/customers
&#x9; &#x9;&#x9;targetFolderPath   = /shared/examples/TargetLayer

&#x9;&#x9;subtract the sourceFolderPath(/shared/examples) from the actual resource path 
&#x9;&#x9;(/shared/examples/ds_orders/customers) to get the derived remaining folder  
&#x9;&#x9;(ds_orders/customers).  Apply naming convention rules on each folder part to derive the canonical
&#x9;&#x9;names for the folders such as (/DataSourceOrders/Customers).  Take the targetFolderPath 
&#x9;&#x9;(/shared/examples/TargetLayer) and concatenate the remaining folder to arrive at the 
&#x9;&#x9;final dervied target folder (/shared/examples/TargetLayer/DataSourceOrders/Customers)

(5th parameter)&#x9;sourceFolderPath - Source CIS folder location
&#x9; When layerType=PM, this is the Physical_Metadata folder path to the physical data source

(6th parameter)&#x9;targetFolderPath - Target CIS folder location

&#x9;Supported Behavior
&#x9;------------------
&#x9;   BEHAVIOR(1): Overlapping sourceFolderPath definitions will result in duplicated views being produced
&#x9;&#x9;&#x9;&#x9;&#x9;Take the 2 source folder paths expressed below.  The 2nd one is a sub-directory of the first one.
&#x9;&#x9;&#x9;&#x9;&#x9;This will result in the same source folders being processed twice which generates the same mapping views
&#x9;&#x9;&#x9;&#x9;&#x9;but in different target target folders.
&#x9;&#x9;(groupId,1,&apos;&apos;A&apos;&apos;,&apos;&apos;/shared/BestPractices/DataAbstractionSample/Physical/Metadata&apos;&apos;       ,&apos;&apos;/shared/BestPractices/DataAbstractionSample/Physical/Formatting&apos;&apos;),
&#x9;&#x9;(groupId,1,&apos;&apos;A&apos;&apos;,&apos;&apos;/shared/BestPractices/DataAbstractionSample/Physical/Metadata/ORDERS&apos;&apos;,&apos;&apos;/shared/BestPractices/DataAbstractionSample/Physicalayer/Formatting/Orders&apos;&apos;)

&#x9;    BEHAVIOR(2): Source Folder Path definitions are case sensitive and must match the actual source path that you
&#x9;&#x9;&#x9;&#x9;&#x9; want to introspect to create mapping views from.

&#x9;    BEHAVIOR(3): Any &apos;&apos;TABLE&apos;&apos; or &apos;&apos;PROCEDURE&apos;&apos; resource type that produces a curosr output is supported.
&#x9;&#x9;&#x9;&#x9;&#x9;Examples: Views, Relational Table, Procedures with cursors including XSLT, custom or parameterized queries.

&#x9;&#x9;BEHAVIOR(4): Set the PM_FOLDER as general or as specific as needed.  If only one data source lives in a folder
&#x9;&#x9;&#x9;&#x9;&#x9; then it is feasible to set it to the container.  If a data source has multiple schemas then it
&#x9;&#x9;&#x9;&#x9;&#x9; may be necessary to set up a group that identifies the specific &quot;SCHEMA_NAME&quot;.   For example, with 
&#x9;&#x9;&#x9;&#x9;&#x9; Oracle, it may be necessary to provide the entire path to the schema user.  For MySQl, it may only 
&#x9;&#x9;&#x9;&#x9;&#x9; be necessary to provide the path to the actual Data Source.

&#x9;&#x9;&#x9;&#x9;Oracle
&#x9;&#x9;&#x9;&#x9;&#x9;Set the PM_FOLDER (Physical Metadata Source Folder) to the path representing the Oracle Schema
&#x9;&#x9;&#x9;&#x9;&#x9;Example: SET PM_FOLDER=&quot;Metadata Path&quot;/OracleSource/cisOraDemoDS/CISORADEMO
       &#x9;&#x9;        Best Practices              ^                 ^             ^            ^
       &#x9;&#x9;       Physical Metadata Layer Path |                 |             |            |
       &#x9;&#x9;                                       CIS Sub-folder |             |            |
            &#x9;&#x9;                                     CIS Oracle Data Source |            |
                    &#x9;                                      Oracle Data Source Schema User |
&#x9;&#x9;&#x9;&#x9;&#x9;The key thing with Oracle is that it contains a schema user &quot;container&quot; under the data source.  
&#x9;&#x9;&#x9;&#x9;&#x9;For the script to work properly, it needs to be pointed past this intermediate container to the
&#x9;&#x9;&#x9;&#x9;&#x9;actual schema user so that it can introspect the underlying tables.

&#x9;&#x9;&#x9;&#x9;MySQL
&#x9;&#x9;&#x9;&#x9;&#x9;Set the PM_FOLDER (Physical Metadata Source Folder) to the path representing MySQL data source
&#x9;&#x9;&#x9;&#x9;&#x9;Example: SET PM_FOLDER=&quot;Metadata Path&quot;/MysqlSource/INVENTORY/ds_inventory
         &#x9;&#x9;      Best Practices              ^                 ^          ^            ^
         &#x9;&#x9;     Physical Metadata Layer Path |                 |          |            |
        &#x9;&#x9;                                     CIS Sub-folder |          |            |
         &#x9;&#x9;                                                CIS Sub-folder |            |
            &#x9;&#x9;                                                 CIS MySQL Data Source  |
        &#x9;&#x9;    The key thing with MySQL is that the scripts are able to detect multiple data sources in a
&#x9;&#x9;&#x9;&#x9;&#x9;sub-folder because the CIS data source contains tables directly underneath the data source.  It has 
&#x9;&#x9;&#x9;&#x9;&#x9;no other catalog or schema folders like Oracle has.

------------------------------------------------------------------
--  EXAMPLE ORACLE CISORADEMO DATA SOURCE GENERATION FOLDERS
-------------------------------------------------------------------
set groupId = &apos;&apos;CISORADEMO&apos;&apos;;
SET PM_FOLDER=physicalMetadataPath||&apos;&apos;/OracleSource/cisOraDemoDS/CISORADEMO&apos;&apos;;
SET PV_FOLDER=physicalViewsPath||&apos;&apos;/CISORADEMO&apos;&apos;;
SET FV_FOLDER=physicalFormattingPath||&apos;&apos;/CISORADEMO&apos;&apos;;
SET LV_FOLDER=businessLogicalPath||&apos;&apos;/CISORADEMO&apos;&apos;;
SET CV_FOLDER=applicationViewsPath||&apos;&apos;&apos;&apos;;

NOTE: Physical Views has been DEPRECATED. 
Generate Physical Views (Generate logical alias name from physical name)
&#x9;From: Physical Metadata Source
&#x9;  To: Physical View Target
&#x9;step 1: Execute generatePhysicalViews()
&#x9;&#x9;Configuration used:
&#x9;&#x9;&#x9;layerType = &apos;&apos;PV&apos;&apos;&#x9;&#x9;&#x9;-- PV=Physical Views - generatePhysicalViews invokes generateViews
&#x9;&#x9;&#x9;generateMode = &apos;&apos;G&apos;&apos;&#x9;&#x9;&#x9;-- G=Generate the resource names 
&#x9;&#x9;&#x9;outputMode = &apos;&apos;A&apos;&apos;&#x9;&#x9;&#x9;-- A=Return All abstract columns, 
&#x9;&#x9;&#x9;generateViews = 1&#x9;&#x9;&#x9;-- 1=Do generate - Perform the VIEW Generation, 
&#x9;&#x9;(G)&#x9;caseRule = &apos;&apos;O&apos;&apos;&#x9;&#x9;&#x9;&#x9;-- O=Original_case - The word is not changed at all -- just pass it through as is
&#x9;&#x9;(G)&#x9;useAliasRule = 0&#x9;&#x9;&#x9;-- 0=DO NOT perform alias rule lookup at all.  Word Part is passed through
&#x9;&#x9;(R)&#x9;generateWithSourceColumn=1&#x9;-- 1=Generate the view with the source column (pass through)-logical status is UNCHANGED

INSERT INTO StartingFolderPipe VALUES (groupId,1,&apos;&apos;PV&apos;&apos;,&apos;&apos;A&apos;&apos;,PM__FOLDER,PV_FOLDER);


-- Generate Physical_Metadata source path specified
INSERT INTO StartingFolderPipe VALUES (groupId,1,&apos;&apos;PM&apos;&apos;,&apos;&apos;A&apos;&apos;,physicalMetadataPath,PM_FOLDER);


Generate Formatting Views (Retrieve logical alias name from a spreadsheet)
&#x9;From: Physical Metadata Source
&#x9;  To: Formatting View Target
&#x9;step 1: Execute generateFormattingViews()
&#x9;&#x9;Configuration used:
&#x9;&#x9;&#x9;layerType = &apos;&apos;FV&apos;&apos;&#x9;&#x9;&#x9;-- FV=Formatting Views - generateFormattingViews invokes generateViews
&#x9;&#x9;&#x9;generateMode = &apos;&apos;R&apos;&apos;&#x9;&#x9;&#x9;-- R=Retrieve the resource name from a spreadsheet. (resources include PATH names, VIEW names AND COLUMN names)
&#x9;&#x9;&#x9;outputMode = &apos;&apos;A&apos;&apos;&#x9;&#x9;&#x9;-- A=Return All abstract columns, 
&#x9;&#x9;&#x9;generateViews = 1&#x9;&#x9;&#x9;-- 1=Do generate - Perform the VIEW Generation, 
&#x9;&#x9;(G)&#x9;caseRule = &apos;&apos;O&apos;&apos;&#x9;&#x9;&#x9;&#x9;-- O=Original_case - The word is not changed at all -- just pass it through as is
&#x9;&#x9;(G)&#x9;useAliasRule = 0&#x9;&#x9;&#x9;-- 0=DO NOT perform alias rule lookup at all.  Word Part is passed through
&#x9;&#x9;(R)&#x9;generateWithSourceColumn=0&#x9;-- 1=Generate the view with the source column (pass through)-logical status is UNCHANGED

INSERT INTO StartingFolderPipe VALUES (groupId,1,&apos;&apos;FV&apos;&apos;,&apos;&apos;A&apos;&apos;,PM_FOLDER,FV_FOLDER);

Generate Logical Views (Generate logical views using the same names as the formatting view)
&#x9;From: Formatting View Source
&#x9;  To: Logical View Target
&#x9;step 1: Execute generateLogicalViews()
&#x9;&#x9;Configuration used:
&#x9;&#x9;&#x9;layerType = &apos;&apos;LV&apos;&apos;&#x9;&#x9;&#x9;-- LV=Logical Views - generateLoicalViews invokes generateViews
&#x9;&#x9;&#x9;generateMode = &apos;&apos;G&apos;&apos;&#x9;&#x9;&#x9;-- G=Generate the resource names 
&#x9;&#x9;&#x9;outputMode = &apos;&apos;A&apos;&apos;&#x9;&#x9;&#x9;-- A=Return All abstract columns, 
&#x9;&#x9;&#x9;generateViews = 1&#x9;&#x9;&#x9;-- 1=Do generate - Perform the VIEW Generation, 
&#x9;&#x9;(G)&#x9;caseRule = &apos;&apos;O&apos;&apos;&#x9;&#x9;&#x9;&#x9;-- O=Original_case - The word is not changed at all -- just pass it through as is
&#x9;&#x9;(G)&#x9;useAliasRule = 0&#x9;&#x9;&#x9;-- 0=DO NOT perform alias rule lookup at all.  Word Part is passed through
&#x9;&#x9;(R)&#x9;generateWithSourceColumn=0&#x9;-- 1=Generate the view with the source column (pass through)-logical status is UNCHANGED

INSERT INTO StartingFolderPipe VALUES (groupId,1,&apos;&apos;LV&apos;&apos;,&apos;&apos;A&apos;&apos;,FV_FOLDER,LV_FOLDER);

Generate Client Views (Generate client views using the same names as the logical view)
&#x9;From: Logical View Source
&#x9;  To: Client View Target
&#x9;step 1: Execute generateClientViews()
&#x9;&#x9;Configuration used:
&#x9;&#x9;&#x9;layerType = &apos;&apos;CV&apos;&apos;&#x9;&#x9;&#x9;-- CV=Client Views - generateClientViews invokes generateViews
&#x9;&#x9;&#x9;generateMode = &apos;&apos;G&apos;&apos;&#x9;&#x9;&#x9;-- G=Generate the resource names 
&#x9;&#x9;&#x9;outputMode = &apos;&apos;A&apos;&apos;&#x9;&#x9;&#x9;-- A=Return All abstract columns, 
&#x9;&#x9;&#x9;generateViews = 1&#x9;&#x9;&#x9;-- 1=Do generate - Perform the VIEW Generation, 
&#x9;&#x9;(G)&#x9;caseRule = &apos;&apos;O&apos;&apos;&#x9;&#x9;&#x9;&#x9;-- O=Original_case - The word is not changed at all -- just pass it through as is
&#x9;&#x9;(G)&#x9;useAliasRule = 0&#x9;&#x9;&#x9;-- 0=DO NOT perform alias rule lookup at all.  Word Part is passed through
&#x9;&#x9;(R)&#x9;generateWithSourceColumn=0&#x9;-- 1=Generate the view with the source column (pass through)-logical status is UNCHANGED

INSERT INTO StartingFolderPipe VALUES (groupId,1,&apos;&apos;CV&apos;&apos;,&apos;&apos;A&apos;&apos;,LV_FOLDER,CV_FOLDER);

&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;CSW Version:&#x9;Reason:
&#x9;08/20/2010&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.1.0&#x9;&#x9;&#x9;Created new
&#x9;04/01/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.2.0&#x9;&#x9;&#x9;Removed the 6th parameter (sourceName) in between sourceFolder and tagetFolder.  No longer relavant.
&#x9;05/15/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.0.0&#x9;&#x9;&#x9;Updated Best Practices 7.1 with compositeDatabasePath and bestPracticesVersion

    Copyright (c) 2010
    Composite Software, Inc.
    All Rights Reserved
*/
PROCEDURE ConfigureStartingFolders(
&#x9;OUT StartingFolderPipe PIPE &apos;||bestPracticesRootPathReserved||&apos;/Procedures/TypeDefinitions.startingFolderType
)
BEGIN
------------------------------------------------------------------
-- VARIABLE DECLARATIONS
------------------------------------------------------------------
-- Default base folder locations defined in /Constants/defaultValues
-- (It makes maintenance easier if the base project folder is moved)
-----------------------------------------------------------------
-- NOTE: Make sure the path is pointing to the correct project
-----------------------------------------------------------------
DECLARE compositeDatabasePath     VARCHAR(4000) DEFAULT &apos;||REPLACE(scriptsPathReserved||&apos;/&apos;,&apos;//&apos;,&apos;/&apos;)||&apos;Constants/defaultValues.compositeDatabasePath;
DECLARE applicationPublishedPath  VARCHAR(4000) DEFAULT &apos;||REPLACE(scriptsPathReserved||&apos;/&apos;,&apos;//&apos;,&apos;/&apos;)||&apos;Constants/defaultValues.applicationPublishedPath;
DECLARE applicationViewsPath &#x9;  VARCHAR(4000) DEFAULT &apos;||REPLACE(scriptsPathReserved||&apos;/&apos;,&apos;//&apos;,&apos;/&apos;)||&apos;Constants/defaultValues.applicationViewsPath;
DECLARE applicationViewsSubFolder VARCHAR(4000) DEFAULT &apos;||REPLACE(scriptsPathReserved||&apos;/&apos;,&apos;//&apos;,&apos;/&apos;)||&apos;Constants/defaultValues.applicationViewsSubFolder;
DECLARE businessBusinessPath &#x9;  VARCHAR(4000) DEFAULT &apos;||REPLACE(scriptsPathReserved||&apos;/&apos;,&apos;//&apos;,&apos;/&apos;)||&apos;Constants/defaultValues.businessBusinessPath;
DECLARE businessLogicalPath &#x9;  VARCHAR(4000) DEFAULT &apos;||REPLACE(scriptsPathReserved||&apos;/&apos;,&apos;//&apos;,&apos;/&apos;)||&apos;Constants/defaultValues.businessLogicalPath;
DECLARE physicalFormattingPath    VARCHAR(4000) DEFAULT &apos;||REPLACE(scriptsPathReserved||&apos;/&apos;,&apos;//&apos;,&apos;/&apos;)||&apos;Constants/defaultValues.physicalFormattingPath;
DECLARE physicalFormattingTransformationPath   VARCHAR(4000) DEFAULT &apos;||REPLACE(scriptsPathReserved||&apos;/&apos;,&apos;//&apos;,&apos;/&apos;)||&apos;Constants/defaultValues.physicalFormattingTransformationPath;
DECLARE physicalMetadataPath &#x9;  VARCHAR(4000) DEFAULT &apos;||REPLACE(scriptsPathReserved||&apos;/&apos;,&apos;//&apos;,&apos;/&apos;)||&apos;Constants/defaultValues.physicalMetadataPath;
DECLARE crudPath&#x9;&#x9;&#x9;&#x9;  VARCHAR(4000) DEFAULT &apos;||REPLACE(scriptsPathReserved||&apos;/&apos;,&apos;//&apos;,&apos;/&apos;)||&apos;Constants/defaultValues.crudPath;
--DEPRECATED: 
DECLARE federatedViewsPath &#x9; &#x9;  VARCHAR(4000) DEFAULT &apos;||REPLACE(scriptsPathReserved||&apos;/&apos;,&apos;//&apos;,&apos;/&apos;)||&apos;Constants/defaultValues.federatedViewsPath;
DECLARE physicalViewsPath &#x9; &#x9;  VARCHAR(4000) DEFAULT &apos;||REPLACE(scriptsPathReserved||&apos;/&apos;,&apos;//&apos;,&apos;/&apos;)||&apos;Constants/defaultValues.physicalViewsPath;

-- Folder location variables for generating Data Abstraction Views
-- Physical Layer [Metadata, Physical, Formatting]
DECLARE PM_FOLDER&#x9;VARCHAR(4000) DEFAULT NULL; -- Physical Metadata Folder Path (PM)
DECLARE PV_FOLDER&#x9;VARCHAR(4000) DEFAULT NULL; -- Physical Views Folder Path (PV) (Deprecated)
DECLARE FV_FOLDER&#x9;VARCHAR(4000) DEFAULT NULL; -- Formatting Views Folder Path (FV)
-- Business Layer [Logical, Business]
DECLARE LV_FOLDER&#x9;VARCHAR(4000) DEFAULT NULL; -- Logical Views Folder Path (LV)
DECLARE EV_FOLDER&#x9;VARCHAR(4000) DEFAULT NULL; -- Federated Views Folder Path (EV) (Deprecated)
DECLARE BV_FOLDER&#x9;VARCHAR(4000) DEFAULT NULL; -- Business Views Folder Path (BV)
-- Application Layer [Views, Published]
DECLARE CV_FOLDER&#x9;VARCHAR(4000) DEFAULT NULL; -- Client Views Folder Path (CV)
DECLARE CP_FOLDER&#x9;VARCHAR(4000) DEFAULT NULL; -- Client Published Folder Path (CP)
-- Database Layer [/services/databases]
DECLARE DB_FOLDER&#x9;VARCHAR(4000) DEFAULT NULL;&#x9;-- Published Composite Database (DB)
-- CRUD (Create,Read,Update,Delete) Source Folder.  This is the folder from which CRUD operations are generated
DECLARE CR_FOLDER&#x9;VARCHAR(4000) DEFAULT NULL; -- CRUD Source Folder Path (CR)
DECLARE CT_FOLDER&#x9;VARCHAR(4000) DEFAULT NULL; -- CRUD Target Folder Path (CR)
-- Group Identifier (used as a filter for view generation)
DECLARE groupId&#x9;&#x9;&#x9;&#x9;VARCHAR;
/*------------------------------------------------------------------
  INSTRUCTIONS:  
  -------------
  Each Physical Data Source must have it&apos;&apos;s own section for view
  generation section.  A section is defined by 5 variables and
  4 insert statements as seen in the examples below.
    1. Copy an entire Example section below.
    2. Modify for your File or Relational Data Source.
    3. Use the 5 base path variables so that your project can easily
       be copied and renamed if necessary.
------------------------------------------------------------------*/
&apos;;
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1560603906783</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
</metadata>