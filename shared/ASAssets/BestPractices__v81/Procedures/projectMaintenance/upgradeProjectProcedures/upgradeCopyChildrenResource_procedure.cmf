<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:9a66723c-3693-47f1-a1f0-d7811996f9d5 -->
<metadata name="upgradeCopyChildrenResource" path="/shared/ASAssets/BestPractices_v81/Procedures/projectMaintenance/upgradeProjectProcedures/upgradeCopyChildrenResource" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>&lt;![CDATA[
&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

]]&gt;</annotation>
  <parameters>
    <parameter name="debug" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="upgradeVectorRow" direction="IN" nullable="true">
      <datatype name="upgradeVector" type="ARRAY" maxLength="0">
        <itemDatatype>
          <datatype name="upgradeType" type="TREE" refId="257">
            <element name="bestPracticesVersionFrom">
              <datatype name="DOUBLE" type="FLOAT" minValue="2.2250738585072014E-308" maxValue="1.7976931348623157E308"/>
            </element>
            <element name="bestPracticesVersionTo">
              <datatype name="DOUBLE" type="FLOAT" minValue="2.2250738585072014E-308" maxValue="1.7976931348623157E308"/>
            </element>
            <element name="resourceAction">
              <datatype name="VARCHAR" type="STRING" maxLength="255"/>
            </element>
            <element name="resourcePath">
              <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
            </element>
            <element name="resourceType">
              <datatype name="VARCHAR" type="STRING" maxLength="255"/>
            </element>
            <element name="srcResource">
              <datatype name="srcResource" type="ARRAY" maxLength="0">
                <itemDatatype>
                  <datatype name="resourceType" referenceDefinitionSet="/shared/ASAssets/Utilities/repository/definitions/RepositoryDefinitions" referenceType="resourceType" type="TREE" refId="513">
                    <element name="path">
                      <datatype name="VARCHAR" referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
                    </element>
                    <element name="type">
                      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                    </element>
                  </datatype>
                </itemDatatype>
              </datatype>
            </element>
            <element name="dstResource">
              <datatype name="dstResource" type="ARRAY" maxLength="0">
                <itemDatatype>
                  <datatype name="resourceType" type="TREE" refId="769">
                    <element name="path">
                      <datatype name="VARCHAR" referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
                    </element>
                    <element name="type">
                      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                    </element>
                  </datatype>
                </itemDatatype>
              </datatype>
            </element>
            <element name="updateStruct">
              <datatype name="updateStruct" type="ARRAY" maxLength="0">
                <itemDatatype>
                  <datatype name="updateType" type="TREE" refId="1025">
                    <element name="updateAction">
                      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                    </element>
                    <element name="occurrence">
                      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
                    </element>
                    <element name="numLines">
                      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
                    </element>
                    <element name="keyTextVerify">
                      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                    </element>
                    <element name="searchText">
                      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
                    </element>
                    <element name="replaceText">
                      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
                    </element>
                  </datatype>
                </itemDatatype>
              </datatype>
            </element>
          </datatype>
        </itemDatatype>
      </datatype>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="success" direction="OUT" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/resource/ResourceExists" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="path" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="type" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="version" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceVersion" type="STRING" maxLength="255"/>
      </element>
      <element name="exists" direction="OUT">
        <datatype type="BOOLEAN"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/log/logDebugMessage" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="moduleName" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="moduleNameType" type="STRING" maxLength="4096"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="messageText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/copyResources" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="sourceFolderPath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="targetFolderPath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="257"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/createAllFolders" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inSourceFolderPath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="257"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/*
&#x9;upgradeCopyChildrenResource:

&#x9;This procedure is invoked by &quot;upgradeProject&quot; when the resource action=&quot;copyChildren&quot;.  This procedure copies all of the children
&#x9;&#x9;resources found in the source folder to the destination folder.  This function is not applicable for non-folder resources.
&#x9;&#x9;It is meant to duplicate the entire contents of one folder and place them in a destination folder with a different name.
&#x9;&#x9;For example copy all resources from /shared/Project1/L3_Formatting_Layer/Formatting_Views to /shared/Project1_v73/Physical/Formatting.
&#x9;&#x9;It is useful when upgrading pre-7.0 projects to 7.3 or higher projects.

&#x9;&#x9;If a source folder does not exist don&apos;t throw an error....just keep going.

&#x9;Input: 
&#x9;&#x9;debug - &apos;Y&apos;=debug, &apos;N&apos;=do not debug
&#x9;&#x9;upgradeVectorRow - This is a single row from the upgradeVector which is defined below
&#x9;Output:
&#x9;&#x9;success - 1=success, 0=fail
&#x9;Exceptions: ex - throw an exception upon error

&#x9;-----------------------------------------------------------------------------
&#x9;The following defines the structures that are used for upgrading a project:
&#x9;-----------------------------------------------------------------------------
&#x9;DECLARE PUBLIC TYPE upgradeType ROW(
&#x9;&#x9;bestPracticesVersion&#x9;DOUBLE,&#x9;&#x9;&#x9;&#x9;&#x9;-- version of the best practices where the change is being applied
&#x9;&#x9;resourceAction&#x9;&#x9;&#x9;VARCHAR&#x9;&#x9;&#x9;&#x9;&#x9;-- action to take on the resource: 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;     copy - copy srcResource to dstResource.  srcResource and dstResource required.  updateStruct is null.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;                if resource type is CONTAINER then copy all resources
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;                if resource type is not CONTAINER then copy specific resource
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;copyLeave - copy srcResource to _Copy_#.  srcResource is required.  dstResource and updateStruct are null.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;                Creates a copy of a resource and leaves the original in place. 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;                The copy detects other copies an increments the number as needed in the format of _Copy_#
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;   copyRename - copy srcResource to _Copy_#.  srcResource is required.  dstResource and updateStruct are null.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;                Creates a copy of a resource and renames the original to it.  The original is no longer present.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;                The copy detects other copies an increments the number as needed in the format of _Copy_#
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9; copyChildren - copy the children of srcResource to dstResource.  srcResource and dstResource required.  updateStruct is null.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;                Only copying from CONTAINER to CONTAINER is allowed.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;   update - update dstResource using updateStruct.  srcResource is null.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--  updateTrigger - update all trigger resources found starting at dstResource using updateStruct.  srcResource is null.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;&#x9;&#x9;&#x9; dstResource can be a single trigger or folder of triggers.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;   updateCrud - update CRUD resources specified by dstResource using updateStruct.  srcResource is null.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;   delete - delete dstResource.  srcResource and updateStruct are null.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;     move - move srcResource to dstResource.  updateStruct is null.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--     moveCustom - move all custom scripts from srcResource folder to the specified dstResource folder. updateStruct is null.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--                  a custom resource is determined by finding a resource in dstResource that is not in the DataAbstraction_GENERIC_Template.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--         rebind - rebind srcResource to dstResource using startingFolder.  updateStruct is null.
&#x9;&#x9;resourcePath&#x9;&#x9;&#x9;VARCHAR(4000),&#x9;&#x9;&#x9;-- resource path of the resource or starting folder to be used with rebind action otherwise null.
&#x9;&#x9;resourceType&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;&#x9;&#x9;-- resource type of the resource to be used with rebind action otherwise null.
&#x9;&#x9;srcResource&#x9;&#x9;&#x9;&#x9;VECTOR(resourceType), &#x9;-- source reource is always a vector of 1
&#x9;&#x9;srcResource&#x9;&#x9;&#x9;&#x9;VECTOR(resourceType), &#x9;-- source reource is always a vector of 1
&#x9;&#x9;dstResource&#x9;&#x9;&#x9;&#x9;VECTOR(resourceType),&#x9;-- destination resource may be an unbounded vector
&#x9;&#x9;updateStruct&#x9;&#x9;&#x9;VECTOR(updateType),&#x9;&#x9;-- this structure is used when the resourceAction=update otherwise null
&#x9;);
&#x9;DECLARE PUBLIC TYPE resourceType &#x9;ROW(
&#x9;&#x9;&quot;path&quot;&#x9;&#x9;TypeDefinitions.pathType,&#x9;-- Path to resource
&#x9;&#x9;&quot;type&quot;&#x9;&#x9;VARCHAR(255)&#x9;&#x9;&#x9;&#x9;-- Resoruce type
&#x9;);
&#x9;DECLARE PUBLIC TYPE updateType ROW(
&#x9;&#x9;updateAction&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;&#x9;-- update Action: &#x9;&#x9;&#x9;replace, replaceBefore, replaceAfter [all actions are performed on a given resource]
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- updateTrigger Action: &#x9;replacePath, replaceParam, fixParam [All actions are performed on a given trigger resource]
&#x9;&#x9;occurrence&#x9;&#x9;&#x9;&#x9;INTEGER,&#x9;&#x9;&#x9;-- The occurrence of the searchText to act upon.  0=take action on all occurrences
&#x9;&#x9;numLines&#x9;&#x9;&#x9;&#x9;INTEGER,&#x9;&#x9;&#x9;-- If updateAction=replaceBefore or replaceAfter, then then perform that action by searching
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   for the number of lines CHR(10) either before or after and placing the text at that location.
&#x9;&#x9;keyTextVerify&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;&#x9;-- This is short unique text from the replaceText variable that allows the code to verify if the replace has already been done.
&#x9;&#x9;searchText&#x9;&#x9;&#x9;&#x9;LONGVARCHAR,&#x9;&#x9;-- The text to search for.  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- If multiple occurrences are found the action may be taken according to the defined occurrence.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- If the searchText is not found then no action is taken.
&#x9;&#x9;replaceText&#x9;&#x9;&#x9;&#x9;LONGVARCHAR&#x9;&#x9;&#x9;-- The text to replace given the update action.
&#x9;);

&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;CSW Version:&#x9;Reason:
&#x9;05/14/2010&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.0.0&#x9;&#x9;&#x9;Created new
&#x9;03/01/2018&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.5&#x9;&#x9;&#x9;Replaced /shared/ASAssets/Utilities/repository/resourceExists with /lib/resource/ResourceExists
&#x9;03/14/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;B.P. 2019.102: Removed projectPath as it was not referenced in the code.

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

*/
PROCEDURE upgradeCopyChildrenResource(
&#x9;IN  debug&#x9;&#x9;&#x9;&#x9;CHAR(1),&#x9;
&#x9;-- This is a single row from the upgradeVector
&#x9;IN&#x9;upgradeVectorRow &#x9;/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions.upgradeVector,
&#x9;OUT success&#x9;&#x9;&#x9;&#x9;INTEGER
)
BEGIN
&#x9;DECLARE moduleName&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;upgradeCopyChildrenResource&apos;;
&#x9;DECLARE srcPath&#x9;&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE srcType&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE dstPath&#x9;&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE dstType&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE resourcePath&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE resourceName&#x9;&#x9;VARCHAR;
&#x9;DECLARE i&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER DEFAULT 1;
&#x9;DECLARE faultResponse&#x9;&#x9;XML;
&#x9;DECLARE Empty&#x9;&#x9;&#x9;&#x9;INTEGER DEFAULT 1;
&#x9;DECLARE prependMessage&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE resourceExists&#x9;&#x9;BOOLEAN;
&#x9;DECLARE ex&#x9;&#x9;&#x9;&#x9;&#x9;EXCEPTION;

&#x9;/***************************************************************
&#x9; * Loop through the vector.  The srcResource vector and dstResource 
&#x9; *    vector must have exactly the same number of rows.
&#x9; ***************************************************************/
&#x9;WHILE (i &lt;= CARDINALITY(upgradeVectorRow[1].srcResource)) DO

&#x9;&#x9;-- Make sure the srcResource is not null
&#x9;&#x9;if (upgradeVectorRow[1].srcResource is null) then
&#x9;&#x9;&#x9;raise ex value moduleName||&apos;:  COPY CHILDREN ACTION: The srcResource[&apos;||i||&apos;] vector may not be null.&apos;;
&#x9;&#x9;end if;
&#x9;&#x9;-- Make sure the dstResource is not null
&#x9;&#x9;if (upgradeVectorRow[1].dstResource is null) then
&#x9;&#x9;&#x9;raise ex value moduleName||&apos;:  COPY CHILDREN ACTION: The dstResource[&apos;||i||&apos;] vector may not be null.&apos;;
&#x9;&#x9;end if;

&#x9;&#x9;-- Get the source path information
&#x9;&#x9;set srcPath = upgradeVectorRow[1].srcResource[i].&quot;path&quot;;
&#x9;&#x9;set srcType = upgradeVectorRow[1].srcResource[i].&quot;type&quot;;
&#x9;&#x9;-- Get the destination path information
&#x9;&#x9;set dstPath = upgradeVectorRow[1].dstResource[i].&quot;path&quot;;
&#x9;&#x9;set dstType = upgradeVectorRow[1].dstResource[i].&quot;type&quot;;

&#x9;&#x9;-- Validate that the source information is not empty
&#x9;&#x9;if ( (srcPath IS NULL OR LENGTH(&apos;|&apos;||srcPath||&apos;|&apos;) = 2) or  --Empty
&#x9;&#x9;&#x9; (srcType IS NULL OR LENGTH(&apos;|&apos;||srcType||&apos;|&apos;) = 2) ) then  --Empty
&#x9;&#x9;&#x9;raise ex value moduleName||&apos;:  COPY CHILDREN ACTION: The following srcResource[&apos;||i||&apos;] vector entries may be null or empty: srcPath, srcType&apos;;
&#x9;&#x9;end if;
&#x9;&#x9;-- Validate that the destination information is not empty
&#x9;&#x9;if ( (dstPath IS NULL OR LENGTH(&apos;|&apos;||dstPath||&apos;|&apos;) = 2) or  --Empty
&#x9;&#x9;&#x9; (dstType IS NULL OR LENGTH(&apos;|&apos;||dstType||&apos;|&apos;) = 2) ) then  --Empty
&#x9;&#x9;&#x9;raise ex value moduleName||&apos;:  COPY CHILDREN ACTION: The following dstResource[&apos;||i||&apos;] vector entries may be null or empty: dstPath, dstType&apos;;
&#x9;&#x9;end if;

&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;:  srcPath=&apos;||srcPath); 
&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;:  srcType=&apos;||srcType); 
&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;:  dstPath=&apos;||dstPath); 
&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;:  dstType=&apos;||dstType); 

&#x9;&#x9;set prependMessage = moduleName||&apos;:  COPY CHILDREN ACTION: Error with vector entry[&apos;||i||&apos;].  Error=&apos;;

&#x9;&#x9;/*****************************************************************************************
&#x9;&#x9; * SCENARIO 1 - Copy src CONTAINER to dst NON-CONTAINER &#x9;(folder to resource) - illegal, throw an exception
&#x9;&#x9; *****************************************************************************************/
&#x9;&#x9;if (srcType = &apos;CONTAINER&apos; and dstType != &apos;CONTAINER&apos;) then
&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;:  SCENARIO 1 - Copy src CONTAINER to dst NON-CONTAINER &#x9;(folder to resource) - illegal, throw an exception&apos;); 

&#x9;&#x9;&#x9;raise ex value prependMessage||&apos;It is illegal to use &quot;copy children&quot; to copy a folder of resources to a single resource.&apos;||
&#x9;&#x9;&#x9;&#x9;&apos;   source path=&apos;||NVL(srcPath,&apos;null&apos;)||&apos;   destination path=&apos;||NVL(dstPath,&apos;null&apos;);
&#x9;&#x9;end if;

&#x9;&#x9;/*****************************************************************************************
&#x9;&#x9; * SCENARIO 2 - Copy src CONTAINER to dst CONTAINER&#x9;&#x9;&#x9;(folder to folder)
&#x9;&#x9; *****************************************************************************************/
&#x9;&#x9;if (srcType = &apos;CONTAINER&apos; and dstType = &apos;CONTAINER&apos;) then
&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;:  SCENARIO 2 - Copy src CONTAINER to dst CONTAINER&#x9;&#x9;&#x9;(folder to folder)&apos;); 

&#x9;&#x9;&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;&#x9;&#x9;-- Insure that the destination folder exists
&#x9;&#x9;&#x9;&#x9;call /lib/resource/ResourceExists(dstPath, srcType, null, resourceExists);
&#x9;&#x9;&#x9;&#x9;if (NOT resourceExists) then
&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/createAllFolders(dstPath, success, faultResponse);
&#x9;&#x9;&#x9;&#x9;&#x9;if (faultResponse is not null) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;raise ex value CAST(faultResponse AS LONGVARCHAR);
&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;EXCEPTION
&#x9;&#x9;&#x9;&#x9;ELSE raise ex value moduleName||&apos;:  &apos;||cast(CURRENT_EXCEPTION.TRACE as longvarchar);
&#x9;&#x9;&#x9;END;

&#x9;&#x9;&#x9;&#x9;-- Copy the all the folder resources from the source folder to the destination folder
&#x9;&#x9;&#x9;&#x9;call /lib/resource/ResourceExists(srcPath, srcType, null, resourceExists);
&#x9;&#x9;&#x9;&#x9;if (resourceExists) then
&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/copyResources(srcPath, dstPath, success, faultResponse);
&#x9;&#x9;&#x9;&#x9;&#x9;if (faultResponse is not null) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;raise ex value CAST(faultResponse AS LONGVARCHAR);
&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;COPY CHILDREN ACTION:  The srcResource[&apos;||i||&apos;] vector entry path=[&apos;||NVL(srcPath,&apos;null&apos;)|| &apos;]  type=[&apos;||NVL(srcType,&apos;null&apos;)||&apos;]  does not exist.&apos;);
&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;end if;

&#x9;&#x9;/*****************************************************************************************
&#x9;&#x9; * SCENARIO 3 - Copy src NON-CONTAINER to dst NON-CONTAINER (resource to resource)
&#x9;&#x9; *****************************************************************************************/
&#x9;&#x9;if (srcType != &apos;CONTAINER&apos; and dstType != &apos;CONTAINER&apos;) then
&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;:  SCENARIO 3 - Copy src NON-CONTAINER to dst NON-CONTAINER &#x9;(resource to resource) - illegal, throw an exception&apos;); 

&#x9;&#x9;&#x9;raise ex value prependMessage||&apos;It is illegal to use &quot;copy children&quot; to copy a resource to a resource.  Use &quot;copy&quot; for that use case.&apos;||
&#x9;&#x9;&#x9;&#x9;&apos;   source path=&apos;||NVL(srcPath,&apos;null&apos;)||&apos;   destination path=&apos;||NVL(dstPath,&apos;null&apos;);
&#x9;&#x9;end if;

&#x9;&#x9;/*****************************************************************************************
&#x9;&#x9; * SCENARIO 4 - Copy src NON-CONTAINER to dst CONTAINER &#x9;(resource to folder)
&#x9;&#x9; *****************************************************************************************/
&#x9;&#x9;if (srcType != &apos;CONTAINER&apos; and dstType = &apos;CONTAINER&apos;) then
&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;:  SCENARIO 4 - Copy src NON-CONTAINER to dst CONTAINER &#x9;(resource to folder) - illegal, throw an exception&apos;); 

&#x9;&#x9;&#x9;raise ex value prependMessage||&apos;It is illegal to use &quot;copy children&quot; to copy a resource to a folder.  Use &quot;copy&quot; for that use case.&apos;||
&#x9;&#x9;&#x9;&#x9;&apos;   source path=&apos;||NVL(srcPath,&apos;null&apos;)||&apos;   destination path=&apos;||NVL(dstPath,&apos;null&apos;);
&#x9;&#x9;end if;

&#x9;&#x9;set i = i + 1;
&#x9;END WHILE;
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1573161757946</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="p:0:Customized" type="STRING">datatype.changed;datatype.changed</attribute>
  <attribute name="p:1:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="p:2:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="references" type="NULL"/>
</metadata>