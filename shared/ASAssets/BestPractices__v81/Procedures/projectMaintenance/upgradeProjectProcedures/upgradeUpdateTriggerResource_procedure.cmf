<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:e931daa6-7fda-456a-badf-4cdb1c228a1a -->
<metadata name="upgradeUpdateTriggerResource" path="/shared/ASAssets/BestPractices_v81/Procedures/projectMaintenance/upgradeProjectProcedures/upgradeUpdateTriggerResource" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>&lt;![CDATA[
&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

]]&gt;</annotation>
  <parameters>
    <parameter name="debug" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="upgradeVectorRow" direction="IN" nullable="true">
      <datatype name="upgradeVector" type="ARRAY" maxLength="0">
        <itemDatatype>
          <datatype name="upgradeType" type="TREE" refId="257">
            <element name="bestPracticesVersionFrom">
              <datatype name="DOUBLE" type="FLOAT" minValue="2.2250738585072014E-308" maxValue="1.7976931348623157E308"/>
            </element>
            <element name="bestPracticesVersionTo">
              <datatype name="DOUBLE" type="FLOAT" minValue="2.2250738585072014E-308" maxValue="1.7976931348623157E308"/>
            </element>
            <element name="resourceAction">
              <datatype name="VARCHAR" type="STRING" maxLength="255"/>
            </element>
            <element name="resourcePath">
              <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
            </element>
            <element name="resourceType">
              <datatype name="VARCHAR" type="STRING" maxLength="255"/>
            </element>
            <element name="srcResource">
              <datatype name="srcResource" type="ARRAY" maxLength="0">
                <itemDatatype>
                  <datatype name="resourceType" referenceDefinitionSet="/shared/ASAssets/Utilities/repository/definitions/RepositoryDefinitions" referenceType="resourceType" type="TREE" refId="513">
                    <element name="path">
                      <datatype name="VARCHAR" referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
                    </element>
                    <element name="type">
                      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                    </element>
                  </datatype>
                </itemDatatype>
              </datatype>
            </element>
            <element name="dstResource">
              <datatype name="dstResource" type="ARRAY" maxLength="0">
                <itemDatatype>
                  <datatype name="resourceType" type="TREE" refId="769">
                    <element name="path">
                      <datatype name="VARCHAR" referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
                    </element>
                    <element name="type">
                      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                    </element>
                  </datatype>
                </itemDatatype>
              </datatype>
            </element>
            <element name="updateStruct">
              <datatype name="updateStruct" type="ARRAY" maxLength="0">
                <itemDatatype>
                  <datatype name="updateType" type="TREE" refId="1025">
                    <element name="updateAction">
                      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                    </element>
                    <element name="occurrence">
                      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
                    </element>
                    <element name="numLines">
                      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
                    </element>
                    <element name="keyTextVerify">
                      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                    </element>
                    <element name="searchText">
                      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
                    </element>
                    <element name="replaceText">
                      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
                    </element>
                  </datatype>
                </itemDatatype>
              </datatype>
            </element>
          </datatype>
        </itemDatatype>
      </datatype>
    </parameter>
    <parameter name="success" direction="OUT" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/resource/ResourceExists" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="path" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="type" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="version" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceVersion" type="STRING" maxLength="255"/>
      </element>
      <element name="exists" direction="OUT">
        <datatype type="BOOLEAN"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/projectMaintenance/upgradeProjectProcedures/escapeSearchText" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inSearchText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="searchText" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/projectMaintenance/upgradeProjectProcedures/getLatestCopy_scripts" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="scriptsPath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="scriptsPathCopy" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/projectMaintenance/upgradeProjectProcedures/getNumOccurrences" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="inScriptText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inSearchText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="numOccurrences" direction="OUT">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/projectMaintenance/upgradeProjectProcedures/getParameterNum" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="parameters" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="parameterNum" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="trimParam" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="parameterValue" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/definitions/RepositoryDefinitionsRecursive" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getBasicResourceCursor_ActionAttributes" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceCursor" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="actionType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="name">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="type">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="value">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getResourceListRecursive" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="resourceTreeList" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="name">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resPath">
            <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
          </element>
          <element name="resType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="creationDate">
            <datatype type="DATETIME"/>
          </element>
          <element name="creationDateBigint">
            <datatype type="INTEGER"/>
          </element>
          <element name="creatorUserDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="creatorUserName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="lastModifiedDate">
            <datatype type="DATETIME"/>
          </element>
          <element name="lastModifiedDateBigint">
            <datatype type="INTEGER"/>
          </element>
          <element name="lastModifiedUserDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="lastModifiedUserName">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/returnFolderNameAndFolderPath" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="mode" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="folderName" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="folderPath" direction="OUT">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/updateTrigger" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="fullResourcePath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="enabled" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="conditionType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="actionType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="triggerAttrVect" direction="IN">
        <datatype type="ARRAY" maxLength="0">
          <itemDatatype>
            <datatype name="TriggerType" type="TREE" refId="257">
              <element name="trName">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="trValue">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
            </datatype>
          </itemDatatype>
        </datatype>
      </element>
      <element name="attributeVect" direction="IN">
        <datatype type="ARRAY" maxLength="0">
          <itemDatatype>
            <datatype name="AttributeType" type="TREE" refId="513">
              <element name="attrName">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="attrType">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="attrValue">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
            </datatype>
          </itemDatatype>
        </datatype>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="createResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="769"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <reference refId="769"/>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/TextUtils/RegexReplace" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="Input Text" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Regular Expression" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Replacement Text" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Occurrence" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/extractDelimitedText" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inputString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="delimiter" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="occurrence" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="reverseInputText" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="reverseOutput" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="trimText" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="includeDelimiter" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="object">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/getConstantV2" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="constantsPath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="constantsName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="optionReturn" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="outValue" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/getDelimitedOccurrence" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="mode" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="delimiter" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inOccurrence" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inTrimText" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/modifyConstant" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="constantsPath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="constantsName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="constantsValue" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/*
&#x9;upgradeUpdateTriggerResource:

&#x9;This procedure is invoked by &quot;upgradeProject&quot; when the resource action=&quot;updateTrigger&quot;.  This procedure updates all of 
&#x9;&#x9;the triggers found in a destination path and type.  This procedure uses the &quot;updateStruct&quot; vector to provide additional direction
&#x9;&#x9;when updating trigger paths and parameters in place such as &quot;replacePath&quot; and &quot;replaceParam&quot;.

&#x9;Input: 
&#x9;&#x9;debug - &apos;Y&apos;=debug, &apos;N&apos;=do not debug
&#x9;&#x9;upgradeVectorRow - This is a single row from the upgradeVector which is defined below
&#x9;Output:
&#x9;&#x9;success - 1=success, 0=fail
&#x9;Exceptions: ex - throw an exception upon error

&#x9;-----------------------------------------------------------------------------
&#x9;The following defines the structures that are used for upgrading a project:
&#x9;-----------------------------------------------------------------------------
&#x9;DECLARE PUBLIC TYPE upgradeType ROW(
&#x9;&#x9;bestPracticesVersion&#x9;DOUBLE,&#x9;&#x9;&#x9;&#x9;&#x9;-- version of the best practices where the change is being applied
&#x9;&#x9;resourceAction&#x9;&#x9;&#x9;VARCHAR&#x9;&#x9;&#x9;&#x9;&#x9;-- action to take on the resource: 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;     copy - copy srcResource to dstResource.  srcResource and dstResource required.  updateStruct is null.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;                if resource type is CONTAINER then copy all resources
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;                if resource type is not CONTAINER then copy specific resource
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;copyLeave - copy srcResource to _Copy_#.  srcResource is required.  dstResource and updateStruct are null.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;                Creates a copy of a resource and leaves the original in place. 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;                The copy detects other copies an increments the number as needed in the format of _Copy_#
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;   copyRename - copy srcResource to _Copy_#.  srcResource is required.  dstResource and updateStruct are null.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;                Creates a copy of a resource and renames the original to it.  The original is no longer present.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;                The copy detects other copies an increments the number as needed in the format of _Copy_#
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9; copyChildren - copy the children of srcResource to dstResource.  srcResource and dstResource required.  updateStruct is null.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;                Only copying from CONTAINER to CONTAINER is allowed.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;   update - update dstResource using updateStruct.  srcResource is null.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--  updateTrigger - update all trigger resources found starting at dstResource using updateStruct.  srcResource is null.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;&#x9;&#x9;&#x9; dstResource can be a single trigger or folder of triggers.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;   updateCrud - update CRUD resources specified by dstResource using updateStruct.  srcResource is null.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;   delete - delete dstResource.  srcResource and updateStruct are null.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;     move - move srcResource to dstResource.  updateStruct is null.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--     moveCustom - move all custom scripts from srcResource folder to the specified dstResource folder. updateStruct is null.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--                  a custom resource is determined by finding a resource in dstResource that is not in the DataAbstraction_GENERIC_Template.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--         rebind - rebind srcResource to dstResource using startingFolder.  updateStruct is null.
&#x9;&#x9;resourcePath&#x9;&#x9;&#x9;VARCHAR(4000),&#x9;&#x9;&#x9;-- resource path of the resource or starting folder to be used with rebind action otherwise null.
&#x9;&#x9;resourceType&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;&#x9;&#x9;-- resource type of the resource to be used with rebind action otherwise null.
&#x9;&#x9;srcResource&#x9;&#x9;&#x9;&#x9;VECTOR(resourceType), &#x9;-- source reource is always a vector of 1
&#x9;&#x9;srcResource&#x9;&#x9;&#x9;&#x9;VECTOR(resourceType), &#x9;-- source reource is always a vector of 1
&#x9;&#x9;dstResource&#x9;&#x9;&#x9;&#x9;VECTOR(resourceType),&#x9;-- destination resource may be an unbounded vector
&#x9;&#x9;updateStruct&#x9;&#x9;&#x9;VECTOR(updateType),&#x9;&#x9;-- this structure is used when the resourceAction=update otherwise null
&#x9;);
&#x9;DECLARE PUBLIC TYPE resourceType &#x9;ROW(
&#x9;&#x9;&quot;path&quot;&#x9;&#x9;TypeDefinitions.pathType,&#x9;-- Path to resource
&#x9;&#x9;&quot;type&quot;&#x9;&#x9;VARCHAR(255)&#x9;&#x9;&#x9;&#x9;-- Resoruce type
&#x9;);
&#x9;DECLARE PUBLIC TYPE updateType ROW(
&#x9;&#x9;updateAction&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;&#x9;-- update Action: &#x9;&#x9;&#x9;replace, replaceBefore, replaceAfter [all actions are performed on a given resource]
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;replace - replace the &quot;searchText&quot; with the &quot;replaceText&quot; value and verify with &quot;keyTextVerify&quot;.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;replaceBefore - replace the &quot;searchText&quot; on the &quot;numLines&quot; before the &quot;searchText&quot;.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;replaceAfter - replace the &quot;searchText&quot; on the &quot;numLines&quot; after the &quot;searchText&quot;.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- updateTrigger Action: &#x9;replacePath, replaceParam, fixParam [All actions are performed on a given trigger resource]
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;replacePath - replace the trigger parameter path.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;replaceParam - replace the trigger parameter text.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;fixParam - fix the parameters single quotes.
&#x9;&#x9;occurrence&#x9;&#x9;&#x9;&#x9;INTEGER,&#x9;&#x9;&#x9;-- The occurrence of the searchText to act upon.  0=take action on all occurrences
&#x9;&#x9;numLines&#x9;&#x9;&#x9;&#x9;INTEGER,&#x9;&#x9;&#x9;-- If updateAction=replaceBefore or replaceAfter, then then perform that action by searching
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   for the number of lines CHR(10) either before or after and placing the text at that location.
&#x9;&#x9;keyTextVerify&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;&#x9;-- This is short unique text from the replaceText variable that allows the code to verify if the replace has already been done.
&#x9;&#x9;searchText&#x9;&#x9;&#x9;&#x9;LONGVARCHAR,&#x9;&#x9;-- The text to search for.  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- If multiple occurrences are found the action may be taken according to the defined occurrence.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- If the searchText is not found then no action is taken.
&#x9;&#x9;replaceText&#x9;&#x9;&#x9;&#x9;LONGVARCHAR&#x9;&#x9;&#x9;-- The text to replace given the update action.
&#x9;);

&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;CSW Version:&#x9;Reason:
&#x9;05/14/2010&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.0.0&#x9;&#x9;&#x9;Created new
&#x9;04/23/2014&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.2.0&#x9;&#x9;&#x9;B.P 8.1.2/8.1.3 - Added &quot;fixParam&quot; which checks for a balance in single quotes in the parameter section.
&#x9;03/01/2018&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.5&#x9;&#x9;&#x9;Replaced /shared/ASAssets/Utilities/repository/resourceExists with /lib/resource/ResourceExists
&#x9;03/02/2018&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.5&#x9;&#x9;&#x9;Replaced RegexSplit with extractDelimitedText
&#x9;03/14/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;B.P. 2019.102: Removed projectPath as it was not referenced in the code.
&#x9;07/30/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;B.P. 2019.300: Added restoreParam capability.

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

*/
PROCEDURE upgradeUpdateTriggerResource(&#x9;
&#x9;IN debug&#x9;&#x9;&#x9;&#x9;CHAR(1),&#x9;
&#x9;-- This is a single row from the upgradeVector&#x9;
&#x9;IN&#x9;upgradeVectorRow &#x9;/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions.upgradeVector, 
&#x9;OUT success&#x9;&#x9;&#x9;&#x9;INTEGER
)
BEGIN
&#x9;DECLARE moduleName&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;upgradeUpdateTriggerResource&apos;;
&#x9;DECLARE debug2&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1) DEFAULT &apos;N&apos;; -- second level of debug
&#x9;DECLARE triggerVect&#x9;&#x9;&#x9;&#x9;VECTOR(/shared/ASAssets/Utilities/repository/definitions/RepositoryDefinitionsRecursive.resourceTreeType);
&#x9;DECLARE i,j,k&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER DEFAULT 1;
&#x9;DECLARE fromVersion&#x9;&#x9;&#x9;&#x9;DOUBLE;
&#x9;DECLARE toVersion&#x9;&#x9;&#x9;&#x9;DOUBLE;
&#x9;DECLARE procedurePath&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE procedureParams&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE updateTrigger&#x9;&#x9;&#x9;BOOLEAN;
&#x9;DECLARE displayLen&#x9;&#x9;&#x9;&#x9;INTEGER DEFAULT 150;
&#x9;DECLARE dstPath&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE dstType&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE subtype&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE displayAction&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE updateAction&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE numLines&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE occurrence&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE numOccurrence&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE displayText&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE prependMessage&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE eol&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT chr(10);
&#x9;DECLARE createResponse &#x9;&#x9;&#x9;XML;
&#x9;DECLARE faultResponse&#x9;&#x9;&#x9;XML;
&#x9;DECLARE scriptText&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE searchText&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE replaceText&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE keyTextVerify&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE keyTextVerifyCount&#x9;&#x9;INTEGER;
&#x9;DECLARE searchTextCount&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE message&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE paramValue&#x9;&#x9;&#x9;&#x9;VARCHAR(4000);
    DECLARE TYPE TriggerType ROW (
        trName &#x9;&#x9;VARCHAR, 
        trValue &#x9;LONGVARCHAR
    );
&#x9;DECLARE triggerAttrVect&#x9;&#x9;&#x9;VECTOR(TriggerType);
&#x9;DECLARE resourceExists&#x9;&#x9;&#x9;BOOLEAN;
&#x9;DECLARE ex&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;EXCEPTION;
&#x9;-- Added for &quot;restoreParm&quot; action
&#x9;DECLARE scriptsPath&#x9;&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE scriptsPathCopy&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE triggerPathCopy&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE procedureParamsCopy&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE currParam&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE paramMod&#x9;&#x9;&#x9;&#x9;LONGVARCHAR DEFAULT &apos;&apos;;
&#x9;DECLARE paramSingle&#x9;&#x9;&#x9;&#x9;LONGVARCHAR DEFAULT &apos;&apos;;
&#x9;DECLARE paramCopy&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE resourceName&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE parentPath&#x9;&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE resExists&#x9;&#x9;&#x9;&#x9;BOOLEAN;
&#x9;DECLARE constantList&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE constantName&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE constantValue&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE constantDef&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE constantUpdated&#x9;&#x9;&#x9;BOOLEAN DEFAULT false;
&#x9;DECLARE tempPath1&#x9;&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE tempName1, tempName2&#x9;VARCHAR;
&#x9;DECLARE defaultValuesPath&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE defaultValuesCopyPath&#x9;VARCHAR(4000);
&#x9;DECLARE docConstantsPath&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE ch&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1);
&#x9;DECLARE pos&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE subLayerPartialPath&#x9;&#x9;LONGVARCHAR;


&#x9;/***************************************************************
&#x9; * Loop through the vector.  The dstResource vector is the only
&#x9; *    vector that matters when deleting a target destination resource. 
&#x9; ***************************************************************/
&#x9;WHILE (i &lt;= CARDINALITY(upgradeVectorRow[1].dstResource)) DO

&#x9;&#x9;-- Make sure the dstResource is not null
&#x9;&#x9;if (upgradeVectorRow[1].dstResource is null) then
&#x9;&#x9;&#x9;raise ex value moduleName||&apos;:  UPDATETRIGGER ACTION: The dstResource[&apos;||i||&apos;] vector may not be null.&apos;;
&#x9;&#x9;end if;

&#x9;&#x9;-- Get the from and to version
&#x9;&#x9;set fromVersion = upgradeVectorRow[1].bestPracticesVersionFrom;&#x9;-- &quot;From&quot; version of the best practices where the change is coming from
&#x9;&#x9;set toVersion = upgradeVectorRow[1].bestPracticesVersionTo;&#x9;&#x9;-- &quot;To&quot; version of the best practices where the change is being applied

&#x9;&#x9;-- Get the destination path information
&#x9;&#x9;set dstPath = upgradeVectorRow[1].dstResource[i].&quot;path&quot;;
&#x9;&#x9;set dstType = upgradeVectorRow[1].dstResource[i].&quot;type&quot;;

&#x9;&#x9;-- Validate that the destination information is not empty
&#x9;&#x9;if ( (dstPath IS NULL OR LENGTH(&apos;|&apos;||dstPath||&apos;|&apos;) = 2) or  --Empty
&#x9;&#x9;&#x9; (dstType IS NULL OR LENGTH(&apos;|&apos;||dstType||&apos;|&apos;) = 2) ) then  --Empty
&#x9;&#x9;&#x9;raise ex value moduleName||&apos;:  UPDATETRIGGER ACTION: The following dstResource[&apos;||i||&apos;] vector entries may be null or empty: dstPath, dstType&apos;;
&#x9;&#x9;end if;

&#x9;&#x9;BEGIN INDEPENDENT TRANSACTION

&#x9;&#x9;-- Verify the source path exists.
&#x9;&#x9;call /lib/resource/ResourceExists(dstPath, dstType, null, resourceExists);
&#x9;&#x9;if (NOT resourceExists) then
&#x9;&#x9;&#x9;raise ex value moduleName||&apos;:  UPDATETRIGGER ACTION:  The dstResource[&apos;||i||&apos;] vector entry path does not exist=&apos;||NVL(dstPath,&apos;null&apos;);
&#x9;&#x9;end if;

&#x9;&#x9;set prependMessage = moduleName||&apos;:  UPDATETRIGGER ACTION: Error with vector entry[&apos;||i||&apos;].  Error=&apos;;


&#x9;&#x9;IF (dstType = &apos;TRIGGER&apos;) THEN
&#x9;&#x9;&#x9;set triggerVect = VECTOR[(null)];
&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/string/getDelimitedOccurrence(dstPath, &apos;R&apos;, &apos;/&apos;, 1, 1, triggerVect[1].name);
&#x9;&#x9;&#x9;set triggerVect[1].resPath = dstPath;
&#x9;&#x9;&#x9;set triggerVect[1].resType = dstType;
&#x9;&#x9;&#x9;set triggerVect[1].subType = &apos;NONE&apos;;
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;set j = 0;
&#x9;&#x9;&#x9;-- Retrieve the list of resources in the destination container
&#x9;&#x9;&#x9;FOR r as SELECT * FROM /shared/ASAssets/Utilities/repository/getResourceListRecursive(dstPath, dstType) DO
&#x9;&#x9;&#x9;&#x9;if (r.resType = &apos;TRIGGER&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;if (j = 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set triggerVect = VECTOR[(null)];
&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set triggerVect = EXTEND(triggerVect, 1);
&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;set j = j + 1;
&#x9;&#x9;&#x9;&#x9;&#x9;set triggerVect[j].name = r.name;
&#x9;&#x9;&#x9;&#x9;&#x9;set triggerVect[j].resPath = r.resPath;
&#x9;&#x9;&#x9;&#x9;&#x9;set triggerVect[j].resType = r.resType;
&#x9;&#x9;&#x9;&#x9;&#x9;set triggerVect[j].subType = r.subtype;
&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;END FOR;
&#x9;&#x9;END IF;

&#x9;&#x9;set j = 1;
&#x9;&#x9;WHILE (j &lt;= CARDINALITY(triggerVect)) DO
&#x9;&#x9;&#x9;-- Only update resources that are triggers
&#x9;&#x9;&#x9;if (triggerVect[j].resType = &apos;TRIGGER&apos;) then
&#x9;&#x9;&#x9;&#x9;set updateTrigger = false;

&#x9;&#x9;&#x9;&#x9;if (UPPER(debug2) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName||&apos; :  ------------------------------------------------------------------&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName||&apos; :  trigger path=&apos;||NVL(triggerVect[j].resPath,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;FOR s AS SELECT * FROM /shared/ASAssets/Utilities/repository/getBasicResourceCursor_ActionAttributes(triggerVect[j].resPath, triggerVect[j].resType) DO
&#x9;&#x9;&#x9;&#x9;&#x9;IF (s.name is not null and s.name = &apos;PATH&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set procedurePath = s.&quot;value&quot;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (UPPER(debug2) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName||&apos; :  Attribute procedurePath:&apos;||NVL(procedurePath,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;IF (s.name is not null and s.name = &apos;PARAMETERS&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set procedureParams = s.&quot;value&quot;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (UPPER(debug2) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName||&apos; :  Attribute procedureParams:&apos;||NVL(procedureParams,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;END FOR;

&#x9;&#x9;&#x9;&#x9;-- Loop through all of the modifications (&quot;replacePath&quot; and/or &quot;replaceParam&quot;) before updating
&#x9;&#x9;&#x9;&#x9;set k = 1;
&#x9;&#x9;&#x9;&#x9;WHILE (k &lt;= CARDINALITY(upgradeVectorRow[1].updateStruct)) DO

&#x9;&#x9;&#x9;&#x9;&#x9;set updateAction = upgradeVectorRow[1].updateStruct[k].updateAction;
&#x9;&#x9;&#x9;&#x9;&#x9;set numLines = upgradeVectorRow[1].updateStruct[k].numLines;
&#x9;&#x9;&#x9;&#x9;&#x9;set occurrence = upgradeVectorRow[1].updateStruct[k].occurrence;
&#x9;&#x9;&#x9;&#x9;&#x9;if (occurrence is null) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;raise ex value moduleName||&apos;:  The upgradeVectorRow[1].updateStruct[&apos;||j||&apos;].occurrence may not be null.&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;set keyTextVerify = upgradeVectorRow[1].updateStruct[k].keyTextVerify;
&#x9;&#x9;&#x9;&#x9;&#x9;set searchText = upgradeVectorRow[1].updateStruct[k].searchText;
&#x9;&#x9;&#x9;&#x9;&#x9;set replaceText = upgradeVectorRow[1].updateStruct[k].replaceText;

&#x9;&#x9;&#x9;&#x9;&#x9;if (UPPER(debug2) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName||&apos; : &apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName||&apos; :   updateAction:&apos;||NVL(updateAction,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName||&apos; :       numLines:&apos;||NVL(cast(numLines as varchar),&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName||&apos; :     occurrence:&apos;||NVL(cast(occurrence as varchar),&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName||&apos; :  keyTextVerify:&apos;||NVL(keyTextVerify,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName||&apos; :     searchText:&apos;||NVL(searchText,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName||&apos; :    replaceText:&apos;||NVL(replaceText,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;-- Replace the trigger path
&#x9;&#x9;&#x9;&#x9;&#x9;if (UPPER(updateAction) = UPPER(&apos;replacePath&apos;)) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set scriptText = procedurePath;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set displayAction = &apos;Replace Path&apos;;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Verify if the target already contains the replacement text by checking the key text verify string against the script text
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/projectMaintenance/upgradeProjectProcedures/getNumOccurrences(debug, scriptText, searchText, searchTextCount);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (UPPER(debug2) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName||&apos; :  before procedurePath=&apos;||NVL(scriptText,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName||&apos; :  searchTextCount:&apos;||NVL(cast(searchTextCount as varchar),&apos;null&apos;)||&apos;  searchText=&apos;||NVL(searchText,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- If not key text verify text was found then continue
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (searchTextCount &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Escape any regex search characters
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/projectMaintenance/upgradeProjectProcedures/escapeSearchText(searchText,searchText);

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set displayText = substring(searchText,1,displayLen);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (UPPER(debug) = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName||&apos; :  updateAction=[&apos;||NVL(updateAction,&apos;null&apos;)||&apos;]  escape searchText=&apos;||NVL(displayText,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set displayText = substring(replaceText,1,displayLen);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (UPPER(debug) = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName||&apos; :  updateAction=[&apos;||NVL(updateAction,&apos;null&apos;)||&apos;]        replaceText=&apos;||NVL(displayText,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Perform the regex replace
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/string/TextUtils/RegexReplace(scriptText, searchText, NVL(replaceText,&apos;null&apos;), occurrence, scriptText);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set updateTrigger = true;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (UPPER(debug2) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName||&apos; :  after procedurePath=&apos;||NVL(scriptText,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Set the procedurePath with the replaced text
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set procedurePath = scriptText;
&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;-- Replace the trigger parameters
&#x9;&#x9;&#x9;&#x9;&#x9;if (UPPER(updateAction) = UPPER(&apos;replaceParam&apos;)) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set scriptText = procedureParams;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set displayAction = &apos;Replace Param&apos;;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Verify if the target already contains the replacement text by checking the key text verify string against the script text
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/projectMaintenance/upgradeProjectProcedures/getNumOccurrences(debug, scriptText, searchText, searchTextCount);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (UPPER(debug2) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName||&apos; :  before procedureParams=&apos;||NVL(scriptText,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName||&apos; :  searchTextCount:&apos;||NVL(cast(searchTextCount as varchar),&apos;null&apos;)||&apos;  searchText=&apos;||NVL(searchText,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- If not key text verify text was found then continue
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (searchTextCount &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Escape any regex search characters
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/projectMaintenance/upgradeProjectProcedures/escapeSearchText(searchText,searchText);

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set displayText = substring(searchText,1,displayLen);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (UPPER(debug) = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName||&apos; :  updateAction=[&apos;||NVL(updateAction,&apos;null&apos;)||&apos;]  escape searchText=&apos;||NVL(displayText,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set displayText = substring(replaceText,1,displayLen);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (UPPER(debug) = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName||&apos; :  updateAction=[&apos;||NVL(updateAction,&apos;null&apos;)||&apos;]        replaceText=&apos;||NVL(displayText,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Perform the regex replace
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/string/TextUtils/RegexReplace(scriptText, searchText, NVL(replaceText,&apos;null&apos;), occurrence, scriptText);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set updateTrigger = true;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (UPPER(debug2) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName||&apos; :  after procedureParams=&apos;||NVL(scriptText,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Set the procedureParams with the replaced text
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set procedureParams = scriptText;
&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;-- Fix the trigger parameter single quotes
&#x9;&#x9;&#x9;&#x9;&#x9;if (UPPER(updateAction) = UPPER(&apos;fixParam&apos;)) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set scriptText = procedureParams;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set displayAction = &apos;Fix Param&apos;;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Only proceed if a single quote is found in the text
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (POSITION(&apos;&apos;&apos;&apos; IN scriptText) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set procedureParams = null;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Check for balanced single quotes around each parameter value
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for r as select * from /shared/ASAssets/Utilities/string/extractDelimitedText(scriptText, &apos;,&apos;,0,0,0,1,0) do
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set paramValue = r.object;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- If the param value is only a single quote then set it to 2 single quotes.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (paramValue = &apos;&apos;&apos;&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set paramValue = &apos;&apos;&apos;&apos;||&apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Insure there is a initial quote
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (SUBSTRING(paramValue,1,1) != &apos;&apos;&apos;&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set paramValue = &apos;&apos;&apos;&apos;||paramValue;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Insure there is a final quote
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (SUBSTRING(paramValue,LENGTH(paramValue),1) != &apos;&apos;&apos;&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set paramValue = paramValue||&apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (procedureParams is null) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set procedureParams = paramValue;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set procedureParams = procedureParams || &apos;,&apos;||paramValue;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end for;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set updateTrigger = true;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (UPPER(debug2) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName||&apos; :  procedureParams=&apos;||NVL(procedureParams,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Set the procedureParams with the replaced text
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set procedureParams = scriptText;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;-- Restore the trigger parameters from the old copy if applicable
&#x9;&#x9;&#x9;&#x9;&#x9;if (UPPER(updateAction) = UPPER(&apos;restoreParam&apos;)) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set displayAction = &apos;Restore Param&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Only supporting restoring triggers starting at the &quot;from&quot; version Best Practices 8.1 through 2019.2.  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (fromVersion &gt;= 8.1 and fromVersion &lt;= 2019.2) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Only supporting restoring triggers where the to &quot;to&quot; version Best Practices 2019.3 and higher.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (toVersion &gt;= 2019.3) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET paramMod = &apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- The search text part of the vector holds the scripts source path
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET scriptsPath = searchText;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Get the latest copy of the scripts path that was made during this upgrade.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/BestPractices_v81/Procedures/projectMaintenance/upgradeProjectProcedures/getLatestCopy_scripts(scriptsPath, scriptsPathCopy);

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (scriptsPathCopy IS NOT NULL) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CAll /lib/resource/ResourceExists(scriptsPathCopy || &apos;/Documentation&apos;, &apos;CONTAINER&apos;, null, resExists);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (scriptsPathCopy IS NOT NULL AND resExists) THEN

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Get the corresponding trigger for the scripts copy path
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET triggerPathCopy = scriptsPathCopy || &apos;/Documentation/&apos;||triggerVect[j].name;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Determine if the trigger exists
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CAll /lib/resource/ResourceExists(triggerPathCopy, &apos;TRIGGER&apos;, null, resExists);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (resExists) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET procedureParamsCopy = null;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FOR s AS SELECT * FROM /shared/ASAssets/Utilities/repository/getBasicResourceCursor_ActionAttributes(triggerPathCopy, &apos;TRIGGER&apos;) DO
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (s.name is not null and s.name = &apos;PARAMETERS&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET procedureParamsCopy = s.&quot;value&quot;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (UPPER(debug2) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName||&apos; :  Attribute procedureParamsCopy:&apos;||NVL(procedureParamsCopy,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END FOR;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (procedureParamsCopy IS NOT NULL) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Set the defaultValues Path
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET defaultValuesPath = scriptsPath || &apos;/Constants/defaultValues&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Set the documentation constants path
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET docConstantsPath = scriptsPath || &apos;/Documentation/constants&apos;;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/*********************************
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; * PARAMETER procedurePath
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *********************************/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Modify the procedurePath=/shared/ASAssets/BestPractices_v81/DataAbstraction_GENERIC_Template/_scripts/Documentation/documentationDriverWrapper
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;to scriptsPath || &apos;/Documentation/documentationDriverWrapper
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set procedurePath = scriptsPath || &apos;/Documentation/documentationDriverWrapper&apos;;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/*********************************
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; * PARAMETER 1 and 2
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *********************************/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Get the current trigger parameter 1 [defaultValuesLayerConstantName]
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/BestPractices_v81/Procedures/projectMaintenance/upgradeProjectProcedures/getParameterNum(procedureParams, 1, 1, currParam);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(currParam) = &apos;NULL&apos; OR LENGTH(currParam) = 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET currParam = &apos;NULL&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET constantValue = &apos;NULL&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Get the actual value for the current trigger 1 parameter - get the constant value from defaultValues.&lt;constantName&gt;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/string/getConstantV2(defaultValuesPath, currParam, 1, constantValue);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Get the scripts copy trigger parameter 1 [in_resourcePath]
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/BestPractices_v81/Procedures/projectMaintenance/upgradeProjectProcedures/getParameterNum(procedureParamsCopy, 1, 1, paramCopy);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(paramCopy) = &apos;NULL&apos; OR LENGTH(paramCopy) = 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET paramCopy = &apos;NULL&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Normalize the values with no double quotes
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET constantValue = REPLACE(constantValue, &apos;&quot;&apos;, &apos;&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET paramCopy = REPLACE(paramCopy, &apos;&quot;&apos;, &apos;&apos;);

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Compare the trigger value current and copy values
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Modify Parameter 1 and Parameter 2
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (constantValue = paramCopy) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (constantValue = &apos;NULL&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET paramSingle = &apos;&apos;&apos;&apos; || &apos;&apos; || &apos;&apos;&apos;&apos; || &apos;,&apos;|| &apos;&apos;&apos;&apos; || &apos;&apos; || &apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET paramSingle = &apos;&apos;&apos;&apos; || currParam || &apos;&apos;&apos;&apos; || &apos;,&apos;|| &apos;&apos;&apos;&apos; || &apos;&apos; || &apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (currParam = &apos;NULL&apos; AND paramCopy &lt;&gt; &apos;NULL&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET paramSingle = &apos;&apos;&apos;&apos; || paramCopy || &apos;&apos;&apos;&apos; || &apos;,&apos;|| &apos;&apos;&apos;&apos; || &apos;&apos; || &apos;&apos;&apos;&apos;;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSEIF (currParam &lt;&gt; &apos;NULL&apos; AND paramCopy = &apos;NULL&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET paramSingle = &apos;&apos;&apos;&apos; || currParam || &apos;&apos;&apos;&apos; || &apos;,&apos;|| &apos;&apos;&apos;&apos; || &apos;&apos; || &apos;&apos;&apos;&apos;;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET pos = INSTR(paramCopy, currParam);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (pos &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET subLayerPartialPath = REPLACE(paramCopy, currParam, &apos;&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET paramSingle = &apos;&apos;&apos;&apos; || currParam || &apos;&apos;&apos;&apos; || &apos;,&apos;|| &apos;&apos;&apos;&apos; || subLayerPartialPath || &apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET paramSingle = &apos;&apos;&apos;&apos; || currParam || &apos;&apos;&apos;&apos; || &apos;,&apos;|| &apos;&apos;&apos;&apos; || &apos;&apos; || &apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET paramMod = paramMod || paramSingle;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug2) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL print(moduleName||&apos; :  Params 1 &amp; 2=[&apos;||NVL(paramSingle,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;


&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/*********************************
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; * PARAMETER 3
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *********************************/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Get the current trigger parameter 3 [documentationFileName]
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/BestPractices_v81/Procedures/projectMaintenance/upgradeProjectProcedures/getParameterNum(procedureParams, 3, 1, currParam);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(currParam) = &apos;NULL&apos; OR LENGTH(currParam) = 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET currParam = &apos;NULL&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Get the scripts copy trigger parameter 3 [in_filePath]
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/BestPractices_v81/Procedures/projectMaintenance/upgradeProjectProcedures/getParameterNum(procedureParamsCopy, 3, 1, paramCopy);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(paramCopy) = &apos;NULL&apos; OR LENGTH(paramCopy) = 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET paramCopy = &apos;NULL&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Modify Parameter 3
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (paramCopy IS NOT NULL AND LENGTH(paramCopy) &gt; 0 AND paramCopy &lt;&gt; &apos;NULL&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Normalize the path using forward slashes and extract the file name and parent path.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;e.g. resourceName=doc_applicationPublishedPath.txt    parentPath=c:/temp/_lab
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/repository/returnFolderNameAndFolderPath(REPLACE(paramCopy, &apos;\&apos;, &apos;/&apos;), &apos;E&apos;, resourceName, parentPath);

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Set the parameter to just the file resource name
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;e.g. resourceName=doc_applicationPublishedPath.txt
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET paramSingle = &apos;&apos;&apos;&apos; || resourceName || &apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug2) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL print(moduleName||&apos; :  Param 3=[&apos;||NVL(paramSingle,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (NOT constantUpdated) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Modify the /Documentation/constants procedure with the updated parentFilePath
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- &#x9;set parentFilePath&#x9;&#x9;&#x9;= &apos;c:/temp&apos;||REPLACE(projectName, &apos; &apos;, &apos;_&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--  Replace the parent path string that occurrs before the ||REPLACE in the string above.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--  Get the &quot;parentFilePath&quot; definition.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;e.g. &apos;c:/temp&apos;||REPLACE(projectName, &apos; &apos;, &apos;_&apos;)
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/string/getConstantV2(docConstantsPath, &apos;parentFilePath&apos;, 2, constantDef);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET pos = INSTR(constantDef, &apos;||&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (pos &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Get the name at the end of the parent path which originated from the parameter of the trigger copy.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;e.g. parentPath=c:/temp/_lab
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;e.g. tempName1=_lab
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/string/getDelimitedOccurrence(parentPath, &apos;R&apos;, &apos;/&apos;, 1, 1, tempName1);


&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Get the actual value for &quot;parentFilePath&quot;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;e.g. c:/temp/_lab
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/string/getConstantV2(docConstantsPath, &apos;parentFilePath&apos;, 1, constantValue);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Get the name at the end of the path
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;e.g. _lab
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/string/getDelimitedOccurrence(constantValue, &apos;R&apos;, &apos;/&apos;, 1, 1, tempName2);


&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Compare the names.  If they are the same then don&apos;t duplicate the name from the parent path
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (tempName1 = tempName2) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Extract the parent path one more time in order to create a root folder where the child node is not duplicated.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;e.g. tempName1=_lab    =    tempName2=_lab
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;e.g. parentPath=c:/temp/_lab   --&gt;   parentPath=c:/temp
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/repository/returnFolderNameAndFolderPath(parentPath, &apos;E&apos;, resourceName, parentPath);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;e.g. &apos;c:/temp&apos;||||REPLACE(projectName, &apos; &apos;, &apos;_&apos;)
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET constantValue = &apos;&apos;&apos;&apos;||parentPath||&apos;&apos;&apos;&apos;||SUBSTRING(constantDef, pos);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Take the parent folder as is since the child nodes do not match
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;e.g. tempName1=temp    =    tempName2=_lab
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;e.g. &apos;c:/temp&apos;||||REPLACE(projectName, &apos; &apos;, &apos;_&apos;)
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET constantValue = &apos;&apos;&apos;&apos;||parentPath||&apos;&apos;&apos;&apos;||SUBSTRING(constantDef, pos);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Modify the constants with the parent file path.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/string/modifyConstant(docConstantsPath, &apos;parentFilePath&apos;, constantValue);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug2) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL print(moduleName||&apos; :  Param 3: modify /Documentation/constant.parentFilePath=&apos;||NVL(constantValue,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Modify the constants with the parent file path.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET parentPath = &apos;&apos;&apos;&apos;||parentPath||&apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/string/modifyConstant(docConstantsPath, &apos;parentFilePath&apos;, parentPath);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug2) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL print(moduleName||&apos; :  Param 3: modify /Documentation/constant.parentFilePath=&apos;||NVL(parentPath,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Only update the constants once for the first trigger processed.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET constantUpdated = true;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (currParam IS NULL OR currParam = &apos;NULL&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET paramSingle = &apos;&apos;&apos;&apos; || &apos;&apos; || &apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET paramSingle = &apos;&apos;&apos;&apos; || currParam || &apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug2) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL print(moduleName||&apos; :  Param 3=[&apos;||NVL(paramSingle,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET paramMod = paramMod || &apos;,&apos; || paramSingle;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/*********************************
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; * PARAMETER 4
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *********************************/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Get the current trigger parameter 4 [in_switches]
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/BestPractices_v81/Procedures/projectMaintenance/upgradeProjectProcedures/getParameterNum(procedureParams, 4, 1, currParam);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(currParam) = &apos;NULL&apos; OR LENGTH(currParam) = 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET currParam = &apos;NULL&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Get the scripts copy trigger parameter 7 [in_switches]
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/BestPractices_v81/Procedures/projectMaintenance/upgradeProjectProcedures/getParameterNum(procedureParamsCopy, 7, 1, paramCopy);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(paramCopy) = &apos;NULL&apos; OR LENGTH(paramCopy) = 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET paramCopy = &apos;NULL&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Modify Parameter 4
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (paramCopy IS NOT NULL AND LENGTH(paramCopy) &gt; 0 AND paramCopy &lt;&gt; &apos;NULL&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET paramSingle = &apos;&apos;&apos;&apos; || paramCopy || &apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSEIF (currParam IS NOT NULL AND LENGTH(currParam) &gt; 0 AND currParam &lt;&gt; &apos;NULL&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET paramSingle = &apos;&apos;&apos;&apos; || currParam || &apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET paramSingle = &apos;&apos;&apos;&apos; || &apos;&apos; || &apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET paramMod = paramMod || &apos;,&apos; || paramSingle;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug2) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL print(moduleName||&apos; :  Param 4=[&apos;||NVL(paramSingle,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/*********************************
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; * PARAMETER 5
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *********************************/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Get the current trigger parameter 5 [in_excludeKeywordsInPathList]
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/BestPractices_v81/Procedures/projectMaintenance/upgradeProjectProcedures/getParameterNum(procedureParams, 5, 1, currParam);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(currParam) = &apos;NULL&apos; OR LENGTH(currParam) = 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET currParam = &apos;NULL&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Get the scripts copy trigger parameter 8 [in_excludeKeywordsInPathList]
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/BestPractices_v81/Procedures/projectMaintenance/upgradeProjectProcedures/getParameterNum(procedureParamsCopy, 8, 1, paramCopy);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(paramCopy) = &apos;NULL&apos; OR LENGTH(paramCopy) = 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET paramCopy = &apos;NULL&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Modify Parameter 5
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (paramCopy IS NOT NULL AND LENGTH(paramCopy) &gt; 0 AND paramCopy &lt;&gt; &apos;NULL&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET paramSingle = &apos;&apos;&apos;&apos; || paramCopy || &apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSEIF (currParam IS NOT NULL AND LENGTH(currParam) &gt; 0 AND currParam &lt;&gt; &apos;NULL&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET paramSingle = &apos;&apos;&apos;&apos; || currParam || &apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET paramSingle = &apos;&apos;&apos;&apos; || &apos;&apos; || &apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET paramMod = paramMod || &apos;,&apos; || paramSingle;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug2) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL print(moduleName||&apos; :  Param 5=[&apos;||NVL(paramSingle,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/*********************************
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; * PARAMETER 6
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *********************************/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Get the current trigger parameter 6 [in_excludePathsList]
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/BestPractices_v81/Procedures/projectMaintenance/upgradeProjectProcedures/getParameterNum(procedureParams, 6, 1, currParam);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(currParam) = &apos;NULL&apos; OR LENGTH(currParam) = 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET currParam = &apos;NULL&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Get the scripts copy trigger parameter 9 [in_excludePathsList]
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/BestPractices_v81/Procedures/projectMaintenance/upgradeProjectProcedures/getParameterNum(procedureParamsCopy, 9, 1, paramCopy);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(paramCopy) = &apos;NULL&apos; OR LENGTH(paramCopy) = 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET paramCopy = &apos;NULL&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Modify Parameter 6
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (paramCopy IS NOT NULL AND LENGTH(paramCopy) &gt; 0 AND paramCopy &lt;&gt; &apos;NULL&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET paramSingle = &apos;&apos;&apos;&apos; || paramCopy || &apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSEIF (currParam IS NOT NULL AND LENGTH(currParam) &gt; 0 AND currParam &lt;&gt; &apos;NULL&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET paramSingle = &apos;&apos;&apos;&apos; || currParam || &apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET paramSingle = &apos;&apos;&apos;&apos; || &apos;&apos; || &apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET paramMod = paramMod || &apos;,&apos; || paramSingle;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug2) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL print(moduleName||&apos; :  Param 6=[&apos;||NVL(paramSingle,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- The trigger procedure parameters have changed so set the trigger to be updated with the modified parameters.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET procedureParams = paramMod;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET updateTrigger = true;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (UPPER(debug2) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName||&apos; :  procedureParams=[&apos;||NVL(procedureParams,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : updateAction=[&apos;||NVL(updateAction,&apos;null&apos;)||&apos;]  The &quot;trigger&quot;=&apos;||NVL(triggerVect[j].name,&apos;null&apos;)||&apos; does not exist.  Current &quot;trigger&quot; was not updated.&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : updateAction=[&apos;||NVL(updateAction,&apos;null&apos;)||&apos;]  The &quot;scriptsPathCopy&quot; does not exist.  Current &quot;trigger&quot; was not updated.&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (UPPER(debug) = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName||&apos; :  updateAction=[&apos;||NVL(updateAction,&apos;null&apos;)||&apos;]  &quot;To&quot; Version is out of range.  Must be 2019.3 or higher. toVersion=&apos;||NVL(cast(toVersion as varchar),&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (UPPER(debug) = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName||&apos; :  updateAction=[&apos;||NVL(updateAction,&apos;null&apos;)||&apos;]  &quot;From&quot; Version is out of range. Must be between 8.1 and 2019.2.  fromVersion=&apos;||NVL(cast(fromVersion as varchar),&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;-- update the trigger
&#x9;&#x9;&#x9;&#x9;&#x9;if (updateTrigger) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set message = &apos;      UPDATED: updateAction=[&apos;||RPAD(displayAction,14,&apos; &apos;)||&apos;]  &apos;||LPAD(&apos;[&apos;||triggerVect[j].resType||&apos;]&apos;,11,&apos; &apos;)||LPAD(&apos;[&apos;||triggerVect[j].subtype||&apos;]&apos;,30,&apos; &apos;)||&apos; dstPath=&apos;||triggerVect[j].resPath;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (UPPER(debug) = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName||&apos; : &apos;||message);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set message = &apos;      UPDATED: procedurePath=[&apos;||NVL(procedurePath,&apos;null&apos;)||&apos;]&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName||&apos; : &apos;||message);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set message = &apos;      UPDATED: procedureParams=[&apos;||NVL(procedureParams,&apos;null&apos;)||&apos;]&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName||&apos; : &apos;||message);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Set up the trigger vector to be passed into updateTrigger()
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET triggerAttrVect = VECTOR[
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(&apos;procedurePath&apos;, &#x9;&#x9;&#x9;procedurePath),
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(&apos;procedureParams&apos;, &#x9;&#x9;procedureParams),
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(&apos;procedureExhaustCursors&apos;, &apos;0&apos;),
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(&apos;maxEventsQueued&apos;, &#x9;&#x9;&apos;1&apos;)
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;];

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Update the trigger
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/repository/updateTrigger(
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;triggerVect[j].resPath, -- fullResourcePath
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;0, &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- enabled
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;TIMER&apos;, &#x9;&#x9;&#x9;&#x9;-- conditionType
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;PROCEDURE&apos;, &#x9;&#x9;&#x9;-- actionType,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;triggerAttrVect,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;NULL, &#x9;&#x9;&#x9;&#x9;&#x9;-- attributeVect,&#x9;&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;success,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;createResponse,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;faultResponse
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;);

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (faultResponse is not null or success = 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set message = &apos;        ERROR: updateAction=[&apos;||RPAD(displayAction,14,&apos; &apos;)||&apos;]  &apos;||LPAD(&apos;[&apos;||triggerVect[j].resType||&apos;]&apos;,11,&apos; &apos;)||LPAD(&apos;[&apos;||triggerVect[j].subtype||&apos;]&apos;,30,&apos; &apos;)||&apos; dstPath=&apos;||triggerVect[j].resPath;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (UPPER(debug) = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName||&apos; : &apos;||message);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;raise ex value moduleName||&apos;:  &apos;||cast(faultResponse as longvarchar);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set message = &apos;    INSPECTED: updateAction=[&apos;||RPAD(displayAction,14,&apos; &apos;)||&apos;]  &apos;||LPAD(&apos;[&apos;||triggerVect[j].resType||&apos;]&apos;,11,&apos; &apos;)||LPAD(&apos;[&apos;||triggerVect[j].subtype||&apos;]&apos;,30,&apos; &apos;)||&apos; dstPath=&apos;||triggerVect[j].resPath;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (UPPER(debug) = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName||&apos; : &apos;||message);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;set k = k + 1;
&#x9;&#x9;&#x9;&#x9;END WHILE;
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;set j = j + 1;
&#x9;&#x9;END WHILE;

&#x9;&#x9;EXCEPTION
&#x9;&#x9;&#x9;ELSE raise ex value moduleName||&apos;:  &apos;||cast(CURRENT_EXCEPTION.TRACE as longvarchar);
&#x9;&#x9;END;

&#x9;&#x9;set i = i + 1;
&#x9;END WHILE;
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1573161757946</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="p:0:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="p:2:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">11/236</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">14/309</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/237</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">18/642</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">13/287</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">13/244</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">13/288</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">13/326</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">13/325</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">13/748</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">13/706</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">14/340</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/273</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/274</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">14/386</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/275</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/276</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">14/741</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">14/302</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">19/424</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">14/347</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">19/521</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">19/584</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">13/250</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">21/571</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">18/677</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">16/687</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/270</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/271</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/272</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">13/710</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">18/492</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">18/670</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">13/714</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">14/298</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">14/697</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">21/564</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">18/614</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">14/336</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">15/692</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">17/682</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
  </attribute>
</metadata>