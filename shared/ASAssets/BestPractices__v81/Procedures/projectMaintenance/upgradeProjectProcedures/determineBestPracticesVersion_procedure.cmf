<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:e931daa6-7fda-456a-badf-4cdb1c228a1a -->
<metadata name="determineBestPracticesVersion" path="/shared/ASAssets/BestPractices_v81/Procedures/projectMaintenance/upgradeProjectProcedures/determineBestPracticesVersion" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>&lt;![CDATA[
&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

]]&gt;</annotation>
  <parameters>
    <parameter name="debug" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="projectPath" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="scriptsPath" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="bestPracticesVersion" direction="OUT" nullable="true">
      <datatype name="DOUBLE" type="FLOAT" minValue="2.2250738585072014E-308" maxValue="1.7976931348623157E308"/>
    </parameter>
    <parameter name="bestPracticesMinorVersion" direction="OUT" nullable="true">
      <datatype name="DOUBLE" type="FLOAT" minValue="2.2250738585072014E-308" maxValue="1.7976931348623157E308"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/resource/ResourceExists" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="path" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="type" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="version" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceVersion" type="STRING" maxLength="255"/>
      </element>
      <element name="exists" direction="OUT">
        <datatype type="BOOLEAN"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/projectMaintenance/vector_upgradeVersionVector" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="upgradeVersionVector" direction="OUT">
        <datatype type="ARRAY" maxLength="0">
          <itemDatatype>
            <datatype name="upgradeVersionVector" type="TREE" refId="257">
              <element name="bestPracticesVersionFrom">
                <datatype name="DOUBLE" type="FLOAT" minValue="2.2250738585072014E-308" maxValue="1.7976931348623157E308"/>
              </element>
              <element name="bestPracticesVersionTo">
                <datatype name="DOUBLE" type="FLOAT" minValue="2.2250738585072014E-308" maxValue="1.7976931348623157E308"/>
              </element>
              <element name="backupType">
                <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
              </element>
            </datatype>
          </itemDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/log/logDebugMessage" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="moduleName" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="moduleNameType" type="STRING" maxLength="4096"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="messageText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inPath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getResourceListRecursive" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="resourceTreeList" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="name">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resPath">
            <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
          </element>
          <element name="resType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="creationDate">
            <datatype type="DATETIME"/>
          </element>
          <element name="creationDateBigint">
            <datatype type="INTEGER"/>
          </element>
          <element name="creatorUserDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="creatorUserName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="lastModifiedDate">
            <datatype type="DATETIME"/>
          </element>
          <element name="lastModifiedDateBigint">
            <datatype type="INTEGER"/>
          </element>
          <element name="lastModifiedUserDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="lastModifiedUserName">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/getConstantV2" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="constantsPath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="constantsName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="optionReturn" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="outValue" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* 
&#x9;determineBestPracticesVersion:

&#x9;This procedure returns the version of the Best Practices for a given project
&#x9;&#x9;When this procedure exists: $PROJECT_PATH/_scripts/Constants/getBestPracticesVersion, invoke it to get the version
&#x9;&#x9;When this folder exists but not the procedure &quot;getBestPracticesVersion&quot;, $PROJECT_PATH/_scripts the version is 7.0
&#x9;&#x9;When neither this folder does not exist $PROJECT_PATH/_scripts, the version is pre-7.0 and must be upgarded manually.
&#x9;Input: 
&#x9;&#x9;projectPath - the path to the target project to upgrade.

&#x9;Output:
&#x9;&#x9;bestPracticesVersion - The version of the Best Practices
&#x9;&#x9;&#x9;Values: A double in the format M.m (Major.Minor)
&#x9;&#x9;&#x9;Returns the version of the best practices scripts
&#x9;Exceptions:  none

&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;CSW Version:&#x9;Reason:
&#x9;05/14/2010&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.0.0&#x9;&#x9;&#x9;Created new
&#x9;08/25/2014&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.2.6&#x9;&#x9;&#x9;B.P. 8.1.4 Added ability to upgrade an empty or non-existent _scripts folder.
&#x9;03/01/2018&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.5&#x9;&#x9;&#x9;Replaced /shared/ASAssets/Utilities/repository/resourceExists with /lib/resource/ResourceExists
&#x9;07/26/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Added scriptsPath to the input.

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

*/
PROCEDURE determineBestPracticesVersion(
&#x9;IN debug&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1),
&#x9;IN projectPath&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(4000),
&#x9;IN scriptsPath&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(4000),
    OUT bestPracticesVersion &#x9;&#x9;DOUBLE,
&#x9;OUT bestPracticesMinorVersion &#x9;DOUBLE
)
BEGIN
&#x9;DECLARE moduleName&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;determineBestPracticesVersion&apos;;
&#x9;DECLARE resourcePath&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE resourceType&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE resourceExists &#x9;&#x9;&#x9;BOOLEAN;
&#x9;DECLARE sqlScript&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE curs&#x9;&#x9;&#x9;&#x9;&#x9;CURSOR(bestPracticesVersion double);
&#x9;DECLARE ex&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;EXCEPTION;
&#x9;DECLARE i&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER DEFAULT 1;
&#x9;-- Provides a vector of pre-7.0 versions to check for
&#x9;DECLARE resourceVect&#x9;&#x9;&#x9;VECTOR(ROW(resourcePath VARCHAR(4000), resourceType VARCHAR, compatibleVersion DOUBLE)) DEFAULT VECTOR[
&#x9;&#x9;(REPLACE(REPLACE(&apos;$PROJECT_PATH/L1_Mapping_Layer/Client_Published&apos;,&apos;$PROJECT_PATH&apos;,projectPath),&apos;//&apos;,&apos;/&apos;),&#x9;&#x9;&#x9;&apos;CONTAINER&apos;,6.0),
&#x9;&#x9;(REPLACE(REPLACE(&apos;$PROJECT_PATH/L1_Mapping_Layer/Client_Views&apos;,&apos;$PROJECT_PATH&apos;,projectPath),&apos;//&apos;,&apos;/&apos;),&#x9;&#x9;&#x9;&#x9;&apos;CONTAINER&apos;,5.0),
&#x9;&#x9;(REPLACE(REPLACE(&apos;$PROJECT_PATH/L1_Mapping_Layer/L1_2_Client_Views&apos;,&apos;$PROJECT_PATH&apos;,projectPath),&apos;//&apos;,&apos;/&apos;),&#x9;&#x9;&#x9;&apos;CONTAINER&apos;,1.0)];
&#x9;DECLARE upgradeVersionVector&#x9;VECTOR(ROW(bestPracticesVersionFrom DOUBLE, bestPracticesVersionTo DOUBLE, backupType INTEGER)); -- backupType: [0=backup individual folders in place, 1=backup entire folder]
&#x9;DECLARE bestPracticesVersionVectFrom DOUBLE;
&#x9;DECLARE resourcePathReserved&#x9;VARCHAR(4000);

&#x9;/***************************************************************
&#x9; * Check to make sure the project exists
&#x9; ***************************************************************/
&#x9;call /lib/resource/ResourceExists(projectPath, &apos;CONTAINER&apos;, null, resourceExists);
&#x9;if (NOT resourceExists) then
&#x9;&#x9;raise ex value moduleName||&apos;:  The project path does not exist. projectPath=&apos;||NVL(projectPath,&apos;null&apos;);
&#x9;end if;
&#x9;call /lib/resource/ResourceExists(scriptsPath, &apos;CONTAINER&apos;, null, resourceExists);
&#x9;if (NOT resourceExists) then
&#x9;&#x9;raise ex value moduleName||&apos;:  The scripts path does not exist. scriptsPath=&apos;||NVL(scriptsPath,&apos;null&apos;);
&#x9;end if;

&#x9;/***************************************************************
&#x9; * Check to see if &quot;$PROJECT_PATH/_scripts/Constants/defaultValues&quot; exists
&#x9; *   This means the project is 7.1 or higher
&#x9; ***************************************************************/
&#x9;set resourcePath = REPLACE(REPLACE(&apos;$SCRIPTS_PATH/Constants/defaultValues&apos;,&apos;$SCRIPTS_PATH&apos;,scriptsPath),&apos;//&apos;,&apos;/&apos;);
&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;:  Check for path exists:  resourcePath=&apos;||NVL(resourcePath,&apos;null&apos;));
&#x9;call /lib/resource/ResourceExists(resourcePath, &apos;PROCEDURE&apos;, null, resourceExists);
&#x9;if (resourceExists) then
&#x9;&#x9;&#x9;-- Get the bestPracticesVersion_ Constant
&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(resourcePath, null, resourcePathReserved);
&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/string/getConstantV2(resourcePathReserved, &apos;bestPracticesVersion_&apos;, 1, bestPracticesVersion);
&#x9;&#x9;&#x9;set bestPracticesMinorVersion = bestPracticesVersion;
&#x9;else
&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;:     Procedure &quot;getBestPracticesVersion&quot; does not exist.&apos;);
&#x9;&#x9;/***************************************************************
&#x9;&#x9; * Check to see if the folder &quot;$PROJECT_PATH/_scripts&quot; exists
&#x9;&#x9; *   This means the project is 7.0
&#x9;&#x9; ***************************************************************/
&#x9;&#x9;set resourcePath = REPLACE(REPLACE(&apos;$PROJECT_PATH/_scripts&apos;,&apos;$PROJECT_PATH&apos;,projectPath),&apos;//&apos;,&apos;/&apos;);
&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;:  Check for path exists: resourcePath=&apos;||NVL(resourcePath,&apos;null&apos;));
&#x9;&#x9;call /lib/resource/ResourceExists(resourcePath, &apos;CONTAINER&apos;, null, resourceExists);
&#x9;&#x9;if (resourceExists) then
&#x9;&#x9;&#x9;-- Default to 7.0
&#x9;&#x9;&#x9;set bestPracticesVersion = 7.0;
&#x9;&#x9;&#x9;set bestPracticesMinorVersion = bestPracticesVersion;

&#x9;&#x9;&#x9;set i = 0;
&#x9;&#x9;&#x9;-- Handle the use case where the _scrpits directory is empty or the only contains a shell of folders but no procedures
&#x9;&#x9;&#x9;for r as select * from /shared/ASAssets/Utilities/repository/getResourceListRecursive(resourcePath, &apos;CONTAINER&apos;) do
&#x9;&#x9;&#x9;&#x9;if (r.resType != &apos;CONTAINER&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;set i = i + 1;
&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;end for;
&#x9;&#x9;&#x9;-- If no resources found then assume the _scripts can be copied using the most current pattern for upgrade
&#x9;&#x9;&#x9;if (i = 0) then
&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/projectMaintenance/vector_upgradeVersionVector(upgradeVersionVector);
&#x9;&#x9;&#x9;&#x9;set bestPracticesVersionVectFrom = 0;
&#x9;&#x9;&#x9;&#x9;set i = 1;
&#x9;&#x9;&#x9;&#x9;WHILE (i &lt;= CARDINALITY(upgradeVersionVector)) DO
&#x9;&#x9;&#x9;&#x9;&#x9;if (upgradeVersionVector[i].bestPracticesVersionFrom &gt; bestPracticesVersionVectFrom) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set bestPracticesVersionVectFrom = upgradeVersionVector[i].bestPracticesVersionFrom;
&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;set i = i + 1;
&#x9;&#x9;&#x9;&#x9;end while;
&#x9;&#x9;&#x9;&#x9;set bestPracticesVersion = bestPracticesVersionVectFrom;
&#x9;&#x9;&#x9;&#x9;set bestPracticesMinorVersion = bestPracticesVersion;
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;else
&#x9;&#x9;&#x9;/***************************************************************
&#x9;&#x9;&#x9; * Otherwise, the Best Practices scripts are pre-7.0
&#x9;&#x9;&#x9; *   The following chart provides compatibility:
&#x9;&#x9;&#x9; *    1.0 compatible:  1.0 through 4.0
&#x9;&#x9;&#x9; *    5.0 compatible:  5.0 through 5.2
&#x9;&#x9;&#x9; *    6.0 compatible:  6.0 through 6.6
&#x9;&#x9;&#x9; ***************************************************************/
&#x9;&#x9;&#x9;set bestPracticesVersion = null;
&#x9;&#x9;&#x9;versionLoop:
&#x9;&#x9;&#x9;while (i &lt;= CARDINALITY(resourceVect)) do
&#x9;&#x9;&#x9;&#x9;set resourcePath = resourceVect[i].resourcePath;
&#x9;&#x9;&#x9;&#x9;set resourceType = resourceVect[i].resourceType;
&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;:  Check for path exists: resourcePath=&apos;||NVL(resourcePath,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;call /lib/resource/ResourceExists(resourcePath, resourceType, null, resourceExists);
&#x9;&#x9;&#x9;&#x9;if (resourceExists) then
&#x9;&#x9;&#x9;&#x9;&#x9;set bestPracticesVersion = resourceVect[i].compatibleVersion;
&#x9;&#x9;&#x9;&#x9;&#x9;set bestPracticesMinorVersion = bestPracticesVersion;
&#x9;&#x9;&#x9;&#x9;&#x9;if (bestPracticesVersion = 6.0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set resourcePath = REPLACE(REPLACE(&apos;$PROJECT_PATH/documentation&apos;,&apos;$PROJECT_PATH&apos;,projectPath),&apos;//&apos;,&apos;/&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set resourceType = &apos;CONTAINER&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /lib/resource/ResourceExists(resourcePath, resourceType, null, resourceExists);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (resourceExists) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set bestPracticesMinorVersion = 6.6;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;leave versionLoop;
&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;set i = i + 1;
&#x9;&#x9;&#x9;end while;&#x9;&#x9;&#x9;
&#x9;&#x9;end if;
&#x9;end if;
&#x9;if (bestPracticesVersion is null) then
&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/projectMaintenance/vector_upgradeVersionVector(upgradeVersionVector);
&#x9;&#x9;set bestPracticesVersionVectFrom = 0;
&#x9;&#x9;set i = 1;
&#x9;&#x9;WHILE (i &lt;= CARDINALITY(upgradeVersionVector)) DO
&#x9;&#x9;&#x9;if (upgradeVersionVector[i].bestPracticesVersionFrom &gt; bestPracticesVersionVectFrom) then
&#x9;&#x9;&#x9;&#x9;set bestPracticesVersionVectFrom = upgradeVersionVector[i].bestPracticesVersionFrom;
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;set i = i + 1;
&#x9;&#x9;end while;
&#x9;&#x9;set bestPracticesVersion = bestPracticesVersionVectFrom;
&#x9;&#x9;set bestPracticesMinorVersion = bestPracticesVersion;
&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;:  Unable to determine project version.  Upgrade using bestPracticesVersion=[&apos;||NVL(cast(bestPracticesVersion as varchar),&apos;null&apos;)||&apos;]  for project path=&apos;||NVL(projectPath,&apos;null&apos;));
&#x9;else
&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;:  Project current bestPracticesVersion=[&apos;||NVL(cast(bestPracticesVersion as varchar),&apos;null&apos;)||&apos;]  for project path=&apos;||NVL(projectPath,&apos;null&apos;));
&#x9;end if;
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1564410631553</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
</metadata>