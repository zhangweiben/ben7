<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:9a66723c-3693-47f1-a1f0-d7811996f9d5 -->
<metadata name="upgradeUpdateResource" path="/shared/ASAssets/BestPractices_v81/Procedures/projectMaintenance/upgradeProjectProcedures/upgradeUpdateResource" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>&lt;![CDATA[
&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

]]&gt;</annotation>
  <parameters>
    <parameter name="debug" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="upgradeVectorRow" direction="IN" nullable="true">
      <datatype name="upgradeVector" type="ARRAY" maxLength="0">
        <itemDatatype>
          <datatype name="upgradeType" type="TREE" refId="257">
            <element name="bestPracticesVersionFrom">
              <datatype name="DOUBLE" type="FLOAT" minValue="2.2250738585072014E-308" maxValue="1.7976931348623157E308"/>
            </element>
            <element name="bestPracticesVersionTo">
              <datatype name="DOUBLE" type="FLOAT" minValue="2.2250738585072014E-308" maxValue="1.7976931348623157E308"/>
            </element>
            <element name="resourceAction">
              <datatype name="VARCHAR" type="STRING" maxLength="255"/>
            </element>
            <element name="resourcePath">
              <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
            </element>
            <element name="resourceType">
              <datatype name="VARCHAR" type="STRING" maxLength="255"/>
            </element>
            <element name="srcResource">
              <datatype name="srcResource" type="ARRAY" maxLength="0">
                <itemDatatype>
                  <datatype name="resourceType" referenceDefinitionSet="/shared/ASAssets/Utilities/repository/definitions/RepositoryDefinitions" referenceType="resourceType" type="TREE" refId="513">
                    <element name="path">
                      <datatype name="VARCHAR" referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
                    </element>
                    <element name="type">
                      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                    </element>
                  </datatype>
                </itemDatatype>
              </datatype>
            </element>
            <element name="dstResource">
              <datatype name="dstResource" type="ARRAY" maxLength="0">
                <itemDatatype>
                  <datatype name="resourceType" type="TREE" refId="769">
                    <element name="path">
                      <datatype name="VARCHAR" referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
                    </element>
                    <element name="type">
                      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                    </element>
                  </datatype>
                </itemDatatype>
              </datatype>
            </element>
            <element name="updateStruct">
              <datatype name="updateStruct" type="ARRAY" maxLength="0">
                <itemDatatype>
                  <datatype name="updateType" type="TREE" refId="1025">
                    <element name="updateAction">
                      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                    </element>
                    <element name="occurrence">
                      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
                    </element>
                    <element name="numLines">
                      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
                    </element>
                    <element name="keyTextVerify">
                      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                    </element>
                    <element name="searchText">
                      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
                    </element>
                    <element name="replaceText">
                      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
                    </element>
                  </datatype>
                </itemDatatype>
              </datatype>
            </element>
          </datatype>
        </itemDatatype>
      </datatype>
    </parameter>
    <parameter name="success" direction="OUT" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/resource/ResourceExists" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="path" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="type" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="version" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceVersion" type="STRING" maxLength="255"/>
      </element>
      <element name="exists" direction="OUT">
        <datatype type="BOOLEAN"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/projectMaintenance/upgradeProjectProcedures/escapeSearchText" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inSearchText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="searchText" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/projectMaintenance/upgradeProjectProcedures/getNumOccurrences" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="inScriptText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inSearchText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="numOccurrences" direction="OUT">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/log/logDebugMessage" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="moduleName" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="moduleNameType" type="STRING" maxLength="4096"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="messageText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/lowerLevelProcedures/getBasicResourceXML" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="257"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/updateSqlScript" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="scripttext" direction="INOUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="createResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="257"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <reference refId="257"/>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/TextUtils/RegexPosition" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="Input Text" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Regular Expression" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Occurrence" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/TextUtils/RegexReplace" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="Input Text" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Regular Expression" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Replacement Text" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Occurrence" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/modifyConstant" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="constantsPath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="constantsName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="constantsValue" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/xml/getValueFromXML" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="namespaces" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inXpath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inXml" direction="IN">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="257"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="outValue" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/*
&#x9;upgradeUpdateResource:

&#x9;This procedure is invoked by &quot;upgradeProject&quot; when the resource action=&quot;update&quot;.  This procedure updates a resource
&#x9;&#x9;from a destination path and type.  This procedure uses the &quot;updateStruct&quot; vector to provide additional direction
&#x9;&#x9;when updating procedure script text in place such as &quot;replace&quot;, &quot;replaceBefore&quot;, or &quot;replaceAfter&quot;.

&#x9;Input: 
&#x9;&#x9;debug - &apos;Y&apos;=debug, &apos;N&apos;=do not debug
&#x9;&#x9;upgradeVectorRow - This is a single row from the upgradeVector which is defined below
&#x9;Output:
&#x9;&#x9;success - 1=success, 0=fail
&#x9;Exceptions: ex - throw an exception upon error

&#x9;-----------------------------------------------------------------------------
&#x9;The following defines the structures that are used for upgrading a project:
&#x9;-----------------------------------------------------------------------------
&#x9;DECLARE PUBLIC TYPE upgradeType ROW(
&#x9;&#x9;bestPracticesVersion&#x9;DOUBLE,&#x9;&#x9;&#x9;&#x9;&#x9;-- version of the best practices where the change is being applied
&#x9;&#x9;resourceAction&#x9;&#x9;&#x9;VARCHAR&#x9;&#x9;&#x9;&#x9;&#x9;-- action to take on the resource: 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;     copy - copy srcResource to dstResource.  srcResource and dstResource required.  updateStruct is null.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;                if resource type is CONTAINER then copy all resources
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;                if resource type is not CONTAINER then copy specific resource
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;copyLeave - copy srcResource to _Copy_#.  srcResource is required.  dstResource and updateStruct are null.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;                Creates a copy of a resource and leaves the original in place. 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;                The copy detects other copies an increments the number as needed in the format of _Copy_#
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;   copyRename - copy srcResource to _Copy_#.  srcResource is required.  dstResource and updateStruct are null.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;                Creates a copy of a resource and renames the original to it.  The original is no longer present.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;                The copy detects other copies an increments the number as needed in the format of _Copy_#
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9; copyChildren - copy the children of srcResource to dstResource.  srcResource and dstResource required.  updateStruct is null.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;                Only copying from CONTAINER to CONTAINER is allowed.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;   update - update dstResource using updateStruct.  srcResource is null.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--  updateTrigger - update all trigger resources found starting at dstResource using updateStruct.  srcResource is null.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;&#x9;&#x9;&#x9; dstResource can be a single trigger or folder of triggers.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;   updateCrud - update CRUD resources specified by dstResource using updateStruct.  srcResource is null.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;   delete - delete dstResource.  srcResource and updateStruct are null.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;     move - move srcResource to dstResource.  updateStruct is null.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--     moveCustom - move all custom scripts from srcResource folder to the specified dstResource folder. updateStruct is null.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--                  a custom resource is determined by finding a resource in dstResource that is not in the DataAbstraction_GENERIC_Template.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--         rebind - rebind srcResource to dstResource using startingFolder.  updateStruct is null.
&#x9;&#x9;resourcePath&#x9;&#x9;&#x9;VARCHAR(4000),&#x9;&#x9;&#x9;-- resource path of the resource or starting folder to be used with rebind action otherwise null.
&#x9;&#x9;resourceType&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;&#x9;&#x9;-- resource type of the resource to be used with rebind action otherwise null.
&#x9;&#x9;srcResource&#x9;&#x9;&#x9;&#x9;VECTOR(resourceType), &#x9;-- source reource is always a vector of 1
&#x9;&#x9;srcResource&#x9;&#x9;&#x9;&#x9;VECTOR(resourceType), &#x9;-- source reource is always a vector of 1
&#x9;&#x9;dstResource&#x9;&#x9;&#x9;&#x9;VECTOR(resourceType),&#x9;-- destination resource may be an unbounded vector
&#x9;&#x9;updateStruct&#x9;&#x9;&#x9;VECTOR(updateType),&#x9;&#x9;-- this structure is used when the resourceAction=update otherwise null
&#x9;);
&#x9;DECLARE PUBLIC TYPE resourceType &#x9;ROW(
&#x9;&#x9;&quot;path&quot;&#x9;&#x9;TypeDefinitions.pathType,&#x9;-- Path to resource
&#x9;&#x9;&quot;type&quot;&#x9;&#x9;VARCHAR(255)&#x9;&#x9;&#x9;&#x9;-- Resoruce type
&#x9;);
&#x9;DECLARE PUBLIC TYPE updateType ROW(
&#x9;&#x9;updateAction&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;&#x9;-- update Action: &#x9;&#x9;&#x9;replace, replaceBefore, replaceAfter [all actions are performed on a given resource]
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- updateTrigger Action: &#x9;replacePath, replaceParam, fixParam [All actions are performed on a given trigger resource]
&#x9;&#x9;occurrence&#x9;&#x9;&#x9;&#x9;INTEGER,&#x9;&#x9;&#x9;-- The occurrence of the searchText to act upon.  0=take action on all occurrences
&#x9;&#x9;numLines&#x9;&#x9;&#x9;&#x9;INTEGER,&#x9;&#x9;&#x9;-- If updateAction=replaceBefore or replaceAfter, then then perform that action by searching
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   for the number of lines CHR(10) either before or after and placing the text at that location.
&#x9;&#x9;keyTextVerify&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;&#x9;-- This is short unique text from the replaceText variable that allows the code to verify if the replace has already been done.
&#x9;&#x9;searchText&#x9;&#x9;&#x9;&#x9;LONGVARCHAR,&#x9;&#x9;-- The text to search for.  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- If multiple occurrences are found the action may be taken according to the defined occurrence.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- If the searchText is not found then no action is taken.
&#x9;&#x9;replaceText&#x9;&#x9;&#x9;&#x9;LONGVARCHAR&#x9;&#x9;&#x9;-- The text to replace given the update action.
&#x9;);

&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;CSW Version:&#x9;Reason:
&#x9;05/14/2010&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.0.0&#x9;&#x9;&#x9;Created new
&#x9;03/01/2018&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.5&#x9;&#x9;&#x9;Replaced /shared/ASAssets/Utilities/repository/resourceExists with /lib/resource/ResourceExists
&#x9;03/14/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;B.P. 2019.102: Removed projectPath as it was not referenced in the code.

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

*/
PROCEDURE upgradeUpdateResource(&#x9;
&#x9;IN debug&#x9;&#x9;&#x9;&#x9;CHAR(1),&#x9;
&#x9;-- This is a single row from the upgradeVector&#x9;
&#x9;IN&#x9;upgradeVectorRow &#x9;/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions.upgradeVector, 
&#x9;OUT success&#x9;&#x9;&#x9;&#x9;INTEGER
)
BEGIN
&#x9;DECLARE moduleName&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;upgradeUpdateResource&apos;;
&#x9;DECLARE debug2&#x9;&#x9;&#x9;&#x9;CHAR(1) DEFAULT &apos;N&apos;; -- second level of debug
&#x9;DECLARE debug3&#x9;&#x9;&#x9;&#x9;CHAR(1) DEFAULT &apos;N&apos;; -- third level of debug
&#x9;DECLARE dstPath&#x9;&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE dstType&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE subtype&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE i,j,k&#x9;&#x9;&#x9;&#x9;INTEGER DEFAULT 1;
&#x9;DECLARE pos,len, numLinePos INTEGER;
&#x9;DECLARE delimiter &#x9;&#x9;&#x9;VARCHAR DEFAULT CHR(10);
&#x9;DECLARE createResponse &#x9;&#x9;XML;
&#x9;DECLARE faultResponse&#x9;&#x9;XML;
&#x9;DECLARE prependMessage&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE updateAction&#x9;&#x9;VARCHAR;
&#x9;DECLARE numLines&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE occurrence&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE numOccurrence&#x9;&#x9;INTEGER;
&#x9;DECLARE allOccurrences&#x9;&#x9;BOOLEAN;
&#x9;DECLARE keyTextVerify&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE searchTextVerifyCount INTEGER;
&#x9;DECLARE searchText&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE replaceText&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE scriptText&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE textBefore&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE textAfter&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE namespaces&#x9;&#x9;&#x9;VARCHAR(305) DEFAULT &apos;xmlns:resource=&quot;http://www.compositesw.com/services/system/admin/resource&quot; xmlns:common=&quot;http://www.compositesw.com/services/system/util/common&quot;&apos;;
&#x9;DECLARE resourceExists &#x9;&#x9;BOOLEAN;
&#x9;DECLARE xmlOut&#x9;&#x9;&#x9;&#x9;XML;
&#x9;DECLARE xpath&#x9;&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE message&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE replacedText&#x9;&#x9;BOOLEAN;
&#x9;DECLARE displayText&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE displayLen&#x9;&#x9;&#x9;INTEGER DEFAULT 150;
&#x9;DECLARE eol&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT chr(10);
&#x9;DECLARE ex&#x9;&#x9;&#x9;&#x9;&#x9;EXCEPTION;

&#x9;/***************************************************************
&#x9; * Loop through the vector.  The dstResource vector is the only
&#x9; *    vector that matters when deleting a target destination resource. 
&#x9; ***************************************************************/
&#x9;WHILE (i &lt;= CARDINALITY(upgradeVectorRow[1].dstResource)) DO

&#x9;&#x9;-- Make sure the dstResource is not null
&#x9;&#x9;if (upgradeVectorRow[1].dstResource is null) then
&#x9;&#x9;&#x9;raise ex value moduleName||&apos;:  UPDATE ACTION: The dstResource[&apos;||i||&apos;] vector may not be null.&apos;;
&#x9;&#x9;end if;

&#x9;&#x9;-- Get the destination path information
&#x9;&#x9;set dstPath = upgradeVectorRow[1].dstResource[i].&quot;path&quot;;
&#x9;&#x9;set dstType = upgradeVectorRow[1].dstResource[i].&quot;type&quot;;

&#x9;&#x9;-- Validate that the destination information is not empty
&#x9;&#x9;if ( (dstPath IS NULL OR LENGTH(&apos;|&apos;||dstPath||&apos;|&apos;) = 2) or  --Empty
&#x9;&#x9;&#x9; (dstType IS NULL OR LENGTH(&apos;|&apos;||dstType||&apos;|&apos;) = 2) ) then  --Empty
&#x9;&#x9;&#x9;raise ex value moduleName||&apos;:  UPDATE ACTION: The following dstResource[&apos;||i||&apos;] vector entries may be null or empty: dstPath, dstType&apos;;
&#x9;&#x9;end if;

&#x9;&#x9;-- Verify the source path exists.
&#x9;&#x9;call /lib/resource/ResourceExists(dstPath, dstType, null, resourceExists);
&#x9;&#x9;if (NOT resourceExists) then
&#x9;&#x9;&#x9;raise ex value moduleName||&apos;:  UPDATE ACTION:  The dstResource[&apos;||i||&apos;] vector entry path does not exist=&apos;||NVL(dstPath,&apos;null&apos;);
&#x9;&#x9;end if;

&#x9;&#x9;set prependMessage = moduleName||&apos;:  UPDATE ACTION: Error with vector entry[&apos;||i||&apos;].  Error=&apos;;

&#x9;&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;&#x9;-- Retrieve the resource XML
&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/lowerLevelProcedures/getBasicResourceXML(dstPath, dstType, xmlOut);
&#x9;&#x9;EXCEPTION
&#x9;&#x9;&#x9;ELSE raise ex value moduleName||&apos;:  &apos;||cast(CURRENT_EXCEPTION.TRACE as longvarchar);
&#x9;&#x9;END;

&#x9;&#x9;set xpath = &apos;/resource:getResourceResponse/resource:resources/resource:resource/resource:subtype&apos;;
&#x9;&#x9;call /shared/ASAssets/Utilities/&quot;xml&quot;/getValueFromXML(debug2, namespaces, xpath, CAST(xmlOut as LONGVARCHAR), subtype);

/*
&#x9;&#x9;updateAction&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;&#x9;-- Update Action: replace, replaceBefore, replaceAfter
&#x9;&#x9;occurrence&#x9;&#x9;&#x9;&#x9;INTEGER,&#x9;&#x9;&#x9;-- The occurrence of the searchText to act upon.  0=take action on all occurrences
&#x9;&#x9;numLines&#x9;&#x9;&#x9;&#x9;INTEGER,&#x9;&#x9;&#x9;-- If updateAction=replaceBefore or replaceAfter, then then perform that action by searching
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   for the number of lines CHR(10) either before or after and placing the text at that location.
&#x9;&#x9;searchText&#x9;&#x9;&#x9;&#x9;LONGVARCHAR,&#x9;&#x9;-- The text to search for.  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- If multiple occurrences are found the action may be taken according to the defined occurrence.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- If the searchText is not found then no action is taken.
&#x9;&#x9;replaceText&#x9;&#x9;&#x9;&#x9;LONGVARCHAR&#x9;&#x9;&#x9;-- The text to replace given the update action.

&#x9;,(&apos;replaceAfter&apos;,1,&apos;OUT generationScriptsPath_&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(4000),&apos;,eol||&apos;&#x9;-- Database Layer&apos;||eol||&apos;&#x9;OUT compositeDatabasePath_&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(4000),&apos;||eol)
&#x9;,(&apos;replaceBefore&apos;,1,&apos;-- Identifies the base path where the Best Practices scripts live&apos;,eol||&apos;&#x9;-- This is the version of the Best Practices in this project&apos;||eol||&apos;&#x9;DECLARE PUBLIC bestPracticesVersion&#x9;CONSTANT VARCHAR &#x9;&#x9;&#x9;DEFAULT &apos;&apos;7.1&apos;&apos;;&apos;||eol)
*/
&#x9;&#x9;if (dstType = &apos;PROCEDURE&apos; and subtype = &apos;SQL_SCRIPT_PROCEDURE&apos;) then
&#x9;&#x9;&#x9;-- Get procedure script text 
&#x9;&#x9;&#x9;set xpath = &apos;/resource:getResourceResponse/resource:resources/resource:resource/resource:scriptText&apos;;
&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/&quot;xml&quot;/getValueFromXML(debug2, namespaces, xpath, CAST(xmlOut as LONGVARCHAR), scriptText);

&#x9;&#x9;&#x9;set replacedText = false;

&#x9;&#x9;&#x9;-- Loop through all of the modifications before updating
&#x9;&#x9;&#x9;set j = 1;
&#x9;&#x9;&#x9;WHILE (j &lt;= CARDINALITY(upgradeVectorRow[1].updateStruct)) DO

&#x9;&#x9;&#x9;&#x9;set updateAction = upgradeVectorRow[1].updateStruct[j].updateAction;
&#x9;&#x9;&#x9;&#x9;set numLines = upgradeVectorRow[1].updateStruct[j].numLines;
&#x9;&#x9;&#x9;&#x9;set occurrence = upgradeVectorRow[1].updateStruct[j].occurrence;
&#x9;&#x9;&#x9;&#x9;if (occurrence is null) then
&#x9;&#x9;&#x9;&#x9;&#x9;raise ex value moduleName||&apos;:  The upgradeVectorRow[1].updateStruct[&apos;||j||&apos;].occurrence may not be null.&apos;;
&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;set keyTextVerify = upgradeVectorRow[1].updateStruct[j].keyTextVerify;
&#x9;&#x9;&#x9;&#x9;set searchText = upgradeVectorRow[1].updateStruct[j].searchText;
&#x9;&#x9;&#x9;&#x9;set replaceText = upgradeVectorRow[1].updateStruct[j].replaceText;

&#x9;&#x9;&#x9;&#x9;-- Verify if the target already contains the replacement text by checking the key text verify string against the script text
&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/projectMaintenance/upgradeProjectProcedures/getNumOccurrences(debug, scriptText, searchText, searchTextVerifyCount);
--&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;:  ------------------------------------------------------------------&apos;);
--&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;:  searchText:&apos;||NVL(searchText,&apos;null&apos;));
--&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;:  searchTextVerifyCount:&apos;||NVL(cast(searchTextVerifyCount as varchar),&apos;null&apos;));
--&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;:  occurrence:&apos;||NVL(cast(occurrence as varchar),&apos;null&apos;));

&#x9;&#x9;&#x9;&#x9;-- If the search text exists then continue
&#x9;&#x9;&#x9;&#x9;if (searchTextVerifyCount &gt; 0) then

&#x9;&#x9;&#x9;&#x9;&#x9;set displayText = substring(searchText,1,displayLen);
&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;:  updateAction=&apos;||NVL(updateAction,&apos;null&apos;)||&apos;         searchText=&apos;||NVL(displayText,&apos;null&apos;));

&#x9;&#x9;&#x9;&#x9;&#x9;-- Modify a constant
&#x9;&#x9;&#x9;&#x9;&#x9;if (UPPER(updateAction) = UPPER(&apos;modifyConstant&apos;)) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/string/modifyConstant(dstPath, keyTextVerify, replaceText);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set replacedText = true;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;EXCEPTION
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE raise ex value moduleName||&apos;:  &apos;||cast(CURRENT_EXCEPTION.TRACE as longvarchar);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Re-read the sqlscript text for the modify procedure.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Retrieve the resource XML
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/lowerLevelProcedures/getBasicResourceXML(dstPath, dstType, xmlOut);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Get procedure script text 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set xpath = &apos;/resource:getResourceResponse/resource:resources/resource:resource/resource:scriptText&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/&quot;xml&quot;/getValueFromXML(debug2, namespaces, xpath, CAST(xmlOut as LONGVARCHAR), scriptText);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;EXCEPTION
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE raise ex value moduleName||&apos;:  &apos;||cast(CURRENT_EXCEPTION.TRACE as longvarchar);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END;

&#x9;&#x9;&#x9;&#x9;&#x9;-- Replace the search text
&#x9;&#x9;&#x9;&#x9;&#x9;elseif (UPPER(updateAction) = UPPER(&apos;replace&apos;)) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Escape any regex search characters
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/projectMaintenance/upgradeProjectProcedures/escapeSearchText(searchText,searchText);

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set displayText = substring(searchText,1,displayLen);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;:  updateAction=&apos;||NVL(updateAction,&apos;null&apos;)||&apos;  escape searchText=&apos;||NVL(displayText,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set displayText = substring(replaceText,1,displayLen);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;:  updateAction=&apos;||NVL(updateAction,&apos;null&apos;)||&apos;        replaceText=&apos;||NVL(displayText,&apos;null&apos;));

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Perform the regex replace
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/string/TextUtils/RegexReplace(scriptText, searchText, NVL(replaceText,&apos;null&apos;), occurrence, scriptText);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set replacedText = true;
--&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;:  searchText:&apos;||NVL(searchText,&apos;null&apos;));
--&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;:  replaceText:&apos;||NVL(replaceText,&apos;null&apos;));
--&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;:  scriptText:&apos;||eol||scriptText);
&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (occurrence &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set numOccurrence = 1; -- set the loop control to 1 to only go through once
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set allOccurrences = false;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- set the loop control to go through all occurrences
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/projectMaintenance/upgradeProjectProcedures/getNumOccurrences(debug, scriptText, searchText, numOccurrence);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set occurrence = 0;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set allOccurrences = true;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Loop through the occurrences
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set k = 1;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHILE (k &lt;= numOccurrence) DO
--&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;:  ###############################################################################################&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (allOccurrences) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set occurrence = occurrence + 1;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Escape any regex search characters
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/projectMaintenance/upgradeProjectProcedures/escapeSearchText(searchText,searchText);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Get the position of the search Text in the script text based on the occurrence wanted
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/string/TextUtils/RegexPosition(scriptText,searchText,occurrence,pos);

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Process it if a position was found
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (pos &gt; 0) then

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Replace before the search text
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (UPPER(updateAction) = UPPER(&apos;replaceBefore&apos;)) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Extract the text before the text found position
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set textBefore = SUBSTRING(scriptText,1,pos-1);

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Get the position of the number of lines before
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (numLines is null or numLines = 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set numLinePos = 0;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/string/TextUtils/RegexPosition(textBefore,delimiter,0 - numLines, numLinePos);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
/*
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;:  occurrence=&apos;||occurrence);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;:  len=&apos;||len);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;:  pos=&apos;||pos);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;:  numLinePos=&apos;||numLinePos);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;:  ------------------------------------------------------------------&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;:  textBefore&apos;||eol||textBefore);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;:  ------------------------------------------------------------------&apos;);
*/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (numLinePos &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Insert the replace text within the text before using numLinePos
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set textBefore = SUBSTRING(textBefore,1,numLinePos)||NVL(replaceText,&apos;null&apos;)||SUBSTRING(textBefore,numLinePos,LENGTH(textBefore));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Insert the replace text after the extracted text Before
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set textBefore = textBefore||NVL(replaceText,&apos;null&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set scriptText = textBefore||SUBSTRING(scriptText,pos,LENGTH(scriptText));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set replacedText = true;

--&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;:  scriptText:&apos;||eol||scriptText);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Replace after the search text
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (UPPER(updateAction) = UPPER(&apos;replaceAfter&apos;)) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set len = LENGTH(searchText);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Extract the text after the text found position
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set textAfter = SUBSTRING(scriptText,pos+len,LENGTH(scriptText));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Get the position of the number of lines after
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (numLines is null or numLines = 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set numLinePos = 0;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/string/TextUtils/RegexPosition(textAfter,delimiter,numLines,numLinePos);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
/*
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;:  occurrence=&apos;||occurrence);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;:  len=&apos;||len);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;:  pos=&apos;||pos);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;:  numLinePos=&apos;||numLinePos);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;:  ------------------------------------------------------------------&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;:  textAfter&apos;||eol||textAfter);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;:  ------------------------------------------------------------------&apos;);
*/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (numLinePos &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Insert the replace text within the text after the numLinePos and before the remaining text
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set textAfter = SUBSTRING(textAfter,1,numLinePos)||NVL(replaceText,&apos;null&apos;)||SUBSTRING(textAfter,numLinePos+1,LENGTH(textAfter));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Insert the replace text before the extracted text After
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set textAfter = NVL(replaceText,&apos;null&apos;)||textAfter;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set scriptText = SUBSTRING(scriptText,1,pos+len-1)||textAfter;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set replacedText = true;
&#x9;&#x9;
---&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;:  scriptText:&apos;||eol||scriptText);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

--&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;:  ###############################################################################################&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set k = k + 1;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END WHILE;
&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;:  updateAction=&apos;||updateAction||&apos;  keyTextVerify=[&apos;||NVL(keyTextVerify,&apos;null&apos;)||&apos;]   Key text already exists.&apos;);
&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;-- If there were modifications made then update the sql script
&#x9;&#x9;&#x9;&#x9;if (replacedText) then
&#x9;&#x9;&#x9;&#x9;&#x9;set message = &apos;      UPDATED: updateAction=&apos;||RPAD(updateAction,14,&apos; &apos;)||LPAD(&apos;[&apos;||dstType||&apos;]&apos;,11,&apos; &apos;)||LPAD(&apos;[&apos;||subtype||&apos;]&apos;,30,&apos; &apos;)||&apos; dstPath=&apos;||dstPath;
&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, message);

&#x9;&#x9;&#x9;&#x9;&#x9;if (UPPER(updateAction) &lt;&gt; UPPER(&apos;modifyConstant&apos;)) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Update the script text
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/updateSqlScript(dstPath,scriptText,success,createResponse,faultResponse);&#x9;&#x9;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (faultResponse is not null or success = 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set message = &apos;        ERROR: updateAction=&apos;||RPAD(updateAction,14,&apos; &apos;)||LPAD(&apos;[&apos;||dstType||&apos;]&apos;,11,&apos; &apos;)||LPAD(&apos;[&apos;||subtype||&apos;]&apos;,30,&apos; &apos;)||&apos; dstPath=&apos;||dstPath;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, message);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;raise ex value moduleName||&apos;:  &apos;||cast(faultResponse as longvarchar);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;EXCEPTION
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE raise ex value moduleName||&apos;:  &apos;||cast(CURRENT_EXCEPTION.TRACE as longvarchar);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END;
&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;set message = &apos;    INSPECTED: updateAction=&apos;||RPAD(updateAction,14,&apos; &apos;)||LPAD(&apos;[&apos;||dstType||&apos;]&apos;,11,&apos; &apos;)||LPAD(&apos;[&apos;||subtype||&apos;]&apos;,30,&apos; &apos;)||&apos; dstPath=&apos;||dstPath;
&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, message);
&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;set j = j + 1;
&#x9;&#x9;&#x9;END WHILE;

&#x9;&#x9;end if;

&#x9;&#x9;set i = i + 1;
&#x9;END WHILE;
&#x9;SET success = 1;
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1573161757946</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="p:0:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="p:2:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="references" type="NULL"/>
</metadata>