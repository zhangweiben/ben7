<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:e931daa6-7fda-456a-badf-4cdb1c228a1a -->
<metadata name="generateCRUD_Update" path="/shared/ASAssets/BestPractices_v81/Procedures/crudProcedures/generateCRUD_Update" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>&lt;![CDATA[
&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

]]&gt;</annotation>
  <parameters>
    <parameter name="debug" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="overwrite" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="crudVector" direction="IN" nullable="true">
      <datatype name="crudVector" type="ARRAY" maxLength="0">
        <itemDatatype>
          <datatype name="crudGenType" referenceDefinitionSet="/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions" referenceType="crudGenType" type="TREE" refId="257">
            <element name="crudPath">
              <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
            </element>
            <element name="procedurePath">
              <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
            </element>
            <element name="procedureName">
              <datatype name="VARCHAR" type="STRING" maxLength="255"/>
            </element>
            <element name="viewname">
              <datatype name="VARCHAR" type="STRING" maxLength="255"/>
            </element>
            <element name="viewpath">
              <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
            </element>
            <element name="constantspath">
              <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
            </element>
            <element name="typedefprocpath">
              <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
            </element>
            <element name="typedefprocname">
              <datatype name="VARCHAR" type="STRING" maxLength="255"/>
            </element>
            <element name="customcreatepath">
              <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
            </element>
            <element name="customupdatepath">
              <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
            </element>
            <element name="genUniqueIDPath">
              <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
            </element>
            <element name="pkList">
              <datatype name="pkList" type="ARRAY" maxLength="0">
                <itemDatatype>
                  <datatype name="crudGenColumnType" type="TREE" refId="513">
                    <element name="colName">
                      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                    </element>
                    <element name="colType">
                      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                    </element>
                  </datatype>
                </itemDatatype>
              </datatype>
            </element>
            <element name="columnList">
              <datatype name="columnList" type="ARRAY" maxLength="0">
                <itemDatatype>
                  <reference refId="513"/>
                </itemDatatype>
              </datatype>
            </element>
          </datatype>
        </itemDatatype>
      </datatype>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="status" direction="OUT" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/resource/ResourceExists" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="path" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="type" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="version" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceVersion" type="STRING" maxLength="255"/>
      </element>
      <element name="exists" direction="OUT">
        <datatype type="BOOLEAN"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/util/GetProperty" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="property" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="PropertyName" type="STRING" maxLength="255"/>
      </element>
      <element name="result" direction="OUT">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="PropertyValue" type="STRING" maxLength="4096"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/crudProcedures/format/getFormatProcedure" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="colType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="formatProcedure" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/crudProcedures/getDefaultTestValues" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="colType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="prefixVarcharValue" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="defaultValue" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/crudProcedures/isPrimaryKey" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="colName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="pkVector" direction="IN">
        <datatype type="ARRAY" maxLength="0">
          <itemDatatype>
            <datatype name="crudGenColumnType" referenceDefinitionSet="/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions" referenceType="crudGenColumnType" type="TREE" refId="257">
              <element name="colName">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="colType">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
            </datatype>
          </itemDatatype>
        </datatype>
      </element>
      <element name="pkFound" direction="OUT">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/_ProjectMaintenance/defaultValues" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/log/logDebugMessage" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="moduleName" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="moduleNameType" type="STRING" maxLength="4096"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="messageText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inPath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inWord" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/createResource" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceSubType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="createResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="257"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <reference refId="257"/>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/updateSqlScript" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="scripttext" direction="INOUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="createResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="257"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <reference refId="257"/>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/*
&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;CSW Version:&#x9;Reason:
&#x9;03/01/2018&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.5&#x9;&#x9;&#x9;Replaced /shared/ASAssets/Utilities/repository/resourceExists with /lib/resource/ResourceExists
&#x9;03/14/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Fixed viewpath using applyReservedListToPath(crudVector[1].viewpath,null,resourcePathReserved).
&#x9;04/15/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;B.P. 2019.200: Changed custom functions to explicit paths.

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.
*/
PROCEDURE generateCRUD_Update(
&#x9;IN &#x9;debug&#x9;&#x9;&#x9;&#x9;CHAR(1),
&#x9;IN overwrite&#x9;&#x9;&#x9;INTEGER,
&#x9;&#x9;-- 0=&quot;FAIL_IF_EXISTS&quot;=do not overwrite the resource.  If the resource exists, raise an exception.
&#x9;&#x9;-- 1=&quot;SKIP_IF_EXISTS&quot;=skip the resource if it exists and continue processing
&#x9;&#x9;-- 2=&quot;OVERWRITE_IF_EXISTS&quot;=do overwrite the resource if it exists.
&#x9;IN &#x9;crudVector&#x9;&#x9;&#x9;VECTOR(/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions.crudGenType),
&#x9;OUT status&#x9;&#x9;&#x9;&#x9;VARCHAR
)
BEGIN
&#x9;DECLARE moduleName&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;generateCRUD_Update()&apos;;
&#x9;DECLARE&#x9;genDefaultData&#x9;&#x9;&#x9;BIT DEFAULT 0;
&#x9;DECLARE i,j,len&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE maxFormatProcLength&#x9;&#x9;INTEGER DEFAULT 15; -- formatTimestamp has a length of 15, the most of any of the format procedures
&#x9;DECLARE padAmount&#x9;&#x9;&#x9;&#x9;INTEGER DEFAULT 0;
&#x9;DECLARE padChar&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1) DEFAULT &apos; &apos;;
&#x9;DECLARE padLen&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE s&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE s2&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE pkString,wherePK,CB,outPK,initVectorPK VARCHAR(2000) DEFAULT &apos;&apos;;
&#x9;DECLARE CBVector&#x9;&#x9;&#x9;&#x9;VECTOR(VARCHAR(2000)); --clob/blob vector
&#x9;DECLARE pkList&#x9;&#x9;&#x9;&#x9;&#x9;VECTOR(/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions.crudGenColumnType);
&#x9;DECLARE notExists&#x9;&#x9;&#x9;&#x9;BIT DEFAULT 0;
&#x9;DECLARE pkFound&#x9;&#x9;&#x9;&#x9;&#x9;SMALLINT;
&#x9;DECLARE columnList&#x9;&#x9;&#x9;&#x9;VECTOR(/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions.crudGenColumnType);
&#x9;DECLARE&#x9;formatProcedure&#x9;&#x9;&#x9;VARCHAR(255);
&#x9;DECLARE success&#x9;&#x9;&#x9;&#x9;&#x9;BIT;
&#x9;DECLARE createResponse &#x9;&#x9;&#x9;XML;
&#x9;DECLARE faultResponse&#x9;&#x9;&#x9;XML;
&#x9;DECLARE fullResourcePath&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE CSW_Version&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE NEWLINE&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.newline;
&#x9;DECLARE utilitiesRootPath&#x9;&#x9;VARCHAR(4000) DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.utilitiesRootPath;
&#x9;DECLARE bestPracticesRootPath&#x9;VARCHAR(4000) DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.bestPracticesRootPath;
&#x9;DECLARE word&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE defaultTestValue&#x9;&#x9;VARCHAR;
&#x9;DECLARE resourceExists&#x9;&#x9;&#x9;BOOLEAN DEFAULT false;
&#x9;DECLARE ex&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;EXCEPTION;
&#x9;DECLARE typedefprocname&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE typedefprocpath&#x9;&#x9;&#x9;VARCHAR(2048);
&#x9;DECLARE resourcePathReserved&#x9;VARCHAR(4096);

&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;BEGIN: ============================================&apos;);
&#x9;end if;
&#x9;-----------------------------------------------------------------------------------------
&#x9;-- Create the &quot;create_$viewname SQL procedure resource if it does not exist
&#x9;-----------------------------------------------------------------------------------------
&#x9;set fullResourcePath = REPLACE(crudVector[1].procedurePath ||&apos;/&apos;||crudVector[1].procedureName,&apos;//&apos;,&apos;/&apos;);
&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;fullResourcePath=&apos;||fullResourcePath);
&#x9;end if;

&#x9;set status = &apos;GENERATED&apos;;
&#x9;call /lib/resource/ResourceExists(fullResourcePath,&apos;PROCEDURE&apos;,null,resourceExists);
&#x9;if (not resourceExists) then
&#x9;&#x9;call /shared/ASAssets/Utilities/repository/createResource(crudVector[1].procedurePath,crudVector[1].procedureName,&apos;PROCEDURE&apos;,&apos;SQL_SCRIPT_PROCEDURE&apos;,success,createResponse,faultResponse);
&#x9;else
&#x9;&#x9;set resourceExists = true;
&#x9;end if;

&#x9;-- Apply the reserved path to the procedure name
&#x9;call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(crudVector[1].typedefprocname, null, typedefprocname);
&#x9;call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(crudVector[1].typedefprocpath, null, typedefprocpath);

&#x9;if ((not resourceExists) or (resourceExists and overwrite = 2)) then
&#x9;-----------------------------------------------------------------------------------------
&#x9;-- Build the &quot;create_$viewname SQL script
&#x9;-----------------------------------------------------------------------------------------
&#x9;set pkList = crudVector[1].pkList;
&#x9;set columnList = crudVector[1].columnList;
--&#x9;call print(&apos;pkList size=&apos;||CARDINALITY(pkList));
--&#x9;call print(&apos;columnList size=&apos;||CARDINALITY(columnList));

&#x9;-- Determine the maximum padding length and add 15
&#x9;set i = 1;
&#x9;WHILE (i &lt;= CARDINALITY(columnList)) DO
&#x9;&#x9;call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord(columnList[i].colName, null, word);
&#x9;&#x9;IF (LENGTH(TRIM(word)) &gt; padAmount) then
&#x9;&#x9;&#x9;set padAmount = LENGTH(TRIM(word));
&#x9;&#x9;END IF;
&#x9;&#x9;set i = i + 1;
&#x9;END WHILE;
&#x9;set padAmount = padAmount + maxFormatProcLength + LENGTH(&apos;(inVector[i].&apos;)+1;

&#x9;-- Determine the where clause and PK string for logging
&#x9;set pkString =  &apos;&#x9;&#x9;set pkString = &apos;;
&#x9;set wherePK = &apos;&apos;;
&#x9;set i = 1;
&#x9;WHILE (i &lt;= CARDINALITY(pkList)) DO
&#x9;&#x9;-- Create the whereClause string
&#x9;&#x9;set wherePK = wherePK||pkList[i].colName||&apos; = inVector[i].&apos;||pkList[i].colName;
&#x9;&#x9;IF (i &lt; CARDINALITY(pkList)) THEN
&#x9;&#x9;&#x9;set wherePK = wherePK||&apos; AND &apos;;
&#x9;&#x9;ELSE -- last column
&#x9;&#x9;&#x9;set wherePK = wherePK;&#x9;
&#x9;&#x9;END IF;

&#x9;&#x9;-- Create the pkString
&#x9;&#x9;set pkString = pkString||&apos;TRIM(NVL(CAST(inVector[i].&apos;||pkList[i].colName||&apos; AS VARCHAR),&apos;&apos;  &apos;&apos;))&apos;;
&#x9;&#x9;IF (i &lt; CARDINALITY(pkList)) THEN
&#x9;&#x9;&#x9;set pkString = pkString||&apos;||&apos;||&apos;&apos;&apos;, &apos;&apos;&apos;||&apos;||&apos;;
&#x9;&#x9;ELSE -- when last column, just add a carriage return and no comma
&#x9;&#x9;&#x9;set pkString = pkString||&apos;;&apos;;&#x9;
&#x9;&#x9;END IF;
&#x9;&#x9;set i = i + 1;
&#x9;END WHILE;
&#x9;-- Create the script text
&#x9;set s = &apos;&apos;;
&#x9;set s = s||&apos;/* update_&apos;||crudVector[1].viewname||&apos;:&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;*** GENERATED PROCEDURE --- DO NOT MODIFY ***&apos;||NEWLINE;
&#x9;set s = s||NEWLINE;
&#x9;set s = s||&apos;&#x9;Composite Software CRUD procedure for &quot;UPDATE&quot;.   &apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;The purpose of this procedure is to perform an update on the view &quot;&apos;||crudVector[1].viewname||&apos;&quot;.&apos;||NEWLINE;
&#x9;set s = s||NEWLINE;
&#x9;set s = s||&apos;&#x9;Input:&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;&#x9;inVector - an array of updates to perform for the view &quot;&apos;||crudVector[1].viewname||&apos;&quot;.&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;&#x9;LogIdentifier - A string used to uniquely idenitify a record when saved to the log for debugging purposes.  It should never be null.&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;Output: &apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;&#x9;msgVector - an array of message results.&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;&#x9;&#x9;errorCode - 0=succesful CRUD operation, &gt;0=unscuccessful CRUD operation.&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;&#x9;&#x9;messageType - type of message being returned: SUCCESS, WARNING, PK_VIOLATION, SYSTEM_EXCEPTION&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;&#x9;&#x9;message - success or error message text.&apos;||NEWLINE;
&#x9;set s = s||NEWLINE;
&#x9;set s = s||&apos;&#x9;Exceptions:  defaultValues.ex&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;&#x9;Only active if defaultValues.crudRaiseExceptions is set to true.&apos;||NEWLINE;
&#x9;set s = s||NEWLINE;
&#x9;set s = s||&apos;&#x9;Author:      Generated from Composite Best Practices generation scripts&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;Date:        &apos;||CURRENT_DATE||NEWLINE;
&#x9;call /lib/util/GetProperty(&apos;SERVER_VERSION_NUMBER&apos;,CSW_Version);
&#x9;set s = s||&apos;&#x9;CSW Version: &apos;||NVL(CSW_Version,&apos;null&apos;)||NEWLINE;
&#x9;set s = s||&apos;*/&apos;||NEWLINE;
&#x9;set s = s||&apos;PROCEDURE update_&apos;||crudVector[1].viewname||&apos;(&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;IN inVector &#x9;&#x9;VECTOR (&apos;||typedefprocpath||&apos;/&apos;||typedefprocname||&apos;.&apos;||crudVector[1].viewname||&apos;_Type),&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;IN explicit&#x9;&#x9;&#x9;BIT, &#x9;-- true(1)=update all fields as is no matter if they are blank or null&apos;||NEWLINE;
&#x9;set s = s||&apos;   &#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;-- false(0)=only update non null fields.&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;IN LogIdentifier&#x9;&apos;||bestPracticesRootPath||&apos;/Procedures/TypeDefinitions.LogIdentifierType,&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;OUT msgVector&#x9;&#x9;VECTOR(&apos;||bestPracticesRootPath||&apos;/Procedures/TypeDefinitions.crudMessageType)&apos;||NEWLINE;
&#x9;set s = s||&apos;)&apos;||NEWLINE;
&#x9;set s = s||&apos;BEGIN&apos;||NEWLINE;
&#x9;set s = s||&apos;    DECLARE moduleName&#x9;&#x9;&#x9;&#x9;VARCHAR(255) DEFAULT &apos;&apos;update_&apos;||crudVector[1].viewname||&apos;&apos;&apos;;&apos;||NEWLINE;
&#x9;set s = s||&apos;    DECLARE viewName&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;&apos;&apos;||crudVector[1].viewname||&apos;&apos;&apos;;&apos;||NEWLINE;
&#x9;set s = s||&apos;    -- STANDARD VARIABLES&apos;||NEWLINE;
&#x9;set s = s||&apos;    DECLARE debug&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1) DEFAULT &apos;||crudVector[1].constantspath||&apos;/defaultValues.debug;&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;DECLARE debugTime&#x9;&#x9;&#x9;&#x9;CHAR(1) DEFAULT &apos;||crudVector[1].constantspath||&apos;/defaultValues.debugTime;&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;DECLARE debugException&#x9;&#x9;&#x9;CHAR(1) DEFAULT &apos;||crudVector[1].constantspath||&apos;/defaultValues.debugException;&apos;||NEWLINE;
&#x9;set s = s||&apos;    DECLARE i&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER DEFAULT 1;&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;DECLARE pkString&#x9;&#x9;&#x9;&#x9;VARCHAR(4000);&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;DECLARE sqlStatement&#x9;&#x9;&#x9;LONGVARCHAR;&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;DECLARE fromClause&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;DECLARE whereClause&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;DECLARE updateClause&#x9;&#x9;&#x9;LONGVARCHAR;&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;DECLARE inVectorRow&#x9;&#x9;&#x9;&#x9;VECTOR (&apos;||typedefprocpath||&apos;/&apos;||typedefprocname||&apos;.&apos;||crudVector[1].viewname||&apos;_Type) DEFAULT VECTOR[(null)];&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;DECLARE message&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;DECLARE raiseExceptions&#x9;&#x9;&#x9;BOOLEAN DEFAULT &apos;||crudVector[1].constantspath||&apos;/defaultValues.crudRaiseExceptions;&apos;||NEWLINE;
&#x9;set s = s||NEWLINE;
&#x9;set s = s||&apos;&#x9;SET msgVector = VECTOR[(null)]; -- Init message vector&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;BEGIN -- BEGIN EXCEPTION BLOCK&apos;||NEWLINE;
&#x9;set s = s||NEWLINE;
&#x9;set s = s||&apos;&#x9;-- Format the update set statement:&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;WHILE (i &lt;= CARDINALITY(inVector)) DO&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;&#x9;SET updateClause = &apos;&apos;&apos;&apos;;&apos;||NEWLINE;
&#x9;set i = 1;
&#x9;set j = 1;
&#x9;set CBVector = VECTOR[null];
&#x9;WHILE (i &lt;= CARDINALITY(columnList)) DO
&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/crudProcedures/isPrimaryKey(columnList[i].colName,pkList,pkFound);
&#x9;&#x9;call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord(columnList[i].colName, null, word);

&#x9;&#x9;-- Only add a format procedure when the column is not a primary key.
&#x9;&#x9;IF (pkFound = notExists) THEN 
&#x9;&#x9;&#x9;-- BLOB or CLOB column type gets handled different since it cannot be expressed as a dynamic query
&#x9;&#x9;&#x9;IF ( (columnList[i].colType = &apos;BLOB&apos;) OR (columnList[i].colType = &apos;CLOB&apos;) ) THEN
&#x9;&#x9;&#x9;&#x9;set CB = &apos;&apos;;
&#x9;&#x9;&#x9;&#x9;set CB = CB||&apos;&#x9;&#x9;&#x9;IF ( (explicit = 1) or (inVector[i].&apos;||word||&apos; is not null) ) THEN &apos;||NEWLINE;
&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(crudVector[1].viewpath,null,resourcePathReserved);
&#x9;&#x9;&#x9;&#x9;set CB = CB||&apos;&#x9;&#x9;&#x9;&#x9;UPDATE &apos;||resourcePathReserved||NEWLINE;
&#x9;&#x9;&#x9;&#x9;set CB = CB||&apos;&#x9;&#x9;&#x9;&#x9;&#x9;SET &apos;||word||&apos; = inVector[i].&apos;||word||NEWLINE;
&#x9;&#x9;&#x9;&#x9;set CB = CB||&apos;&#x9;&#x9;&#x9;&#x9;&#x9;WHERE &apos;||wherePK||&apos;;&apos;||NEWLINE;
&#x9;&#x9;&#x9;&#x9;set CB = CB||&apos;&#x9;&#x9;&#x9;END IF;&apos;||NEWLINE;
&#x9;&#x9;&#x9;&#x9;set CBVector[j] = CB;&#x9;-- store the text for the CLOB/BLOB -- each CLOB/BLOB gets its own entry in the vector
&#x9;&#x9;&#x9;&#x9;set CBVector = EXTEND(CBVector,1);
&#x9;&#x9;&#x9;&#x9;set j = j + 1;
&#x9;&#x9;&#x9;ELSE -- any other column type
&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/crudProcedures/format/getFormatProcedure(columnList[i].colType, formatProcedure);
&#x9;&#x9;&#x9;&#x9;IF (formatProcedure is not null) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;set s = s||&apos;&#x9;&#x9;call &apos;||bestPracticesRootPath||&apos;/Procedures/crudProcedures/format/&apos;||RPAD(formatProcedure||&apos;(inVector[i].&apos;||word||&apos;, &apos;,padAmount,padChar)||&apos;&apos;&apos;&apos;||word||&apos;&apos;&apos;, &apos;&apos;=&apos;&apos;, explicit, &apos;&apos;U&apos;&apos;, updateClause, updateClause);&apos;||NEWLINE;
&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, &apos;Y&apos;, &apos;########################################################################################################&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, &apos;Y&apos;, &apos;# WARNING: NO formatType PROCEDURE FOUND FOR columnType=&apos;||NVL(columnList[i].colType,&apos;null&apos;)||&apos;  columnName=&apos;||NVL(columnList[i].colName,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, &apos;Y&apos;, &apos;########################################################################################################&apos;);
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END IF;
&#x9;&#x9;set i = i + 1;
&#x9;END WHILE;
&#x9;set s = s||NEWLINE;
&#x9;set s = s||&apos;&#x9;&#x9;-- invoke the custom update procedure to apply any custom logic on the updateClause.&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;&#x9;set inVectorRow[1] = inVector[i];&apos;||NEWLINE;
&#x9;call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(crudVector[1].customupdatepath||&apos;/custom_&apos;||crudVector[1].viewname, null, resourcePathReserved);
&#x9;set s = s||&apos;&#x9;&#x9;call &apos;||resourcePathReserved||&apos;(inVectorRow,explicit,updateClause,LogIdentifier,updateClause);&apos;||NEWLINE;
&#x9;set s = s||NEWLINE;
&#x9;set s = s||&apos;&#x9;&#x9;set whereClause = &apos;&apos;&apos;||wherePK||&apos;&apos;&apos;;&apos;||NEWLINE;
&#x9;set s = s||pkString||NEWLINE;
&#x9;set s = s||NEWLINE;
&#x9;set s = s||&apos;&#x9;&#x9;-- Execute the update if the primary key exists and there is something to update:&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;&#x9;IF (pkString IS NOT NULL AND LENGTH(&apos;&apos;|&apos;&apos;||pkString||&apos;&apos;|&apos;&apos;) &gt; 2) THEN  --notEmpty&apos;||NEWLINE;

&#x9;set s = s||&apos;&#x9;&#x9;&#x9;IF (updateClause IS NOT NULL AND LENGTH(&apos;&apos;|&apos;&apos;||updateClause||&apos;&apos;|&apos;&apos;) &gt; 2) THEN  --notEmpty&apos;||NEWLINE;
&#x9;call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(crudVector[1].viewpath,null,resourcePathReserved);
&#x9;set s = s||&apos;    &#x9;&#x9;&#x9;SET fromClause = &apos;&apos;&apos;||resourcePathReserved || &apos;&apos;&apos;;&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;&#x9;&#x9;&#x9;SET sqlStatement = &apos;&apos;UPDATE  &apos;&apos; || fromClause || &apos;&apos;&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;&#x9;&#x9;&#x9;&#x9;SET &apos;&apos; || updateClause || &apos;&apos;&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;&#x9;&#x9;&#x9;&#x9;WHERE &apos;&apos; || whereClause;&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;&#x9;&#x9;&#x9;set message = &apos;&apos;&lt;&lt;&lt; UPDATE: &apos;||crudVector[1].viewname||&apos; &gt;&gt;&gt; VECTOR=&apos;&apos;||i||&apos;&apos;,  PK=&apos;&apos;|| pkString ||&apos;&apos;,  SQL STATEMENT=&apos;&apos;||NVL(sqlStatement,&apos;&apos;null&apos;&apos;);&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;&#x9;&#x9;&#x9;CALL &apos;||utilitiesRootPath||&apos;/log/logDebugMessage(moduleName,debug,LogIdentifier||&apos;&apos;::&apos;&apos;||message);&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;&#x9;&#x9;&#x9;SET msgVector[i].errorCode = 0;&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;&#x9;&#x9;&#x9;SET msgVector[i].messageType = &apos;&apos;SUCCESS&apos;&apos;;&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;&#x9;&#x9;&#x9;SET msgVector[i].message = message;&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;&#x9;&#x9;&#x9;EXECUTE IMMEDIATE sqlStatement;&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;&#x9;&#x9;ELSE&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;&#x9;&#x9;&#x9;set message = &apos;&apos;&lt;&lt;&lt; UPDATE: &apos;||crudVector[1].viewname||&apos; &gt;&gt;&gt; VECTOR=&apos;&apos;||i||&apos;&apos;,  PK=&apos;&apos;|| pkString || &apos;&apos;,  SQL STATEMENT=[NO UPDATE STATEMENT GENERATED.  NO VALUES TO UPDATE.]&apos;&apos;;&apos;||NEWLINE; 
&#x9;set s = s||&apos;&#x9;&#x9;&#x9;&#x9;CALL &apos;||utilitiesRootPath||&apos;/log/logDebugMessage(moduleName,debug,LogIdentifier||&apos;&apos;::&apos;&apos;||message);&apos;||NEWLINE; 
&#x9;set s = s||&apos;&#x9;&#x9;&#x9;&#x9;SET msgVector[i].errorCode = 0;&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;&#x9;&#x9;&#x9;SET msgVector[i].messageType = &apos;&apos;WARNING&apos;&apos;;&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;&#x9;&#x9;&#x9;SET msgVector[i].message = message;&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;&#x9;&#x9;END IF;&apos;||NEWLINE;
&#x9;set CBVector = TRUNCATE(CBVector,1);
&#x9;IF (CARDINALITY(CBVector) &gt; 0) THEN
&#x9;&#x9;set s = s||NEWLINE;
&#x9;&#x9;-- insert update clob and/or blob logic separate here
&#x9;&#x9;set s = s||&apos;&#x9;&#x9;&#x9;-- GENERATED CODE: handle BLOB and/or CLOB types which cannot be updated dynamically&apos;||NEWLINE;
&#x9;&#x9;set s = s||&apos;&#x9;&#x9;&#x9;-- When to update the BLOB/CLOB content&apos;||NEWLINE;
&#x9;&#x9;set s = s||&apos;&#x9;&#x9;&#x9;--&#x9;&#x9;If explicit=1 (on) then update the table no matter if it is null or not&apos;||NEWLINE;
&#x9;&#x9;set s = s||&apos;&#x9;&#x9;&#x9;--&#x9;&#x9;If explicit=0 (off) and the content is not null, then update the table no matter what&apos;||NEWLINE;
&#x9;&#x9;set s = s||&apos;&#x9;&#x9;&#x9;-- &#x9;&#x9;Do not update the table when explicit=0 (off) and the content is null&apos;||NEWLINE;
&#x9;&#x9;-- multiple CLOB / BLOB fields result in multiple update statements (iterate through the vector)
&#x9;&#x9;set i = 1;
&#x9;&#x9;WHILE (i &lt;= CARDINALITY(CBVector)) DO
&#x9;&#x9;&#x9;&#x9;set s = s||CBVector[i];
&#x9;&#x9;&#x9;&#x9;set i = i + 1;
&#x9;&#x9;END WHILE;
&#x9;END IF;
&#x9;set s = s||&apos;&#x9;&#x9;ELSE&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;&#x9;&#x9;set message = &apos;&apos;&lt;&lt;&lt; UPDATE: &apos;||crudVector[1].viewname||&apos; &gt;&gt;&gt; VECTOR=&apos;&apos;||i||&apos;&apos;,  PK=&apos;&apos;|| pkString || &apos;&apos;,  SQL STATEMENT=[NO PRIMARY KEY PROVIDED, THEREFORE NO UPDATE STATEMENT EXECUTED.]&apos;&apos;;&apos;||NEWLINE; 
&#x9;set s = s||&apos;&#x9;&#x9;&#x9;CALL &apos;||utilitiesRootPath||&apos;/log/logDebugMessage(moduleName,debug,LogIdentifier||&apos;&apos;::&apos;&apos;||message);&apos;||NEWLINE; 
&#x9;set s = s||&apos;&#x9;&#x9;&#x9;SET msgVector[i].errorCode = 1;&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;&#x9;&#x9;SET msgVector[i].messageType = &apos;&apos;PK_VIOLATION&apos;&apos;;&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;&#x9;&#x9;SET msgVector[i].message = message;&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;&#x9;END IF;&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;&#x9;set i = i + 1;&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;&#x9;SET msgVector = EXTEND(msgVector,1);&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;END WHILE;&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;SET msgVector = TRUNCATE(msgVector,1);&apos;||NEWLINE;
&#x9;set s = s||NEWLINE;
&#x9;set s = s||&apos;-- HANDLE EXCEPTIONS ----------------------------------------------------   &apos;||NEWLINE;
&#x9;set s = s||&apos;    EXCEPTION&apos;||NEWLINE;
&#x9;set s = s||&apos;      ELSE&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;&#x9;set message = &apos;&apos;&lt;&lt;&lt; UPDATE CUSTOM: &apos;||crudVector[1].viewname ||&apos;&gt;&gt;&gt; &apos;&apos;||CURRENT_EXCEPTION.TRACE;&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;&#x9;SET msgVector[i].errorCode = 1;&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;&#x9;SET msgVector[i].messageType = &apos;&apos;SYSTEM_EXCEPTION&apos;&apos;;&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;&#x9;SET msgVector[i].message = message;&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;&#x9;SET msgVector[i].errorTrace = &apos;&apos;&lt;&lt;&lt; UPDATE: &apos;||crudVector[1].viewname ||&apos;&gt;&gt;&gt; &apos;&apos;||CURRENT_EXCEPTION.TRACE;&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;&#x9;CALL &apos;||utilitiesRootPath||&apos;/log/logDebugMessage(moduleName,debugException,LogIdentifier||&apos;&apos;::&apos;&apos;||msgVector[i].errorTrace);&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;&#x9;IF (raiseExceptions) THEN&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;&#x9;&#x9;RAISE &apos;||crudVector[1].constantspath||&apos;/defaultValues.ex VALUE message;&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;&#x9;END IF;&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;END; -- END EXCEPTION BLOCK&apos;||NEWLINE;
&#x9;set s = s||&apos;END&apos;||NEWLINE;
&#x9;-----------------------------------------------------------------------------------------
&#x9;-- Update the &quot;update_$viewname with the generated SQL script
&#x9;-----------------------------------------------------------------------------------------
&#x9;&#x9;if (s IS NOT NULL AND LENGTH(&apos;|&apos;||s||&apos;|&apos;) &gt; 2) then  --notEmpty
&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/updateSqlScript(fullResourcePath,s,success,createResponse,faultResponse);
&#x9;&#x9;else
&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;Cannot update resource because the script text is empty.&apos;);
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;set status = &apos;ERROR&apos;;
&#x9;&#x9;end if;
&#x9;else
&#x9;&#x9;if (overwrite = 0) then
&#x9;&#x9;&#x9;raise ex value &apos;Cannot create resource because it already exists and overwrite=0.  path=&apos;||NVL(fullResourcePath,&apos;null&apos;);
&#x9;&#x9;end if;
&#x9;&#x9;if (overwrite = 1) then
&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;SKIPPING:  Cannot create resource because it already exists.  path=&apos;||NVL(fullResourcePath,&apos;null&apos;));
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;set status = &apos;SKIPPED&apos;;
&#x9;&#x9;end if;
&#x9;end if;
/****************************************************************************
*
*&#x9;Generate a test harness for the update procedure
*
*****************************************************************************/
&#x9;-----------------------------------------------------------------------------------------
&#x9;-- Template for the &quot;test_update_$viewname SQL script
&#x9;-----------------------------------------------------------------------------------------
/*
PROCEDURE test_update_customers(
)
BEGIN
&#x9;DECLARE i&#x9;&#x9;&#x9;INTEGER DEFAULT 1;
&#x9;DECLARE inVector &#x9;VECTOR (/shared/CUD_Prototype/constants/TypeDefinitions.customers_Type) DEFAULT VECTOR[(null)];
&#x9;DECLARE pk1Vector&#x9;VECTOR (DOUBLE);
&#x9;DECLARE explicit&#x9;INTEGER DEFAULT 1; 
&#x9;&#x9;--1=Explicitly generate an update SET statement for all columns even if they are null or blank (empty).
&#x9;&#x9;--0=Do not generate an update SET statement for a column if it is null or blank (empty).

&#x9;-- Test for multiple PK deletions.
&#x9;-- When null, test for no delete statement executed when there is no PK present.
&#x9;-- For multiple PK vectors, they must have the same number of entries but they can have different values.
&#x9;set pk1Vector = VECTOR [null,99999.0];

&#x9;-- The loop is driven off of the first PK vector only.
&#x9;WHILE (i &lt;= CARDINALITY(pk1Vector)) DO
&#x9;&#x9;set inVector[i].customerID = pk1Vector[i];
&#x9;&#x9;set inVector[i].CompanyName = &apos;Modified Company Name&apos;||i;
&#x9;&#x9;set inVector[i].ContactFirstName = null;
&#x9;&#x9;set inVector[i].ContactLastName = null;
&#x9;&#x9;set inVector[i].BillingAddress = null;
&#x9;&#x9;set inVector[i].City = null;
&#x9;&#x9;set inVector[i].StateOrProvince = null;
&#x9;&#x9;set inVector[i].PostalCode = null;
&#x9;&#x9;set inVector[i].CountryRegion = null;
&#x9;&#x9;set inVector[i].ContactTitle = null;
&#x9;&#x9;set inVector[i].PhoneNumber = null;
&#x9;&#x9;set inVector[i].FaxNumber = null;

&#x9;&#x9;set inVector = EXTEND(inVector,1);
&#x9;&#x9;set i = i + 1;
&#x9;END WHILE;
&#x9;set inVector = TRUNCATE(inVector,1);
&#x9;call /shared/CUD_Prototype/L1_Mapping_Layer/L1_1_Client_Services/CRUD/&quot;Update&quot;/update_customers(inVector,explicit);
END
*/
&#x9;-----------------------------------------------------------------------------------------
&#x9;-- Create the &quot;test_update_$viewname SQL procedure resource if it does not exist
&#x9;-----------------------------------------------------------------------------------------
&#x9;set fullResourcePath = REPLACE(crudVector[1].procedurePath ||&apos;/test/test_&apos;||crudVector[1].procedureName,&apos;//&apos;,&apos;/&apos;);
&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;fullResourcePath=&apos;||fullResourcePath);
&#x9;end if;
&#x9;set resourceExists = false;
&#x9;call /lib/resource/ResourceExists(fullResourcePath,&apos;PROCEDURE&apos;,null,resourceExists);
&#x9;if (not resourceExists) then
&#x9;&#x9;call /shared/ASAssets/Utilities/repository/createResource(crudVector[1].procedurePath ||&apos;/test&apos;,&apos;test_&apos;||crudVector[1].procedureName,&apos;PROCEDURE&apos;,&apos;SQL_SCRIPT_PROCEDURE&apos;,success,createResponse,faultResponse);
&#x9;else
&#x9;&#x9;set resourceExists = true;
&#x9;end if;

&#x9;if ((not resourceExists) or (resourceExists and overwrite = 2)) then
&#x9;-----------------------------------------------------------------------------------------
&#x9;-- Build the &quot;test_update_$viewname SQL script
&#x9;-----------------------------------------------------------------------------------------
&#x9;set outPK = &apos;&apos;;
&#x9;set initVectorPK = &apos;&apos;;
&#x9;set i = 1;
&#x9;set len = CARDINALITY(pkList);
&#x9;WHILE (i &lt;= len) DO
&#x9;&#x9;-- Create the OUT parameters
&#x9;&#x9;set outPK = outPK||&apos;&#x9;OUT pk&apos;||i||&apos;Vector&#x9;VECTOR(&apos;||pkList[i].colType||&apos;)&apos;;
&#x9;&#x9;IF (i &lt; len) THEN
&#x9;&#x9;&#x9;set outPK = outPK||&apos;,&apos;||NEWLINE;
&#x9;&#x9;END IF;

&#x9;&#x9;-- Create the initialize PK Vector
&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/crudProcedures/getDefaultTestValues(columnList[i].colType,&apos;Update&apos;,defaultTestValue);
&#x9;&#x9;set initVectorPK = initVectorPK||&apos;&#x9;set pk&apos;||i||&apos;Vector = VECTOR [&apos;||defaultTestValue||&apos;];&apos;||NEWLINE;
&#x9;&#x9;set i = i + 1;
&#x9;END WHILE;
&#x9;-- Generate the test delete script
&#x9;set s = &apos;&apos;;
&#x9;set s = s||&apos;PROCEDURE test_update_&apos;||crudVector[1].viewname||&apos;(&apos;||NEWLINE;
&#x9;set s = s||outPK;
&#x9;set s = s||&apos;)&apos;||NEWLINE;
&#x9;set s = s||&apos;BEGIN&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;DECLARE inVector &#x9;&#x9;VECTOR (&apos;||typedefprocpath||&apos;/&apos;||typedefprocname||&apos;.&apos;||crudVector[1].viewname||&apos;_Type) DEFAULT VECTOR[(null)];&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;DECLARE msgVector&#x9;&#x9;VECTOR(&apos;||bestPracticesRootPath||&apos;/Procedures/TypeDefinitions.crudMessageType);&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;DECLARE LogIdentifier&#x9;&apos;||bestPracticesRootPath||&apos;/Procedures/TypeDefinitions.LogIdentifierType;&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;DECLARE i&#x9;&#x9;&#x9;&#x9;INTEGER DEFAULT 1;&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;DECLARE explicit&#x9;&#x9;INTEGER DEFAULT 0;&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;&#x9;--1=Explicitly generate an update SET statement for all columns even if they are null.&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;&#x9;--0=Do not generate an update SET statement for a column if it is null.  If it is an empty string (&apos;&apos;&apos;&apos;), a statement will be generated. &apos;||NEWLINE;
&#x9;set s = s||NEWLINE;
&#x9;set s = s||&apos;&#x9;-- Test for multiple PK deletions.&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;-- When null, test for no delete statement executed when there is no PK present.&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;-- For multiple PK vectors, they must have the same number of entries but they can have different values.&apos;||NEWLINE;
&#x9;set s = s||initVectorPK;
&#x9;set s = s||NEWLINE;
&#x9;set s = s||&apos;&#x9;-- The loop is driven off of the first PK vector only.&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;WHILE ( i &lt;= CARDINALITY(pk1Vector) ) DO&apos;||NEWLINE;
&#x9;set i = 1;
&#x9;set j = 1;
&#x9;WHILE (i &lt;= CARDINALITY(columnList)) DO
&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/crudProcedures/isPrimaryKey(columnList[i].colName,pkList,pkFound);
&#x9;&#x9;call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord(columnList[i].colName, null, word);

&#x9;&#x9;-- Add formatting to retrieve by primary key
 &#x9;&#x9;IF (pkFound = 1) THEN 
&#x9;&#x9;&#x9;set s = s||&apos;&#x9;&#x9;set inVector[i].&apos;||word||&apos; = pk&apos;||j||&apos;Vector[i];&apos;||NEWLINE;
&#x9;&#x9;&#x9;set j = j + 1;
&#x9;&#x9;ELSE -- Only add a format procedure when the column is not a primary key.
&#x9;&#x9;&#x9;IF (genDefaultData = 1) THEN
&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/crudProcedures/getDefaultTestValues(columnList[i].colType,&apos;Update&apos;,defaultTestValue);
&#x9;&#x9;&#x9;&#x9;set s2 = &apos;&#x9;&#x9;set inVector[i].&apos;||word||&apos; = &apos;||defaultTestValue||&apos;;&apos;||NEWLINE;
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;set s2 = &apos;&#x9;&#x9;set inVector[i].&apos;||word||&apos; = null;&apos;||NEWLINE;
&#x9;&#x9;&#x9;END IF;
--&#x9;&#x9;&#x9;call print(s2);
&#x9;&#x9;&#x9;set s = s||s2;
&#x9;&#x9;END IF;
&#x9;&#x9;set i = i + 1;
&#x9;END WHILE;
&#x9;set s = s||NEWLINE;
&#x9;set s = s||&apos;&#x9;&#x9;set inVector = EXTEND(inVector,1);&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;&#x9;set i = i + 1;&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;END WHILE;&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;set inVector = TRUNCATE(inVector,1);&apos;||NEWLINE;
&#x9;set s = s||NEWLINE;
&#x9;set s = s||&apos;&#x9;-- Format the Identifier fields for logging purposes.  9 potential (name,value) fields are available for use.&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;--    name=Enter a field tag in single quotes.  Value=use the varible name.  Cast to varhar(4000) for non-string type fields.&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;call &apos;||bestPracticesRootPath||&apos;/Procedures/crudProcedures/formatLogIdFields(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,LogIdentifier);&apos;||NEWLINE;
&#x9;set s = s||NEWLINE;
&#x9;call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(REPLACE(crudVector[1].procedurePath ||&apos;/&apos;||crudVector[1].procedureName,&apos;//&apos;,&apos;/&apos;), null, resourcePathReserved);
&#x9;set s = s||&apos;&#x9;call &apos;||resourcePathReserved||&apos;(inVector, explicit, LogIdentifier, msgVector);&apos;||NEWLINE;
&#x9;set s = s||NEWLINE;
&#x9;set s = s||&apos;&#x9;-- Process the message vector&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;set i = 1;&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;WHILE (i &lt;= CARDINALITY(msgVector)) DO&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;&#x9;call print(&apos;&apos;TEST RESULTS:  errorCode=&apos;&apos;||msgVector[i].errorCode||&apos;&apos;  type=&apos;&apos;||msgVector[i].messageType||&apos;&apos;  Message=&apos;&apos;||msgVector[i].message);&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;&#x9;set i = i + 1;&apos;||NEWLINE;
&#x9;set s = s||&apos;&#x9;END WHILE;&apos;||NEWLINE;
&#x9;set s = s||&apos;END&apos;||NEWLINE;
&#x9;-----------------------------------------------------------------------------------------
&#x9;-- Update the &quot;test_update_$viewname with the generated SQL script
&#x9;-----------------------------------------------------------------------------------------
&#x9;&#x9;if (s IS NOT NULL AND LENGTH(&apos;|&apos;||s||&apos;|&apos;) &gt; 2) then  --notEmpty
&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/updateSqlScript(fullResourcePath,s,success,createResponse,faultResponse);
&#x9;&#x9;else
&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;Cannot update resource because the script text is empty.&apos;);
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;end if;
&#x9;else
&#x9;&#x9;if (overwrite = 0) then
&#x9;&#x9;&#x9;raise ex value &apos;Cannot create resource because it already exists and overwrite=0.  path=&apos;||NVL(fullResourcePath,&apos;null&apos;);
&#x9;&#x9;end if;
&#x9;&#x9;if (overwrite = 1) then
&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;SKIPPING:  Cannot create resource because it already exists.  path=&apos;||NVL(fullResourcePath,&apos;null&apos;));
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;end if;
&#x9;end if;
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1560603906783</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="p:1:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="p:2:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="p:3:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="references" type="NULL"/>
</metadata>