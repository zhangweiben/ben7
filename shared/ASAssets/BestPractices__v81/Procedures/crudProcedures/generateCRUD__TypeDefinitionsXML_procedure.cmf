<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:e931daa6-7fda-456a-badf-4cdb1c228a1a -->
<metadata name="generateCRUD_TypeDefinitionsXML" path="/shared/ASAssets/BestPractices_v81/Procedures/crudProcedures/generateCRUD_TypeDefinitionsXML" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>&lt;![CDATA[
&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

]]&gt;</annotation>
  <parameters>
    <parameter name="debug" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="overwrite" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="sourceResource" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="startingFolderXML" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="crudVector" direction="IN" nullable="true">
      <datatype name="crudVector" type="ARRAY" maxLength="0">
        <itemDatatype>
          <datatype name="crudGenType" referenceDefinitionSet="/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions" referenceType="crudGenType" type="TREE" refId="257">
            <element name="crudPath">
              <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
            </element>
            <element name="procedurePath">
              <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
            </element>
            <element name="procedureName">
              <datatype name="VARCHAR" type="STRING" maxLength="255"/>
            </element>
            <element name="viewname">
              <datatype name="VARCHAR" type="STRING" maxLength="255"/>
            </element>
            <element name="viewpath">
              <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
            </element>
            <element name="constantspath">
              <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
            </element>
            <element name="typedefprocpath">
              <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
            </element>
            <element name="typedefprocname">
              <datatype name="VARCHAR" type="STRING" maxLength="255"/>
            </element>
            <element name="customcreatepath">
              <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
            </element>
            <element name="customupdatepath">
              <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
            </element>
            <element name="genUniqueIDPath">
              <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
            </element>
            <element name="pkList">
              <datatype name="pkList" type="ARRAY" maxLength="0">
                <itemDatatype>
                  <datatype name="crudGenColumnType" type="TREE" refId="513">
                    <element name="colName">
                      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                    </element>
                    <element name="colType">
                      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                    </element>
                  </datatype>
                </itemDatatype>
              </datatype>
            </element>
            <element name="columnList">
              <datatype name="columnList" type="ARRAY" maxLength="0">
                <itemDatatype>
                  <reference refId="513"/>
                </itemDatatype>
              </datatype>
            </element>
          </datatype>
        </itemDatatype>
      </datatype>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="inConfigParamsXML" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="status" direction="OUT" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/resource/ResourceExists" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="path" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="type" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="version" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceVersion" type="STRING" maxLength="255"/>
      </element>
      <element name="exists" direction="OUT">
        <datatype type="BOOLEAN"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/util/GetProperty" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="property" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="PropertyName" type="STRING" maxLength="255"/>
      </element>
      <element name="result" direction="OUT">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="PropertyValue" type="STRING" maxLength="4096"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/generateDatasourceListXML" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="sourceResource" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="generateLogicalNames" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="layerType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inGroupIds" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inDerivedFilterPath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inStartingFolderExtendedXML" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="ConfigParamsXML" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="resultPipe" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="DataSource">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ProjectFolderName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="GreatGrandParentName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="GrandParentName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ParentName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ContainerName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="PhysicalName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="NativeType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="LogicalName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="LogicalType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="LogicalTransformation">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="LogicalDefinition">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="LogicalPath">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="Duration">
            <datatype type="INTERVAL_DAY" intervalMode="INTERVAL_HOUR_TO_SECOND" intervalPrecision="2" fractionalSecondPrecision="6"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/getNameXML" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inLogicalID" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="inContainerList" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inProjectFolderName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inGreatGrandParentName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inGrandParentName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inParentName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inContainerName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inResourceName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="columnType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="applyReservedWordList" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="ConfigParamsXML" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="containerList" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="logicalName" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="logicalType" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="compositeTransformation" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="annotation" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="status" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/xmlUpdateNodeValue" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="tagName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="updateValue" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inXMLDoc" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="outXMLDoc" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/_ProjectMaintenance/defaultValues" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/log/logDebugMessage" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="moduleName" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="moduleNameType" type="STRING" maxLength="4096"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="messageText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inPath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inWord" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/createAllFolders" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inSourceFolderPath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="257"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/createResource" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceSubType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="createResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="257"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <reference refId="257"/>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/updateSqlScript" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="scripttext" direction="INOUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="createResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="257"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <reference refId="257"/>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/*
&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;CSW Version:&#x9;Reason:
&#x9;02/08/2011&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.2.0&#x9;&#x9;&#x9;Fixed issue with not quoting reserved words - invoke applyReservedListToWord()
&#x9;03/01/2018&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.5&#x9;&#x9;&#x9;Replaced /shared/ASAssets/Utilities/repository/resourceExists with /lib/resource/ResourceExists
&#x9;04/15/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;B.P. 2019.200: Changed custom functions to explicit paths.
&#x9;06/12/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;B.P. 2019.200: Derived the new generateCRUD_OperationsXML from generateCRUD_Operations to eliminate vector usage.

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.
*/
PROCEDURE generateCRUD_TypeDefinitionsXML(
&#x9;IN debug&#x9;&#x9;&#x9;&#x9;CHAR(1),
&#x9;IN overwrite&#x9;&#x9;&#x9;INTEGER,
&#x9;&#x9;-- 0=&quot;FAIL_IF_EXISTS&quot;=do not overwrite the resource.  If the resource exists, raise an exception.
&#x9;&#x9;-- 1=&quot;SKIP_IF_EXISTS&quot;=skip the resource if it exists and continue processing
&#x9;&#x9;-- 2=&quot;OVERWRITE_IF_EXISTS&quot;=do overwrite the resource if it exists.
&#x9;IN sourceResource&#x9;&#x9;LONGVARCHAR, &#x9;
&#x9;&#x9;-- The source folder in CIS to begin searching for views to generate the view list or
&#x9;&#x9;-- a source view (exact path) to generate for.
&#x9;IN startingFolderXML&#x9;LONGVARCHAR,
&#x9;IN crudVector&#x9;&#x9;&#x9;VECTOR(/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions.crudGenType),
&#x9;IN inConfigParamsXML&#x9;LONGVARCHAR,
&#x9;OUT status&#x9;&#x9;&#x9;&#x9;VARCHAR
)
BEGIN
&#x9;DECLARE moduleName&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;generateCRUD_TypeDefinitionsXML&apos;;
&#x9;DECLARE ConfigParamsXML&#x9;&#x9;&#x9;LONGVARCHAR DEFAULT inConfigParamsXML;
&#x9;DECLARE s&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR DEFAULT &apos;&apos;;
    DECLARE curs &#x9;&#x9;&#x9;&#x9;&#x9;CURSOR /shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions.DataSourceRowV2Row;
    DECLARE tableName&#x9;&#x9;&#x9;&#x9;VARCHAR;
    DECLARE logicalName&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE logicalType&#x9;&#x9;&#x9;&#x9;VARCHAR;
    DECLARE transformResourceName &#x9;VARCHAR;
&#x9;DECLARE typedefprocname&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE fullResourcePath&#x9;&#x9;VARCHAR(4000);
    DECLARE beginning&#x9;&#x9;&#x9;&#x9;BOOLEAN DEFAULT TRUE;
    DECLARE description&#x9;&#x9;&#x9;&#x9;VARCHAR(1000) DEFAULT null;
&#x9;DECLARE padAmount&#x9;&#x9;&#x9;&#x9;INTEGER DEFAULT 70;
&#x9;DECLARE padChar&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1) DEFAULT &apos; &apos;;
&#x9;DECLARE parameterException&#x9;&#x9;exception;
&#x9;DECLARE CSW_Version&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE NEWLINE&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.newline;
&#x9;DECLARE utilitiesRootPath&#x9;&#x9;VARCHAR(4000) DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.utilitiesRootPath;
&#x9;DECLARE bestPracticesRootPath&#x9;VARCHAR(4000) DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.bestPracticesRootPath;
&#x9;DECLARE annotation&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE success&#x9;&#x9;&#x9;&#x9;&#x9;BIT;
&#x9;DECLARE createResponse &#x9;&#x9;&#x9;XML;
&#x9;DECLARE faultResponse&#x9;&#x9;&#x9;XML;
&#x9;DECLARE resourceExists&#x9;&#x9;&#x9;BOOLEAN DEFAULT false;
&#x9;DECLARE applyReservedList&#x9;&#x9;BIT;
&#x9;DECLARE word&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE ex&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;EXCEPTION;
&#x9;DECLARE&#x9;containerList&#x9;&#x9;&#x9;LONGVARCHAR;

&#x9;if ( (crudVector[1].typedefprocpath IS NULL OR LENGTH(&apos;|&apos;||crudVector[1].typedefprocpath||&apos;|&apos;) = 2) or  --Empty
&#x9;&#x9; (crudVector[1].typedefprocname IS NULL OR LENGTH(&apos;|&apos;||crudVector[1].typedefprocname||&apos;|&apos;) = 2) ) then  --Empty
&#x9;&#x9;RAISE parameterException VALUE &apos;Parameter &quot;Type Definition Path&quot; or &quot;Procedure Name&quot; must not be null or blank.&apos;;
&#x9;end if;

&#x9;-- Force the case rule to be original no matter what the user set
&#x9;CALL /shared/ASAssets/BestPractices_v81/Procedures/xmlUpdateNodeValue(&apos;useAliasRule&apos;, &apos;0&apos;, ConfigParamsXML, ConfigParamsXML);

&#x9;set fullResourcePath = REPLACE(crudVector[1].typedefprocpath ||&apos;/&apos;||crudVector[1].typedefprocname,&apos;//&apos;,&apos;/&apos;);
&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;fullResourcePath=&apos;||fullResourcePath);
&#x9;end if;

&#x9;/********** Create all of the sub-folders for CRUD operations: /Definitions **********/
&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;call /lib/resource/ResourceExists(crudVector[1].typedefprocpath, &apos;CONTAINER&apos;, null, resourceExists);
&#x9;&#x9;if (overwrite = 2 or NOT resourceExists) then
&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/createAllFolders(crudVector[1].typedefprocpath, success, faultResponse);
&#x9;&#x9;END IF;
&#x9;EXCEPTION
&#x9;&#x9;ELSE raise ex value cast(CURRENT_EXCEPTION.TRACE as longvarchar);
&#x9;END;


&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;call /lib/resource/ResourceExists(fullResourcePath, &apos;PROCEDURE&apos;, null, resourceExists);
&#x9;&#x9;if (NOT resourceExists) then
&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/createResource(crudVector[1].typedefprocpath, crudVector[1].typedefprocname, &apos;PROCEDURE&apos;, &apos;SQL_SCRIPT_PROCEDURE&apos;, success, createResponse, faultResponse);
&#x9;&#x9;else
&#x9;&#x9;&#x9;set resourceExists = true;
&#x9;&#x9;end if;
&#x9;EXCEPTION
&#x9;&#x9;ELSE raise ex value cast(CURRENT_EXCEPTION.TRACE as longvarchar);
&#x9;END;

&#x9;-- Apply the reserved path to the procedure name
&#x9;call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(crudVector[1].typedefprocname,null,typedefprocname);

&#x9;if ((not resourceExists) or (resourceExists and overwrite = 2)) then

&#x9;&#x9;set s = s||&apos;/* &apos;||typedefprocname||&apos;:&apos; || NEWLINE;
&#x9;&#x9;set s = s||&apos;&#x9;*** GENERATED PROCEDURE --- DO NOT MODIFY ***&apos; || NEWLINE;
&#x9;&#x9;set s = s||NEWLINE;
&#x9;&#x9;set s = s||&apos;&#x9;This procedure contains the &quot;Type Definitions&quot; for use by the Read/Write CRUD procedures. &apos;||NEWLINE;
&#x9;&#x9;set s = s||&apos;&#x9;According to the Best Practices, Type Definitions should be created against the layer of views that&apos;||NEWLINE;
&#x9;&#x9;set s = s||&apos;&#x9;will be used to execute Create, RetrievePK, Update and Delete operations.  Generally speaking,&apos;||NEWLINE;
&#x9;&#x9;set s = s||&apos;&#x9;CRUD operations would be created against the top-level view, generally the Mapping Layer, Client Views.&apos;||NEWLINE;
&#x9;&#x9;set s = s||&apos;&#x9;This procedure gets generated by either generateCRUDOperations() or generateTypeDefinitions().&apos;||NEWLINE;
&#x9;&#x9;set s = s||NEWLINE;
&#x9;&#x9;set s = s||&apos;&#x9;Warning: If either &apos;&apos;generateCRUDOperations()&apos;&apos; or &apos;&apos;generateTypeDefinitions()&apos;&apos; is executed again,&apos;||NEWLINE;
&#x9;&#x9;set s = s||&apos;&#x9;&#x9;&#x9; this &quot;Type Definition&quot; procedures will be overwritten.   It is advisable not to modify this procedure.&apos;||NEWLINE;
&#x9;&#x9;set s = s||NEWLINE;
&#x9;&#x9;set s = s||&apos;&#x9;Input: none&apos;||NEWLINE;
&#x9;&#x9;set s = s||&apos;&#x9;Output: none&apos;||NEWLINE;
&#x9;&#x9;set s = s||NEWLINE;
&#x9;&#x9;set s = s||&apos;&#x9;Author:      Generated from Composite Best Practices generation scripts&apos;||NEWLINE;
&#x9;&#x9;set s = s||&apos;&#x9;Date:        &apos;||CURRENT_DATE||NEWLINE;
&#x9;&#x9;call /lib/util/GetProperty(&apos;SERVER_VERSION_NUMBER&apos;,CSW_Version);
&#x9;&#x9;set s = s||&apos;&#x9;CSW Version: &apos;||NVL(CSW_Version,&apos;null&apos;)||NEWLINE;
&#x9;&#x9;set s = s||&apos;*/&apos;||NEWLINE;  
&#x9;&#x9;set s = s||&apos;PROCEDURE &apos;||typedefprocname||&apos;()&apos; || NEWLINE;
&#x9;&#x9;set s = s||&apos;BEGIN&apos; || NEWLINE;
&#x9;&#x9;set s = s||&apos;-- Generated Type Definitions begin here:&apos; || NEWLINE;
&#x9;&#x9;set s = s||&apos;--   Source Folder: &apos; ||sourceResource|| NEWLINE;
&#x9;&#x9;set s = s||NEWLINE;

&#x9;&#x9;-- Select the &quot;Sourcce&quot; folder
&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;generateDatasourceList(null, 1, null, null, null, startingFolderXML, ConfigParamsVector)&apos;);
&#x9;&#x9;end if;
&#x9;&#x9;OPEN curs FOR 
&#x9;&#x9;&#x9;SELECT *
&#x9;&#x9;&#x9;FROM /shared/ASAssets/BestPractices_v81/Procedures/generateDatasourceListXML(null, 1, null, null, null, startingFolderXML, ConfigParamsXML);
&#x9;/*&#x9;&#x9;DECLARE PUBLIC TYPE DataSourceRowV2Row ROW (
&#x9;&#x9;&#x9;&#x9;DataSource &#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(255), -- The name of the data source in composite (data lineage-used resources)
&#x9;&#x9;&#x9;&#x9;Published&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(255), -- Indicates whether this element is published in composite (data lineage-dependent resources)
&#x9;&#x9;&#x9;&#x9;ParentName &#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(255), -- The name of the parent container - parent to the parent (a.k.a. grand parent)
&#x9;&#x9;&#x9;&#x9;ContainerName &#x9;&#x9;&#x9;&#x9;VARCHAR(255), -- The name of the container - parent to the resource
&#x9;&#x9;&#x9;&#x9;PhysicalName&#x9;&#x9;&#x9;&#x9;VARCHAR(255), -- The physical column name (a.k.a. source column name)
&#x9;&#x9;&#x9;&#x9;NativeType&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(255), -- The logical column name (a.k.a. table/view alias)
&#x9;&#x9;&#x9;&#x9;LogicalName&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(255), -- The logical column name (a.k.a. table/view alias)
&#x9;&#x9;&#x9;&#x9;LogicalType &#x9;&#x9;&#x9;&#x9;VARCHAR(255), -- The logical column type
&#x9;&#x9;&#x9;&#x9;LogicalTransformation&#x9;&#x9;LONGVARCHAR,  -- The logical column transformation excluding outer cast statement
&#x9;&#x9;&#x9;&#x9;LogicalDefinition&#x9;&#x9;&#x9;LONGVARCHAR,  -- The logical resource definition (a.k.a. view/table/column annotation)
&#x9;&#x9;&#x9;&#x9;LogicalPath&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR   -- The logical resource (view) path
&#x9;&#x9;&#x9;)
&#x9;*/
&#x9;&#x9;FOR r as curs DO
&#x9;&#x9;&#x9;if ((r.physicalName IS NULL OR LENGTH(&apos;|&apos;||r.physicalName||&apos;|&apos;) = 2) and r.DataSource != &apos;FINISHED&apos;) then  --Empty
&#x9;&#x9;&#x9;&#x9;raise ex value &apos;ERROR: Views with derived columns are not permitted to perform CRUD operations. Logical Path=&apos;||NVL(r.LogicalPath,&apos;null&apos;);
&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;if (r.logicalName IS NOT NULL AND LENGTH(&apos;|&apos;||r.logicalName||&apos;|&apos;) &gt; 2) then  --notEmpty
&#x9;&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,NVL(r.logicalName,&apos;null&apos;)  || &apos; &apos; || NVL(r.logicalType,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;-- Beginning
&#x9;&#x9;&#x9;&#x9;if ((r.logicalType = &apos;TABLE&apos;) or (r.logicalType IS NULL OR LENGTH(&apos;|&apos;||r.logicalType||&apos;|&apos;) = 2)) then  --Empty
&#x9;&#x9;&#x9;&#x9;&#x9;if (description is not null) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set description = REPLACE(description,&apos;,&apos;,&apos;&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set s = s || description || NEWLINE;
&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;-- End&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;IF (NOT beginning) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set s = s||&#x9;&apos;    );&apos; || NEWLINE;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;set applyReservedList = 0;
&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/getNameXML(&apos;T&apos;, containerList, r.projectFolderName, r.greatGrandParentName, r.grandParentName, r.parentName, r.containerName, r.logicalName, null, applyReservedList, ConfigParamsXML, containerList, logicalName, logicalType, transformResourceName, annotation, status);
&#x9;&#x9;&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;result::&apos;||NVL(logicalName,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord(logicalName || &apos;_Type&apos;, null, word);
&#x9;&#x9;&#x9;&#x9;&#x9;set s = s||&apos;    DECLARE PUBLIC TYPE &apos; || word||&apos; ROW (&apos; || NEWLINE;
&#x9;&#x9;&#x9;&#x9;&#x9;set description = null;
&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;if (description is not null) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set s = s ||description || NEWLINE;
&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;-- Middle
&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord(r.logicalName, null, word);
&#x9;&#x9;&#x9;&#x9;&#x9;set description = &apos;        &apos;||RPAD(word,padAmount,padChar) || &apos; &apos; ||r.logicalType || &apos;,&apos;;
&#x9;&#x9;&#x9;&#x9;END IF;&#x9;
&#x9;&#x9;&#x9;&#x9;set beginning = false;
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;END FOR;

&#x9;&#x9;-- Finish up the description text for the end
&#x9;&#x9;if (description is not null) then
&#x9;&#x9;&#x9;set description = REPLACE(description,&apos;,&apos;,&apos;&apos;);
&#x9;&#x9;&#x9;set s = s||description || NEWLINE;
&#x9;&#x9;&#x9;set s = s||&apos;    );&apos; || NEWLINE;
&#x9;&#x9;end if;
&#x9;&#x9;set s = s||&apos;END&apos; || NEWLINE;
&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;scriptText=[&apos; || NVL(s,&apos;null&apos;)||&apos;]&apos;);

&#x9;-----------------------------------------------------------------------------------------
&#x9;-- Update the &quot;type definition procedure&quot; with the generated SQL script
&#x9;-----------------------------------------------------------------------------------------
&#x9;  BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;if (s IS NOT NULL AND LENGTH(&apos;|&apos;||s||&apos;|&apos;) &gt; 2) then  --notEmpty
&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/updateSqlScript(fullResourcePath,s,success,createResponse,faultResponse);
&#x9;&#x9;&#x9;set status = &apos;GENERATED&apos;;
&#x9;&#x9;else
&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;Cannot update resource because the script text is empty.&apos;);
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;set status = &apos;ERROR&apos;;
&#x9;&#x9;end if;
&#x9;  EXCEPTION
&#x9;&#x9;ELSE raise ex value cast(CURRENT_EXCEPTION.TRACE as longvarchar);
&#x9;  END;
&#x9;else
&#x9;&#x9;if (overwrite = 0) then
&#x9;&#x9;&#x9;raise ex value &apos;Cannot create resource because it already exists and overwrite=0.  path=&apos;||NVL(fullResourcePath,&apos;null&apos;);
&#x9;&#x9;end if;
&#x9;&#x9;if (overwrite = 1) then
&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;SKIPPING:  Cannot create resource because it already exists.  path=&apos;||NVL(fullResourcePath,&apos;null&apos;));
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;set status = &apos;SKIPPED&apos;;
&#x9;&#x9;end if;
&#x9;end if;

END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1564662969208</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="p:3:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="p:4:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="p:5:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="references" type="NULL"/>
</metadata>