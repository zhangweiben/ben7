<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:e931daa6-7fda-456a-badf-4cdb1c228a1a -->
<metadata name="formatString" path="/shared/ASAssets/BestPractices_v81/Procedures/crudProcedures/format/formatString" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>&lt;![CDATA[
&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

]]&gt;</annotation>
  <parameters>
    <parameter name="inValue" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="columnName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="inOperator" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="explicit" direction="IN" nullable="true">
      <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
    </parameter>
    <parameter name="formatType" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="formatClause" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="outFormatClause" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/shared/ASAssets/Utilities/string/findString" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="searchString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="stringToSearch" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="direction" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="pos" direction="OUT">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/fixQuotes" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inMessage" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="outMessage" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/*
&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.
*/
PROCEDURE formatString(
&#x9;IN inValue&#x9;&#x9;&#x9;&#x9;LONGVARCHAR,-- column value
&#x9;IN columnName&#x9;&#x9;&#x9;VARCHAR,&#x9;-- column name 
&#x9;IN inOperator&#x9;&#x9;&#x9;VARCHAR,&#x9;-- operator such as =,&lt;,&gt;,&lt;&gt;,&gt;=,&lt;=,is null, is not null,like
&#x9;IN explicit&#x9;&#x9;&#x9;&#x9;BIT,&#x9;&#x9;-- 0=no explicit null check, 1=explicit null check
&#x9;IN formatType&#x9;&#x9;&#x9;CHAR(1), &#x9;-- U=update clause, W=where clause
&#x9;IN formatClause&#x9;&#x9;&#x9;LONGVARCHAR,-- update or where clause to be formatted
&#x9;OUT outFormatClause &#x9;LONGVARCHAR -- formatted update or where clause
)
BEGIN
&#x9;DECLARE preFormat&#x9;&#x9;&#x9;VARCHAR(6) DEFAULT &apos;&apos;;
&#x9;DECLARE begLen, endLen, len&#x9;INTEGER DEFAULT 0;
&#x9;DECLARE begFormatClause &#x9;LONGVARCHAR DEFAULT &apos;&apos;;
&#x9;DECLARE endFormatClause &#x9;LONGVARCHAR DEFAULT &apos;&apos;;
&#x9;DECLARE tempFormatClause&#x9;LONGVARCHAR;
&#x9;DECLARE formatException&#x9;&#x9;EXCEPTION;
&#x9;DECLARE opVector&#x9;&#x9;&#x9;VECTOR(VARCHAR) DEFAULT VECTOR[&apos;=&apos;,&apos;&lt;&apos;,&apos;&gt;&apos;,&apos;&lt;=&apos;,&apos;&gt;=&apos;,&apos;&lt;&gt;&apos;,&apos;IN&apos;,&apos;LIKE&apos;,&apos;IS NULL&apos;,&apos;IS NOT NULL&apos;];
&#x9;DECLARE operator&#x9;&#x9;&#x9;VARCHAR DEFAULT UPPER(TRIM(inOperator));
&#x9;DECLARE i&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER DEFAULT 1;
&#x9;DECLARE formatSpecificString LONGVARCHAR;

&#x9;-- This is the only specific code for this procedure besides the inValue data type
&#x9;CALL /shared/ASAssets/Utilities/string/fixQuotes(inValue, formatSpecificString);
&#x9;set formatSpecificString = &apos;&apos;&apos;&apos;||formatSpecificString||&apos;&apos;&apos;&apos;;

&#x9;-- Validate the operator
&#x9;opLoop:
&#x9;WHILE (i &lt;= CARDINALITY(opVector)) DO
&#x9;&#x9;if (operator = opVector[i]) then
&#x9;&#x9;&#x9;set len = 1;
&#x9;&#x9;&#x9;leave opLoop;
&#x9;&#x9;END IF;
&#x9;&#x9;set i = i + 1;
&#x9;END WHILE;
&#x9;IF (len = 0) THEN
&#x9;&#x9;RAISE formatException value &apos;FORMAT EXECPTION: operator is not valid (&apos;||NVL(operator,&apos;null&apos;)||&apos;).&apos;;
&#x9;END IF;
&#x9;-- Validate the formatType
&#x9;IF (UPPER(formatType) &lt;&gt; &apos;U&apos; and UPPER(formatType) &lt;&gt; &apos;W&apos;) THEN
&#x9;&#x9;RAISE formatException value &apos;FORMAT EXECPTION: format type can only be &quot;U&quot; or &quot;W&quot; (&apos;||NVL(formatType,&apos;null&apos;)||&apos;).&apos;;
&#x9;END IF;
&#x9;-- Validate that the only valid operator with a formatType=&quot;U&quot; is an equal.  A WHERE clause can have other valid operators.
&#x9;IF (UPPER(formatType) = &apos;U&apos; and UPPER(operator) &lt;&gt; &apos;=&apos;) THEN
&#x9;&#x9;RAISE formatException value &apos;FORMAT EXECPTION: operator mismatch with format type.  Operator must be &quot;=&quot; when format type=&quot;U&quot; (&apos;||NVL(operator,&apos;null&apos;)||&apos;, &apos;||NVL(formatType,&apos;null&apos;)||&apos;).&apos;;
&#x9;END IF;
&#x9;-- Initialize the out format clause
&#x9;set outFormatClause = &apos;&apos;;
&#x9;IF (formatClause is not null) THEN
&#x9;&#x9;set outFormatClause = TRIM(formatClause);
&#x9;END IF;
&#x9;-- Determine what pre-formatting should be applied to the update or where clause
&#x9;IF (UPPER(formatType) = &apos;U&apos;) THEN
&#x9;&#x9;set preFormat = &apos;,&apos;; &#x9;-- (U):Format type is for an update clause so separate statements with a comma and a space
&#x9;ELSE
&#x9;&#x9;set preFormat = &apos; AND&apos;;-- (W):Format type is for a where clause so separate statements with a space only
&#x9;END IF;

/* Examples of formatClause and the position of the columnName and lengths:
&#x9;Scenarios 1-7 are shown below
1            1315        25        35
col1 = &apos;xxxx&apos;, col2 = &apos;xx&apos;, col3 = 1 (1) found in the middle with a separator before and after
1            1315        25
col1 = &apos;xxxx&apos;, col2 = &apos;xx&apos;&#x9;&#x9;&#x9; (2) found at beginning with a separator, (3) found at end with no separator following
1           12
col1 = &apos;xxxx&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; (4) found at beginning with no separator following, (5) not found at all
0
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; (6) null or blank is passed in
(7) when explicit=0 and inValue is null and the column exists in the original formatClause 
&#x9;then the column statement and separator must be removed from the format clause
*/
&#x9;-- Locate the beginning of the column statement
&#x9;set begLen = POSITION(columnName||&apos; &apos; IN outFormatClause);
&#x9;-- only look for the separator end length if the column was found in the first place
&#x9;IF (begLen &gt; 0) THEN
&#x9;&#x9;-- Locate the end of the column statement starting at where the column is found
&#x9;&#x9;set tempFormatClause = SUBSTRING(outFormatClause,begLen,LENGTH(outFormatClause)-begLen+1);
&#x9;&#x9;set endLen = POSITION(preFormat IN  tempFormatClause);
&#x9;&#x9;IF (endLen = 0) THEN
&#x9;&#x9;&#x9;-- Only extract the beginning format clause if it is not the column we are updating.
&#x9;&#x9;&#x9;IF (begLen &gt; 1) THEN
&#x9;&#x9;&#x9;&#x9;set len = begLen-1;
&#x9;&#x9;&#x9;&#x9;set begFormatClause = SUBSTRING(outFormatClause,1,len);
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;-- Capture the beginning format clause only if there is no column match at the beginning.
&#x9;&#x9;&#x9;IF (begLen &gt; 1) THEN
&#x9;&#x9;&#x9;&#x9;set len = begLen-1;
&#x9;&#x9;&#x9;&#x9;set begFormatClause = SUBSTRING(outFormatClause,1,len);
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;set len = LENGTH(tempFormatClause)-endLen+1;
&#x9;&#x9;&#x9;set endFormatClause = SUBSTRING(tempFormatClause,endLen,len);
&#x9;&#x9;END IF;
&#x9;&#x9;-- Take care of scenario (7) when the column and separator are removed 
&#x9;&#x9;-- (7) when explicit=0 and inValue is null and the column exists in the original formatClause 
&#x9;&#x9;-- then the column statement and separator must be removed from the format clause
&#x9;&#x9;IF ( (explicit = 0) and (inValue is null) ) THEN
&#x9;&#x9;&#x9;IF (endLen &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;set endFormatClause = TRIM(endFormatClause);
&#x9;&#x9;&#x9;&#x9;IF (POSITION(TRIM(preFormat) IN endFormatClause) = 1) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;set endFormatClause = SUBSTRING(endFormatClause,LENGTH(TRIM(preFormat))+1,LENGTH(endFormatClause));
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;SET begFormatClause = TRIM(begFormatClause);
&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/string/findString(preFormat, begFormatClause, &apos;R&apos;, len);
&#x9;&#x9;&#x9;&#x9;IF (len &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;set begFormatClause = SUBSTRING(begFormatClause,1,len-1);
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END IF;
&#x9;&#x9;set outFormatClause = begFormatClause;
&#x9;END IF;

&#x9;-- Explicitly check for null values and include those columns in the format clause
&#x9;IF (explicit = 1) THEN
&#x9;&#x9;-- if not empty then add pre-formatting text
&#x9;&#x9;IF (outFormatClause IS NOT NULL AND LENGTH(&apos;|&apos;||outFormatClause||&apos;|&apos;) &gt; 2 and begLen = 0) THEN
&#x9;&#x9;&#x9;set outFormatClause = outFormatClause || preFormat||&apos; &apos;; 
&#x9;&#x9;END IF;
&#x9;&#x9;IF (operator = &apos;IS NULL&apos; or operator = &apos;IS NOT NULL&apos;) THEN
&#x9;&#x9;&#x9;SET outFormatClause = outFormatClause || columnName||&apos; &apos; || operator;
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;IF (inValue is null) THEN
&#x9;&#x9;&#x9;&#x9;IF (formatType = &apos;U&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;SET outFormatClause = outFormatClause || columnName||&apos; &apos; || operator ||&apos; NULL&apos;;
&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;SET outFormatClause = outFormatClause || columnName||&apos; IS NULL&apos;;
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;SET outFormatClause = outFormatClause || columnName||&apos; &apos; || operator ||&apos; &apos;||formatSpecificString;
&#x9;&#x9;&#x9;END IF; 
&#x9;&#x9;END IF;
&#x9;ELSE -- Don&apos;t include columns with null values since explicit=0
&#x9;&#x9;IF (inValue is not null) THEN
&#x9;&#x9;&#x9;IF (outFormatClause IS NOT NULL AND LENGTH(&apos;|&apos;||outFormatClause||&apos;|&apos;) &gt; 2 and begLen = 0) THEN
&#x9;&#x9;&#x9;&#x9;set outFormatClause = outFormatClause || preFormat||&apos; &apos;; 
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;IF (operator = &apos;IS NULL&apos; or operator = &apos;IS NOT NULL&apos;) THEN
&#x9;&#x9;&#x9;&#x9;SET outFormatClause = outFormatClause || columnName||&apos; &apos; || operator;
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;SET outFormatClause = outFormatClause || columnName||&apos; &apos; || operator ||&apos; &apos;||formatSpecificString;
&#x9;&#x9;&#x9;END IF; 
&#x9;&#x9;END IF;
&#x9;END IF;
&#x9;IF (begLen &gt; 0) THEN
&#x9;&#x9;set outFormatClause = outFormatClause || endFormatClause;
&#x9;END IF;
&#x9;set outFormatClause = TRIM(outFormatClause);
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1554520731428</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
</metadata>