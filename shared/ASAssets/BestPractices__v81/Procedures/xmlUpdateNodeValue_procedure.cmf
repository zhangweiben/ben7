<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:9a66723c-3693-47f1-a1f0-d7811996f9d5 -->
<metadata name="xmlUpdateNodeValue" path="/shared/ASAssets/BestPractices_v81/Procedures/xmlUpdateNodeValue" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <parameters>
    <parameter name="tagName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="updateValue" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="inXMLDoc" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="outXMLDoc" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <attribute name="Script" type="STRING">/* xmlUpdateNodeValue:

&#x9;This procedure is used to extract the value of a node from a simple XML document with only 1 row (instance).
&#x9;This works faster than using XSLT.

&#x9;Input:
&#x9;&#x9;tagName&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;- The name of the unique tag to extract the value for.  Do not include xml brackets &lt;,&gt;.
&#x9;&#x9;&#x9;e.g.  mynode
&#x9;&#x9;updateValue&#x9;&#x9;LONGVARCHAR,&#x9;- The new value to update.  It overwrites the old value.  If input is null then set the word null.
&#x9;&#x9;&#x9;e.g. my new value
&#x9;&#x9;inXMLDoc&#x9;&#x9;LONGVARCHAR,&#x9;- The simple 1 instance XML document.
&#x9;&#x9;&#x9;e.g.  &lt;myxml&gt;&lt;mynode&gt;myvalue&lt;/mynode&gt;&lt;/myxml&gt;

&#x9;Output:
&#x9;&#x9;outXMLDoc&#x9;&#x9;&#x9;LONGVARCHAR - the modified xmlDoc from the input.  If the tagname is not found, the original input XML doc is returned.

&#x9;Exceptions:  none

&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;CSW Version:&#x9;Reason:
&#x9;06/12/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;B.P. 2019.200: Added new to extract simple XML document nodes.

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

*/
PROCEDURE xmlUpdateNodeValue(
&#x9;IN tagName&#x9;&#x9;&#x9;VARCHAR,
&#x9;IN updateValue&#x9;&#x9;LONGVARCHAR,
&#x9;IN inXMLDoc&#x9;&#x9;&#x9;LONGVARCHAR,
&#x9;OUT outXMLDoc&#x9;&#x9;LONGVARCHAR
)
BEGIN
&#x9;DECLARE tagNameBeg&#x9;&#x9;VARCHAR;
&#x9;DECLARE tagNameEnd&#x9;&#x9;VARCHAR;
&#x9;DECLARE tagNameNull&#x9;&#x9;VARCHAR;
&#x9;DECLARE pos1, pos2, len&#x9;INTEGER;
&#x9;DECLARE modifiedNode&#x9;LONGVARCHAR;

&#x9;SET outXMLDoc = inXMLDoc;
&#x9;SET tagNameBeg = &apos;&lt;&apos;||tagName||&apos;&gt;&apos;;
&#x9;SET tagNameEnd = &apos;&lt;/&apos;||tagName||&apos;&gt;&apos;;
&#x9;SET tagNameNull = &apos;&lt;&apos;||tagName||&apos;/&gt;&apos;;
&#x9;
&#x9;SET pos1 = INSTR(inXMLDoc, tagNameBeg);
&#x9;SET pos2 = INSTR(inXMLDoc, tagNameEnd);
&#x9;IF (pos1 = 0 AND pos2 = 0) THEN
&#x9;&#x9;SET pos1 = INSTR(inXMLDoc, tagNameNull);
&#x9;&#x9;SET len = LENGTH(tagNameNull);
&#x9;&#x9;IF (pos1 &gt; 0) THEN
&#x9;&#x9;&#x9;IF (updateValue IS NULL) THEN
&#x9;&#x9;&#x9;&#x9;SET outXMLDoc = SUBSTRING(inXMLDoc, 1, pos1-1) || tagNameNull || SUBSTRING(inXMLDoc, pos1+len);
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;SET outXMLDoc = SUBSTRING(inXMLDoc, 1, pos1-1) || tagNameBeg || updateValue || tagNameEnd || SUBSTRING(inXMLDoc, pos1+len);
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END IF;
&#x9;ELSE
&#x9;&#x9;SET len = LENGTH(tagNameEnd);
&#x9;&#x9;IF (updateValue IS NULL) THEN
&#x9;&#x9;&#x9;SET outXMLDoc = SUBSTRING(inXMLDoc, 1, pos1-1) || tagNameNull || SUBSTRING(inXMLDoc, pos2+len);
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;SET outXMLDoc = SUBSTRING(inXMLDoc, 1, pos1-1) || tagNameBeg || updateValue || tagNameEnd || SUBSTRING(inXMLDoc, pos2+len);
&#x9;&#x9;END IF;
&#x9;END IF;
END</attribute>
  <attribute name="creationDate" type="LONG">1560363272187</attribute>
  <attribute name="creatorUserDomain" type="STRING">composite</attribute>
  <attribute name="creatorUserId" type="INTEGER">-1973</attribute>
  <attribute name="creatorUserName" type="STRING">admin</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1560364981915</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserId" type="INTEGER">-1973</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
  <attribute name="resourceModifiedDateOnSourceCISSite" type="LONG">1560363272187</attribute>
</metadata>