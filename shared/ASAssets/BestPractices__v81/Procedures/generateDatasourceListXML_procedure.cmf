<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:9a66723c-3693-47f1-a1f0-d7811996f9d5 -->
<metadata name="generateDatasourceListXML" path="/shared/ASAssets/BestPractices_v81/Procedures/generateDatasourceListXML" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>&lt;![CDATA[
&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

]]&gt;</annotation>
  <parameters>
    <parameter name="sourceResource" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="generateLogicalNames" direction="IN" nullable="true">
      <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
    </parameter>
    <parameter name="layerType" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="inGroupIds" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="inDerivedFilterPath" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="inStartingFolderExtendedXML" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="ConfigParamsXML" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="resultPipe" direction="OUT" nullable="true">
      <datatype name="DataSourceRowV2Row" type="TABLE" refId="256">
        <element name="DataSource">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="ProjectFolderName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="GreatGrandParentName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="GrandParentName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="ParentName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="ContainerName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="PhysicalName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="NativeType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="LogicalName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="LogicalType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="LogicalTransformation">
          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
        </element>
        <element name="LogicalDefinition">
          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
        </element>
        <element name="LogicalPath">
          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
        </element>
        <element name="Duration">
          <datatype name="IntervalDay" type="INTERVAL_DAY" intervalMode="INTERVAL_HOUR_TO_SECOND" intervalPrecision="2" fractionalSecondPrecision="6"/>
        </element>
      </datatype>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/resource/ResourceExists" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="path" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="type" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="version" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceVersion" type="STRING" maxLength="255"/>
      </element>
      <element name="exists" direction="OUT">
        <datatype type="BOOLEAN"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/util/GetEnvironment" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="variableName" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="PropertyName" type="STRING" maxLength="255"/>
      </element>
      <element name="result" direction="OUT">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="PropertyValue" type="STRING" maxLength="4096"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/checkDuplicateColumn" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inColumnListStr" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inNewColumnListStr" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inColumnAliasOrName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="columnListStrOut" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="columnAliasOrName" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="dropColumn" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/getDataSourceName" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="resourcePath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="cacheStorageDataSourcePath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="excludePathsList" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="datasourceAncestor" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inIgnoreResourceDoesNotExist" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="datasourceName" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="datasourcePath" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/getDefaultValuesXML" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="scriptsPath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="defaultValuesXML" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/getNameXML" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inLogicalID" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="inContainerList" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inProjectFolderName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inGreatGrandParentName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inGrandParentName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inParentName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inContainerName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inResourceName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="columnType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="applyReservedWordList" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="ConfigParamsXML" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="containerList" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="logicalName" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="logicalType" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="compositeTransformation" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="annotation" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="status" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/isDerivedPathMatch" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="exactMatch" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="derivedFilterPath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="sourcepath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="resourcePath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="excludePathsList" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/isUnsupportedColumnType" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="columnType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="isUnsupported" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/retrieveName/replaceSymbol" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="direction" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="inReplaceStr" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="outReplaceStr" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/getSqlScriptComplexColumns" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="resourcePath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="subType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="columnAliasVect" direction="OUT">
        <datatype type="ARRAY" maxLength="0">
          <itemDatatype>
            <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
          </itemDatatype>
        </datatype>
      </element>
      <element name="resultVector" direction="OUT">
        <datatype type="ARRAY" maxLength="0">
          <itemDatatype>
            <datatype name="SqlScriptV2Row" referenceDefinitionSet="/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions" referenceType="SqlScriptV2Row" type="TREE" refId="257">
              <element name="derivedColumn">
                <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
              </element>
              <element name="sourceAlias">
                <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
              </element>
              <element name="sourceColumn">
                <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
              </element>
              <element name="columnAlias">
                <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
              </element>
              <element name="columnType">
                <datatype name="VARCHAR" type="STRING" maxLength="4096"/>
              </element>
              <element name="sourceExpression">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="sourceExpressionNoCast">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="sourceColumnList">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="functionList">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="sourcePath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
            </datatype>
          </itemDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedList" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="codingListType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="codingList" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedString" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inCodingType" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="inEncodingActions" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="codingList" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inModuleNameInvoking" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inDebug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="inStringName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="outString" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="tagName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inXMLDoc" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="resultValue" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/_ProjectMaintenance/defaultValues" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/getUtilitiesVersion" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="version" direction="OUT">
        <datatype type="FLOAT" minValue="2.2250738585072014E-308" maxValue="1.7976931348623157E308"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/log/logDebugMessage" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="moduleName" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="moduleNameType" type="STRING" maxLength="4096"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="messageText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inPath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inWord" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getAncestorResources" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="resourceName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resourcePath">
            <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
          </element>
          <element name="resourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="id">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="changeid">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="ownerDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ownerName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="impactLevel">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="childCount">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="dataSourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getBasicResourceCursor" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceCursor" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="name">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="path">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="type">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="id">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="changeid">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="version">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="introspectState">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ownerDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ownerName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="impactLevel">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="impactMessage">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="annotation">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="explicitlyDesigned">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="tableType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="sqlText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="scriptText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="childCount">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="dataSourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getBasicResourceCursor_PROCEDURE_CURSOR" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="fullResourcePath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="cursorNum" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="resourceCursor" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="resourceName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resourcePath">
            <datatype type="STRING" maxLength="4096"/>
          </element>
          <element name="resourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="annotation">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="tableType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="sqlText">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="columnName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="columnType">
            <datatype type="STRING" maxLength="4096"/>
          </element>
          <element name="columnBaseType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="dataType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="paramDirection">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="nativeBaseType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="nativeType">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getBasicResourceCursor_SQL_TABLE" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="fullResourcePath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceCursor" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="resourceName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resourcePath">
            <datatype type="STRING" maxLength="1024"/>
          </element>
          <element name="resourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="annotation">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="explicitlyDesigned">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="tableType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="sqlText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="proprietaryModel">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="columnName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="columnType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="nativeBaseType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="nativeType">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getResourceCacheConfigCursor" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="inType" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="configured">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="cachePolicy">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="storageMode">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="storageDataSourcePath">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="storageTargetName">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="storagePath">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="storageType">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="refreshMode">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="scheduleMode">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="startTime">
            <datatype type="DATETIME"/>
          </element>
          <element name="fromTimeInADay">
            <datatype type="INTEGER"/>
          </element>
          <element name="endTimeInADay">
            <datatype type="INTEGER"/>
          </element>
          <element name="recurringDay">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="interval">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="period">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="count">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="isCluster">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="expirationPeriod">
            <datatype type="INTEGER"/>
          </element>
          <element name="clearRule">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="allOrNothing">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="incremental">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="storageBucketMode">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="storageBucketCatalog">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="storageBucketSchema">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="storageBucketPrefix">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="storageBucketNumBuckets">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="storageDropCreateIdx">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="firstRefreshCallback">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="secondRefreshCallback">
            <datatype type="STRING" maxLength="32768"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getResourceListRecursive" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="resourceTreeList" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="name">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resPath">
            <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
          </element>
          <element name="resType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="creationDate">
            <datatype type="DATETIME"/>
          </element>
          <element name="creationDateBigint">
            <datatype type="INTEGER"/>
          </element>
          <element name="creatorUserDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="creatorUserName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="lastModifiedDate">
            <datatype type="DATETIME"/>
          </element>
          <element name="lastModifiedDateBigint">
            <datatype type="INTEGER"/>
          </element>
          <element name="lastModifiedUserDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="lastModifiedUserName">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getUsedResourcesCursor" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="usedResCursor" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="resourceName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resourcePath">
            <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
          </element>
          <element name="resourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="id">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="tableType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="explicitlyDesigned">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="sqlText">
            <datatype type="STRING" maxLength="32768"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/lowerLevelProcedures/getBasicResourceXML" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="257"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/returnFolderNameAndFolderPath" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="mode" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="folderName" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="folderPath" direction="OUT">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/TextUtils/RegexPosition" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="Input Text" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Regular Expression" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Occurrence" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/extractBiDelimitedText" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="searchTerm" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="openingDelim" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="closingDelim" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inOccurrence" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inTrimText" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inCaseSensitive" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/extractDelimitedText" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inputString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="delimiter" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="occurrence" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="reverseInputText" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="reverseOutput" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="trimText" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="includeDelimiter" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="object">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/extractTextList" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="textList" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="separator" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="preserveDoubleQuotes" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="preserveSingleQuotes" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="preserveParenthesis" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="preserveQualifier" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="trimResults" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="textExpression">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/getDelimitedOccurrence" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="mode" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="delimiter" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inOccurrence" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inTrimText" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/numOccurrences" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="searchString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="stringToSearch" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="num" direction="OUT">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/xml/extractXMLOccurrence" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inContentXML" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inTagName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inOccurrence" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inIncludeDelimiter" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inTrimText" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inCaseSensitive" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="status" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/xml/getValueFromXML" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="namespaces" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inXpath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inXml" direction="IN">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="257"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="outValue" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* 
&#x9;generateDatasourceListXML: 
&#x9;-- Data Virtualization Best Practices --

&#x9;Generate the data source structure an any given layer designated by the layerType parameter
 
&#x9;Input:
&#x9;&#x9;&#x9;-- The source folder in CIS to begin searching for views to generate the view list or
&#x9;&#x9;&#x9;-- a source view (exact path) to generate for.
&#x9;&#x9;&#x9;-- If this is set it supercedes layerType, inGroupIDs and derivedFilterPath
&#x9; &#x9;sourceResource

&#x9;&#x9;&#x9;-- 0 (FALSE) - generate datasource list only with no logical names, 
    &#x9;&#x9;-- 1 (TRUE) - generate datasource list with logical names
  &#x9;&#x9;generateLogicalNames - generate the logical names choice

&#x9;&#x9;&#x9;-- PM=Physical Metadata - generateDatasourceList physical metadata tables
&#x9;&#x9;&#x9;-- FV=Formatting Views &#x9;- generateDatasourceList formatting views
&#x9;&#x9;&#x9;-- BV=Business Views &#x9;- generateDatasourceList business views (only single source)
&#x9;&#x9;&#x9;-- LV=Logical Views &#x9;- generateDatasourceList logical views (only single source)
&#x9;&#x9;&#x9;-- CV=Client Views &#x9;&#x9;- generateDatasourceList client views (only single source)
&#x9;&#x9;&#x9;-- CP=Client Published &#x9;- generateDatasourceList client published views (only single source)
  &#x9;&#x9;layerType - the designator for the layer in which to generate from

&#x9;&#x9;&#x9;-- This is a filter that allows the user to only generate for a specific group or list of groups
&#x9;&#x9;&#x9;--   found in the /generationScripts/Configure/ConfigureStartingFolders.
&#x9;&#x9;&#x9;--   Pass in null to select all groupIds.
&#x9;&#x9;inGroupIds - This is a comma separate list group ids to process. 

&#x9;&#x9;&#x9;-- The list &quot;derivedFilterPath&quot; is a comma-separated list of resources and may be used with either generateToFolder (option 1) to groupId (option 2) 
&#x9;&#x9;&#x9;-- The path is derived by concatenating the partial filter path with the target path of the designated layer type.
&#x9;&#x9;&#x9;-- The layerType and the groupId are used to filter the rows from the configureStartingFolders.  The target path is
&#x9;&#x9;&#x9;--    defined in configureStartingFolders per the layerType and groupId combination.
&#x9;&#x9;&#x9;--   e.g. layerType=PV and targetFolderPath=/shared/BestPractices/DataAbstractionSample/Physical/Physical
&#x9;&#x9;&#x9;--        The derivedFilterPath list=CUSTOMERS,EMPLOYEES
&#x9;&#x9;&#x9;--        Even though there are several other views in the /CISORADEMO folder under the Physical_Views only the ones specified
&#x9;&#x9;&#x9;--&#x9;      will be generated.  Views directly under the target path do not require any qualifying path except the view name.
&#x9;&#x9;&#x9;--        Lastly, a leading &apos;/&apos; is not required but may be present if desired.
&#x9;&#x9;&#x9;-- Correlate the groupId position with the derivedFilterPath position
&#x9;&#x9;&#x9;--&#x9;&#x9;derivedFilterPath=&quot;customers,orders&quot;,shippingmethods
&#x9;&#x9;&#x9;--                         |                     |
&#x9;&#x9;&#x9;--                         v                     v
&#x9;&#x9;&#x9;--&#x9;&#x9;          groupId=ds_inventory.tutorial,ds_orders.tutorial
&#x9;&#x9;&#x9;-- If null, generate views from all target folders as directed by the &quot;configure starting folders&quot; and the designated layer type.
&#x9;&#x9;derivedFilterPath&#x9;&#x9;&#x9;&#x9;LONGVARCHAR, 

&#x9;&#x9;&#x9;-- This is an alternative entry point for this method.  If this is set then layerType,inGroupIds and inDerivedFilterPath are ignored
&#x9;&#x9;inStartingFolderExtendedXML&#x9;LONGVARCHAR,

&#x9;&#x9;&#x9;-- The XML of configuration parameters.  A full description can be found in /generationScripts/Configure/ConfigureParams
&#x9;&#x9;ConfigParamsXML &#x9;&#x9;&#x9;LONGVARCHAR 
&#x9;Output:
&#x9;&#x9;DECLARE PUBLIC TYPE DataSourceRowV2Row ROW (
&#x9;&#x9;&#x9;DataSource &#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(255), -- The name of the data source in composite (data lineage-used resources)
--[NOT CURRENTLY IMPLEMENTED] Published&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(255), -- Indicates whether this element is published in composite (data lineage-dependent resources)
&#x9;&#x9;&#x9;ParentName &#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(255), -- The name of the parent container - parent to the parent (a.k.a. grand parent)
&#x9;&#x9;&#x9;ContainerName &#x9;&#x9;&#x9;&#x9;VARCHAR(255), -- The name of the container - parent to the resource
&#x9;&#x9;&#x9;PhysicalName&#x9;&#x9;&#x9;&#x9;VARCHAR(255), -- The physical column name (a.k.a. source column name)
&#x9;&#x9;&#x9;physicalType&#x9;&#x9;&#x9;&#x9;VARCHAR(255), -- The logical column name (a.k.a. table/view alias)
&#x9;&#x9;&#x9;LogicalName&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(255), -- The logical column name (a.k.a. table/view alias)
&#x9;&#x9;&#x9;LogicalType &#x9;&#x9;&#x9;&#x9;VARCHAR(255), -- The logical column type
&#x9;&#x9;&#x9;LogicalTransformation&#x9;&#x9;LONGVARCHAR,  -- The logical column transformation excluding outer cast statement
&#x9;&#x9;&#x9;LogicalDefinition&#x9;&#x9;&#x9;LONGVARCHAR,  -- The logical resource definition (a.k.a. view/table/column annotation)
&#x9;&#x9;&#x9;LogicalPath&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR   -- The logical resource (view) path
&#x9;&#x9;)

&#x9;Exceptions:  none

&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;CSW Version:&#x9;Reason:
&#x9;06/15/2010&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.2.0&#x9;&#x9;&#x9;Created new
&#x9;03/15/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.2.0&#x9;&#x9;&#x9;Modifications for Best Practices 7.0
&#x9;05/22/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.0.0&#x9;&#x9;&#x9;Modified for Best Practices 7.1
&#x9;09/17/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.1.0&#x9;&#x9;&#x9;Modified to pass in excludeDsPathsList to getDataSourceName
&#x9;03/27/2014&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.2.0&#x9;&#x9;&#x9;Resolve issue where the physical name and type columns were left blank.  Scenario: layerType=PM, generateMode=R|G and derivedFilterPath=&lt;some_table&gt;
&#x9;03/02/2018&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.5&#x9;&#x9;&#x9;Replaced RegexSplit with extractDelimitedText
&#x9;01/24/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;8.0.0&#x9;&#x9;&#x9;B.P. 2019.1: Added the ability to handle columnCaseRule, resourcePrefix, resourceSuffix and newColumnList for generateMode=&apos;G&apos;. 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;newColumnList Format: column1&amp;&amp;type1&amp;&amp;value1//column2&amp;&amp;type2&amp;&amp;value2//column3&amp;&amp;type3&amp;&amp;value3
&#x9;01/29/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;8.0.0&#x9;&#x9;&#x9;B.P. 2019.101: Fix bug so derivedFilterPath could be used with generateToFolder.
&#x9;04/15/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;B.P. 2019.200: Added scriptsPath for flexibility of the location of the _scripts folder.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   Changed custom functions to explicit paths.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   Removed double quotes from the parentPath.
&#x9;06/12/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;B.P. 2019.200: Derived the new generateDatasourceListXML from generateDatasourceList to eliminate vector usage for ConfigParamsVector and inStartingFolderExtendedVector.
&#x9;07/30/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;B.P. 2019.300: Modified to account for null &quot;inDerivedFilterPath&quot; parameter which through an exception.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   Fixed bug where duration was only calculated when debug2=Y.  Now it is calculated all the time.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   Fixed bug where new columns were generated when the resource was not a valid used resource.

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

*/
PROCEDURE generateDatasourceListXML(
&#x9;&#x9;-- The source folder in CIS to begin searching for views to generate the view list or
&#x9;&#x9;-- a source view (exact path) to generate for.
&#x9;&#x9;-- If this is set it supercedes layerType, inGroupIDs and derivedFilterPath
&#x9;IN sourceResource&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR, &#x9;

&#x9;&#x9;-- 0 (FALSE) - generate datasource list only with no logical names, 
    &#x9;-- 1 (TRUE) - generate datasource list with logical names
   &#x9;IN generateLogicalNames&#x9;&#x9;&#x9;&#x9;BIT, &#x9;

&#x9;-- If sourceResource is blank, then layerType, inGroupIds must be set with derivedFilterPath being optional
&#x9;&#x9;-- PM=Physical Metadata - generateDatasourceList physical metadata tables
&#x9;&#x9;-- FV=Formatting Views &#x9;- generateDatasourceList formatting views
&#x9;&#x9;-- BV=Business Views &#x9;- generateDatasourceList business views (only single source)
&#x9;&#x9;-- LV=Logical Views &#x9;- generateDatasourceList logical views (only single source)
&#x9;&#x9;-- CV=Client Views &#x9;&#x9;- generateDatasourceList client views (only single source)
&#x9;&#x9;-- CP=Client Published &#x9;- generateDatasourceList client published views (only single source)
   &#x9;IN layerType&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR,

&#x9;&#x9;-- This is a comma separate list group ids to process from the configureStartingFolders.
&#x9;&#x9;-- Pass in null to select all groupIds.
&#x9;IN inGroupIds&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR, 

&#x9;&#x9;-- The list &quot;derivedFilterPath&quot; is a comma-separated list of resources and may be used with either generateToFolder (option 1) to groupId (option 2) 
&#x9;&#x9;-- The path is derived by concatenating the partial filter path with the source path of the designated layer type.
&#x9;&#x9;-- The layerType and the groupId are used to filter the rows from the configureStartingFolders.  The source path is
&#x9;&#x9;--    defined in configureStartingFolders per the layerType and groupId combination.
&#x9;&#x9;--   e.g. layerType=CP and sourceFolderPath=/shared/BestPractices/DataAbstractionSample/Application/Views
&#x9;&#x9;--        The derivedFilterPath list=Orders_Closed,/Orders/Customers,Orders/Product
&#x9;&#x9;--        Even though there are several other views in the /Orders folder under the Client_Views only the ones specified
&#x9;&#x9;--&#x9;      will be generated to the Client_Published.  Views directly under the source path do not require any qualifying path except the view name.
&#x9;&#x9;--        Lastly, a leading &apos;/&apos; is not required but may be present if desired.
&#x9;&#x9;-- Correlate the groupId position with the derivedFilterPath position
&#x9;&#x9;--&#x9;&#x9;derivedFilterPath=&quot;customers,orders&quot;,shippingmethods
&#x9;&#x9;--                         |                     |
&#x9;&#x9;--                         v                     v
&#x9;&#x9;--&#x9;&#x9;          groupId=ds_inventory.tutorial,ds_orders.tutorial
&#x9;&#x9;-- If null, generate views from all source folders as directed by the &quot;configure starting folders&quot; and the designated layer type.
&#x9;IN inDerivedFilterPath&#x9;&#x9;&#x9;&#x9;LONGVARCHAR, 

&#x9;&#x9;-- This is an alternative entry point for this method.  If this is set then layerType,inGroupIds and inDerivedFilterPath are ignored
&#x9;IN &#x9;inStartingFolderExtendedXML&#x9;&#x9;LONGVARCHAR,

&#x9;&#x9;-- The XML of configuration parameters.  A full description can be found in /generationScripts/Configure/ConfigureParams
&#x9;IN ConfigParamsXML&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR,

&#x9;OUT resultPipe&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;PIPE /shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions.DataSourceRowV2Row
)
BEGIN
&#x9;DECLARE moduleName&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;&apos;||&apos;generateDatasourceListXML&apos;;
&#x9;DECLARE ConfigParamsRec&#x9;&#x9;&#x9;&#x9;&#x9;/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions.ConfigParamsType;
&#x9;DECLARE defaultValuesXML&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE groupId&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR DEFAULT inGroupIds;
&#x9;DECLARE sourceResource_&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR DEFAULT sourceResource;
&#x9;DECLARE resourceExists&#x9;&#x9;&#x9;&#x9;&#x9;BOOLEAN;
&#x9;DECLARE resultRec&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions.DataSourceRowV2Row;
&#x9;DECLARE startingFolder&#x9;&#x9;&#x9;&#x9;&#x9;/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions.startingFolderType;
&#x9;DECLARE status&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE resultNode&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE numStartingFolders&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE startingFolderCursor&#x9;&#x9;&#x9;CURSOR /shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions.startingFolderType;
&#x9;DECLARE startingFolderExtendedXML&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE startingFolderExtendedRec &#x9;&#x9;/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions.startingFolderExtendedType;
&#x9;DECLARE derivedFilterVector&#x9;&#x9;&#x9;&#x9;VECTOR(ROW(groupId VARCHAR, derivedFilterPath LONGVARCHAR));
&#x9;DECLARE derivedFilterPath&#x9;&#x9;&#x9;&#x9;LONGVARCHAR DEFAULT inDerivedFilterPath;   -- a single resource name which will act like a filter
&#x9;DECLARE derivedFilterPath_&#x9;&#x9;&#x9;&#x9;LONGVARCHAR DEFAULT derivedFilterPath;
&#x9;DECLARE exactMatch&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;BIT;
&#x9;DECLARE pos&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE debug&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1);
&#x9;DECLARE debug2&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1);
&#x9;DECLARE debug3&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1);
&#x9;DECLARE sfNum&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE i,j,k&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER DEFAULT 1;
&#x9;DECLARE padAmount&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE padChar&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1) DEFAULT &apos; &apos;;
&#x9;DECLARE version&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DOUBLE;
&#x9;DECLARE minVersion&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DOUBLE DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.minVersion;
&#x9;DECLARE generateMode&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1);
&#x9;DECLARE namespaces&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE xpath&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE xmlOut&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;XML;
&#x9;DECLARE message&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR DEFAULT &apos;&apos;;
&#x9;DECLARE ex&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;EXCEPTION;

&#x9;DECLARE parentPath&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE sourceFolderPath&#x9;&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE resourcePath&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE resourceType&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE resourceSubtype&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE sourceName&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE resourceName&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE resourceNameReserved&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE greatGrandParentName&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE grandParentName&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE parentName&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE containerName&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE datasourceNameList&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE datasourcePathList&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE physicalPath&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE physicalType&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE physicalName&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE physicalResourceFound&#x9;&#x9;&#x9;BOOLEAN;
&#x9;DECLARE physicalColumnTypeList&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE columnName&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE columnNameReserved&#x9;&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE columnType&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE columnListStr, newColumnListStr&#x9;LONGVARCHAR DEFAULT &apos;&apos;; -- used to determine if a column has a duplicate or not. 
&#x9;DECLARE newColumnList&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE newColumnName&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE newColumnType&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE newColumnValue&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE newColumnTransformation&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE dropColumn&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;BIT;
&#x9;DECLARE applyReservedWordList&#x9;&#x9;&#x9;BIT;&#x9;-- 1=true, apply the reserved word list to the output, 0=false, do not apply reserved word list
&#x9;DECLARE sqlStatement&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE childResCursor&#x9;&#x9;&#x9;&#x9;&#x9;CURSOR /shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions.columnListRow;
&#x9;DECLARE sqlScriptColumnVector&#x9;&#x9;&#x9;VECTOR (/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions.SqlScriptV2Row);
&#x9;DECLARE sourceResourcePath&#x9;&#x9;&#x9;&#x9;LONGVARCHAR DEFAULT sourceResource;
&#x9;DECLARE usedResourceFound&#x9;&#x9;&#x9;&#x9;BOOLEAN;
&#x9;DECLARE validUsedResource&#x9;&#x9;&#x9;&#x9;BIT;
&#x9;DECLARE isDerivedMatch&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE matchFound&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;BOOLEAN;
&#x9;&#x9;-- 0=fuzzy match - sourcePath + derivedFilterPath must simply be contained within resourcePath
&#x9;&#x9;-- 1=exact match - sourcePath + derivedFilterPath must match exactly in resourcePath
&#x9;DECLARE generateUnsupportedColumnType &#x9;BIT;
&#x9;&#x9;-- flag indicating whether to ignore or generate unsupported column types.  For example in Oracle an SDO spatial type gets imported into Composite as &apos;OTHER&apos;.
&#x9;&#x9;-- 0/null (default) - ignore column type = &apos;OTHER&apos; and do not generate that column
&#x9;&#x9;-- 1 - generate columns where the column type = &apos;OTHER&apos;
&#x9;DECLARE excludeDsPathsList&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE LogicalName&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(255) DEFAULT NULL;
&#x9;DECLARE LogicalType &#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(255);
&#x9;DECLARE LogicalTransformation&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE LogicalDefinition&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE LogicalPath&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE logicalStatus&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE unsupportedColumnTypeList &#x9;&#x9;LONGVARCHAR DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.unsupportedColumnTypeList;
&#x9;DECLARE isUnsupportedColumnTypeNative &#x9;INTEGER;
&#x9;DECLARE isUnsupportedColumnTypeLogical &#x9;INTEGER;
&#x9;DECLARE castResourceNameToType &#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE inIgnoreResourceDoesNotExist&#x9;INTEGER DEFAULT 1;&#x9;-- Ignore any resources that do not exist
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- 1 = Bypass the processing of that resource.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- 0 = (default) Do not ignore any resources.  Throw an error that the resource does not exist.
&#x9;DECLARE projectFolderName&#x9; &#x9;&#x9;&#x9;VARCHAR;&#x9;&#x9;&#x9;-- the name of the project folder (defaultValue.basePath)(projectName)
&#x9;DECLARE generationStartTime&#x9;&#x9;&#x9;&#x9;TIMESTAMP DEFAULT CURRENT_TIMESTAMP;
&#x9;DECLARE resourceStartTime&#x9;&#x9;&#x9;&#x9;TIMESTAMP;&#x9;&#x9;&#x9;&#x9; -- The time the processing starts for a resource
&#x9;DECLARE duration&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INTERVAL HOUR TO SECOND; -- The time it takes to process a view/column.  When processing a column, the duration is a running total for the entire view.
&#x9;DECLARE physicalFormattingTransformationPath LONGVARCHAR;
&#x9;DECLARE configureScriptsPath&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE pathInFormattingTransformation&#x9;BOOLEAN;
&#x9;DECLARE cacheStorageDataSourcePath &#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE cacheStoragePath &#x9;&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE cacheStorageFound&#x9;&#x9;&#x9;&#x9;BOOLEAN;
&#x9;DECLARE columnExpressionVect&#x9;&#x9;&#x9;VECTOR(VARCHAR(4000));
&#x9;DECLARE sourceExpressionEncoded&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE colExprIdx&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE codingListColumns&#x9;&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE usedRowFound&#x9;&#x9;&#x9;&#x9;&#x9;BOOLEAN;
&#x9;DECLARE basicRowFound&#x9;&#x9;&#x9;&#x9;&#x9;BOOLEAN;
&#x9;DECLARE useBasicResourceOnly&#x9;&#x9;&#x9;BOOLEAN;
&#x9;DECLARE rowType&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE containerList&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;

&#x9;/***************************************************************
&#x9; * Make sure the Utilities are up to date
&#x9; ***************************************************************/
&#x9;call /shared/ASAssets/Utilities/getUtilitiesVersion(version);
&#x9;if (version &lt;  minVersion) then
&#x9;&#x9;raise ex value &apos;Utilities &apos;||minVersion||&apos; or higher is required&apos;;
&#x9;end if;

&#x9;-- Set local Configuration parameters&#x9;
&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;debug&apos;, ConfigParamsXML, debug);
&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;debug2&apos;, ConfigParamsXML, debug2);
&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;debug3&apos;, ConfigParamsXML, debug3);
&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;scriptsPath&apos;, ConfigParamsXML, ConfigParamsRec.scriptsPath);
&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;basePath&apos;, ConfigParamsXML, ConfigParamsRec.basePath);
&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;generateMode&apos;, ConfigParamsXML, ConfigParamsRec.generateMode);
&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;generateCast&apos;, ConfigParamsXML, ConfigParamsRec.generateCast);
&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;padAmount&apos;, ConfigParamsXML, ConfigParamsRec.padAmount);

&#x9;-- Set the default values
&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/getDefaultValuesXML(ConfigParamsRec.scriptsPath, defaultValuesXML);
&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;physicalFormattingTransformationPath&apos;, defaultValuesXML, physicalFormattingTransformationPath);
&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;configureScriptsPath&apos;, defaultValuesXML, configureScriptsPath);

&#x9;-- Get the coding list.  [codingListColumns, codingListFrom, codingListComma, codingListRetriveColumns]
&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedList(&apos;codingListColumns&apos;, codingListColumns);

&#x9;-- Exclude any resources found in this path as these are considered source files.
&#x9;SET physicalFormattingTransformationPath = REPLACE(physicalFormattingTransformationPath||&apos;/&apos;,&apos;//&apos;,&apos;/&apos;);

&#x9;-- Extract the project name from the last folder name at the end of the basePath.
&#x9;call /shared/ASAssets/Utilities/string/getDelimitedOccurrence(ConfigParamsRec.basePath, &apos;R&apos;, &apos;/&apos;, 1, 0, projectFolderName);
&#x9;SET projectFolderName = REPLACE(projectFolderName, &apos;&quot;&apos;, &apos;&apos;); -- Remove double quotes

&#x9;-- Get environment variables
&#x9;call /lib/util/GetEnvironment(&apos;best.practices.generateUnsupportedColumnType&apos;,generateUnsupportedColumnType);
&#x9;call /lib/util/GetEnvironment(&apos;best.practices.exactMatch&apos;,exactMatch);
&#x9;call /lib/util/GetEnvironment(&apos;best.practices.excludeDsPathsList&apos;,excludeDsPathsList);
&#x9;call /lib/util/GetEnvironment(&apos;best.practices.newColumnList&apos;,newColumnList);&#x9;-- Format: column1&amp;&amp;type1&amp;&amp;value1//column2&amp;&amp;type2&amp;&amp;value2//column3&amp;&amp;type3&amp;&amp;value3

&#x9;-- Validate the environment variables
&#x9;if (generateUnsupportedColumnType is null) then
&#x9;&#x9;set generateUnsupportedColumnType = 0;&#x9;&#x9;&#x9;-- set the default behavior to not generate unsupported column types
&#x9;end if;
&#x9;if (exactMatch is null) then
&#x9;&#x9;set exactMatch = 1;
&#x9;end if;
&#x9;if (groupId is not null and (layerType IS NULL OR LENGTH(&apos;|&apos;||layerType||&apos;|&apos;) = 2)) then
&#x9;&#x9;raise ex value &apos;The &quot;layerType&quot; may not be null or empty when the &quot;groupId&quot; is specified.&apos;;
&#x9;end if;

&#x9;-- Print out parameters for debugging purposes
&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;generateLogicalNames=&apos;||generateLogicalNames);
&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;generateUnsupportedColumnType=&apos;||generateUnsupportedColumnType);
&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;derivedFilterPath=&apos;||NVL(derivedFilterPath,&apos;null&apos;));
&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;OPTION 1:&apos;);
&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;sourceResource=&apos;||NVL(sourceResource,&apos;null&apos;));
&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;OPTION 2:&apos;);
&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;layerType=&apos;||NVL(layerType,&apos;null&apos;));
&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;groupId=&apos;||NVL(groupId,&apos;null&apos;));
&#x9;end if;

&#x9;if (inStartingFolderExtendedXML is not null) then
&#x9;&#x9;set startingFolderExtendedXML = inStartingFolderExtendedXML;
&#x9;else
&#x9;&#x9;if (derivedFilterPath is not null and length(trim(derivedFilterPath)) &gt; 0) then
&#x9;&#x9;&#x9;-- Automatically add double quotes around the comma-separated list if the quotes don&apos;t exist.
&#x9;&#x9;&#x9;if (INSTR(derivedFilterPath, &apos;,&apos;) &gt; 0) and (INSTR(derivedFilterPath, &apos;&quot;&apos;) = 0) then
&#x9;&#x9;&#x9;&#x9;SET derivedFilterPath = &apos;&quot;&apos;||derivedFilterPath||&apos;&quot;&apos;;
&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;/*
&#x9;&#x9;&#x9;The extractTextList is used to extract a separated list of values containing
&#x9;&#x9;&#x9;&#x9;embedded separators within double quotes, single quotes.  The result is returned as a cursor based on
&#x9;&#x9;&#x9;&#x9;the boundaries of the the qualifiers: double quotes, single quotes or paired parenthesis.  The separator value
&#x9;&#x9;&#x9;&#x9;is preserved within the qualifier if the flag for that qualifier is set to 1 (true).
&#x9;&#x9;&#x9;*/
&#x9;&#x9;&#x9;-- Create a vector of the comma-separated derived filter paths associated with their respective (positional) groupId
&#x9;&#x9;&#x9;for r as select * from /shared/ASAssets/Utilities/string/extractTextList(derivedFilterPath_,&apos;,&apos;,1,0,0,0,1) do
&#x9;&#x9;&#x9;&#x9;-- Initialize or extend the vector
&#x9;&#x9;&#x9;&#x9;if (derivedFilterVector is null) then
&#x9;&#x9;&#x9;&#x9;&#x9;set derivedFilterVector = VECTOR[(null)];
&#x9;&#x9;&#x9;&#x9;&#x9;set i = 1;
&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;set derivedFilterVector = EXTEND(derivedFilterVector,1);
&#x9;&#x9;&#x9;&#x9;&#x9;set i = i + 1;
&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;-- set the derivedFilterPath
&#x9;&#x9;&#x9;&#x9;set derivedFilterVector[i].derivedFilterPath = r.textExpression;

&#x9;&#x9;&#x9;&#x9;-- Set the associated groupId with the derivedFilterPath item based on their respective position within the comma-separated string.
&#x9;&#x9;&#x9;&#x9;set j = 0;
&#x9;&#x9;&#x9;&#x9;groupLoop:
&#x9;&#x9;&#x9;&#x9;for g as select * from /shared/ASAssets/Utilities/string/extractDelimitedText(groupId,&apos;,&apos;,0,0,0,1,0) do
&#x9;&#x9;&#x9;&#x9;&#x9;set j = j + 1;
&#x9;&#x9;&#x9;&#x9;&#x9;if (i = j) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set derivedFilterVector[i].groupId = g.object;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (INSTR(derivedFilterVector[i].groupId, &apos;&apos;&apos;&apos;) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set derivedFilterVector[i].groupId = REPLACE(derivedFilterVector[i].groupId, &apos;&apos;&apos;&apos;, &apos;&apos;&apos;&apos;&apos;&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;leave groupLoop;
&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;end for;
&#x9;&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;derivedFilterVector[&apos;||i||&apos;].groupId=&apos;||derivedFilterVector[i].groupId || &apos;  derivedFilterPath=&apos;||derivedFilterVector[i].derivedFilterPath);
&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;end for;
&#x9;&#x9;end if;

&#x9;&#x9;if (sourceResource_ IS NOT NULL AND LENGTH(&apos;|&apos;||sourceResource_||&apos;|&apos;) &gt; 2) then  --notEmpty
&#x9;&#x9;&#x9;/* ------------------------------------------------------------------------
&#x9;&#x9;&#x9; * Derive/Validate Target Folder
&#x9;&#x9;&#x9; * -------------------------------
&#x9;&#x9;&#x9; * When the sourceResource is a FOLDER/CONTAINER and it is a valid path then the targetPath will be set to the sourceResource and 
&#x9;&#x9;&#x9; *   derivedFilterPath is blank.
&#x9;&#x9;&#x9; * When the sourceResource is a VIEW/TABLE and it is a valid path then the targetPath will be set to the parent CONTAINER path and
&#x9;&#x9;&#x9; *   derivedFilterPath will be set to &apos;/&lt;RESOURCE_NAME&gt;&apos;
&#x9;&#x9;&#x9; * ------------------------------------------------------------------------*/
&#x9;&#x9;&#x9;-- Retrieve the resource XML and get the annotation
&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/lowerLevelProcedures/getBasicResourceXML(sourceResource_, null, xmlOut);
&#x9;&#x9;&#x9;-- Extract the annotation
&#x9;&#x9;&#x9;set namespaces = &apos;xmlns:resource=&quot;http://www.compositesw.com/services/system/admin/resource&quot; xmlns:common=&quot;http://www.compositesw.com/services/system/util/common&quot;&apos;;
&#x9;&#x9;&#x9;set xpath = &apos;/resource:getResourceResponse/resource:resources/resource:resource/resource:type&apos;;
&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/&quot;xml&quot;/getValueFromXML(&apos;N&apos;, namespaces, xpath, CAST(xmlOut as LONGVARCHAR), resourceType);

&#x9;&#x9;&#x9;-- If the source resource is not a folder/container then extract the folder path and resource name.
&#x9;&#x9;&#x9;--   Use the resource name as the derivedFilterPath
&#x9;&#x9;&#x9;set resourceName = null;
&#x9;&#x9;&#x9;if (resourceType != &apos;CONTAINER&apos; and resourceType != &apos;DATA_SOURCE&apos;) then
&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/returnFolderNameAndFolderPath(sourceResource_, &apos;E&apos;, resourceName, sourceResourcePath);
&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;set sourceResourcePath = sourceResource;
&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;-- If the source resource path has a non-CONTAINER resource type such as TABLE or PROCEDURE then set the derivedFilterPath to the resourceName
&#x9;&#x9;&#x9;--&#x9;&#x9;otherwise set the derivedFilterPath to the incoming derivedFilterPath was set then use the first occurrence of what was passed in
&#x9;&#x9;&#x9;if (resourceName IS NOT NULL AND LENGTH(TRIM(resourceName)) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;set derivedFilterPath = resourceName;
&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;if (derivedFilterVector is not null and derivedFilterVector[1].derivedFilterPath is not null) then
&#x9;&#x9;&#x9;&#x9;&#x9;set derivedFilterPath = derivedFilterVector[1].derivedFilterPath;
&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;set derivedFilterPath = null;
&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;/* ------------------------------------------------------------------------
&#x9;&#x9;&#x9; * Instantiate a new startingFolderExtendedXML
&#x9;&#x9;&#x9; * ------------------------------------------------------------------------*/
&#x9;&#x9;&#x9;/* startingFolderExtendedXML
&#x9;&#x9;&#x9;&#x9;&#x9;groupId:&#x9;&#x9;&#x9;CISORADEMO
&#x9;&#x9;&#x9;&#x9;&#x9;process:&#x9;&#x9;&#x9;1
&#x9;&#x9;&#x9;&#x9;&#x9;layerType:&#x9;&#x9;&#x9;PV
&#x9;&#x9;&#x9;&#x9;&#x9;pathDerivation:&#x9;&#x9;A
&#x9;&#x9;&#x9;&#x9;&#x9;sourceFolderPath: &#x9;/shared/BestPractices/DataAbstractionSample/Physical/Metadata/OracleSource/cisOraDemoDS/CISORADEMO
&#x9;&#x9;&#x9;&#x9;&#x9;targetFolderPath: &#x9;/shared/BestPractices/DataAbstractionSample/Physical/Physical/CISORADEMO
&#x9;&#x9;&#x9;*/
&#x9;&#x9;&#x9;set startingFolderExtendedXML = 
&apos;&lt;startingFolderExtendedType&gt;
    &lt;groupId/&gt;
    &lt;process&gt;1&lt;/process&gt;
    &lt;layerType/&gt;
    &lt;pathDerivation/&gt;
    &lt;sourceFolderPath&gt;&apos;||TRIM(NVL(sourceResourcePath,&apos;  &apos;))||&apos;&lt;/sourceFolderPath&gt;
    &lt;targetFolderPath&gt;&apos;||TRIM(NVL(sourceResourcePath,&apos;  &apos;))||&apos;&lt;/targetFolderPath&gt;
    &lt;derivedFilterPath&gt;&apos;||TRIM(NVL(derivedFilterPath,&apos;  &apos;))||&apos;&lt;/derivedFilterPath&gt;
&lt;/startingFolderExtendedType&gt;&apos;;

&#x9;&#x9;else
&#x9;&#x9;&#x9;/* Get the ConfigureStartingFolders info:
&#x9;&#x9;&#x9;Sample of the StartFolderXML - Identifies the various Data Sources that need to undergo Abstract View Generation
&#x9;&#x9;&#x9;groupId, process, layerType, pathDerivation, sourceFolderPath, &#x9;&#x9;&#x9;targetFolderPath
&#x9;&#x9;&#x9;(&apos;g1&apos;,0,&apos;FV&apos;,&apos;D&apos;,&apos;/shared/ViewGenerator/PhysicalMetadata/INVENTORY&apos;,&#x9;&apos;/shared/ViewGenerator/Physical/Formatting/Inventory&apos;),
&#x9;&#x9;&#x9;(&apos;g2&apos;,1,&apos;FV&apos;,&apos;A&apos;,&apos;/shared/ViewGenerator/PhysicalMetadata/ORDERS&apos;,&#x9;&#x9;&apos;/shared/ViewGenerator/Physicl/Formatting/Orders&apos;) 
&#x9;&#x9;&#x9;*/
&#x9;&#x9;&#x9;if (groupId is not null and LENGTH(groupId) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;-- Turn the comma separated group id list CISORADEMO,XML into a SQL IN clause: groupId in (&apos;CISORADEMO&apos;,&apos;XML&apos;)
&#x9;&#x9;&#x9;&#x9;set i = 0;
&#x9;&#x9;&#x9;&#x9;for r as select * from /shared/ASAssets/Utilities/string/extractDelimitedText(groupId,&apos;,&apos;,0,0,0,1,0) do
&#x9;&#x9;&#x9;&#x9;&#x9;if (i = 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set groupId = &apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;if (i &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set groupId = groupId || &apos;,&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;set groupId = groupId || &apos;&apos;&apos;&apos;||r.object||&apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;set i = i + 1;
&#x9;&#x9;&#x9;&#x9;end for;
&#x9;&#x9;&#x9;&#x9;-- Construct the SQL statement
&#x9;&#x9;&#x9;&#x9;set sqlStatement = REPLACE(&apos;SELECT * FROM &apos;|| configureScriptsPath ||
&#x9;&#x9;&#x9;&#x9;&apos;/ConfigureStartingFolders() WHERE layerType=&apos;|| &apos;&apos;&apos;&apos;|| layerType || &apos;&apos;&apos;&apos; ||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos; and groupId in (&apos;|| groupId ||&apos;)&apos;, &apos;//&apos;, &apos;/&apos;);
&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;-- Construct the SQL statement
&#x9;&#x9;&#x9;&#x9;set sqlStatement = REPLACE(&apos;SELECT * FROM &apos;|| configureScriptsPath ||
&#x9;&#x9;&#x9;&#x9;&apos;/ConfigureStartingFolders() WHERE layerType=&apos;|| &apos;&apos;&apos;&apos;|| layerType || &apos;&apos;&apos;&apos;, &apos;//&apos;, &apos;/&apos;);
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;sqlStatement=&apos;||TRIM(NVL(sqlStatement,&apos;  &apos;)));
&#x9;&#x9;&#x9;end if;

&#x9;/*&#x9;DECLARE PUBLIC TYPE startingFolderExtendedType ROW (
&#x9;&#x9;&#x9;groupId&#x9;&#x9;&#x9;&#x9;VARCHAR,
&#x9;&#x9;&#x9;process &#x9;&#x9;&#x9;BIT,
&#x9;&#x9;&#x9;layerType&#x9;&#x9;&#x9;VARCHAR,
&#x9;&#x9;&#x9;pathDerivation &#x9;&#x9;CHAR(1),
&#x9;&#x9;&#x9;sourceFolderPath &#x9;TypeDefinitions.pathType,
&#x9;&#x9;&#x9;targetFolderPath &#x9;TypeDefinitions.pathType,
&#x9;&#x9;&#x9;derivedFilterPath&#x9;LONGVARCHAR
&#x9;&#x9;);
&#x9;*/
&#x9;&#x9;&#x9;set startingFolderExtendedXML = &apos;&apos;;

&#x9;&#x9;&#x9;OPEN startingFolderCursor FOR sqlStatement;
&#x9;&#x9;&#x9;FOR startingFolder AS startingFolderCursor DO
&#x9;&#x9;&#x9;&#x9;-- Correlate the groupId position with the derivedFilterPath position
&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;derivedFilterPath=&quot;customers,orders&quot;,shippingmethods
&#x9;&#x9;&#x9;&#x9;--                         |                     |
&#x9;&#x9;&#x9;&#x9;--                         v                     v
&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;          groupId=ds_inventory.tutorial,ds_orders.tutorial
&#x9;&#x9;&#x9;&#x9;SET i = 1;
&#x9;&#x9;&#x9;&#x9;IF (derivedFilterVector IS NOT NULL AND CARDINALITY(derivedFilterVector) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;WHILE (i &lt;= CARDINALITY(derivedFilterVector)) DO
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (startingFolder.groupId = derivedFilterVector[i].groupId) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET derivedFilterPath_ = derivedFilterVector[i].derivedFilterPath;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET i = i + 1;
&#x9;&#x9;&#x9;&#x9;&#x9;END WHILE;
&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;SET derivedFilterPath_ = null;
&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, LPAD(i, 4 , &apos; &apos;)||&apos;. groupId=&apos;||startingFolder.groupId||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;  Starting Folder=&apos;||NVL(startingFolder.targetFolderPath,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;SET startingFolderExtendedXML = startingFolderExtendedXML ||
&apos;&lt;startingFolderExtendedType&gt;
    &lt;groupId&gt;&apos;||TRIM(NVL(startingFolder.groupId,&apos;  &apos;))||&apos;&lt;/groupId&gt;
    &lt;process&gt;&apos;||TRIM(NVL(CAST(startingFolder.process AS VARCHAR),&apos;  &apos;))||&apos;&lt;/process&gt;
    &lt;layerType&gt;&apos;||TRIM(NVL(startingFolder.layerType,&apos;  &apos;))||&apos;&lt;/layerType&gt;
    &lt;pathDerivation&gt;&apos;||TRIM(NVL(startingFolder.pathDerivation,&apos;  &apos;))||&apos;&lt;/pathDerivation&gt;
    &lt;sourceFolderPath&gt;&apos;||TRIM(NVL(startingFolder.sourceFolderPath,&apos;  &apos;))||&apos;&lt;/sourceFolderPath&gt;
    &lt;targetFolderPath&gt;&apos;||TRIM(NVL(startingFolder.targetFolderPath,&apos;  &apos;))||&apos;&lt;/targetFolderPath&gt;
    &lt;derivedFilterPath&gt;&apos;||TRIM(NVL(derivedFilterPath_,&apos;  &apos;))||&apos;&lt;/derivedFilterPath&gt;
    &lt;typeDefProcPath/&gt;
    &lt;typeDefProcName/&gt;
&lt;/startingFolderExtendedType&gt;&apos;||CHR(10);
&#x9;&#x9;&#x9;END FOR;
&#x9;&#x9;end if;
&#x9;end if;
&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, NVL(startingFolderExtendedXML,&apos;null&apos;));

&#x9;/**************************************************************
&#x9; * Execute to retrieve View information and generate the
&#x9; * data source / view list for each data source group id.
&#x9; * Each row in startingFolderVector contains a group id from
&#x9; * ConfigureStartingFolders or a specified source folder.
&#x9; **************************************************************/
&#x9;SET sfNum = 1;
&#x9;CALL /shared/ASAssets/Utilities/string/numOccurrences(&apos;&lt;startingFolderExtendedType&gt;&apos;, startingFolderExtendedXML, numStartingFolders);
&#x9;WHILE (sfNum &lt;= numStartingFolders) DO
&#x9;&#x9;CALL /shared/ASAssets/Utilities/&quot;xml&quot;/extractXMLOccurrence(startingFolderExtendedXML, &apos;startingFolderExtendedType&apos;, sfNum, 0, 0, 0, status, resultNode);
&#x9;&#x9;CALL /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;sourceFolderPath&apos;, resultNode, startingFolderExtendedRec.sourceFolderPath);
&#x9;&#x9;CALL /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;targetFolderPath&apos;, resultNode, startingFolderExtendedRec.targetFolderPath);
&#x9;&#x9;CALL /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;process&apos;, resultNode, startingFolderExtendedRec.process);
&#x9;&#x9;CALL /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;groupId&apos;, resultNode, startingFolderExtendedRec.groupId);
&#x9;&#x9;CALL /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;derivedFilterPath&apos;, resultNode, startingFolderExtendedRec.derivedFilterPath);

&#x9;&#x9;-- Get the specific resource type for the target resource
&#x9;&#x9;SET resourceExists = true;
&#x9;&#x9;SET resourceType = null;
&#x9;&#x9;SET parentPath = REPLACE(startingFolderExtendedRec.targetFolderPath, &apos;&quot;&apos;, &apos;&apos;); -- Remove the double quotes from the path
&#x9;&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;&#x9;FOR resource AS SELECT * FROM /shared/ASAssets/Utilities/repository/getBasicResourceCursor(parentPath, resourceType) DO
&#x9;&#x9;&#x9;&#x9;set resourceType = resource.&quot;type&quot;;
&#x9;&#x9;&#x9;END FOR;
&#x9;&#x9;&#x9;IF (resourceType is null) then
&#x9;&#x9;&#x9;&#x9;set resourceExists = false;
&#x9;&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;WARNING: The resource type is null for the resource path=[&apos;||TRIM(NVL(parentPath,&apos;  &apos;))||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;EXCEPTION
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;set resourceExists = false;
&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, &apos;Y&apos;, &apos;WARNING: The target container does not exist: path=[&apos;||TRIM(NVL(parentPath,&apos;  &apos;))||&apos;]&apos;);
&#x9;&#x9;END;

&#x9;&#x9;-- Determine whether to process the target resource folder or not
&#x9;&#x9;IF (resourceExists and startingFolderExtendedRec.process = 1) THEN
&#x9;&#x9;&#x9;-- set the parent path which will be used to drive the folder inspection
&#x9;&#x9;&#x9;SET derivedFilterPath = startingFolderExtendedRec.derivedFilterPath;
&#x9;&#x9;&#x9;SET padAmount = ConfigParamsRec.padAmount;
&#x9;&#x9;&#x9;SET generateMode = ConfigParamsRec.generateMode; -- &apos;R&apos;=Retrieve logical names, &apos;G&apos;=Generate logical names

&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos; PARENT FOLDER=&apos;||TRIM(NVL(parentPath,&apos;  &apos;)));
&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;DERIVED FILTER=&apos;||TRIM(NVL(derivedFilterPath,&apos;  &apos;)));
&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos; RESOURCE TYPE=&apos;||TRIM(NVL(resourceType,&apos;  &apos;)));
&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;&apos;);
&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;-- Initialize lineage variables
&#x9;&#x9;&#x9;set greatGrandParentName = &apos;&apos;;
&#x9;&#x9;&#x9;set grandParentName = &apos;&apos;;
&#x9;&#x9;&#x9;set parentName = &apos;&apos;;
&#x9;&#x9;&#x9;set containerName = &apos;&apos;;

&#x9;&#x9;&#x9; FOR list AS 
&#x9;&#x9;&#x9;&#x9;SELECT name, resPath, resType, subType 
&#x9;&#x9;&#x9;&#x9;&#x9;FROM /shared/ASAssets/Utilities/repository/getResourceListRecursive(parentPath, resourceType) 
&#x9;&#x9;&#x9; DO
&#x9;&#x9;&#x9;&#x9;-- Determine if the path is within the Physical/Formatting/Transformations path
&#x9;&#x9;&#x9;&#x9;-- This will be required to determine if whether to utilize the &quot;USED&quot; or &quot;BASIC&quot; in the getUsedResourceCursor() section.
&#x9;&#x9;&#x9;&#x9;set pathInFormattingTransformation = false;
&#x9;&#x9;&#x9;&#x9;IF (POSITION(REPLACE(physicalFormattingTransformationPath,&apos;&quot;&apos;,&apos;&apos;) IN list.resPath) = 1) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;set pathInFormattingTransformation = true;
&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;getResourceListRecursive list:  resourcePath=&apos;||list.resPath||&apos;  resourceType=&apos;||list.resType);
&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos; pathInFormattingTransformation=&apos;|| CAST(pathInFormattingTransformation AS VARCHAR(255))||&apos;   Physical Formatting Transformation Path=&apos;||TRIM(NVL(REPLACE(physicalFormattingTransformationPath,&apos;&quot;&apos;,&apos;&apos;),&apos;  &apos;)));
&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;-- Only process rows that come back from the recursive resource tree list that are actually Data Sources
&#x9;&#x9;&#x9;&#x9;-- Folders will be derived because the full path is provided to the resource
&#x9;&#x9;&#x9;&#x9;IF ( (list.resType = &apos;TABLE&apos; OR list.resType = &apos;PROCEDURE&apos;) /*AND (POSITION(physicalFormattingTransformationPath IN list.resPath) = 0)*/ ) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;-- Rolling duration for the entire table.  Resets when a new table/procedure resource is started.
&#x9;&#x9;&#x9;&#x9;&#x9;set resourceStartTime = CURRENT_TIMESTAMP;&#x9;-- Start the clock running for procesing a TABLE or PROCEDURE

&#x9;&#x9;&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;BEGIN: ========================================================================================&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;-- Determine if the source path is a match to the derivedFilterPath
&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/isDerivedPathMatch(debug, exactMatch, derivedFilterPath, parentPath, list.resPath, excludeDsPathsList, isDerivedMatch);

&#x9;&#x9;&#x9;&#x9;&#x9;IF (isDerivedMatch  = 1) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;/**************************************************************************************************************
&#x9;&#x9;&#x9;&#x9;&#x9; * MATCH FOUND.  PROCESS THIS RESOURCE.
&#x9;&#x9;&#x9;&#x9;&#x9; **************************************************************************************************************/
--set debug2=&apos;Y&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**************************************************************************************************************
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; * 1. Get the Data Source for the resource
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *    If the Formatting layer points to the Metadata table then the path of the metadata table is returned
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *      and used to compare with the data source location.  This is required in order to establish the container
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *      lineage.  The container lineage is used to generate the spreadsheet.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *    When the resource path lineage is 1 to 1 like in the Physical layer subfolders Formatting or Physical
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *      then the datasourcePathList will contain only 1 path.  This is the expectation.  However, if this
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *      procedure is run against top level views such as those in the Application or Business layers, then the
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *      results may yield multiple paths as there may be many views to many data sources.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; **************************************************************************************************************/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- If the view is cached, then get the storage data source path
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set cacheStorageDataSourcePath = null;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set cacheStoragePath = null;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FOR cc AS SELECT * FROM /shared/ASAssets/Utilities/repository/getResourceCacheConfigCursor(list.resPath, list.resType) DO
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set cacheStorageDataSourcePath = cc.storageDataSourcePath;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set cacheStoragePath = cc.storagePath;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END FOR;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Get the data source name for this resource. There can be a list of data sources
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/getDataSourceName(list.resPath, list.resType, cacheStorageDataSourcePath, null, 1, inIgnoreResourceDoesNotExist,  debug2, datasourceNameList, datasourcePathList);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug2 = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug2,&apos;USED RESOURCE:   datasourcePathList=&apos;||TRIM(NVL(datasourcePathList,&apos;  &apos;)));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug2,&apos;USED RESOURCE:   getUsedResourcesCursor(&apos;||list.resPath||&apos;, &apos;||list.resType||&apos;)&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**************************************************************************************************************
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; * 2. Get the immediate &quot;USED&quot; resource (lineage below)
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *    If the Formatting layer points to the Metadata table then the path of the metadata table is returned
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *      and used to compare with the data source location.  This is required in order to establish the container
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *      lineage.  The container lineage is used to generate the spreadsheet.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *    If the resource is at the lowest Metadata level then simply get the basic resource information.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *    Note: This code must be execute prior to getting the data source in step 2. below.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; **************************************************************************************************************/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Initialize variables.    physicalColumnTypeList-the physical column type list.  Format &quot;view.column1&quot;:[TYPE] &quot;view.column2&quot;:[TYPE]
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set usedResourceFound = false;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set physicalColumnTypeList = &apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set validUsedResource = 0;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set physicalPath = &apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set physicalType = &apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set physicalName = &apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set columnListStr = &apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set usedRowFound = false;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set basicRowFound = false;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set rowType = &apos;UNKNOWN&apos;;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Determine if the current resource is already at the lowest Metadata level.  If it is then don&apos;t used the &quot;getUsedResourceCursor&quot; results
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   but instead use the &quot;getBasicResourceCursor&quot; results.   To determine if a resource is at the lowest level look for &quot;Ancestor Resources&quot;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   that are of type &quot;DATA_SOURCE&quot;.  This signifies that the resource is below a data source and thus at the Metadata or lowest level.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set useBasicResourceOnly = false;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ancestorLoop:
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for AR as select * from /shared/ASAssets/Utilities/repository/getAncestorResources(list.resPath, list.resType) do
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (AR.resourceType = &apos;DATA_SOURCE&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set useBasicResourceOnly = true;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;leave ancestorLoop;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end for;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Get the immediate resources used which are valid TABLEs or PROCEDUREs with a CURSOR and retrieve the physical columns and types
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- At this time, only a single used resource is supported.  Leave the loop after the first one is found.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;urLoop:
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for UR as select * from (
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;select &apos;USED&apos; rowType, resourceName, resourcePath, resourceType from /shared/ASAssets/Utilities/repository/getUsedResourcesCursor(list.resPath, list.resType) 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;union all
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;select &apos;BASIC&apos; rowType, name resourceName, &quot;path&quot; resourcePath, &quot;type&quot; resourceType from /shared/ASAssets/Utilities/repository/getBasicResourceCursor(list.resPath, list.resType)
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;) u
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;do
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- mtinius 2014-03-27: resolve issue where the physical name and type columns were left blank.  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;                   Scenario: layerType=PM, generateMode=R|G and derivedFilterPath=&lt;some_table&gt;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- This logic was put in place to handle the use case when the resource itself is a physical metadata resource in which case it has no &quot;used&quot; resources under it.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- The idea is that when a resource is a metadata resource table or procedure then get its basic resource information instead of looking for &quot;used&quot; resource information.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- However, if the resource is not a metadata table or procedure then don&apos;t use its &quot;basic&quot; resource information because the getUsedResourceCursor returns the required values
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   and incluing the getBasicResourceCursor would only cause a duplication of values.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set rowType = UR.rowType;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (rowType = &apos;USED&apos; and not pathInFormattingTransformation and not useBasicResourceOnly) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set usedRowFound = true;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (rowType = &apos;BASIC&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set basicRowFound = true;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug2 = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug2,&apos;USED RESOURCE:  rowType=&apos;||rowType||&apos;  usedRowFound=&apos;||CAST(usedRowFound AS VARCHAR(255)) ||&apos;  basicRowFound=&apos;||TRIM(NVL(cast(basicRowFound as varchar),&apos;  &apos;))||&apos;  pathInFormattingTransformation=&apos;||TRIM(NVL(cast(pathInFormattingTransformation as varchar),&apos;  &apos;)));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- mtinius 2014-03-27: As the notes above describe, this if statement acts as a &quot;gate&quot; to only use results from either &quot;getusedResourceCursor&quot; or &quot;getBasicResourceCursor&quot;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if ( (usedRowFound AND NOT basicRowFound) OR (NOT usedRowFound AND basicRowFound) ) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- If this resource was cached then eliminate any paths that match a cache storage data source path or cache storage path
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set cacheStorageFound = false;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (cacheStorageDataSourcePath is not null and UR.resourcePath = cacheStorageDataSourcePath) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set cacheStorageFound = true;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (cacheStoragePath is not null and UR.resourcePath = cacheStoragePath) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set cacheStorageFound = true;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (NOT cacheStorageFound) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Determine if the used resource is a child of the data source that was discovered for the original resource
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   This is needed in order to determine whether to use nativeType or columnType when retrieving the cursor of columns for the used resource.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(UR.resourcePath, null, resourcePath);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set physicalResourceFound = false;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (POSITION(datasourcePathList||&apos;/&apos; IN resourcePath) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set physicalResourceFound = true;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug2 = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug2,&apos;USED RESOURCE:  rowType=&apos;||rowType||&apos;  physicalResourceFound=&apos;|| CAST(physicalResourceFound AS VARCHAR(255))||&apos;  UR.resourceName=&apos;||TRIM(NVL(UR.resourceName,&apos;  &apos;))||&apos;  UR.resourceType=&apos;||TRIM(NVL(UR.resourceType,&apos;  &apos;))||&apos;  UR.resourcePath=&apos;||TRIM(NVL(resourcePath,&apos;  &apos;)));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- mtinius 2014-03-14 - Determine if the resource exists.  Ignore foreign key table references for example.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /lib/resource/ResourceExists(UR.resourcePath, UR.resourceType, null, resourceExists);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (resourceExists) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- ASSUMPTION: A resource is valid if it returns a cursor of columns regardless of whether it is a view, table or procedure.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case UPPER(UR.resourceType)
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;when &apos;PROCEDURE&apos; then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Get Regular Procedure and determine if it returns a cursor output
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for p as select * from /shared/ASAssets/Utilities/repository/getBasicResourceCursor_PROCEDURE_CURSOR(UR.resourcePath, UR.resourceType, 0) WHERE columnType != &apos;CURSOR&apos; do
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Both the column and columnType or nativeType must be present to process the row
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (p.columnName is not null and (p.columnType is not null or p.nativeType is not null)) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (physicalResourceFound) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set columnType = TRIM(NVL(NVL(p.nativeType, p.nativeBaseType),&apos;  &apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Use native type when the used resource is a child of the data source
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord(UR.resourceName, null, resourceNameReserved);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord(p.columnName, null, columnNameReserved);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set sourceExpressionEncoded = resourceNameReserved||&apos;.&apos;||columnNameReserved;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedString(&apos;E&apos;, &apos;D&apos;, codingListColumns, sourceExpressionEncoded, moduleName, debug3, &apos;sourceExpressionEncoded&apos;, sourceExpressionEncoded);

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set physicalColumnTypeList = physicalColumnTypeList || sourceExpressionEncoded ||&apos;:[&apos;||columnType||&apos;] &apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Use column type when the used resource is a regular view and not a data source child
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord(UR.resourceName, null, resourceNameReserved);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord(p.columnName, null, columnNameReserved);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set sourceExpressionEncoded = resourceNameReserved||&apos;.&apos;||columnNameReserved;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedString(&apos;E&apos;, &apos;D&apos;, codingListColumns, sourceExpressionEncoded, moduleName, debug3, &apos;sourceExpressionEncoded&apos;, sourceExpressionEncoded);

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set physicalColumnTypeList = physicalColumnTypeList || sourceExpressionEncoded ||&apos;:[&apos;||p.columnType||&apos;] &apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set validUsedResource = 1;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end for;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;when &apos;TABLE&apos; then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Get a TABLE resource and determine if it uses native type or column type for the column names
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for t as select * from /shared/ASAssets/Utilities/repository/getBasicResourceCursor_SQL_TABLE(UR.resourcePath, UR.resourceType) do
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (t.columnName is not null) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (physicalResourceFound) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set columnType = TRIM(NVL(NVL(t.nativeType, t.nativeBaseType),&apos;  &apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Use native type when the used resource is a child of the data source
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord(UR.resourceName, null, resourceNameReserved);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord(t.columnName, null, columnNameReserved);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set sourceExpressionEncoded = resourceNameReserved||&apos;.&apos;||columnNameReserved;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedString(&apos;E&apos;, &apos;D&apos;, codingListColumns, sourceExpressionEncoded, moduleName, debug3, &apos;sourceExpressionEncoded&apos;, sourceExpressionEncoded);

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set physicalColumnTypeList = physicalColumnTypeList || sourceExpressionEncoded ||&apos;:[&apos;||columnType||&apos;] &apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Use column type when the used resource is a regular view and not a data source child
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord(UR.resourceName, null, resourceNameReserved);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord(t.columnName, null, columnNameReserved);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set sourceExpressionEncoded = resourceNameReserved||&apos;.&apos;||columnNameReserved;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedString(&apos;E&apos;, &apos;D&apos;, codingListColumns, sourceExpressionEncoded, moduleName, debug3, &apos;sourceExpressionEncoded&apos;, sourceExpressionEncoded);

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set physicalColumnTypeList = physicalColumnTypeList || sourceExpressionEncoded ||&apos;:[&apos;||t.columnType||&apos;] &apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set validUsedResource = 1;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end for;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set validUsedResource = 0;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end case;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (NOT usedResourceFound and validUsedResource = 1) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Set the physical &quot;used&quot; resource path for the current resource being interrogated.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set physicalPath = UR.resourcePath;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Set the physical &quot;used&quot; resource type
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set physicalType = UR.resourceType;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Set the physical resource name
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set physicalName = UR.resourceName;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set usedResourceFound = true;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;leave urLoop;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug2 = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug2,&apos;USED RESOURCE:  rowType=&apos;||rowType||&apos;  SKIPPED-DOES NOT EXIST   physicalType=&apos;||UR.resourceType||&apos;  physicalPath=&apos;||UR.resourcePath);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if; -- if (resourceExists) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end for;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug2 = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug2,&apos;USED RESOURCE:  rowType=&apos;||rowType||&apos;  validUsedResource=&apos;||validUsedResource||&apos;  physicalName=&apos;||physicalName||&apos;  physicalType=&apos;||physicalType||&apos;  physicalPath=&apos;||physicalPath);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug2,&apos;USED RESOURCE:  rowType=&apos;||rowType||&apos;  physicalColumnTypeList=&apos;||physicalColumnTypeList);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (validUsedResource = 1) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**************************************************************************************************************
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; * 3. Extract the resource &quot;name&quot; lineage
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *    The resource &quot;name&quot; lineage includes columns identified by the data source or folder structure that are used
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *    to populate the spreadsheet: greatGrandParentName, grandParentName, parentName containerName, resourceName.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *    When a resource points directly to a resource in the Metadata layer, it will extract &quot;name&quot; lineage based on
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *      the data source. For example a Formatting view points directly to a data source Metadata table.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *      View: /shared/project1/Physical/Formatting/myView: select * from /shared/project1/Physical/Metadata/DS1/SCH1/TABLE1
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *      Therefore, the &quot;used&quot; lineage points to an actual datasource resource: /shared/project1/Physical/Metadata/DS1/SCH1/TABLE1 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *    
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *          datasourcePathList=DS1
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *         greatGrandParentName=
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *              grandParentName=
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *                   parentName=DS1
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *                containerName=SCH1
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *                 resourceName=TABLE1
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *    
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *    When a resource points to another non-Metadata layer, then it will use the folder structure to extract the
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *      &quot;name&quot; lineage.  For example a Formatting view point to a Physical sublayer view 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *      View: /shared/project1/Physical/Formatting/myView: select * from /shared/project1/Physical/Physical/DS1/SCH1/TABLE1
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *      Therefore, the &quot;used&quot; lineage points to another view in the physical subfolder: /shared/project1/Physical/Physical/DS1/SCH1/TABLE1
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *        It should be noted that the best practices scripts will generate subfolders that match the physical data source strucuture by convention.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *        Since the resource is not the actual data source then it uses the folder structure to determine the &quot;name&quot; lineage.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *          datasourcePathList=DS1
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *         greatGrandParentName=
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *              grandParentName=physical
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *                   parentName=DS1
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *                containerName=SCH1
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *                 resourceName=TABLE1
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; **************************************************************************************************************/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Apply double quotes around data source path list when there is more than one path present in the list
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (POSITION(&apos;,&apos; IN datasourceNameList) &gt; 0) THEN&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set datasourceNameList = &apos;&quot;&apos;||datasourceNameList||&apos;&quot;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/*****
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; * Extract the remaining source path when the path matches the physical data source location.  The remaining path will be the datasource + children resources.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;This scenario is only true for the Formatting sub-layer when it point directly to the Metadata sub-layer or when the Physical sub-layer points to the Metadata sub-layer.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;All other layers will simply extract based on the folder paths as is.  The Common Model Spreadsheets need to be composed with this in mind since they
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; * &#x9;can contain entries for both Formatting and other layers.  In the example below, the Formating sub-layer is the target layer and the source sub-layer is the
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; * &#x9;Metadata sub-layer.  Therefore, the generateViewsLoop will iterate over the Metadata sub-layer as per the groupId definition and provide a list of children
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;tables or procedures.   The getDataSourceName which was executed previously determines the lineage to the Composite data source resource which is used for
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;the comparison and extraction of remaining path.  The steps are provided below with example output.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;Example Source Path:
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;&#x9;resourcePath=/shared/ASAssets/BestPractices_v81/DataAbstractionSample/Physical/Metadata/SQLServerSource/cisSServerDemoDS/SServerDemoCat/dbo/Customers
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;Example Physical Metadata path:
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;&#x9;datasourcePathList=/shared/ASAssets/BestPractices_v81/DataAbstractionSample/Physical/Metadata/SQLServerSource/cisSServerDemoDS
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;&#x9;datasourceNameList=cisSServerDemoDS
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; * &#x9;&#x9;1) RegexPosition - Find the position of the last &apos;/&apos; in the actual data source path and return that position.  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;&#x9;&#x9;RegexPosition(datasourcePathList, &apos;\/&apos;, -1))
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;&#x9;&#x9;e.g. 92 - position of the path just before the data source name
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;&#x9;2) SUBSTRING - Extract the beginning of the data source path just before the data source name. 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;&#x9;&#x9;SUBSTRING(datasourcePathList, 1, &lt;RegexPosition_Result&gt;)
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;&#x9;&#x9;e.g. /shared/ASAssets/BestPractices_v81/DataAbstractionSample/Physical/Metadata/SQLServerSource/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;&#x9;3) REPLACE - Extract the remaining path by setting the source string part that matches the data source path to a blank.  If it does not match it does not get replaced.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;&#x9;&#x9;REPLACE(list.resPath, &lt;SUBSTRING_Result&gt;, &apos;&apos;)
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;&#x9;&#x9;e.g. cisSServerDemoDS/SServerDemoCat/dbo/Customers - remaining string
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;&#x9;3) getDelimitedOccurrence(resourcePath, &apos;R&apos;, &apos;/&apos;, 2, 0) - Retrieve containerName which is he second occurrence in the remaining path using the &apos;/&apos; delimiter traversing from the right (end) 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;&#x9;&#x9;e.g. containerName=dbo
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;&#x9;4) getDelimitedOccurrence(resourcePath, &apos;R&apos;, &apos;/&apos;, 2, 0) - Retrieve parentName which is he third occurrence in the remaining path using the &apos;/&apos; delimiter traversing from the right (end) 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;&#x9;&#x9;e.g. parentName=SServerDemoCat
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;&#x9;5) getDelimitedOccurrence(resourcePath, &apos;R&apos;, &apos;/&apos;, 2, 0) - Retrieve grandParentName which is he fourth occurrence in the remaining path using the &apos;/&apos; delimiter traversing from the right (end) 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *&#x9;&#x9;&#x9;e.g. grandParentName=cisSServerDemoDS
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;******/

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/*DAH 2014-03-12 this was physicalPath but changed to list.resPath as per comment on line 630 above*/ 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(list.resPath, null, resourcePath);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/string/TextUtils/RegexPosition(datasourcePathList, &apos;\/&apos;, -1, pos);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set resourcePath = REPLACE(resourcePath, SUBSTRING(datasourcePathList, 1, pos), &apos;&apos;);

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug2 = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug2,&apos;EXTRACTED RESOURCE:  datasourcePathList=&apos;||SUBSTRING(datasourcePathList, 1, pos));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug2,&apos;EXTRACTED RESOURCE:        resourcePath=&apos;||TRIM(NVL(resourcePath,&apos;  &apos;)));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/string/getDelimitedOccurrence(resourcePath, &apos;R&apos;, &apos;/&apos;, 2, 0, containerName);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/string/getDelimitedOccurrence(resourcePath, &apos;R&apos;, &apos;/&apos;, 3, 0, parentName);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/string/getDelimitedOccurrence(resourcePath, &apos;R&apos;, &apos;/&apos;, 4, 0, grandParentName);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set greatGrandParentName = &#x9;&apos;&apos;; -- Always default to blank for first row which represents the resource.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (containerName is null) then set containerName = &apos;&apos;; end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (parentName is null) then set parentName = &apos;&apos;;  end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (grandParentName is null) then set grandParentName = &apos;&apos;;  end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (greatGrandParentName is null) then set greatGrandParentName = &apos;&apos;;  end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

--set debug=&apos;N&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (debug = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, LPAD(sfNum, 4 , &apos; &apos;)||&apos;. groupId=&apos;||startingFolderExtendedRec.groupId||&apos;  Starting Folder=&apos;||TRIM(NVL(startingFolderExtendedRec.targetFolderPath,&apos;  &apos;)));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;   (MATCH):CURRENT:_____________&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;   (MATCH):________resourcePath=&apos;||list.resPath);&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;   (MATCH):__________parentPath=&apos;||TRIM(NVL(parentPath,&apos;  &apos;)));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;   (MATCH):___________layerType=&apos;||TRIM(NVL(layerType,&apos;  &apos;)));&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;   (MATCH):___derivedFilterPath=&apos;||TRIM(NVL(derivedFilterPath,&apos;  &apos;)));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;   (MATCH):DATASOURCE:__________&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;   (MATCH):__datasourcePathList=&apos;||TRIM(NVL(datasourcePathList,&apos;  &apos;)));&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;   (MATCH):__datasourceNameList=&apos;||TRIM(NVL(datasourceNameList,&apos;  &apos;)));&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;   (MATCH):USED:________________&apos;);&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;   (MATCH):________physicalPath=&apos;||TRIM(NVL(physicalPath,&apos;  &apos;)));&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;   (MATCH):________physicalName=&apos;||TRIM(NVL(physicalName,&apos;  &apos;)));&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;   (MATCH):________physicalType=&apos;||TRIM(NVL(physicalType,&apos;  &apos;)));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;   (MATCH):__physColumnTypeList=&apos;||TRIM(NVL(physicalColumnTypeList,&apos;  &apos;)));&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;   (MATCH):LOGICAL:_____________&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;   (MATCH):   projectFolderName=&apos;||TRIM(NVL(projectFolderName,&apos;  &apos;)));&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;   (MATCH):greatGrandParentName=&apos;||TRIM(NVL(greatGrandParentName,&apos;  &apos;)));&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;   (MATCH):_____grandParentName=&apos;||TRIM(NVL(grandParentName,&apos;  &apos;)));&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;   (MATCH):__________parentName=&apos;||TRIM(NVL(parentName,&apos;  &apos;)));&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;   (MATCH):_______containerName=&apos;||TRIM(NVL(containerName,&apos;  &apos;)));&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;   (MATCH):________resourceName=&apos;||list.name);&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;   (MATCH):________resourceType=&apos;||list.resType);&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;   (MATCH):____________sub_type=&apos;||list.subType);&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;------------------------------------------------------------------------------------------------------&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
--set debug=&apos;N&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Put quotes around &quot;_folder&quot; or &quot;1_folder&quot; but in a way that it is not hard-coded if _ or 0-9 exists in the first character of the folder name or reserved words are used.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(list.resPath, null, resourcePath);

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Close the cursor if it is open
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (childResCursor is not null and childResCursor.ISOPEN) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;close childResCursor;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Provides the ability to return metadata on Composite Views (a.k.a. resource type = TABLE).
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (list.resType = &apos;TABLE&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;OPEN childResCursor FOR 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SELECT * --resourceName, resourcePath, resourceType, subtype, enabled, annotation, NULL, NULL, columnName, columnType, nativeBaseType, nativeType
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FROM /shared/ASAssets/Utilities/repository/getBasicResourceCursor_SQL_TABLE(resourcePath, list.resType);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/* Important Note:  The FIRST ROW FOR a TABLE returns a NULL IN the columnName.  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;This IS used TO determine the start OF a new TABLE.  Don&apos;t change the XSLT -- getResourceResponseXSLT_SQL_TABLE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;getResourceResponseXSLT_SQL_TABLE returns the following:
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resourceName VARCHAR(255), &#x9;&#x9;&#x9;&#x9;orders
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resourcePath VARCHAR(4000), &#x9;&#x9;&#x9;/shared/ASAssets/BestPractices_v81/DataAbstractionSample/Physical/Metadata/MysqlSource/ORDERS1/ds_orders1/customers
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resourceType VARCHAR(255), &#x9;&#x9;&#x9;&#x9;TABLE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;subtype VARCHAR(255), &#x9;&#x9;&#x9;&#x9;&#x9;DATABASE_TABLE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;enabled BIT, &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;1
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;annotation LONGVARCHAR,&#x9;&#x9;&#x9;&#x9;&#x9;description
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;explicitlyDesigned BIT, &#x9;&#x9;&#x9;&#x9;0 if first row, NULL if column row
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;tableType VARCHAR(255), &#x9;&#x9;&#x9;&#x9;TABLE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sqlText VARCHAR(2147483647), &#x9;&#x9;&#x9;NULL
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;proprietaryModel VARCHAR(2147483647), &#x9;NULL
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;columnName VARCHAR(255), &#x9;&#x9;&#x9;&#x9;CustomerID
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;columnType VARCHAR(255),&#x9;&#x9;&#x9;&#x9;INTEGER
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;nativeBaseType VARCHAR(255), &#x9;&#x9;&#x9;int
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;nativeType VARCHAR(255)&#x9;&#x9;&#x9;&#x9;&#x9;int(11)
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;*/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Provides the ability to return metadata on Composite XSLT Procedures (a.k.a. resource type = PROCEDURE).
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (list.resType = &apos;PROCEDURE&apos;)&#x9;THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;OPEN childResCursor FOR 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SELECT resourceName, resourcePath, resourceType, subtype, enabled, annotation, NULL, tableType, sqlText, NULL, columnName, columnType, nativeBaseType, nativeType
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FROM /shared/ASAssets/Utilities/repository/getBasicResourceCursor_PROCEDURE_CURSOR(resourcePath, list.resType, 1)
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHERE paramDirection = &apos;OUT&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/* &#x9;Important Note:  The FIRST ROW FOR a TABLE returns a NULL IN the columnName.  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;This IS used TO determine the start OF a new TABLE.  Don&apos;t change the XSLT -- getResourceResponseXSLT_SQL_PROCEDURE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   getResourceResponseXSLT_SQL_PROCEDURE returns the following:
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resourceName VARCHAR(255), &#x9;&#x9;&#x9;&#x9;productCatalog_Transformation
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resourcePath VARCHAR(4000), &#x9;&#x9;&#x9;/shared/ASAssets/BestPractices_v81/DataAbstractionSample/Physical/Formatting/Transformations/ds_XML/productCatalog_Transformation
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resourceType VARCHAR(255), &#x9;&#x9;&#x9;&#x9;PROCEDURE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;subtype VARCHAR(255), &#x9;&#x9;&#x9;&#x9;&#x9;XSLT_TRANSFORM_PROCEDURE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;enabled BIT, &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;1
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;annotation LONGVARCHAR,&#x9;&#x9;&#x9;&#x9;&#x9;description
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;explicitlyDesigned BIT, &#x9;&#x9;&#x9;&#x9;NULL (default)
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;tableType VARCHAR(255), &#x9;&#x9;&#x9;&#x9;NULL (default)
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sqlText VARCHAR(2147483647), &#x9;&#x9;&#x9;NULL (default)
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;proprietaryModel VARCHAR(2147483647), &#x9;NULL (default)
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;columnName VARCHAR(255), &#x9;&#x9;&#x9;&#x9;ProductID
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;columnType VARCHAR(255),&#x9;&#x9;&#x9;&#x9;NUMERIC(2147483647,0)
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;nativeBaseType VARCHAR(255), &#x9;&#x9;&#x9;NULL (default)
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;nativeType VARCHAR(255)&#x9;&#x9;&#x9;&#x9;&#x9;NULL (default)
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;*/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;   
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set matchFound = true;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set greatGrandParentName = &#x9;&apos;&apos;; -- Always default to blank for first row which represents the resource.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set i = 1;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FOR childRes AS childResCursor DO&#x9; 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Initialize base variables 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set LogicalType = &apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set LogicalTransformation = &apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set LogicalDefinition = &apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set LogicalName = &apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set resourcePath &#x9;= childRes.resourcePath;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set resourceName&#x9;= childRes.resourceName;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set resourceType&#x9;= childRes.resourceType;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set resourceSubtype = childRes.subtype;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set columnName &#x9;&#x9;= childRes.columnName;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Make sure any reserved words are quoted.   
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- 2014-11-21: mtinius 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   Handle the unique situation where there is a double quote in the column name.  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   In CIS there must be 2 double quotes present in the view to escape a single double quote for the view to be valid.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (INSTR(columnName, &apos;&quot;&apos;) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set columnName = REPLACE(columnName, &apos;&quot;&apos;, &apos;&quot;&quot;&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set columnNameReserved = &apos;&quot;&apos;||columnName||&apos;&quot;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord(columnName, null, columnNameReserved);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set columnType &#x9;&#x9;= childRes.columnType;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug2 = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug2, &apos;child resourcePath=&apos;||TRIM(NVL(resourcePath,&apos;  &apos;)));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug2, &apos;child resourceName=&apos;||TRIM(NVL(resourceName,&apos;  &apos;)));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug2, &apos;child resourceType=&apos;||TRIM(NVL(resourceType,&apos;  &apos;)));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug2, &apos;child      subtype=&apos;||TRIM(NVL(resourceSubtype,&apos;  &apos;)));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug2, &apos;child   columnName=&apos;||TRIM(NVL(columnName,&apos;  &apos;)));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug2, &apos;child   columnType=&apos;||TRIM(NVL(columnType,&apos;  &apos;)));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Get the logical definition (annotation)
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/retrieveName/replaceSymbol(&apos;R&apos;, childRes.annotation, LogicalDefinition);

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/***********************************
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; * First row represents resource [table or procedure]
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; ***********************************/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Only invoke once per resource.  When the column name is null or it is a procedure with a cursor it indicates the container for the resources
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (columnName IS NULL OR columnType = &apos;CURSOR&apos;) THEN
/***********************
* DEBUG:  If there are any exceed depth errors, then uncomment the call print() line and execute again.
*         This will print the path of the view that is being processed and will be the view with the error.
***********************/
--call print(&apos;path=&apos;||resourcePath);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (physicalName is null or LENGTH(physicalName) = 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set physicalName = childRes.resourceName;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (physicalType is null or LENGTH(physicalType) = 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set physicalType = childRes.resourceType;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (generateMode = &apos;R&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Parse the SQL statement to extract the column information
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/getSqlScriptComplexColumns(resourcePath, resourceType, resourceSubtype, columnExpressionVect, sqlScriptColumnVector);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug2 = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set j = 1;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;while (j &lt;= CARDINALITY(columnExpressionVect)) do
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug2 = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug2, &apos;columnExpressionVect[&apos;||j||&apos;]=&apos;||columnExpressionVect[j]);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set j = j + 1;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end while;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Determine whether to generate or retrieve the logical name
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (generateMode = &apos;G&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET applyReservedWordList = 1;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/BestPractices_v81/Procedures/getNameXML(&apos;T&apos;, containerList, projectFolderName, greatGrandParentName, grandParentName, parentName, containerName, childRes.resourceName, null, applyReservedWordList, ConfigParamsXML, containerList, LogicalName, LogicalType, LogicalTransformation, LogicalDefinition, logicalStatus);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- DAH 2014-03-12 - Set Physical name to childRes.resourceName
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set physicalName = childRes.resourceName;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Perform a test for the annotation that is passed in and use it if it is not empty
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if ((LogicalDefinition IS NULL OR LENGTH(&apos;|&apos;||LogicalDefinition||&apos;|&apos;) = 2) and -- empty
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(childRes.annotation IS NOT NULL AND LENGTH(&apos;|&apos;||childRes.annotation||&apos;|&apos;) &gt; 2)) then --notEmpty
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/retrieveName/replaceSymbol(&apos;R&apos;, childRes.annotation, LogicalDefinition);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else -- generatMode=&apos;R&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/string/getDelimitedOccurrence(childRes.resourcePath, &apos;R&apos;, &apos;/&apos;, 1, 0, LogicalName);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(LogicalName, null, LogicalName);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- call print(&apos;VIEW: *************** physicalName=&apos;||TRIM(NVL(physicalName));

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Set the logical type for the resource
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET LogicalType = childRes.resourceType; -- [MRT-2010-08-13: changed to allow the container type to come through.

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(physicalName, null, physicalName);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- mtinius 2014-03-14
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (generateMode = &apos;G&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- DAH 2014-03-12 - If the Physical Name is null, set it to the Logical name
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF physicalName IS NULL OR LENGTH(physicalName) = 0 THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set physicalName = LogicalName;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- If the user does not want to generate logical names then blank them out
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (generateLogicalNames = 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set LogicalName = &apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set LogicalType = &apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set LogicalTransformation = &apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set LogicalDefinition = &apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET duration = CURRENT_TIMESTAMP - resourceStartTime;-- Rolling duration for the entire table.  Resets when a new table/procedure resource is started.

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (debug2 = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(&apos;                                        &apos;, debug2, &apos;&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(&apos;         INSERT INTO resultPipe VALUES (&apos;, debug2, &apos;&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(&apos;                             DataSource=&apos;, debug2, TRIM(NVL(datasourceNameList,&apos;  &apos;)));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--[NOT CURRENTLY IMPLEMENTED]
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;-- CALL /shared/ASAssets/Utilities/log/logDebugMessage(&apos;                              Published=&apos;, debug2, TRIM(NVL(Published));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(&apos;                      projectFolderName=&apos;, debug2, TRIM(NVL(projectFolderName,&apos;  &apos;)));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(&apos;                   greatGrandParentName=&apos;, debug2, TRIM(NVL(greatGrandParentName,&apos;  &apos;)));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(&apos;                        grandParentName=&apos;, debug2, TRIM(NVL(grandParentName,&apos;  &apos;)));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(&apos;                             parentName=&apos;, debug2, TRIM(NVL(parentName,&apos;  &apos;)));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(&apos;                          containerName=&apos;, debug2, TRIM(NVL(containerName,&apos;  &apos;)));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(&apos;                           physicalName=&apos;, debug2, TRIM(NVL(physicalName,&apos;  &apos;)));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(&apos;                           physicalType=&apos;, debug2, TRIM(NVL(physicalType,&apos;  &apos;)));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(&apos;                            LogicalName=&apos;, debug2, TRIM(NVL(LogicalName,&apos;  &apos;)));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(&apos;                            LogicalType=&apos;, debug2, TRIM(NVL(LogicalType,&apos;  &apos;)));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(&apos;                  LogicalTransformation=&apos;, debug2, TRIM(NVL(LogicalTransformation,&apos;  &apos;)));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(&apos;                      LogicalDefinition=&apos;, debug2, TRIM(NVL(LogicalDefinition,&apos;  &apos;)));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(&apos;                  childRes.resourcePath=&apos;, debug2, TRIM(NVL(childRes.resourcePath,&apos;  &apos;)));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(&apos;                               duration=&apos;, debug2, cast(duration as varchar));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INSERT INTO resultPipe VALUES (
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;TRIM(NVL(datasourceNameList,&apos;  &apos;)),
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;projectFolderName,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;-- TRIM(NVL(Published,&apos;  &apos;)),&#x9;--[NOT CURRENTLY IMPLEMENTED]
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;TRIM(NVL(greatGrandParentName,&apos;  &apos;)), 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;TRIM(NVL(grandParentName,&apos;  &apos;)), 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;TRIM(NVL(parentName,&apos;  &apos;)), 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;TRIM(NVL(containerName,&apos;  &apos;)),
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;TRIM(NVL(physicalName,&apos;  &apos;)),
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;TRIM(NVL(physicalType,&apos;  &apos;)),
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;TRIM(NVL(LogicalName,&apos;  &apos;)),
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;TRIM(NVL(LogicalType,&apos;  &apos;)),
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;TRIM(NVL(LogicalTransformation,&apos;  &apos;)),
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;TRIM(NVL(LogicalDefinition,&apos;  &apos;)),
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;TRIM(NVL(childRes.resourcePath,&apos;  &apos;)),
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;duration
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug2 = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set message = RPAD(&apos;container=&apos;||containerName,padAmount,padChar) ||&apos;  &apos;|| RPAD(&apos;physicalName=&apos;||physicalName,padAmount,padChar) || &apos;  logical=&apos;||LogicalName;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug2, message);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Shift the resources in preparation for column processing
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set greatGrandParentName = grandParentName;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set grandParentName = parentName;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set parentName = containerName;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set containerName = physicalName;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/***********************
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; * Column rows
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; **********************/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug2 = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(&apos;USE CASE: &quot;childRes.columnName IS NOT NULL&quot;&apos;, debug2, startingFolderExtendedRec.sourceFolderPath);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Set the logical type for the column
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET LogicalType = childRes.columnType;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Set the physical name using the resource name
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (columnName is not null) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord(columnName, null, columnName);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set columnName = &apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug2 = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(&apos;                 COL: generateMode=&apos;, debug2, generateMode||&apos;  columnName=[&apos;||columnName||&apos;]   Logical/columnType=&apos;||TRIM(NVL(LogicalType,&apos;  &apos;)));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**************************
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; * generateMode = &apos;G&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; **************************/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Determine whether to generate or retrieve the logical name
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (generateMode = &apos;G&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET applyReservedWordList = 1;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/BestPractices_v81/Procedures/getNameXML(&apos;C&apos;, containerList, projectFolderName, greatGrandParentName, grandParentName, parentName, containerName, columnName, null, applyReservedWordList, ConfigParamsXML, containerList, LogicalName, LogicalType, LogicalTransformation, LogicalDefinition, logicalStatus);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--call print(&apos;G_TABLE LogicalName=&apos;||TRIM(NVL(LogicalName,&apos;  &apos;)));

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- If the logicalType is empty use the physical column type otherwise use the logical type.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (LogicalType IS NULL OR LENGTH(&apos;|&apos;||LogicalType||&apos;|&apos;) = 2) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set LogicalType = childRes.columnType;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Perform a test for the annotation that is passed in and use it if it is not empty
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if ((LogicalDefinition IS NULL OR LENGTH(&apos;|&apos;||LogicalDefinition||&apos;|&apos;) = 2) and -- empty
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(childRes.annotation IS NOT NULL AND LENGTH(&apos;|&apos;||childRes.annotation||&apos;|&apos;) &gt; 2)) then --notEmpty
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/retrieveName/replaceSymbol(&apos;R&apos;, childRes.annotation, LogicalDefinition);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- DAH 2014-03-14 - Set physicalName = columnName
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set physicalName = columnName;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- mtinius 2014-03-14 - set physicalType
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set physicalType = TRIM(NVL(NVL(NVL(childRes.nativeType, childRes.nativeBaseType), childRes.columnType),&apos;  &apos;));

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**************************
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; * generateMode = &apos;R&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; **************************/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE&#x9;-- generateMode = &apos;R&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set physicalType = &apos;&apos;;
--set debug2=&apos;Y&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**************************
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; * FIND_INDEX(columnName... 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; *
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; * look for the column name / column alias in the columnExpressionVect
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; * which mirrors the sqlScriptColumnVector.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; **************************/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set i = FIND_INDEX(columnName, columnExpressionVect);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (i &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug2 = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(&apos;                 MATCH FOUND&apos;, debug2, &apos;  INDEX=&apos;||i||&apos; (found).  (columnAlias = columnName)=&apos;||TRIM(NVL(columnName,&apos;  &apos;)));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(&apos;                    sourceExpressionNoCast=&apos;, debug2, TRIM(NVL(sqlScriptColumnVector[i].sourceExpressionNoCast,&apos;  &apos;)));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/string/getDelimitedOccurrence(sqlScriptColumnVector[i].sourcePath, &apos;R&apos;, &apos;/&apos;, 2, 1, parentName);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord(parentName, null, parentName);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord(sqlScriptColumnVector[i].sourceAlias, null, containerName);

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (sqlScriptColumnVector[i].sourceColumn is not null) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord(sqlScriptColumnVector[i].sourceColumn, null, physicalName);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set physicalName = &apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord(sqlScriptColumnVector[i].columnAlias, null, LogicalName);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--call print(&apos;R_FIND_INDEX LogicalName=&apos;||TRIM(NVL(LogicalName,&apos;  &apos;)));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set LogicalType = sqlScriptColumnVector[i].columnType;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/*********************
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;determine affect of commas on the string.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;***********************/

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Apply Reserved Words and Encode the source expression (containerName.physicalName)
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set sourceExpressionEncoded = containerName||&apos;.&apos;||physicalName;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug2 = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(&apos;                    sourcePath=&apos;, debug2, TRIM(NVL(sqlScriptColumnVector[i].sourcePath,&apos;  &apos;)));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(&apos;                    sourceColumn=&apos;, debug2, TRIM(NVL(sqlScriptColumnVector[i].sourceColumn,&apos;  &apos;)));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(&apos;                    sourceAlias=&apos;, debug2, TRIM(NVL(sqlScriptColumnVector[i].sourceAlias,&apos;  &apos;)));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(&apos;                    columnAlias=&apos;, debug2, TRIM(NVL(sqlScriptColumnVector[i].columnAlias,&apos;  &apos;)));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(&apos;                    parentName=&apos;, debug2, TRIM(NVL(parentName,&apos;  &apos;)));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(&apos;                    containerName=&apos;, debug2, TRIM(NVL(containerName,&apos;  &apos;)));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(&apos;                    physicalName=&apos;, debug2, TRIM(NVL(physicalName,&apos;  &apos;)));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(&apos;                    LogicalName=&apos;, debug2, TRIM(NVL(LogicalName,&apos;  &apos;)));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(&apos;                    LogicalType=&apos;, debug2, TRIM(NVL(LogicalType,&apos;  &apos;)));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
--call print(&apos;sourceExpressionEncoded=&apos;||sourceExpressionEncoded);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedString(&apos;E&apos;, &apos;D&apos;, codingListColumns, sourceExpressionEncoded, moduleName, debug3, &apos;sourceExpressionEncoded&apos;, sourceExpressionEncoded);
--call print(&apos;sourceExpressionEncoded=&apos;||sourceExpressionEncoded);

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Extract the physical type
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/string/extractBiDelimitedText(
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;physicalColumnTypeList,&#x9;&#x9;&#x9;-- list of physical columns and types
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sourceExpressionEncoded||&apos;:&apos;,&#x9;-- search term in format: view.column:[TYPE]
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;[&apos;,&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- opening delimiter
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;]&apos;,&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- closing delimiter
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;1,1,1,&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- occurrence, trim text, case sensative
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;physicalType);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug2 = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(&apos;                    &apos;||physicalType||&apos; &lt;-- extractBiDelimitedText&apos;, debug2, &apos;(physicalColumnTypeList,&apos;||sourceExpressionEncoded||&apos;:&apos;&apos;,&apos;&apos;[&apos;&apos;,&apos;&apos;]&apos;&apos;,1,1,1)&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

--call print(&apos;if (&apos;||sqlScriptColumnVector[i].sourceExpressionNoCast||&apos; = &apos;||containerName||&apos;.&apos;||physicalName||&apos;) then&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- When the source expression (no cast statement) is simply the physical containerName.physicalName then don&apos;t export it.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (sqlScriptColumnVector[i].sourceExpressionNoCast = containerName||&apos;.&apos;||physicalName) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set LogicalTransformation = &apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (physicalName IS NOT NULL AND LENGTH(&apos;|&apos;||physicalName||&apos;|&apos;) &gt; 2) then  --notEmpty
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- However, when the source expression (no cast statement) contains a complex expression then replace the actual 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--  containerName.physicalName with a question mark.  The question mark gets replaced during execution of the generateViews 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--  with the actual column name.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug2 = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(&apos;                 containerName.physicalName=&apos;, debug2, TRIM(NVL(containerName||&apos;.&apos;||physicalName,&apos;  &apos;)));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set LogicalTransformation = REPLACE(sqlScriptColumnVector[i].sourceExpressionNoCast, containerName||&apos;.&apos;||physicalName, &apos;?&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug2 = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(&apos;                 LogicalTransformation=&apos;, debug2, TRIM(NVL(LogicalTransformation,&apos;  &apos;)));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set LogicalTransformation = sqlScriptColumnVector[i].sourceExpressionNoCast;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug2 = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(&apos;                 LogicalTransformation=&apos;, debug2, TRIM(NVL(LogicalTransformation,&apos;  &apos;)));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug2 = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(&apos;                 MATCH NOT FOUND&apos;, debug2, &apos;INDEX=0 (not found).  columnName=&apos;||TRIM(NVL(columnName,&apos;  &apos;)));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
--set debug2=&apos;N&apos;;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (generateLogicalNames = 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set LogicalName = &apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set LogicalType = &apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set LogicalTransformation = &apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set LogicalDefinition = &apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Add the physical name to the column string list
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (columnListStr IS NULL) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET columnListStr = &apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET columnListStr = columnListStr || physicalName || &apos;|&apos;; 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Determine if the LogicalName column is a duplicate and add a sequence number to it if it is.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/checkDuplicateColumn(columnListStr, newColumnListStr, LogicalName, columnListStr, LogicalName, dropColumn);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord(LogicalName, null, LogicalName);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--call print(&apos;columnListStr=&apos;||columnListStr);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Generate the transform &quot;CAST&quot; statement [mtinius: 5/10/2012]
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (ConfigParamsRec.generateCast = 1 and childRes.columnType IS NOT NULL AND LENGTH(&apos;|&apos;||childRes.columnType||&apos;|&apos;) &gt; 2) THEN --notEmpty
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET castResourceNameToType = &apos;CAST(? AS &apos;||childRes.columnType||&apos;)&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET duration = CURRENT_TIMESTAMP - resourceStartTime; -- Rolling duration for the entire table.  Resets when a new table/procedure resource is started.

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (debug2 = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(&apos;                                        &apos;, debug2, &apos;&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(&apos;         INSERT INTO resultPipe VALUES (&apos;, debug2, &apos;&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(&apos;                             DataSource=&apos;, debug2, TRIM(NVL(datasourceNameList,&apos;  &apos;)));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- [NOT CURRENTLY IMPLEMENTED]
&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- CALL /shared/ASAssets/Utilities/log/logDebugMessage(&apos;                              Published=&apos;, debug2, TRIM(NVL(Published,&apos;  &apos;)));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(&apos;                   greatGrandParentName=&apos;, debug2, TRIM(NVL(greatGrandParentName,&apos;  &apos;)));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(&apos;                        grandParentName=&apos;, debug2, TRIM(NVL(grandParentName,&apos;  &apos;)));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(&apos;                             parentName=&apos;, debug2, TRIM(NVL(parentName,&apos;  &apos;)));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(&apos;                          containerName=&apos;, debug2, TRIM(NVL(containerName,&apos;  &apos;)));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(&apos;                           physicalName=&apos;, debug2, TRIM(NVL(physicalName,&apos;  &apos;)));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(&apos;                           physicalType=&apos;, debug2, TRIM(NVL(physicalType,&apos;  &apos;)));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(&apos;                            LogicalName=&apos;, debug2, TRIM(NVL(LogicalName,&apos;  &apos;)));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(&apos;                            LogicalType=&apos;, debug2, TRIM(NVL(LogicalType,&apos;  &apos;)));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(&apos;                  LogicalTransformation=&apos;, debug2, TRIM(NVL(LogicalTransformation,&apos;  &apos;)));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(&apos;                      LogicalDefinition=&apos;, debug2, TRIM(NVL(LogicalDefinition,&apos;  &apos;)));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(&apos;                  childRes.resourcePath=&apos;, debug2, TRIM(NVL(childRes.resourcePath,&apos;  &apos;)));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(&apos;                               duration=&apos;, debug2, cast(duration as varchar));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Determine if the column types are supported or not
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/isUnsupportedColumnType(physicalType, isUnsupportedColumnTypeNative);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/isUnsupportedColumnType(LogicalType, isUnsupportedColumnTypeLogical);

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Asses whether to drop the column or not
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (dropColumn = 1 or
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;((generateUnsupportedColumnType is null or generateUnsupportedColumnType = 0) and (isUnsupportedColumnTypeNative = 1 or isUnsupportedColumnTypeLogical = 1))) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Determine which condition was met
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (dropColumn = 1) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug2 = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set message = &apos;DROPPED COLUMN DUE TO DUPLICATE NAME.  LogicalName=[&apos;||LogicalName||&apos;]&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug2, message);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug2 = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set message = &apos;DROPPED COLUMN WITH COLUMN_TYPE IN (&apos;||unsupportedColumnTypeList||&apos;)&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug2 = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug2, message);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set message = RPAD(&apos;container=&apos;||childRes.resourceName,padAmount,padChar) ||&apos;  &apos;|| RPAD(&apos;resource=&apos;||childRes.columnName,padAmount,padChar) || &apos;  logical=&apos;||LogicalName;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug2 = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug2, message);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INSERT INTO resultPipe VALUES (
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;TRIM(NVL(datasourceNameList,&apos;  &apos;)),
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;projectFolderName,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- TRIM(NVL(Published,&apos;  &apos;)), --[NOT CURRENTLY IMPLEMENTED] 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;TRIM(NVL(greatGrandParentName,&apos;  &apos;)), 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;TRIM(NVL(grandParentName,&apos;  &apos;)), 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;TRIM(NVL(parentName,&apos;  &apos;)), 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;TRIM(NVL(containerName,&apos;  &apos;)),
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;TRIM(NVL(physicalName,&apos;  &apos;)),
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;TRIM(NVL(physicalType,&apos;  &apos;)),
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;TRIM(NVL(LogicalName,&apos;  &apos;)),
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;TRIM(NVL(LogicalType,&apos;  &apos;)),
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;TRIM(NVL(LogicalTransformation,&apos;  &apos;)),
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;TRIM(NVL(LogicalDefinition,&apos;  &apos;)),
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;TRIM(NVL(childRes.resourcePath,&apos;  &apos;)),
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;duration
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug2 = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set message = RPAD(&apos;container=&apos;||childRes.resourceName,padAmount,padChar) ||&apos;  &apos;|| RPAD(&apos;resource=&apos;||childRes.columnName,padAmount,padChar) || &apos;  logical=&apos;||LogicalName;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug2, message);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF; -- IF (columnName IS NULL) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END FOR; -- FOR childRes AS childResCursor DO

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Add New Columns to the end of the View. 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (generateMode = &apos;G&apos; AND newColumnList IS NOT NULL AND LENGTH(TRIM(newColumnList)) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET physicalName = &apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET physicalType = &apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FOR c AS
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SELECT * FROM /shared/ASAssets/Utilities/string/extractDelimitedText(newColumnList,&apos;//&apos;,0,0,0,1,0) 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHERE object IS NOT NULL AND length(object) &gt; 0
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DO
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET newColumnName = null;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET newColumnType = null;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET newColumnValue = null;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET k = 0;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FOR item AS
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SELECT * FROM /shared/ASAssets/Utilities/string/extractDelimitedText(c.object,&apos;&amp;&amp;&apos;,0,0,0,1,0) 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHERE object IS NOT NULL AND length(object) &gt; 0
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DO
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET k = k + 1;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CASE 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN k = 1 THEN set newColumnName = item.object;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN k = 2 THEN set newColumnType = item.object;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN k = 3 THEN set newColumnValue = item.object;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END CASE;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END FOR;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (newColumnName IS NOT NULL AND newColumnType IS NOT NULL AND newColumnValue IS NOT NULL) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF ((INSTR(UPPER(newColumnType), &apos;CHAR&apos;) &gt; 0 OR INSTR(UPPER(newColumnType), &apos;TIMESTAMP&apos;) &gt; 0 OR INSTR(UPPER(newColumnType), &apos;DATE&apos;) &gt; 0 OR INSTR(UPPER(newColumnType), &apos;TIME&apos;) &gt; 0) AND
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(UPPER(newColumnValue) &lt;&gt; &apos;CURRENT_TIMESTAMP&apos; AND UPPER(newColumnValue) &lt;&gt; &apos;CURRENT_DATE&apos; AND UPPER(newColumnValue) &lt;&gt; &apos;CURRENT_TIME&apos;) AND
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(SUBSTRING(newColumnValue,1,1) &lt;&gt; &apos;&apos;&apos;&apos; AND SUBSTRING(newColumnValue,LENGTH(newColumnValue),1) &lt;&gt; &apos;&apos;&apos;&apos;)) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET newColumnTransformation = &apos;&apos;&apos;&apos;||newColumnValue||&apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET newColumnTransformation = newColumnValue;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Determine if the LogicalName column is a duplicate and add a sequence number to it if it is.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/checkDuplicateColumn(columnListStr, null, newColumnName, columnListStr, newColumnName, dropColumn);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord(newColumnName, null, newColumnName);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--call print(&apos;columnListStr=&apos;||columnListStr);

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (dropColumn = 0) THEN&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INSERT INTO resultPipe VALUES (
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;TRIM(NVL(datasourceNameList,&apos;  &apos;)),
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;projectFolderName,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- TRIM(NVL(Published,&apos;  &apos;)), --[NOT CURRENTLY IMPLEMENTED] 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;TRIM(NVL(greatGrandParentName,&apos;  &apos;)), 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;TRIM(NVL(grandParentName,&apos;  &apos;)), 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;TRIM(NVL(parentName,&apos;  &apos;)), 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;TRIM(NVL(containerName,&apos;  &apos;)),
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;TRIM(NVL(physicalName,&apos;  &apos;)),
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;TRIM(NVL(physicalType,&apos;  &apos;)),
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;TRIM(NVL(newColumnName,&apos;  &apos;)),
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;TRIM(NVL(newColumnType,&apos;  &apos;)),
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;TRIM(NVL(newColumnTransformation,&apos;  &apos;)),
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&apos;, -- LogicalDefinition
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&apos;, -- childRes.resourcePath
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;duration
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug2 = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set message = RPAD(&apos;container=&apos;||containerName,padAmount,padChar) ||&apos;  &apos;|| RPAD(&apos;newColumnType=&apos;||newColumnName,padAmount,padChar) || &apos;  newColumnType=&apos;||newColumnType;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug2, message);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF; -- IF (dropColumn = 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF; -- IF (newColumnName IS NOT NULL AND newColumnType IS NOT NULL AND newColumnValue IS NOT NULL) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END FOR; -- FOR c AS
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF; -- IF (generateMode = &apos;G&apos; AND newColumnList IS NOT NULL AND LENGTH(TRIM(newColumnList)) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF; -- IF (validUsedResource = 1) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;END IF; --if (isDerivedMatch  = 0)
&#x9;&#x9;&#x9;&#x9;END IF; -- IF ( list.resType = &apos;TABLE&apos; OR list.resType = &apos;PROCEDURE&apos;)
&#x9;&#x9;&#x9;END FOR;
&#x9;&#x9;END IF;&#x9;-- IF (resourceExists and startingFolderExtendedRec.process = 1) THEN
&#x9;&#x9;SET sfNum = sfNum + 1;
&#x9;END WHILE;     
&#x9;IF (sfNum-1 &gt; 0) THEN
&#x9;&#x9;set resultRec.Duration = CURRENT_TIMESTAMP - generationStartTime;
&#x9;&#x9;set resultRec.DataSource = &apos;FINISHED&apos;;
&#x9;&#x9;INSERT INTO resultPipe VALUES(resultRec);
&#x9;END IF;
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1564671321253</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="p:5:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="p:6:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="references" type="NULL"/>
</metadata>