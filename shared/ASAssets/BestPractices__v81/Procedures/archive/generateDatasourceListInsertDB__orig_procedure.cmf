<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:e931daa6-7fda-456a-badf-4cdb1c228a1a -->
<metadata name="generateDatasourceListInsertDB_orig" path="/shared/ASAssets/BestPractices_v81/Procedures/archive/generateDatasourceListInsertDB_orig" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <parameters>
    <parameter name="performInsertUpdate" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="refreshCache" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="sourceResource" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="generateLogicalNames" direction="IN" nullable="true">
      <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
    </parameter>
    <parameter name="layerType" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="inGroupIds" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="inDerivedFilterPath" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="inStartingFolderVector" direction="IN" nullable="true">
      <datatype name="inStartingFolderVector" type="ARRAY" maxLength="0">
        <itemDatatype>
          <datatype name="startingFolderExtendedType" referenceDefinitionSet="/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions" referenceType="startingFolderExtendedType" type="TREE" refId="257">
            <element name="groupId">
              <datatype name="VARCHAR" type="STRING" maxLength="255"/>
            </element>
            <element name="process">
              <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
            </element>
            <element name="layerType">
              <datatype name="VARCHAR" type="STRING" maxLength="255"/>
            </element>
            <element name="pathDerivation">
              <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
            </element>
            <element name="sourceFolderPath">
              <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
            </element>
            <element name="targetFolderPath">
              <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
            </element>
            <element name="derivedFilterPath">
              <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
            </element>
            <element name="typeDefProcPath">
              <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
            </element>
            <element name="typeDefProcName">
              <datatype name="VARCHAR" type="STRING" maxLength="255"/>
            </element>
          </datatype>
        </itemDatatype>
      </datatype>
    </parameter>
    <parameter name="ConfigParamsVector" direction="IN" nullable="true">
      <datatype name="ConfigParamsVector" type="ARRAY" maxLength="0">
        <itemDatatype>
          <datatype name="ConfigParamsType" referenceDefinitionSet="/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions" referenceType="ConfigParamsType" type="TREE" refId="257">
            <element name="generateMode">
              <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
            </element>
            <element name="outputMode">
              <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
            </element>
            <element name="generateViews">
              <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
            </element>
            <element name="resourceCaseRule">
              <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
            </element>
            <element name="columnCaseRule">
              <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
            </element>
            <element name="separator">
              <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
            </element>
            <element name="useAliasRule">
              <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
            </element>
            <element name="resourcePrefix">
              <datatype name="VARCHAR" type="STRING" maxLength="255"/>
            </element>
            <element name="resourceSuffix">
              <datatype name="VARCHAR" type="STRING" maxLength="255"/>
            </element>
            <element name="generateWithSourceColumn">
              <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
            </element>
            <element name="generateCast">
              <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
            </element>
            <element name="generateIndexes">
              <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
            </element>
            <element name="debug">
              <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
            </element>
            <element name="debug2">
              <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
            </element>
            <element name="debug3">
              <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
            </element>
            <element name="basePath">
              <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
            </element>
            <element name="scriptsPath">
              <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
            </element>
            <element name="padAmount">
              <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
            </element>
          </datatype>
        </itemDatatype>
      </datatype>
    </parameter>
    <parameter name="result" direction="OUT" nullable="true">
      <datatype name="DataSourceRowV2Row" type="TABLE" refId="256">
        <element name="DataSource">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="ProjectFolderName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="GreatGrandParentName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="GrandParentName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="ParentName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="ContainerName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="PhysicalName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="NativeType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="LogicalName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="LogicalType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="LogicalTransformation">
          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
        </element>
        <element name="LogicalDefinition">
          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
        </element>
        <element name="LogicalPath">
          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
        </element>
        <element name="Duration">
          <datatype name="IntervalDay" type="INTERVAL_DAY" intervalMode="INTERVAL_HOUR_TO_SECOND" intervalPrecision="2" fractionalSecondPrecision="6"/>
        </element>
      </datatype>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/resource/RefreshResourceCacheSynchronously" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="path" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="type" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="pollingInterval" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/generateDatasourceList" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="sourceResource" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="generateLogicalNames" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="layerType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inGroupIds" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inDerivedFilterPath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="startingFolderVector" direction="IN">
        <datatype type="ARRAY" maxLength="0">
          <itemDatatype>
            <datatype name="startingFolderExtendedType" referenceDefinitionSet="/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions" referenceType="startingFolderExtendedType" type="TREE" refId="257">
              <element name="groupId">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="process">
                <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
              </element>
              <element name="layerType">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="pathDerivation">
                <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
              </element>
              <element name="sourceFolderPath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="targetFolderPath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="derivedFilterPath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="typeDefProcPath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="typeDefProcName">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
            </datatype>
          </itemDatatype>
        </datatype>
      </element>
      <element name="ConfigParamsVector" direction="IN">
        <datatype type="ARRAY" maxLength="0">
          <itemDatatype>
            <datatype name="ConfigParamsType" referenceDefinitionSet="/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions" referenceType="ConfigParamsType" type="TREE" refId="513">
              <element name="generateMode">
                <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
              </element>
              <element name="outputMode">
                <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
              </element>
              <element name="generateViews">
                <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
              </element>
              <element name="resourceCaseRule">
                <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
              </element>
              <element name="columnCaseRule">
                <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
              </element>
              <element name="separator">
                <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
              </element>
              <element name="useAliasRule">
                <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
              </element>
              <element name="resourcePrefix">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="resourceSuffix">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="generateWithSourceColumn">
                <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
              </element>
              <element name="generateCast">
                <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
              </element>
              <element name="generateIndexes">
                <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
              </element>
              <element name="debug">
                <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
              </element>
              <element name="debug2">
                <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
              </element>
              <element name="debug3">
                <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
              </element>
              <element name="basePath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="scriptsPath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="padAmount">
                <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
              </element>
            </datatype>
          </itemDatatype>
        </datatype>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="DataSource">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ProjectFolderName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="GreatGrandParentName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="GrandParentName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ParentName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ContainerName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="PhysicalName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="NativeType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="LogicalName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="LogicalType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="LogicalTransformation">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="LogicalDefinition">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="LogicalPath">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="Duration">
            <datatype type="INTERVAL_DAY" intervalMode="INTERVAL_HOUR_TO_SECOND" intervalPrecision="2" fractionalSecondPrecision="6"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/_ProjectMaintenance/defaultValues" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getResourceCacheConfigCursor" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="inType" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="configured">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="cachePolicy">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="storageMode">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="storageDataSourcePath">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="storageTargetName">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="storagePath">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="storageType">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="refreshMode">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="scheduleMode">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="startTime">
            <datatype type="DATETIME"/>
          </element>
          <element name="fromTimeInADay">
            <datatype type="INTEGER"/>
          </element>
          <element name="endTimeInADay">
            <datatype type="INTEGER"/>
          </element>
          <element name="recurringDay">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="interval">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="period">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="count">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="isCluster">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="expirationPeriod">
            <datatype type="INTEGER"/>
          </element>
          <element name="clearRule">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="allOrNothing">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="incremental">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="storageBucketMode">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="storageBucketCatalog">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="storageBucketSchema">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="storageBucketPrefix">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="storageBucketNumBuckets">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="storageDropCreateIdx">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="firstRefreshCallback">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="secondRefreshCallback">
            <datatype type="STRING" maxLength="32768"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* generateDatasourceListInsertDB:

&#x9;This procedure generates the physcial to logical table and column mappings from the source datasource based on various input parameters such as 
&#x9;&#x9;table case, column case, and table prefix.
&#x9;This procedure inserts the data into a table which gets used by the Best Practices Data Abstraction procedures to generate the views.
&#x9;&#x9;The table is called common_model_v3 and is resident in the postgres cache database that comes with DV.
&#x9;&#x9;Initially, it has to be created and the /shared/ASAssets/BestPractices_v81/DataSource/CommonModelCache data source has to be configured.
&#x9;Lastly, the common_model view is synchronously cached.

 &#x9;Input:
&#x9;&#x9;IN debug&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1),&#x9;
&#x9;&#x9;&#x9;-- Y=debug on.  N=debug off.
&#x9;&#x9;IN performInsertUpdate&#x9;&#x9;&#x9;CHAR(1),&#x9;
&#x9;&#x9;&#x9;-- Y=perform SQL operation.  N=do not perform SQL operation and only display results.
&#x9;&#x9;IN refreshCache&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1),
&#x9;&#x9;&#x9;-- Y=perform cache refres on common_model cache view.  N=do not perform cache refresh.
&#x9;&#x9;IN generateLogicalNames&#x9;&#x9;&#x9;BIT, &#x9;
&#x9;&#x9;&#x9;-- generate the logical names or physical names only
&#x9;&#x9;&#x9;-- 1 (TRUE) [default] - generate datasource list with logical names
&#x9;&#x9;&#x9;-- 0 (FALSE) - generate datasource list only with no logical names, 
&#x9;&#x9;&#x9;-- Generally this parameter is true.  However, it may be useful to set to 0 when generateMode=&apos;G&apos; and layerType=&apos;PM&apos; which allows
&#x9;&#x9;&#x9;--  the user to generate just the physical names for the physical metadata in the spreadsheet format as a way of initializing
&#x9;&#x9;&#x9;--  the physical names only.
&#x9;&#x9;IN generateMode&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1),
&#x9;&#x9;&#x9;-- Determines whether to retrieve names from the Common_Model_v2_file[1-3].xls spreadsheets or generate them and
&#x9;&#x9;&#x9;--   is only meaninfful when generateLogicalNames=1
&#x9;&#x9;&#x9;-- G=Generate the resource names 
&#x9;&#x9;&#x9;--   use &apos;G&apos; in conjunctionwith layerType=&apos;PM&apos; to generate the physical metadata names to the spreadsheet.
&#x9;&#x9;&#x9;--   This would be the strategy for initializing the Common_Model_v2_file[1-3].xls spreadsheet.  
&#x9;&#x9;&#x9;--   It is often useful to set the caseRule parameter to establish the type of logical names that you want to start with.
&#x9;&#x9;&#x9;-- R=Retrieve the resource name from a spreadsheet. (resources include PATH names, VIEW names AND COLUMN names)
&#x9;&#x9;&#x9;--   use &apos;R&apos; in conjunction with layerType=&apos;FV&apos;
&#x9;&#x9;IN tableCaseRule, -- (used when generateMode=&apos;G&apos;) 
&#x9;&#x9;&#x9;-- O=[default] Original_case - The word is not changed at all -- just pass it through as is
&#x9;&#x9;&#x9;-- j=javaCase - 1st word part is lower case, following word parts are 1st is letter is upper and remaining word part is lower with no separators
&#x9;&#x9;&#x9;-- C=CamelCase - 1st letter of each word part is upper case and remaining word part is lower with no separators
&#x9;&#x9;&#x9;-- T=Title_Case - 1st letter of each word part is upper case and remaining word part is lower with separators retained
&#x9;&#x9;&#x9;-- U=UPPER_CASE - All word parts are UPPER case with separtors retained
&#x9;&#x9;&#x9;-- l=lower_case - All word parts are lower case with separators retained
&#x9;&#x9;IN columnCaseRule, -- (used when generateMode=&apos;G&apos;) 
&#x9;&#x9;&#x9;-- O=[default] Original_case - The word is not changed at all -- just pass it through as is
&#x9;&#x9;&#x9;-- j=javaCase - 1st word part is lower case, following word parts are 1st is letter is upper and remaining word part is lower with no separators
&#x9;&#x9;&#x9;-- C=CamelCase - 1st letter of each word part is upper case and remaining word part is lower with no separators
&#x9;&#x9;&#x9;-- T=Title_Case - 1st letter of each word part is upper case and remaining word part is lower with separators retained
&#x9;&#x9;&#x9;-- U=UPPER_CASE - All word parts are UPPER case with separtors retained
&#x9;&#x9;&#x9;-- l=lower_case - All word parts are lower case with separators retained
&#x9;&#x9;IN useAliasRule, -- (used when generateMode=&apos;G&apos;)
&#x9;&#x9;&#x9;-- 0=[default] DO NOT perform alias rule lookup at all.  Word Part is passed through (default is 0)
&#x9;&#x9;&#x9;-- 1=Use alias rule and MATCH CASE exactly
&#x9;&#x9;&#x9;-- 2=Use alias rule and DO NOT MATCH CASE
&#x9;&#x9;&#x9;-- The &quot;AliasNameRuleSet()&quot; procedure is found in the folder /shared/&lt;project-folder&gt;/_scripts/Configure.
&#x9;&#x9;IN tablePrefix, -- (used when generateMode=&apos;G&apos;) 
&#x9;&#x9;&#x9;-- null/blank for no prefix or some value for a table prefix.
&#x9;&#x9;IN tableSuffix, -- (used when generateMode=&apos;G&apos;) 
&#x9;&#x9;&#x9;-- null/blank for no suffix or some value for a table suffix.
&#x9;&#x9;IN newColumnList, --(used when generateMode=&apos;G&apos;)
&#x9;&#x9;&#x9;-- A formatted list of new columns to add to the end of the view.  The column will not be added if it already exists.
&#x9;&#x9;&#x9;-- The format is as follows:  column1&amp;&amp;type1&amp;&amp;value1//column2&amp;&amp;type2&amp;&amp;value2//column3&amp;&amp;type3&amp;&amp;value3
&#x9;&#x9;IN generateUnsupportedColumnType BIT,
&#x9;&#x9;&#x9;-- flag indicating whether to ignore or generate unsupported column types.  For example in Oracle an SDO spatial type gets imported into Composite as &apos;OTHER&apos;.
&#x9;&#x9;&#x9;-- 0/null (default) - ignore column type = &apos;OTHER&apos; and do not generate that column
&#x9;&#x9;&#x9;-- 1 - generate columns where the column type = &apos;OTHER&apos;
&#x9;&#x9;IN exactMatch&#x9;&#x9;&#x9;&#x9;&#x9;BIT,
&#x9;&#x9;&#x9;-- specifies how the source resource will be matched against the resource being interrogated
&#x9;&#x9;&#x9;-- 0=fuzzy match - sourcePath + derivedFilterPath must simply be contained within resourcePath
&#x9;&#x9;&#x9;-- 1 (default)=exact match - sourcePath + derivedFilterPath must match exactly in resourcePath
&#x9;&#x9;IN derivedFilterPath&#x9;&#x9;&#x9;LONGVARCHAR, 
&#x9;&#x9;&#x9;-- The list &quot;derivedFilterPath&quot; is a comma-separated list of resources and may be used with either generateToFolder (option 1) to groupId (option 2) 
&#x9;&#x9;&#x9;-- The path is derived by concatenating the partial filter path with the source path either from the sourceResource or of the designated layer type and groupId.
&#x9;&#x9;&#x9;-- The layerType and the groupId are used to filter the rows from the configureStartingFolders.  The source path is
&#x9;&#x9;&#x9;--    defined in configureStartingFolders per the layerType and groupId combination.
&#x9;&#x9;&#x9;--   e.g. layerType=CP and sourceFolderPath=/shared/BestPractices/DataAbstractionAbstractionSample/Application/Views
&#x9;&#x9;&#x9;--        The derivedFilterPath list=&quot;Orders_Closed,/Orders/Customers,Orders/Product&quot;
&#x9;&#x9;&#x9;--        Even though there are several other views in the /Orders folder under the /Application/Views only the ones specified
&#x9;&#x9;&#x9;--&#x9;      will be generated to the Application/Published.  Views directly under the source path do not require any qualifying path except the view name.
&#x9;&#x9;&#x9;--        Lastly, a leading &apos;/&apos; is not required but may be present if desired.
&#x9;&#x9;&#x9;-- Correlate the groupId position with the derivedFilterPath position
&#x9;&#x9;&#x9;--&#x9;&#x9;derivedFilterPath=&quot;customers,orders&quot;,shippingmethods
&#x9;&#x9;&#x9;--                         |                     |
&#x9;&#x9;&#x9;--                         v                     v
&#x9;&#x9;&#x9;--&#x9;&#x9;          groupId=ds_inventory.tutorial,ds_orders.tutorial
&#x9;&#x9;&#x9;-- If null, generate views from all source folders as directed by the sourceResource or &quot;configure starting folders&quot; and the designated layer type.
&#x9;&#x9;IN excludeDsPathsList&#x9;&#x9;&#x9;LONGVARCHAR,
&#x9;&#x9;&#x9;-- comma separated list of resource paths or partials paths to exclude.  This may be useful when a data source has been moved and it&apos;s index or foreign keys
&#x9;&#x9;&#x9;--&#x9;are pointing to another data source that does not exist anymore.  It may be necessary to exclude that path or paths.  If an exception is thrown during 
&#x9;&#x9;&#x9;--&#x9;execution, try excluding those paths.
&#x9;&#x9;&#x9;--&#x9;Values: /shared/MyPath/Physical/Metadata/MyDatasource
&#x9;
&#x9;&#x9;IN sourceResource&#x9;&#x9;&#x9;&#x9;LONGVARCHAR, &#x9;
&#x9;&#x9;&#x9;-- The target folder in CIS to begin searching for views to generate the view list or
&#x9;&#x9;&#x9;-- a target view (exact path) to generate for.
&#x9;&#x9;&#x9;-- If this is set it supercedes layerType, inGroupIDs and derivedFilterPath

&#x9;Output:
&#x9;&#x9;OUT result&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;PIPE /shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions.DataSourceRowV2Row
&#x9;&#x9;&#x9;DataSource &#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(255), -- The name of the data source in composite (data lineage-used resources)
&#x9;&#x9;&#x9;ProjectFolderName&#x9;&#x9;&#x9;VARCHAR(255), -- The project folder name is the last name found in the defaultValues.basePath for a project.
&#x9;&#x9;&#x9;--[NOT CURRENTLY IMPLEMENTED] Published&#x9;VARCHAR(255), -- Indicates whether this element is published in composite (data lineage-dependent resources)
&#x9;&#x9;&#x9;GreatGrandParentName&#x9;&#x9;VARCHAR(255), -- The name of the great grand parent container (data source name)
&#x9;&#x9;&#x9;GrandParentName&#x9;&#x9;&#x9;&#x9;VARCHAR(255), -- The name of the grand parent container (catalog name)
&#x9;&#x9;&#x9;ParentName &#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(255), -- The name of the parent container - (schema name)
&#x9;&#x9;&#x9;ContainerName &#x9;&#x9;&#x9;&#x9;VARCHAR(255), -- The name of the container - parent to the resource (table name)
&#x9;&#x9;&#x9;PhysicalName&#x9;&#x9;&#x9;&#x9;VARCHAR(255), -- The physical column name (a.k.a. column name)
&#x9;&#x9;&#x9;NativeType&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(255), -- The native  type (a.k.a. table/view alias)
&#x9;&#x9;&#x9;LogicalName&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(255), -- The logical column name (a.k.a. table/view alias)
&#x9;&#x9;&#x9;LogicalType &#x9;&#x9;&#x9;&#x9;VARCHAR(255), -- The logical column type
&#x9;&#x9;&#x9;LogicalTransformation&#x9;&#x9;LONGVARCHAR,  -- The logical column transformation excluding outer cast statement
&#x9;&#x9;&#x9;LogicalDefinition&#x9;&#x9;&#x9;LONGVARCHAR,  -- The logical resource definition (a.k.a. view/table/column annotation)
&#x9;&#x9;&#x9;LogicalPath&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR,  -- The logical resource (view) path
&#x9;&#x9;&#x9;Duration&#x9;&#x9;&#x9;&#x9;&#x9;INTERVAL HOUR TO SECOND -- The time it takes to process a view
&#x9;
&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;DV Version:&#x9;&#x9;Reason:
&#x9;01/23/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;8.0.0&#x9;&#x9;&#x9;Created new to generate physical to logical table and column mappings and insert into a table.
&#x9;04/15/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;B.P. 2019.200: Added scriptsPath for flexibility of the location of the _scripts folder.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   Changed custom functions to explicit paths.

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

*/
PROCEDURE generateDatasourceListInsertDB_orig(
&#x9;IN performInsertUpdate&#x9;&#x9;&#x9;CHAR(1),&#x9;
&#x9;&#x9;-- Y=perform SQL operation.  N=do not perform SQL operation and only display results.
&#x9;IN refreshCache&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1),&#x9;
&#x9;&#x9;-- Y=perform SQL operation.  N=do not perform SQL operation and only display results.
&#x9;IN sourceResource&#x9;&#x9;&#x9;&#x9;LONGVARCHAR, &#x9;
&#x9;&#x9;-- The source folder in CIS to begin searching for views to generate the view list or
&#x9;&#x9;-- a source view (exact path) to generate for.
&#x9;&#x9;-- If this is set it supercedes layerType, inGroupIDs and derivedFilterPath
   &#x9;IN generateLogicalNames&#x9;&#x9;&#x9;BIT, &#x9;
&#x9;&#x9;-- 0 (FALSE) - generate datasource list only with no logical names, 
    &#x9;-- 1 (TRUE) - generate datasource list with logical names

&#x9;-- If sourceResource is blank, then layerType, inGroupIds must be set with derivedFilterPath being optional
   &#x9;IN layerType&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR,
&#x9;&#x9;-- PM=Physical Metadata - generateDatasourceList physical metadata tables
&#x9;&#x9;-- FV=Formatting Views &#x9;- generateDatasourceList formatting views
&#x9;&#x9;-- BV=Business Views &#x9;- generateDatasourceList business views (only single source)
&#x9;&#x9;-- LV=Logical Views &#x9;- generateDatasourceList logical views (only single source)
&#x9;&#x9;-- CV=Client Views &#x9;&#x9;- generateDatasourceList client views (only single source)
&#x9;&#x9;-- CP=Client Published &#x9;- generateDatasourceList client published views (only single source)
&#x9;IN inGroupIds&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR, 
&#x9;&#x9;-- This is a comma separate list group ids to process from the configureStartingFolders.
&#x9;&#x9;-- Pass in null to select all groupIds.
&#x9;IN inDerivedFilterPath&#x9;&#x9;&#x9;LONGVARCHAR, 
&#x9;&#x9;-- The list &quot;derivedFilterPath&quot; is a comma-separated list of resources and may be used with either generateToFolder (option 1) to groupId (option 2) 
&#x9;&#x9;-- The path is derived by concatenating the partial filter path with the source path of the designated layer type.
&#x9;&#x9;-- The layerType and the groupId are used to filter the rows from the configureStartingFolders.  The source path is
&#x9;&#x9;--    defined in configureStartingFolders per the layerType and groupId combination.
&#x9;&#x9;--   e.g. layerType=CP and sourceFolderPath=/shared/BestPractices/DataAbstractionSample/Application/Views
&#x9;&#x9;--        The derivedFilterPath list=Orders_Closed,/Orders/Customers,Orders/Product
&#x9;&#x9;--        Even though there are several other views in the /Orders folder under the Client_Views only the ones specified
&#x9;&#x9;--&#x9;      will be generated to the Client_Published.  Views directly under the source path do not require any qualifying path except the view name.
&#x9;&#x9;--        Lastly, a leading &apos;/&apos; is not required but may be present if desired.
&#x9;&#x9;-- Correlate the groupId position with the derivedFilterPath position
&#x9;&#x9;--&#x9;&#x9;derivedFilterPath=&quot;customers,orders&quot;,shippingmethods
&#x9;&#x9;--                         |                     |
&#x9;&#x9;--                         v                     v
&#x9;&#x9;--&#x9;&#x9;          groupId=ds_inventory.tutorial,ds_orders.tutorial
&#x9;&#x9;-- If null, generate views from all source folders as directed by the &quot;configure starting folders&quot; and the designated layer type.

&#x9;IN &#x9;inStartingFolderVector&#x9;&#x9;VECTOR(/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions.startingFolderExtendedType),
&#x9;&#x9;-- This is an alternative entry point for this method.  If this is set then layerType,inGroupIds and inDerivedFilterPath are ignored

&#x9;IN ConfigParamsVector&#x9;&#x9;&#x9;VECTOR(/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions.ConfigParamsType),

&#x9;OUT result&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;PIPE /shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions.DataSourceRowV2Row
)
BEGIN
&#x9;DECLARE debug&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1);&#x9;-- Y=debug on.  N=debug off.
&#x9;DECLARE moduleName&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;generateDatasourceListInsertDB&apos;;
&#x9;DECLARE sqlStatement&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE whereClause&#x9;&#x9;&#x9;&#x9;LONGVARCHAR DEFAULT &apos;&apos;;
&#x9;DECLARE commonModelDatabasePath&#x9;VARCHAR DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.commonModelDatabasePath;
&#x9;DECLARE commonModelViewPath&#x9;&#x9;VARCHAR DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.commonModelViewPath;
&#x9;DECLARE cacheRefresh&#x9;&#x9;&#x9;BOOLEAN DEFAULT false;
&#x9;DECLARE&#x9;curs&#x9;&#x9;&#x9; &#x9;&#x9;CURSOR (cnt INTEGER);
&#x9;DECLARE rowCount&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE resourceName&#x9;&#x9;&#x9;VARCHAR(255);
&#x9;DECLARE startTime&#x9;&#x9;&#x9;&#x9;TIMESTAMP DEFAULT CURRENT_TIMESTAMP;
&#x9;DECLARE endTime&#x9;&#x9;&#x9;&#x9;&#x9;TIMESTAMP;
&#x9;DECLARE duration&#x9;&#x9;&#x9;&#x9;INTERVAL DAY TO SECOND;
&#x9;DECLARE rec&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions.DataSourceRowV2Row;

&#x9;-- Set local Configuration parameters&#x9;
&#x9;SET debug = ConfigParamsVector[1].debug;
&#x9;
&#x9;/*********************************************
&#x9; * Generate the Physical to Logical Mappings
&#x9; *********************************************/
&#x9;FOR r AS
&#x9;&#x9;SELECT
&#x9;&#x9;&#x9;CAST(CASE WHEN DataSource IS NOT NULL AND INSTR(DataSource,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(DataSource),&apos;&quot;&apos;) = 1 THEN SUBSTR(DataSource, 2, LENGTH(DataSource)-2)
&#x9;&#x9;&#x9;&#x9; ELSE DataSource
&#x9;&#x9;&#x9;&#x9; END AS VARCHAR(255)) DataSource,
&#x9;&#x9;&#x9;CAST(CASE WHEN ProjectFolderName IS NOT NULL AND INSTR(ProjectFolderName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(ProjectFolderName),&apos;&quot;&apos;) = 1 THEN SUBSTR(ProjectFolderName, 2, LENGTH(ProjectFolderName)-2)
&#x9;&#x9;&#x9;&#x9; ELSE ProjectFolderName
&#x9;&#x9;&#x9;&#x9; END AS VARCHAR(255)) ProjectFolderName,
&#x9;&#x9;&#x9;CAST(CASE WHEN GreatGrandParentName IS NOT NULL AND INSTR(GreatGrandParentName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(GreatGrandParentName),&apos;&quot;&apos;) = 1 THEN SUBSTR(GreatGrandParentName, 2, LENGTH(GreatGrandParentName)-2)
&#x9;&#x9;&#x9;&#x9; ELSE GreatGrandParentName
&#x9;&#x9;&#x9;&#x9; END AS VARCHAR(255)) GreatGrandParentName,
&#x9;&#x9;&#x9;CAST(CASE WHEN GrandParentName IS NOT NULL AND INSTR(GrandParentName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(GrandParentName),&apos;&quot;&apos;) = 1 THEN SUBSTR(GrandParentName, 2, LENGTH(GrandParentName)-2)
&#x9;&#x9;&#x9;&#x9; ELSE GrandParentName
&#x9;&#x9;&#x9;&#x9; END AS VARCHAR(255)) GrandParentName,
&#x9;&#x9;&#x9;CAST(CASE WHEN ParentName IS NOT NULL AND INSTR(ParentName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(ParentName),&apos;&quot;&apos;) = 1 THEN SUBSTR(ParentName, 2, LENGTH(ParentName)-2)
&#x9;&#x9;&#x9;&#x9; ELSE ParentName
&#x9;&#x9;&#x9;&#x9; END AS VARCHAR(255)) ParentName,
&#x9;&#x9;&#x9;CAST(CASE WHEN ContainerName IS NOT NULL AND INSTR(ContainerName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(ContainerName),&apos;&quot;&apos;) = 1 THEN SUBSTR(ContainerName, 2, LENGTH(ContainerName)-2)
&#x9;&#x9;&#x9;&#x9; ELSE ContainerName
&#x9;&#x9;&#x9;&#x9; END AS VARCHAR(255)) ContainerName,
&#x9;&#x9;&#x9;CAST(CASE WHEN PhysicalName IS NOT NULL AND INSTR(PhysicalName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(PhysicalName),&apos;&quot;&apos;) = 1 THEN SUBSTR(PhysicalName, 2, LENGTH(PhysicalName)-2)
&#x9;&#x9;&#x9;&#x9; ELSE PhysicalName
&#x9;&#x9;&#x9;&#x9; END AS VARCHAR(255)) PhysicalName,
&#x9;&#x9;&#x9;NativeType, 
&#x9;&#x9;&#x9;CAST(CASE WHEN LogicalName IS NOT NULL AND INSTR(LogicalName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(LogicalName),&apos;&quot;&apos;) = 1 THEN SUBSTR(LogicalName, 2, LENGTH(LogicalName)-2)
&#x9;&#x9;&#x9;&#x9; ELSE LogicalName
&#x9;&#x9;&#x9;&#x9; END AS VARCHAR(255)) LogicalName,
&#x9;&#x9;&#x9;LogicalType,
&#x9;&#x9;&#x9;LogicalTransformation,
&#x9;&#x9;&#x9;LogicalDefinition,
&#x9;&#x9;&#x9;LogicalPath,
&#x9;&#x9;&#x9;Duration
&#x9;&#x9;&#x9;FROM /shared/ASAssets/BestPractices_v81/Procedures/generateDatasourceList(
&#x9;&#x9;&#x9;&#x9;&#x9;sourceResource, &#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- The source folder in CIS to begin searching for views to generate the view list or
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- a source view (exact path) to generate for.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- If this is set it supercedes layerType, inGroupIDs and derivedFilterPath
&#x9;&#x9;&#x9;&#x9;&#x9;generateLogicalNames, &#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- 0 (FALSE) - generate datasource list only with no logical names, 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- 1 (TRUE) - generate datasource list with logical names
&#x9;&#x9;&#x9;&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;-- If sourceResource is blank, then layerType, inGroupIds must be set with derivedFilterPath being optional
&#x9;&#x9;&#x9;&#x9;&#x9;layerType,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- PM=Physical Metadata - generateDatasourceList physical metadata tables
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- FV=Formatting Views &#x9;- generateDatasourceList formatting views
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- BV=Business Views &#x9;- generateDatasourceList business views (only single source)
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- LV=Logical Views &#x9;- generateDatasourceList logical views (only single source)
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- CV=Client Views &#x9;&#x9;- generateDatasourceList client views (only single source)
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- CP=Client Published &#x9;- generateDatasourceList client published views (only single source)
&#x9;&#x9;&#x9;&#x9;&#x9;inGroupIds, 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- This is a comma separate list group ids to process from the configureStartingFolders.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Pass in null to select all groupIds.
&#x9;&#x9;&#x9;&#x9;&#x9;inDerivedFilterPath, 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- The path is derived by concatenating the partial filter path with the source path of the designated layer type.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- The layerType and the groupId are used to filter the rows from the configureStartingFolders.  The source path is
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--    defined in configureStartingFolders per the layerType and groupId combination.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   e.g. layerType=CP and sourceFolderPath=/shared/BestPractices/DataAbstractionSample/Application/Views
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--        The derivedFilterPath list=Orders_Closed,/Orders/Customers,Orders/Product
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--        Even though there are several other views in the /Orders folder under the Client_Views only the ones specified
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;      will be generated to the Client_Published.  Views directly under the source path do not require any qualifying path except the view name.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--        Lastly, a leading &apos;/&apos; is not required but may be present if desired.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- If null, generate views from all source folders as directed by the &quot;configure starting folders&quot; and the designated layer type.
&#x9;&#x9;&#x9;&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;inStartingFolderVector,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- This is an alternative entry point for this method.  If this is set then layerType,inGroupIds and inDerivedFilterPath are ignored
&#x9;&#x9;&#x9;&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;ConfigParamsVector
&#x9;&#x9;&#x9;)
&#x9;&#x9;WHERE DataSource &lt;&gt; &apos;FINISHED&apos; AND ProjectFolderName IS NOT NULL AND LENGTH(TRIM(ProjectFolderName)) &gt; 0
&#x9;DO
&#x9;&#x9;SET rec = r; 
&#x9;&#x9;-- column
&#x9;&#x9;IF (rec.NativeType &lt;&gt; &apos;TABLE&apos; AND rec.NativeType &lt;&gt; &apos;PROCEDURE&apos;) THEN 
&#x9;&#x9;&#x9;-- Appply the column transformation
&#x9;&#x9;&#x9;IF (rec.LogicalTransformation IS NOT NULL AND LENGTH(TRIM(rec.LogicalTransformation)) &gt; 0 AND rec.LogicalName IS NOT NULL AND LENGTH(TRIM(rec.LogicalName)) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;SET rec.LogicalTransformation = &apos;CAST(&apos;||rec.LogicalTransformation||&apos; AS &apos;|| rec.LogicalType||&apos;)&apos;;
 
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;IF (rec.LogicalType IS NOT NULL AND LENGTH(TRIM(rec.LogicalType)) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.LogicalTransformation = &apos;CAST(? AS &apos;|| rec.LogicalType||&apos;)&apos;;
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END IF;
&#x9;&#x9;INSERT INTO result VALUES(rec);

&#x9;&#x9;-- Construct the base SQL statement
&#x9;&#x9;set sqlStatement = &apos;SELECT COUNT(*) cnt FROM &apos;||commonModelDatabasePath||&apos; WHERE &apos;;
&#x9;&#x9;set whereClause = &apos;&apos;;
&#x9;
&#x9;&#x9;/***********************************
&#x9;&#x9; * Construct the where clause
&#x9;&#x9; ***********************************/
&#x9;&#x9;&#x9;-- AND ProjectFolderName
&#x9;&#x9;&#x9;if (rec.ProjectFolderName IS NOT NULL AND LENGTH(rec.ProjectFolderName) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;set resourceName = rec.ProjectFolderName;
&#x9;&#x9;&#x9;&#x9;if (INSTR(resourceName, &apos;&apos;&apos;&apos;) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;set resourceName = REPLACE(resourceName, &apos;&apos;&apos;&apos;, &apos;&apos;&apos;&apos;&apos;&apos;);
&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;if (INSTR(resourceName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(resourceName),&apos;&quot;&apos;) = 1) THEN 
&#x9;&#x9;&#x9;&#x9;&#x9;set whereClause = whereClause || &apos; ProjectFolderName = &apos;||&apos;&apos;&apos;&apos;||SUBSTR(resourceName, 2, LENGTH(resourceName)-2)||&apos;&apos;&apos; &apos;;
&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;set whereClause = whereClause || &apos; ProjectFolderName = &apos;||&apos;&apos;&apos;&apos;||resourceName||&apos;&apos;&apos; &apos;;
&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;-- AND GreatGrandParentName
&#x9;&#x9;&#x9;if (rec.GreatGrandParentName IS NOT NULL AND LENGTH(rec.GreatGrandParentName) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;set resourceName = rec.GreatGrandParentName;
&#x9;&#x9;&#x9;&#x9;if (INSTR(resourceName, &apos;&apos;&apos;&apos;) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;set resourceName = REPLACE(resourceName, &apos;&apos;&apos;&apos;, &apos;&apos;&apos;&apos;&apos;&apos;);
&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;if (INSTR(resourceName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(resourceName),&apos;&quot;&apos;) = 1) THEN 
&#x9;&#x9;&#x9;&#x9;&#x9;set whereClause = whereClause || &apos; and GreatGrandParentName = &apos;||&apos;&apos;&apos;&apos;||SUBSTR(resourceName, 2, LENGTH(resourceName)-2)||&apos;&apos;&apos; &apos;;
&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;set whereClause = whereClause || &apos; and GreatGrandParentName = &apos;||&apos;&apos;&apos;&apos;||resourceName||&apos;&apos;&apos; &apos;;
&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;-- AND GrandParentName
&#x9;&#x9;&#x9;if (rec.GrandParentName IS NOT NULL AND LENGTH(rec.GrandParentName) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;set resourceName = rec.GrandParentName;
&#x9;&#x9;&#x9;&#x9;if (INSTR(resourceName, &apos;&apos;&apos;&apos;) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;set resourceName = REPLACE(resourceName, &apos;&apos;&apos;&apos;, &apos;&apos;&apos;&apos;&apos;&apos;);
&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;if (INSTR(resourceName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(resourceName),&apos;&quot;&apos;) = 1) THEN 
&#x9;&#x9;&#x9;&#x9;&#x9;set whereClause = whereClause || &apos; and GrandParentName = &apos;||&apos;&apos;&apos;&apos;||SUBSTR(resourceName, 2, LENGTH(resourceName)-2)||&apos;&apos;&apos; &apos;;
&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;set whereClause = whereClause || &apos; and GrandParentName = &apos;||&apos;&apos;&apos;&apos;||resourceName||&apos;&apos;&apos; &apos;;
&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;-- AND ParentName
&#x9;&#x9;&#x9;if (rec.ParentName IS NOT NULL AND LENGTH(rec.ParentName) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;set resourceName = rec.ParentName;
&#x9;&#x9;&#x9;&#x9;if (INSTR(resourceName, &apos;&apos;&apos;&apos;) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;set resourceName = REPLACE(resourceName, &apos;&apos;&apos;&apos;, &apos;&apos;&apos;&apos;&apos;&apos;);
&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;if (INSTR(resourceName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(resourceName),&apos;&quot;&apos;) = 1) THEN 
&#x9;&#x9;&#x9;&#x9;&#x9;set whereClause = whereClause || &apos; and ParentName = &apos;||&apos;&apos;&apos;&apos;||SUBSTR(resourceName, 2, LENGTH(resourceName)-2)||&apos;&apos;&apos; &apos;;
&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;set whereClause = whereClause || &apos; and ParentName = &apos;||&apos;&apos;&apos;&apos;||resourceName||&apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;-- ContainerName
&#x9;&#x9;&#x9;if (rec.ContainerName IS NOT NULL AND LENGTH(rec.ContainerName) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;set resourceName = rec.ContainerName;
&#x9;&#x9;&#x9;&#x9;if (INSTR(resourceName, &apos;&apos;&apos;&apos;) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;set resourceName = REPLACE(resourceName, &apos;&apos;&apos;&apos;, &apos;&apos;&apos;&apos;&apos;&apos;);
&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;if (INSTR(resourceName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(resourceName),&apos;&quot;&apos;) = 1) THEN 
&#x9;&#x9;&#x9;&#x9;&#x9;set whereClause = whereClause || &apos; and ContainerName = &apos;||&apos;&apos;&apos;&apos;||SUBSTR(resourceName, 2, LENGTH(resourceName)-2)||&apos;&apos;&apos; &apos;;
&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;set whereClause = whereClause || &apos; and ContainerName = &apos;||&apos;&apos;&apos;&apos;||resourceName||&apos;&apos;&apos; &apos;;
&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;-- PhysicalName
&#x9;&#x9;&#x9;if (rec.PhysicalName IS NOT NULL AND LENGTH(rec.PhysicalName) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;set resourceName = rec.PhysicalName;
&#x9;&#x9;&#x9;&#x9;if (INSTR(resourceName, &apos;&apos;&apos;&apos;) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;set resourceName = REPLACE(resourceName, &apos;&apos;&apos;&apos;, &apos;&apos;&apos;&apos;&apos;&apos;);
&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;if (INSTR(resourceName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(resourceName),&apos;&quot;&apos;) = 1) THEN 
&#x9;&#x9;&#x9;&#x9;&#x9;set whereClause = whereClause || &apos; and PhysicalName = &apos;||&apos;&apos;&apos;&apos;||SUBSTR(resourceName, 2, LENGTH(resourceName)-2)||&apos;&apos;&apos; &apos;;
&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;set whereClause = whereClause || &apos; and PhysicalName = &apos;||&apos;&apos;&apos;&apos;||resourceName||&apos;&apos;&apos; &apos;;
&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;if (rec.LogicalName IS NOT NULL AND LENGTH(rec.LogicalName) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;set resourceName = rec.LogicalName;
&#x9;&#x9;&#x9;&#x9;&#x9;if (INSTR(resourceName, &apos;&apos;&apos;&apos;) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set resourceName = REPLACE(resourceName, &apos;&apos;&apos;&apos;, &apos;&apos;&apos;&apos;&apos;&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;if (INSTR(resourceName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(resourceName),&apos;&quot;&apos;) = 1) THEN 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set whereClause = whereClause || &apos; and LogicalName = &apos;||&apos;&apos;&apos;&apos;||SUBSTR(resourceName, 2, LENGTH(resourceName)-2)||&apos;&apos;&apos; &apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set whereClause = whereClause || &apos; and LogicalName = &apos;||&apos;&apos;&apos;&apos;||resourceName||&apos;&apos;&apos; &apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;set whereClause = whereClause || &apos; and (PhysicalName IS NULL OR length(PhysicalName) = 0)&apos;;
&#x9;&#x9;&#x9;&#x9;end if;
            end if;

&#x9;&#x9;SET sqlStatement = sqlStatement || &apos; &apos; || whereClause;&#x9;
&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : Select Statement : &apos;|| CHR(10) || NVL(sqlStatement,&apos;null&apos;));
&#x9;&#x9;END IF;

&#x9;&#x9;SET rowCount = 0;&#x9;
&#x9;&#x9;OPEN curs for sqlStatement;
&#x9;&#x9;FOR c AS curs DO
&#x9;&#x9;&#x9;SET rowCount = c.cnt;
&#x9;&#x9;END FOR;
&#x9;&#x9;IF (rowCount = 0) THEN
&#x9;&#x9;&#x9;-- Insert the row
&#x9;&#x9;&#x9;SET sqlStatement = &apos;INSERT INTO &apos;||commonModelDatabasePath||
&#x9;&#x9;&#x9;&apos; (DataSource, ProjectFolderName, GreatGrandParentName, GrandParentName, ParentName, ContainerName, PhysicalName, NativeType, LogicalName, LogicalType, LogicalTransformation, LogicalDefinition)&apos;||
&#x9;&#x9;&#x9;&apos; VALUES(&apos;||
&#x9;&#x9;&#x9;&#x9;&apos;&apos;&apos;&apos;||TRIM(NVL(rec.DataSource,&apos;  &apos;))||&apos;&apos;&apos;,&apos;|| 
&#x9;&#x9;&#x9;&#x9;&apos;&apos;&apos;&apos;||TRIM(NVL(rec.ProjectFolderName,&apos;  &apos;))||&apos;&apos;&apos;,&apos;|| 
&#x9;&#x9;&#x9;&#x9;&apos;&apos;&apos;&apos;||TRIM(NVL(rec.GreatGrandParentName,&apos;  &apos;))||&apos;&apos;&apos;,&apos;|| 
&#x9;&#x9;&#x9;&#x9;&apos;&apos;&apos;&apos;||TRIM(NVL(rec.GrandParentName,&apos;  &apos;))||&apos;&apos;&apos;,&apos;|| 
&#x9;&#x9;&#x9;&#x9;&apos;&apos;&apos;&apos;||TRIM(NVL(rec.ParentName,&apos;  &apos;))||&apos;&apos;&apos;,&apos;|| 
&#x9;&#x9;&#x9;&#x9;&apos;&apos;&apos;&apos;||TRIM(NVL(rec.ContainerName,&apos;  &apos;))||&apos;&apos;&apos;,&apos;|| 
&#x9;&#x9;&#x9;&#x9;&apos;&apos;&apos;&apos;||TRIM(NVL(rec.PhysicalName,&apos;  &apos;))||&apos;&apos;&apos;,&apos;|| 
&#x9;&#x9;&#x9;&#x9;&apos;&apos;&apos;&apos;||TRIM(NVL(rec.NativeType,&apos;  &apos;))||&apos;&apos;&apos;,&apos;|| 
&#x9;&#x9;&#x9;&#x9;&apos;&apos;&apos;&apos;||TRIM(NVL(rec.LogicalName,&apos;  &apos;))||&apos;&apos;&apos;,&apos;|| 
&#x9;&#x9;&#x9;&#x9;&apos;&apos;&apos;&apos;||TRIM(NVL(REPLACE(rec.LogicalType,&apos;&apos;&apos;&apos;,&apos;&apos;&apos;&apos;&apos;&apos;),&apos;  &apos;))||&apos;&apos;&apos;,&apos;|| 
&#x9;&#x9;&#x9;&#x9;&apos;&apos;&apos;&apos;||TRIM(NVL(REPLACE(rec.LogicalTransformation,&apos;&apos;&apos;&apos;,&apos;&apos;&apos;&apos;&apos;&apos;),&apos;  &apos;))||&apos;&apos;&apos;,&apos;|| 
&#x9;&#x9;&#x9;&#x9;&apos;&apos;&apos;&apos;||TRIM(NVL(rec.LogicalDefinition,&apos;  &apos;))||&apos;&apos;&apos;&apos;||
&#x9;&#x9;&#x9;&apos;)&apos;;
&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : Insert Statement:  &apos;|| CHR(10) || NVL(sqlStatement,&apos;null&apos;));
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;-- Only insert the row if instructed
&#x9;&#x9;&#x9;IF (performInsertUpdate IS NOT NULL AND UPPER(performInsertUpdate) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;&#x9;&#x9;&#x9;EXECUTE IMMEDIATE sqlStatement;
&#x9;&#x9;&#x9;&#x9;END;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;ELSEIF (rowCount = 1) THEN
&#x9;&#x9;&#x9;-- Update the row
&#x9;&#x9;&#x9;SET sqlStatement = &apos;UPDATE &apos;||commonModelDatabasePath||
&#x9;&#x9;&#x9;&#x9;&apos;   SET &apos;||
&#x9;&#x9;&#x9;&#x9;&apos;       DataSource = &apos;&apos;&apos;||TRIM(NVL(rec.DataSource,&apos;  &apos;))||&apos;&apos;&apos;,&apos;|| 
&#x9;&#x9;&#x9;&#x9;&apos;       ProjectFolderName=&apos;&apos;&apos;||TRIM(NVL(rec.ProjectFolderName,&apos;  &apos;))||&apos;&apos;&apos;,&apos;|| 
&#x9;&#x9;&#x9;&#x9;&apos;       GreatGrandParentName=&apos;&apos;&apos;||TRIM(NVL(rec.GreatGrandParentName,&apos;  &apos;))||&apos;&apos;&apos;,&apos;|| 
&#x9;&#x9;&#x9;&#x9;&apos;       GrandParentName=&apos;&apos;&apos;||TRIM(NVL(rec.GrandParentName,&apos;  &apos;))||&apos;&apos;&apos;,&apos;|| 
&#x9;&#x9;&#x9;&#x9;&apos;       ParentName=&apos;&apos;&apos;||TRIM(NVL(rec.ParentName,&apos;  &apos;))||&apos;&apos;&apos;,&apos;|| 
&#x9;&#x9;&#x9;&#x9;&apos;       ContainerName=&apos;&apos;&apos;||TRIM(NVL(rec.ContainerName,&apos;  &apos;))||&apos;&apos;&apos;,&apos;|| 
&#x9;&#x9;&#x9;&#x9;&apos;       PhysicalName=&apos;&apos;&apos;||TRIM(NVL(rec.PhysicalName,&apos;  &apos;))||&apos;&apos;&apos;,&apos;|| 
&#x9;&#x9;&#x9;&#x9;&apos;       NativeType=&apos;&apos;&apos;||TRIM(NVL(rec.NativeType,&apos;  &apos;))||&apos;&apos;&apos;,&apos;|| 
&#x9;&#x9;&#x9;&#x9;&apos;       LogicalName=&apos;&apos;&apos;||TRIM(NVL(rec.LogicalName,&apos;  &apos;))||&apos;&apos;&apos;,&apos;|| 
&#x9;&#x9;&#x9;&#x9;&apos;       LogicalType=&apos;&apos;&apos;||TRIM(NVL(REPLACE(rec.LogicalType,&apos;&apos;&apos;&apos;,&apos;&apos;&apos;&apos;&apos;&apos;),&apos;  &apos;))||&apos;&apos;&apos;,&apos;|| 
&#x9;&#x9;&#x9;&#x9;&apos;       LogicalTransformation=&apos;&apos;&apos;||TRIM(NVL(REPLACE(rec.LogicalTransformation,&apos;&apos;&apos;&apos;,&apos;&apos;&apos;&apos;&apos;&apos;),&apos;  &apos;))||&apos;&apos;&apos;,&apos;|| 
&#x9;&#x9;&#x9;&#x9;&apos;       LogicalDefinition=&apos;&apos;&apos;||TRIM(NVL(rec.LogicalDefinition,&apos;  &apos;))||&apos;&apos;&apos;&apos;||
&#x9;&#x9;&#x9;&#x9;&apos;WHERE &apos;||whereClause;
 
&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : Update Statement: &apos;|| CHR(10) || NVL(sqlStatement,&apos;null&apos;));
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;-- Only update the row if instructed
&#x9;&#x9;&#x9;IF (performInsertUpdate IS NOT NULL AND UPPER(performInsertUpdate) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;&#x9;&#x9;&#x9;EXECUTE IMMEDIATE sqlStatement;
&#x9;&#x9;&#x9;&#x9;END;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;-- Duplicate row
&#x9;&#x9;&#x9;CALL PRINT(&apos;The row is a duplicate row with a count=&apos;||rowCount);
&#x9;&#x9;END IF;&#x9;&#x9;
&#x9;END FOR;
 
&#x9;/*********************************************
&#x9; * Refresh common_model cache
&#x9; *********************************************/
&#x9;-- Make sure the common_model cache has been refreshed with the updates from the previous step
&#x9;IF (refreshCache IS NOT NULL AND UPPER(refreshCache) = &apos;Y&apos; AND performInsertUpdate IS NOT NULL AND UPPER(performInsertUpdate) = &apos;Y&apos;) THEN
&#x9;&#x9;SET startTime = CURRENT_TIMESTAMP;
&#x9;&#x9;FOR cache AS SELECT * FROM /shared/ASAssets/Utilities/repository/getResourceCacheConfigCursor(commonModelViewPath, &apos;TABLE&apos;) DO
&#x9;&#x9;&#x9;IF (cache.configured = 1 AND cache.enabled = 1) THEN
&#x9;&#x9;&#x9;&#x9;SET cacheRefresh =  true;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END FOR; 
&#x9;&#x9;IF (cacheRefresh) THEN
&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : Refreshing the cache=&apos;||NVL(commonModelViewPath,&apos;null&apos;));
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;CALL /lib/resource/RefreshResourceCacheSynchronously(commonModelViewPath, &apos;TABLE&apos;, 1000);
&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;SET endTime = CURRENT_TIMESTAMP;
&#x9;&#x9;&#x9;&#x9;SET duration = endTime - startTime;
&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : Finished Refreshing the cache.  duration=&apos;||CAST(duration AS VARCHAR));
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END IF;
&#x9;ELSE
&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : No refresh scheduled.  performInsertUpdate=&apos;||NVL(performInsertUpdate,&apos;null&apos;));
&#x9;&#x9;END IF;
&#x9;END IF; 
END </attribute>
  <attribute name="creationDate" type="LONG">1548189531537</attribute>
  <attribute name="creatorUserDomain" type="STRING">composite</attribute>
  <attribute name="creatorUserId" type="INTEGER">-1973</attribute>
  <attribute name="creatorUserName" type="STRING">admin</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1564662969208</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserId" type="INTEGER">-1973</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">9/384</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">10/438</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/476</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">10/471</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/448</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">10/465</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">10/411</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
  </attribute>
  <attribute name="resourceModifiedDateOnSourceCISSite" type="LONG">1548189531537</attribute>
</metadata>