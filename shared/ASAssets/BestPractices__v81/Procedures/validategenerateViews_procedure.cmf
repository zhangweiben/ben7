<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:9a66723c-3693-47f1-a1f0-d7811996f9d5 -->
<metadata name="validategenerateViews" path="/shared/ASAssets/BestPractices_v81/Procedures/validategenerateViews" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>&lt;![CDATA[
&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

]]&gt;</annotation>
  <parameters>
    <parameter name="sourceFolderPath" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="targetFolderPath" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="resourceNameFilter" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="generateViewsWrapper" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="statusMode" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="compareMode" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="debug" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="result" direction="OUT" nullable="true">
      <datatype name="validategenerateViewsType" type="TABLE" refId="256">
        <element name="status">
          <datatype name="VARCHAR" type="STRING" maxLength="20"/>
        </element>
        <element name="resourceType">
          <datatype name="VARCHAR" type="STRING" maxLength="10"/>
        </element>
        <element name="sourceResourcePath">
          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
        </element>
        <element name="taregetResourcePath">
          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
        </element>
      </datatype>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/resource/ResourceExists" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="path" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="type" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="version" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceVersion" type="STRING" maxLength="255"/>
      </element>
      <element name="exists" direction="OUT">
        <datatype type="BOOLEAN"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/validategenerateViews" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="sourceFolderPath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="targetFolderPath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="resourceNameFilter" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="generateViewsWrapper" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="statusMode" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="compareMode" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="status">
            <datatype type="STRING" maxLength="20"/>
          </element>
          <element name="resourceType">
            <datatype type="STRING" maxLength="10"/>
          </element>
          <element name="sourceResourcePath">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="taregetResourcePath">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/log/logDebugMessage" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="moduleName" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="moduleNameType" type="STRING" maxLength="4096"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="messageText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getBasicResourceCursor_PROCEDURE_CURSOR" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="fullResourcePath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="cursorNum" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="resourceCursor" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="resourceName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resourcePath">
            <datatype type="STRING" maxLength="4096"/>
          </element>
          <element name="resourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="annotation">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="tableType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="sqlText">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="columnName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="columnType">
            <datatype type="STRING" maxLength="4096"/>
          </element>
          <element name="columnBaseType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="dataType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="paramDirection">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="nativeBaseType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="nativeType">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getBasicResourceCursor_SQL_TABLE" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="fullResourcePath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceCursor" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="resourceName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resourcePath">
            <datatype type="STRING" maxLength="1024"/>
          </element>
          <element name="resourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="annotation">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="explicitlyDesigned">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="tableType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="sqlText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="proprietaryModel">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="columnName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="columnType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="nativeBaseType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="nativeType">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getResourceListRecursive" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="resourceTreeList" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="name">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resPath">
            <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
          </element>
          <element name="resType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="creationDate">
            <datatype type="DATETIME"/>
          </element>
          <element name="creationDateBigint">
            <datatype type="INTEGER"/>
          </element>
          <element name="creatorUserDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="creatorUserName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="lastModifiedDate">
            <datatype type="DATETIME"/>
          </element>
          <element name="lastModifiedDateBigint">
            <datatype type="INTEGER"/>
          </element>
          <element name="lastModifiedUserDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="lastModifiedUserName">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getScriptText" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inSubType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="scriptText" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/extractDelimitedText" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inputString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="delimiter" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="occurrence" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="reverseInputText" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="reverseOutput" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="trimText" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="includeDelimiter" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="object">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* validategenerateViews:
&#x9;This procedure is used to compare resources between a source folder and a mirror copy target folder.  This is useful when evaluating if the view generation
&#x9;is working correctly across a large number of views in different folders.  

&#x9;This works best when performing the following &quot;round trip&quot; scenario:
&#x9;&#x9;1. A spreadsheet of physical to logical mappings has been established
&#x9;&#x9;2. Generate the Formatting layer views&#x9;&#x9;&#x9;&#x9;&#x9;generateFormattingViews(1, 2, 1, 0, null, null, null, null, null, null)
&#x9;&#x9;3. Make a copy of the Formatting layer views&#x9;&#x9;&#x9;Target=/shared/&lt;project_path&gt;/Physical/Formatting_Copy_1
&#x9;&#x9;4. Generate the Formatting layer to a CSV file&#x9;&#x9;&#x9;generateDatasourceListCSV(C:\temp\test.csv, 1000, 1, 1, R, null, null, null, null, null, null, null,  FV, null)
&#x9;&#x9;5. Copy test.csv to Common_Model_v3_file1.xlsx&#x9;&#x9;&#x9;Excel: C:\CompositeSoftware\BestPractices\BestPractices_v80\Common_Model_v3_file1.xlsx
&#x9;&#x9;&#x9;&#x9;a. Open Common_Model_v3_file1.xlsx in Excel
&#x9;&#x9;&#x9;&#x9;b. Open test.csv in Excel
&#x9;&#x9;&#x9;&#x9;c. Select cell A2 and use the keystrokes: Ctrl-Shift-End (this will select Columns A-L and all rows except the header row
&#x9;&#x9;&#x9;&#x9;d. Do a Ctrl-C (copy)
&#x9;&#x9;&#x9;&#x9;e. Switch to Common_Model_v3_file1.xlsx
&#x9;&#x9;&#x9;&#x9;f. Make sure there is no data in columns A-L and all of the rows.  If there is, then either delete it or pick a different spreadsheet: Common_Model_v3_file[1-3].xlsx
&#x9;&#x9;&#x9;&#x9;g. Place your cursor in cell A2
&#x9;&#x9;&#x9;&#x9;h. Do a Ctrl-V (Paste)
&#x9;&#x9;&#x9;&#x9;i. Save the spreadsheet
&#x9;&#x9;6. Refresh the cache of the spreadsheets: Common_Model_v3_file[1-3].xlsx
&#x9;&#x9;&#x9;&#x9;a. Switch to Studio, Manager tab
&#x9;&#x9;&#x9;&#x9;b. Select &quot;Cached Resources&quot;
&#x9;&#x9;&#x9;&#x9;c. Select &quot;common_model&quot;
&#x9;&#x9;&#x9;&#x9;d. Click Refresh Cache
&#x9;&#x9;7. Remove the views in the Formatting layer except the &quot;/Transformations&quot; folder which is considered a source folder for transormation procedures.
&#x9;&#x9;8. Generate the Formattin glayer views&#x9;&#x9;&#x9;&#x9;&#x9;generateFormattingViews(1, 2, 1, 0, null, null, null, null, null, null)
&#x9;&#x9;9. Validate the view generation process&#x9;&#x9;&#x9;&#x9;&#x9;generateViewsValidate(/shared/&lt;project_path&gt;/Physical/Formatting, /shared/&lt;project_path&gt;/Physical/Formatting_Copy_1, null, 1, N, C, N)

&#x9;The output cursor provides a status as follows:
&#x9;&#x9;EQUAL&#x9;&#x9;&#x9;&#x9;source resource path&#x9;&#x9;&#x9;target resource path&#x9;&#x9;-- the source and target resources are equal
&#x9;&#x9;NOT EQUAL&#x9;&#x9;&#x9;source resource path&#x9;&#x9;&#x9;target resource path&#x9;&#x9;-- the source and target resources are not equal
&#x9;&#x9;TARGET NOT FOUND&#x9;source resource path&#x9;&#x9;&#x9;target resource path&#x9;&#x9;-- the target resource was not found when doing a compare

&#x9;Input:
&#x9;&#x9;&#x9;-- The source folder to begin recursing through to discover TABLE or PROCEDURE resources
&#x9;&#x9;sourceFolderPath&#x9;LONGVARCHAR, 

&#x9;&#x9;&#x9;-- The target (mirror copy of source) which is used to compare each resource with the source to determine if it is equal or not.
&#x9;&#x9;targetFolderPath&#x9;LONGVARCHAR,

&#x9;&#x9;&#x9;-- Pass in a resource name to filter on from the source folder.  This can be a comma separated list.  
&#x9;&#x9;&#x9;-- The column name may not contain commas.  Do not place double quotes around the name.
&#x9;&#x9;resourceNameFilter&#x9;VARCHAR,&#x9;&#x9;

&#x9;&#x9;&#x9;-- 0           print the output to the cursor result window.  The cursor is bound by Composite Studio &quot;Fetch Row Size&quot; and &quot;Cursor Fetch Limit&quot;
&#x9;&#x9;&#x9;--               The cursor stops producing output when it hits those limits.  The limits are configured in Composite Studio
&#x9;&#x9;&#x9;--                  Administrationï Configurationï Studioï Dataï Fetch Rows Size and Cursor Fetch Limit.  
&#x9;&#x9;&#x9;--                  Modify the Cursor Fetch Limit to an arbitrary number such as 500
&#x9;&#x9;&#x9;-- 1 (default) - print TABLE only information to console window.  Do not print to the cursor result window.  The aforementioned limits do not apply.
&#x9;&#x9;generateViewsWrapper

&#x9;&#x9;&#x9;-- status mode: A=output All status, E=output Equal status only, N=output Not equal status only
&#x9;&#x9;statusMode&#x9;&#x9;&#x9;CHAR(1),

&#x9;&#x9;&#x9;-- compare mode: S=compare SqlText, C=compare Columns and types
&#x9;&#x9;compareMode&#x9;&#x9;&#x9;CHAR(1),

&#x9;&#x9;&#x9;-- Y=debug is on, N=do not debug, will print out source and target sql script when the resources are not equal.
&#x9;&#x9;debug&#x9;&#x9;&#x9;&#x9;CHAR(1),

&#x9;Output:
&#x9;&#x9;result&#x9;&#x9;&#x9;&#x9;PIPE
&#x9;&#x9;PUBLIC TYPE&#x9;generateViewsValidateType ROW(
&#x9;&#x9;&#x9;status&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(20),&#x9;-- &quot;SKIPPED&quot;, &quot;EQUAL&quot;, &quot;NOT EQUAL&quot;, &quot;TARGET NOT FOUND&quot;
&#x9;&#x9;&#x9;resourceType&#x9;&#x9;&#x9;VARCHAR(10),&#x9;-- TABLE or PROCEDURE
&#x9;&#x9;&#x9;sourceResourcePath&#x9;&#x9;LONGVARCHAR,
&#x9;&#x9;&#x9;taregetResourcePath &#x9;LONGVARCHAR
&#x9;&#x9;);

&#x9;Exceptions:  none

&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;CSW Version:&#x9;Reason:
&#x9;11/07/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.2.0&#x9;&#x9;&#x9;Created new
&#x9;03/01/2018&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.5&#x9;&#x9;&#x9;Replaced /shared/ASAssets/Utilities/repository/resourceExists with /lib/resource/ResourceExists
&#x9;03/02/2018&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.5&#x9;&#x9;&#x9;Replaced RegexSplit with extractDelimitedText
&#x9;04/15/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;B.P. 2019.200: Added scriptsPath for flexibility of the location of the _scripts folder.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   Changed custom functions to explicit paths.

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

*/
PROCEDURE validategenerateViews(
&#x9;&#x9;-- The source folder to begin recursing through to discover TABLE or PROCEDURE resources
&#x9;IN&#x9;sourceFolderPath&#x9;&#x9;LONGVARCHAR,-- /shared/BestPracticesTest/Physical/Formatting

&#x9;&#x9;-- The target (mirror copy of source) which is used to compare each resource with the source to determine if it is equal or not.
&#x9;IN&#x9;targetFolderPath&#x9;&#x9;LONGVARCHAR,-- /shared/BestPracticesTest/Physical/Formatting_Copy_1

&#x9;&#x9;-- Pass in a resource name to filter on from the source folder.  This can be a comma separated list.  
&#x9;&#x9;-- The column name may not contain commas.  Do not place double quotes around the name.
&#x9;IN&#x9;resourceNameFilter&#x9;&#x9;VARCHAR,

&#x9;&#x9;-- 0           - print the output to the cursor.  The cursor is bound by Composite Studio &quot;Fetch Row Size&quot; and &quot;Cursor Fetch Limit&quot;
&#x9;&#x9;--               The cursor stops producing output when it hits those limits.  The limits are configured in Composite Studio
&#x9;&#x9;--                  Administrationï Configurationï Studioï Dataï Fetch Rows Size and Cursor Fetch Limit.  
&#x9;&#x9;--                  Modify the Cursor Fetch Limit to an arbitrary number such as 500
&#x9;&#x9;-- 1 (default) - print TABLE only information to console window.  Do not print to the cursor result window.  The aforementioned limits do not apply.
&#x9;IN  generateViewsWrapper&#x9;INTEGER,

&#x9;&#x9;-- status mode: A=output All status, E=output Equal status only, N=output Not equal status only
&#x9;IN &#x9;statusMode&#x9;&#x9;&#x9;&#x9;CHAR(1),

&#x9;&#x9;-- compare mode: S=compare SqlText, C=compare Columns and types
&#x9;IN  compareMode&#x9;&#x9;&#x9;&#x9;CHAR(1),

&#x9;&#x9;-- Y=debug is on, N=do not debug, will print out source and target sql script when the resources are not equal.
&#x9;IN &#x9;debug&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1),

&#x9;OUT&#x9;result&#x9;&#x9;&#x9;&#x9;&#x9;PIPE /shared/ASAssets/BestPractices_v81/Procedures/validategenerateViews.validategenerateViewsType
)
BEGIN
&#x9;DECLARE moduleName&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;validategenerateViews&apos;;
&#x9;DECLARE statusMode_&#x9;&#x9;&#x9;&#x9;CHAR(1) DEFAULT statusMode;
&#x9;DECLARE PUBLIC TYPE&#x9;validategenerateViewsType ROW(
&#x9;&#x9;status&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(20),&#x9;-- &quot;SKIPPED&quot;, &quot;EQUAL&quot;, &quot;NOT EQUAL&quot;, &quot;TARGET NOT FOUND&quot;
&#x9;&#x9;resourceType&#x9;&#x9;&#x9;VARCHAR(10),&#x9;-- TABLE or PROCEDURE
&#x9;&#x9;sourceResourcePath&#x9;&#x9;LONGVARCHAR,
&#x9;&#x9;taregetResourcePath &#x9;LONGVARCHAR
&#x9;);
&#x9;DECLARE status&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE targetResourcePath&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE sourceSqlScript&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE targetSqlScript&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE sourceColumnListStr&#x9;&#x9;LONGVARCHAR DEFAULT &apos;&apos;;
&#x9;DECLARE targetColumnListStr&#x9;&#x9;LONGVARCHAR DEFAULT &apos;&apos;;
&#x9;DECLARE processResource&#x9;&#x9;&#x9;BOOLEAN;
&#x9;DECLARE cntTotal&#x9;&#x9;&#x9;&#x9;INTEGER DEFAULT 0;
&#x9;DECLARE cntSkipped&#x9;&#x9;&#x9;&#x9;INTEGER DEFAULT 0;
&#x9;DECLARE cntNotEqual&#x9;&#x9;&#x9;&#x9;INTEGER DEFAULT 0;
&#x9;DECLARE cntEqual&#x9;&#x9;&#x9;&#x9;INTEGER DEFAULT 0;
&#x9;DECLARE cntNotFound&#x9;&#x9;&#x9;&#x9;INTEGER DEFAULT 0;
&#x9;DECLARE resourceExists &#x9;&#x9;&#x9;BOOLEAN;

&#x9;if (statusMode_ is null) then
&#x9;&#x9;set statusMode_ = &apos;A&apos;;
&#x9;end if;
&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;statusMode=&apos;||NVL(statusMode_,&apos;null&apos;)||&apos;  compareMode=&apos;||NVL(compareMode,&apos;null&apos;));
&#x9;end if;

&#x9;FOR r AS SELECT name, resPath, resType, subType FROM /shared/ASAssets/Utilities/repository/getResourceListRecursive(sourceFolderPath, &apos;CONTAINER&apos;) DO
&#x9;&#x9;if (r.resType = &apos;TABLE&apos; or r.resType = &apos;PROCEDURE&apos;) then
&#x9;&#x9;&#x9;set cntTotal = cntTotal + 1;

&#x9;&#x9;&#x9;-- Set the status
&#x9;&#x9;&#x9;set status = &apos;UNKNOWN&apos;;

&#x9;&#x9;&#x9;-- Apply the filter to determine whether to process the resource or not
&#x9;&#x9;&#x9;set processResource = true;
&#x9;&#x9;  &#x9;if (resourceNameFilter is not null and LENGTH(resourceNameFilter) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;filterLoop:
&#x9;&#x9;&#x9;&#x9;for f as select * from /shared/ASAssets/Utilities/string/extractDelimitedText(resourceNameFilter, &apos;,&apos;,0,0,0,0,0) do
&#x9;&#x9;&#x9;&#x9;&#x9;set processResource = false;
&#x9;&#x9;&#x9;&#x9;&#x9;if (POSITION(f.object IN r.name) &gt; 0) then -- apply the resource filter
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set processResource = true;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set status = &apos;UNKNOWN&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;leave filterLoop;
&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set status = &apos;SKIPPED&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set cntSkipped = cntSkipped + 1;
&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;end for;
&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;-- Replace the source folder name with the target folder within the current resource being analyzed
 &#x9;&#x9;&#x9;set targetResourcePath = REPLACE(r.resPath, sourceFolderPath, targetFolderPath);

&#x9;&#x9;&#x9;if (processResource) then 

&#x9;&#x9;&#x9;&#x9;-- Compare Mode: compare sqlText
&#x9;&#x9;&#x9;&#x9;if (UPPER(compareMode) = &apos;S&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;-- Get the source resource script text
&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/getScriptText(r.resPath, r.resType, r.subtype, sourceSqlScript);

&#x9;&#x9;&#x9;&#x9;&#x9;call /lib/resource/ResourceExists(targetResourcePath, r.resType, null, resourceExists);
&#x9;&#x9;&#x9;&#x9;&#x9;if (resourceExists) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Get the corresponding target resource in the folder that is the copy of the original
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/getScriptText(targetResourcePath, r.resType, r.subtype, targetSqlScript);

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- The transformation procedures will produce views that point back into the Formatting/Transformations folder.  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- When a copy is created, the folder name is rebound in the view so that it points to the copy.  To do a fair comparison,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- The Folder Copy resource path needs to be replaced with the original base folder before the comparison is taken.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (POSITION(targetFolderPath in targetSqlScript) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set targetSqlScript = TRIM(REPLACE(targetSqlScript, targetFolderPath, sourceFolderPath));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Perform the comparison of the source folder and the target folder (copy of the source folder)
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (sourceSqlScript = targetSqlScript) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set status = &apos;EQUAL&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set cntEqual = cntEqual + 1;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (statusMode_ = &apos;A&apos; or statusMode_ = &apos;E&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (generateViewsWrapper = 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INSERT INTO result VALUES(status, r.resType, r.resPath, targetResourcePath);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, &apos;Y&apos;, &apos;STATUS=&apos;||RPAD(status,16,&apos;_&apos;)||&apos;  TYPE=&apos;||RPAD(r.resType,9,&apos;_&apos;)||&apos; SOURCE=&apos;||r.resPath||&apos;    TARGET=&apos;||targetResourcePath);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set status = &apos;NOT EQUAL&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set cntNotEqual = cntNotEqual + 1;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (statusMode_ = &apos;A&apos; or statusMode_ = &apos;N&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (generateViewsWrapper = 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INSERT INTO result VALUES(status, r.resType, r.resPath, targetResourcePath);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;STATUS=&apos;||RPAD(status,16,&apos;_&apos;)||&apos;  TYPE=&apos;||RPAD(r.resType,9,&apos;_&apos;)||&apos; SOURCE=&apos;||r.resPath||&apos;    TARGET=&apos;||targetResourcePath);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, &apos;Y&apos;, &apos;STATUS=&apos;||RPAD(status,16,&apos;_&apos;)||&apos;  TYPE=&apos;||RPAD(r.resType,9,&apos;_&apos;)||&apos; SOURCE=&apos;||r.resPath||&apos;    TARGET=&apos;||targetResourcePath);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;sourceSqlScript=&apos;||sourceSqlScript);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;targetSqlScript=&apos;||targetSqlScript);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if; -- if (sourceSqlScript = targetSqlScript) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if; -- if (sourceSqlScript = targetSqlScript) then
&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set status = &apos;TARGET NOT FOUND&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set cntNotFound = cntNotFound + 1;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (generateViewsWrapper = 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INSERT INTO result VALUES(status, r.resType, r.resPath, targetResourcePath);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, &apos;Y&apos;, &apos;STATUS=&apos;||RPAD(status,16,&apos;_&apos;)||&apos;  TYPE=&apos;||RPAD(r.resType,9,&apos;_&apos;)||&apos; SOURCE=&apos;||r.resPath||&apos;    TARGET=&apos;||targetResourcePath);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;end if; -- if (resourceExists(targetResourcePath, r.resType) = 1) then
&#x9;&#x9;&#x9;&#x9;end if; -- if (UPPER(compareMode) = &apos;S&apos;) then

&#x9;&#x9;&#x9;&#x9;-- Compare Mode: compare Columns and types
&#x9;&#x9;&#x9;&#x9;if (UPPER(compareMode) = &apos;C&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;set sourceColumnListStr = &apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;set targetColumnListStr = &apos;&apos;;

&#x9;&#x9;&#x9;&#x9;&#x9;-- Get the source resource column list for a TABLE
&#x9;&#x9;&#x9;&#x9;&#x9;IF (r.resType = &apos;TABLE&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FOR c AS SELECT resourceName, resourcePath, resourceType, columnName, columnType, annotation
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FROM /shared/ASAssets/Utilities/repository/getBasicResourceCursor_SQL_TABLE(r.resPath, r.resType)
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DO
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (c.columnName is not null) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET sourceColumnListStr = sourceColumnListStr || c.columnName || &apos; &apos; || c.columnType || &apos;|&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END FOR;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;-- Get the source resource column list for a procedure.  The procedure must return a cursor and it must be the first cursor only
&#x9;&#x9;&#x9;&#x9;&#x9;IF (r.resType = &apos;PROCEDURE&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FOR c AS SELECT resourceName, resourcePath, resourceType, columnName, columnType, annotation
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FROM /shared/ASAssets/Utilities/repository/getBasicResourceCursor_PROCEDURE_CURSOR(r.resPath, r.resType, 1) WHERE paramDirection = &apos;OUT&apos; 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DO
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (c.columnName is not null) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET sourceColumnListStr = sourceColumnListStr || c.columnName || &apos; &apos;|| c.columnType || &apos;|&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END FOR;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;call /lib/resource/ResourceExists(targetResourcePath, r.resType, null, resourceExists);
&#x9;&#x9;&#x9;&#x9;&#x9;if (resourceExists) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Get the target resource column list for a TABLE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (r.resType = &apos;TABLE&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FOR c AS SELECT resourceName, resourcePath, resourceType, columnName, columnType, annotation
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FROM /shared/ASAssets/Utilities/repository/getBasicResourceCursor_SQL_TABLE(targetResourcePath, r.resType)
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DO
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (c.columnName is not null) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set targetColumnListStr = targetColumnListStr || c.columnName || &apos; &apos; || NVL(c.columnType,&apos;null&apos;) || &apos;|&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END FOR;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Get the target resource column list for a PROCEDURE.  The procedure must return a cursor and it must be the first cursor only
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (r.resType = &apos;PROCEDURE&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FOR c AS SELECT resourceName, resourcePath, resourceType, columnName, columnType, annotation
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FROM /shared/ASAssets/Utilities/repository/getBasicResourceCursor_PROCEDURE_CURSOR(targetResourcePath, r.resType, 1) WHERE paramDirection = &apos;OUT&apos; 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DO
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (c.columnName is not null) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set targetColumnListStr = targetColumnListStr || c.columnName || &apos; &apos;|| NVL(c.columnType,&apos;null&apos;) || &apos;|&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END FOR;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Perform the comparison of the source and target columns
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (sourceColumnListStr = targetColumnListStr) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set status = &apos;EQUAL&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set cntEqual = cntEqual + 1;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (statusMode_ = &apos;A&apos; or statusMode_ = &apos;E&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (generateViewsWrapper = 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INSERT INTO result VALUES(status, r.resType, r.resPath, targetResourcePath);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, &apos;Y&apos;, &apos;STATUS=&apos;||RPAD(status,16,&apos;_&apos;)||&apos;  TYPE=&apos;||RPAD(r.resType,9,&apos;_&apos;)||&apos; SOURCE=&apos;||r.resPath||&apos;    TARGET=&apos;||targetResourcePath);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set status = &apos;NOT EQUAL&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set cntNotEqual = cntNotEqual + 1;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (statusMode_ = &apos;A&apos; or statusMode_ = &apos;N&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (generateViewsWrapper = 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INSERT INTO result VALUES(status, r.resType, r.resPath, targetResourcePath);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;STATUS=&apos;||RPAD(status,16,&apos;_&apos;)||&apos;  TYPE=&apos;||RPAD(r.resType,9,&apos;_&apos;)||&apos; SOURCE=&apos;||r.resPath||&apos;    TARGET=&apos;||targetResourcePath);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, &apos;Y&apos;, &apos;STATUS=&apos;||RPAD(status,16,&apos;_&apos;)||&apos;  TYPE=&apos;||RPAD(r.resType,9,&apos;_&apos;)||&apos; SOURCE=&apos;||r.resPath||&apos;    TARGET=&apos;||targetResourcePath);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;sourceColumnListStr=&apos;||sourceColumnListStr);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;targetColumnListStr=&apos;||targetColumnListStr);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set status = &apos;TARGET NOT FOUND&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set cntNotFound = cntNotFound + 1;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (generateViewsWrapper = 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INSERT INTO result VALUES(status, r.resType, r.resPath, targetResourcePath);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, &apos;Y&apos;, &apos;STATUS=&apos;||RPAD(status,16,&apos;_&apos;)||&apos;  TYPE=&apos;||RPAD(r.resType,9,&apos;_&apos;)||&apos; SOURCE=&apos;||r.resPath||&apos;    TARGET=&apos;||targetResourcePath);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;end if; -- if (resourceExists(targetResourcePath, r.resType) = 1) then
&#x9;&#x9;&#x9;&#x9;end if; -- if (UPPER(compareMode) = &apos;C&apos;) then
/* bypass outputting the status of &quot;SKIPPED&quot;
&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;if (generateViewsWrapper = 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;INSERT INTO result VALUES(status, r.resType, r.resPath, targetResourcePath);
&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, &apos;Y&apos;, &apos;STATUS=&apos;||RPAD(status,16,&apos;_&apos;)||&apos;  TYPE=&apos;||RPAD(r.resType,9,&apos;_&apos;)||&apos; SOURCE=&apos;||r.resPath||&apos;    TARGET=&apos;||targetResourcePath);
&#x9;&#x9;&#x9;&#x9;end if;
*/
&#x9;&#x9;&#x9;end if; -- if (processResource) then 
&#x9;&#x9;end if; -- if (r.resType = &apos;TABLE&apos; or r.resType = &apos;PROCEDURE&apos;) then
&#x9;END FOR;

&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, &apos;Y&apos;, &apos;    count Total=&apos;||LPAD(cntTotal,16,&apos; &apos;));
&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, &apos;Y&apos;, &apos;  count Skipped=&apos;||LPAD(cntSkipped,16,&apos; &apos;));
&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, &apos;Y&apos;, &apos;count Not Equal=&apos;||LPAD(cntNotEqual,16,&apos; &apos;));
&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, &apos;Y&apos;, &apos;    count Equal=&apos;||LPAD(cntEqual,16,&apos; &apos;));
&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, &apos;Y&apos;, &apos;count Not Found=&apos;||LPAD(cntNotFound,16,&apos; &apos;));
END</attribute>
  <attribute name="creationDate" type="LONG">1383393161626</attribute>
  <attribute name="creatorUserDomain" type="STRING">composite</attribute>
  <attribute name="creatorUserName" type="STRING">admin</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="impactLevel" type="INTEGER">0</attribute>
  <attribute name="impactMessage" type="NULL"/>
  <attribute name="lastModifiedDate" type="LONG">1564600041997</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="public_types" type="MAP">
    <item>
      <key type="STRING">validategenerateViewsType</key>
      <value type="BYTE_ARRAY">EB8GAgAZAHYAYQBsAGkAZABhAHQAZQBnAGUAbgBlAHIAYQB0AGUAVgBpAGUAdwBzAFQAeQBwAGUGKQBDAC8AcwBoAGEAcgBlAGQALwBBAFMAQQBzAHMAZQB0AHMALwBCAGUAcwB0AFAAcgBhAGMAdABpAGMAZQBzAF8AdgA4ADEALwBQAHIAbwBjAGUAZAB1AHIAZQBzAC8AdgBhAGwAaQBkAGEAdABlAGcAZQBuAGUAcgBhAHQAZQBWAGkAZQB3AHMGKgAZAHYAYQBsAGkAZABhAHQAZQBnAGUAbgBlAHIAYQB0AGUAVgBpAGUAdwBzAFQAeQBwAGUDEgAAAAEDEgAAAAEBEwEJFAAAAAQQIQYVAAYAcwB0AGEAdAB1AHMDLwAAAAEDFgAAAAADGgAAAAEDGwAAAAEDIP////8DIgAAAAAIGRAbBgIABwBWAEEAUgBDAEgAQQBSAxIAAAACBAQAAAAAAAAAFAETAf////8QIQYVAAwAcgBlAHMAbwB1AHIAYwBlAFQAeQBwAGUDLwAAAAEDFgAAAAADGgAAAAEDGwAAAAEDIP////8DIgAAAAAIGRAbBgIABwBWAEEAUgBDAEgAQQBSAxIAAAADBAQAAAAAAAAACgETAf////8QIQYVABIAcwBvAHUAcgBjAGUAUgBlAHMAbwB1AHIAYwBlAFAAYQB0AGgDLwAAAAEDFgAAAAADGgAAAAEDGwAAAAEDIP////8DIgAAAAAIGRAbBgIACwBMAE8ATgBHAFYAQQBSAEMASABBAFIDEgAAAAQEBAAAAAB/////ARMB/////xAhBhUAEwB0AGEAcgBlAGcAZQB0AFIAZQBzAG8AdQByAGMAZQBQAGEAdABoAy8AAAABAxYAAAAAAxoAAAABAxsAAAABAyD/////AyIAAAAAAxIAAAAE/////w==</value>
    </item>
  </attribute>
  <attribute name="references" type="NULL"/>
</metadata>