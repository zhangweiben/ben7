<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:9a66723c-3693-47f1-a1f0-d7811996f9d5 -->
<metadata name="getNamesRetrievedContainer" path="/shared/ASAssets/BestPractices_v81/Procedures/retrieveName/getNamesRetrievedContainer" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>&lt;![CDATA[
&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

]]&gt;</annotation>
  <parameters>
    <parameter name="inLogicalID" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="inContainerList" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="inProjectFolderName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="inGreatGrandParentName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="inGrandParentName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="inParentName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="inContainerName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="inResourceName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="generateWithSourceColumn" direction="IN" nullable="true">
      <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
    </parameter>
    <parameter name="inDebug" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="containerList" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="logicalName" direction="OUT" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="logicalType" direction="OUT" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="logicalTransformation" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="annotation" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="status" direction="OUT" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/retrieveName/replaceSymbol" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="direction" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="inReplaceStr" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="outReplaceStr" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedList" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="codingListType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="codingList" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedString" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inCodingType" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="inEncodingActions" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="codingList" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inModuleNameInvoking" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inDebug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="inStringName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="outString" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/_ProjectMaintenance/defaultValues" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/log/logDebugMessage" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="moduleName" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="moduleNameType" type="STRING" maxLength="4096"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="messageText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/extractBiDelimitedText" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="searchTerm" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="openingDelim" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="closingDelim" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inOccurrence" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inTrimText" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inCaseSensitive" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/extractDelimitedText" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inputString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="delimiter" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="occurrence" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="reverseInputText" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="reverseOutput" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="trimText" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="includeDelimiter" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="object">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* getNamesRetrievedContainer:
&#x9;-- Composite Best Practices --
&#x9;Retrieve the logical name and composite transformation from the Common Model spreadsheet files based on the
&#x9;passed in word (resourceName) and container.  Return a status indicating indicating whether the resource is
&#x9;FOUND, UNCHANGED or DROPPED.  If no results are found and the incoming parameter &quot;generateWithSourceColumn=1&quot;
&#x9;then set the status to UNCHANGED otherwise set it to DROPPED.
 
&#x9;Input:
&#x9;&#x9;inContainerList&#x9;- null for the first invocation and then a list of all columns for a given resource.

&#x9;&#x9;inProjectFolderName - the name of the project folder (defaultValue.basePath)(projectName)

&#x9;&#x9;inGreatGrandParentName - the name of the great grand parent of the parent &#x9;(dataSourcename)

&#x9;&#x9;inGrandParentName - the name of the grand parent of the parent &#x9;&#x9;&#x9;&#x9;(catalogName)

&#x9;&#x9;inParentName - the name of the parent of the container &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(schemaName)

&#x9;&#x9;inContainer - the parent of the &quot;inResourceName&quot; or resource. &#x9;&#x9;&#x9;&#x9;(viewName)
&#x9;&#x9;&#x9;Values: any text without blanks in it

&#x9;&#x9;inResourceName - a generic term for any resource name&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(columnName)
&#x9;&#x9;&#x9;Values: any text without blanks in it

&#x9;&#x9;&#x9;-- 1 or 0, used when generateMode=&apos;R&apos;
&#x9;&#x9;&#x9;--  This parameter allows the user to control whether to generate the view with the original data source
&#x9;&#x9;&#x9;--&#x9;   column or not.  It adds a level of control and flexibility into this automation process.
&#x9;&#x9;&#x9;--&#x9;Regarding the retrieved logicalColumn from the mapping spreadsheet.
&#x9;&#x9;&#x9;--&#x9;   When logicalColumn IS blank OR NULL then
&#x9;&#x9;&#x9;-- &#x9;   1=Generate the view with the source column (pass through)-logical status is UNCHANGED
&#x9;&#x9;&#x9;--&#x9;   0=Do NOT generate the view with the source column (no pass through)-logical status is DROPPED
&#x9;&#x9;generateWithSourceColumn 

&#x9;&#x9;debug - Y or N
&#x9;Output:
&#x9;&#x9;containerList - a list of all columns for a given resource.
&#x9;&#x9;logicalName - the result is the logical name found in the excel spreadsheet files
&#x9;&#x9;&#x9;Values: the logical column name
&#x9;&#x9;logicalType - the logical column type
&#x9;&#x9;logicalTransformation - the composite transformation found in the excel spreadsheet file
&#x9;&#x9;annotation - the &quot;Logical_Definition&quot; annotation for the view
&#x9;&#x9;status - the status of the result
&#x9;&#x9;&#x9;-- FOUND - found when it finds a match to physical name in the spreadsheet
&#x9;&#x9;&#x9;-- UNCHANGED - remains unchanged when it cannot match to the physical resourceName and the ConfigureParams.generateWithSourceColumn=1
&#x9;&#x9;&#x9;-- DROPPED - gets dropped from the list when it cannot match to the physical resourceName and the ConfigureParams.generateWithSourceColumn=0
&#x9;Exceptions:  none

&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;CSW Version:&#x9;Reason:
&#x9;11/11/2011&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.2.0&#x9;&#x9;&#x9;getNameRetrieved() - Created new
&#x9;09/27/2012&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.2.0&#x9;&#x9;&#x9;Removed TRIM() statements so that it can find fields with spaces in front or back of an element.
&#x9;03/15/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.2.0&#x9;&#x9;&#x9;Modifications for Best Practices 7.0
&#x9;04/15/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.2.0&#x9;&#x9;&#x9;Added replaceSymbol() to convert annotation text with &lt;TAB&gt;&lt;CR&gt;&lt;LF&gt; to real values
&#x9;04/22/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.2.0&#x9;&#x9;&#x9;Added logicalType for Best Pracices 7.1
&#x9;06/24/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.0.0&#x9;&#x9;&#x9;7.2: Multiple instances of Best Practices supported
&#x9;10/10/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.1.0&#x9;&#x9;&#x9;8.0: Added datasourceName, projectFolderName and grandParentName
&#x9;11/25/2014&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.2.6&#x9;&#x9;&#x9;8.1.5: 1) Created from getNameRetrieved() to be more efficient by selecting all of the columns for the passed in containerName
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  and creating a &quot;containerList&quot; string that get created the first time but then is passed in/out on subsequent calls.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  When getName() invokes this procedure to look up columns, it already has the string an only has to locate the unique
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  physical column name within the string which is faster than a database lookup since it is in memory.   This implementation
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  drops the overall time from minutes to seconds for creating a view.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;2) Fixed issue when any of the input names contain a single quote which is caused by a path having a single quote.&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;
&#x9;03/02/2018&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.5&#x9;&#x9;&#x9;Replaced RegexSplit with extractDelimitedText
&#x9;01/24/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;8.0.0&#x9;&#x9;&#x9;Allow for logicalID to be T,C,F.  If F then treat it like T.  T=table, C=column, F=folder
&#x9;04/15/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;B.P. 2019.200: Added scriptsPath for flexibility of the location of the _scripts folder.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   Changed custom functions to explicit paths.

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

*/
PROCEDURE getNamesRetrievedContainer(
&#x9;IN  inLogicalID&#x9;&#x9;&#x9;&#x9;CHAR(1),&#x9;&#x9;-- C=column, T=table [alleviates confusion between the same physical name being a column or table.
&#x9;IN  inContainerList&#x9;&#x9;&#x9;LONGVARCHAR,
&#x9;IN  inProjectFolderName&#x9;&#x9;VARCHAR(4000),
&#x9;IN  inGreatGrandParentName&#x9;VARCHAR(4000),
&#x9;IN  inGrandParentName&#x9;&#x9;VARCHAR(4000),
&#x9;IN  inParentName&#x9;&#x9;&#x9;VARCHAR(4000),
&#x9;IN &#x9;inContainerName&#x9;&#x9;&#x9;VARCHAR(4000),
&#x9;IN&#x9;inResourceName&#x9;&#x9;&#x9;VARCHAR(4000),
&#x9;IN  generateWithSourceColumn SMALLINT,
&#x9;IN  inDebug&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1),
&#x9;OUT containerList&#x9;&#x9;&#x9;LONGVARCHAR, 
&#x9;OUT logicalName&#x9;&#x9;&#x9;&#x9;VARCHAR(4000),
&#x9;OUT logicalType&#x9;&#x9;&#x9;&#x9;VARCHAR(4000),
&#x9;OUT logicalTransformation&#x9;LONGVARCHAR,
&#x9;OUT annotation&#x9;&#x9;&#x9;&#x9;LONGVARCHAR,
&#x9;OUT&#x9;status&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR 
&#x9;&#x9;-- FOUND - found when it finds a match to physical name in the spreadsheet
&#x9;&#x9;-- UNCHANGED - remains unchanged when it cannot match to the physical resourceName and the ConfigureParams.generateWithSourceColumn=1
&#x9;&#x9;-- DROPPED - gets dropped from the list when it cannot match to the physical resourceName and the ConfigureParams.generateWithSourceColumn=0
)
BEGIN
&#x9;DECLARE moduleName&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;    &apos;||&apos;getNamesRetrievedContainer&apos;;
&#x9;DECLARE debug&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1) DEFAULT inDebug;
&#x9;DECLARE debug2&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1) DEFAULT &apos;N&apos;;
&#x9;DECLARE sqlStatement&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE&#x9;notEmpty&#x9;&#x9;&#x9;&#x9;INTEGER DEFAULT 0;
&#x9;DECLARE commonModelViewPath&#x9;&#x9;VARCHAR DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.commonModelViewPath;
&#x9;DECLARE commonModelRow&#x9;&#x9;&#x9;/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions.CommonModelType;
&#x9;DECLARE&#x9;commonModelCursor &#x9;&#x9;CURSOR /shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions.CommonModelType;
&#x9;DECLARE startTime&#x9;&#x9;&#x9;&#x9;TIMESTAMP DEFAULT CURRENT_TIMESTAMP;
&#x9;DECLARE duration&#x9;&#x9;&#x9;&#x9;INTERVAL HOUR to SECOND;
&#x9;DECLARE i&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER DEFAULT 0;
&#x9;DECLARE codingListRetriveColumns VARCHAR(4000);
&#x9;DECLARE&#x9;physicalName&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE containerListTemp&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE resourceName&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE columnNumber&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE decodedValue&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE logicalID&#x9;&#x9;&#x9;&#x9;CHAR(1); -- C for column and T for table
&#x9;DECLARE ex&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;EXCEPTION;
/*
&#x9;DECLARE PUBLIC TYPE commonModelRow ROW (
        datasourceName &#x9;&#x9;&#x9;VARCHAR(255), 
        projectFolderName &#x9;&#x9;VARCHAR(255), 
        greatGrandParentName &#x9;VARCHAR(255), 
        grandParentName &#x9;&#x9;VARCHAR(255), 
        parentName &#x9;&#x9;&#x9;&#x9;VARCHAR(255), 
        containerName &#x9;&#x9;&#x9;VARCHAR(255), 
        resourceName &#x9;&#x9;&#x9;VARCHAR(255), 
&#x9;&#x9;resourceNum&#x9;&#x9;&#x9;&#x9;INTEGER, 
        logicalName &#x9;&#x9;&#x9;VARCHAR(255), 
        logicalType &#x9;&#x9;&#x9;VARCHAR(255), 
        annotation &#x9;&#x9;&#x9;&#x9;VARCHAR(32767), 
        logicalTransformation &#x9;VARCHAR(32767),
&#x9;&#x9;resourceNameEncoded&#x9;&#x9;VARCHAR(255)
&#x9;);
*/
&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, 
&#x9;&#x9;&#x9;&apos;inLogicalID=[&apos;||NVL(inLogicalID,&apos;null&apos;)||
&#x9;&#x9;&#x9;&apos;]  inProjectFolderName=[&apos;||NVL(inProjectFolderName,&apos;null&apos;)||
&#x9;&#x9;&#x9;&apos;]  inGreatGrandParentName=[&apos;||NVL(inGreatGrandParentName,&apos;null&apos;)||
&#x9;&#x9;&#x9;&apos;]  inGrandParentName=[&apos;||NVL(inGrandParentName,&apos;null&apos;)||
&#x9;&#x9;&#x9;&apos;]  inParentName=[&apos;||NVL(inParentName,&apos;null&apos;)||
&#x9;&#x9;&#x9;&apos;]  inContainerName=[&apos;||NVL(inContainerName,&apos;null&apos;)||
&#x9;&#x9;&#x9;&apos;]  inResourceName=[&apos;||NVL(inResourceName,&apos;null&apos;)||
&#x9;&#x9;&#x9;&apos;]  generateWithSourceColumn=[&apos;||NVL(cast(generateWithSourceColumn as varchar),&apos;null&apos;)||
&#x9;&#x9;&#x9;&apos;]  commonModelViewPath=[&apos;||NVL(commonModelViewPath,&apos;null&apos;)||&apos;]&apos;);
&#x9;end if;


&#x9;if (inLogicalID IS NULL OR LENGTH(inLogicalID) = 0 OR inLogicalID NOT IN (&apos;C&apos;,&apos;T&apos;,&apos;F&apos;)) then
&#x9;&#x9;raise ex value &apos;The input parameter inLogicalID=[&apos;||NVL(inLogicalID,&apos;null&apos;)||&apos;] is invalid.&apos;;
&#x9;end if;

&#x9;-- Get the coding list.  [codingListColumns, codingListFrom, codingListComma, codingListRetriveColumns]
&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedList(&apos;codingListRetriveColumns&apos;, codingListRetriveColumns);

&#x9;-- Set the output = input
&#x9;SET containerList = inContainerList;

&#x9;-- Create the container list the first time only
&#x9;IF (containerList IS NULL OR LENGTH(containerList) = 0) THEN
&#x9;&#x9;-- Construct the base SQL statement
&#x9;&#x9;set sqlStatement = &apos;SELECT * FROM &apos;||commonModelViewPath||&apos; WHERE &apos;;

&#x9;&#x9;/***********************************
&#x9;&#x9; * Construct the where clause
&#x9;&#x9; ***********************************/
&#x9;&#x9;-- AND projectFolderName
&#x9;&#x9;if (inProjectFolderName IS NOT NULL AND LENGTH(inProjectFolderName) &gt; 0) then
&#x9;&#x9;&#x9;set resourceName = inProjectFolderName;
&#x9;&#x9;&#x9;if (INSTR(resourceName, &apos;&apos;&apos;&apos;) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;set resourceName = REPLACE(resourceName, &apos;&apos;&apos;&apos;, &apos;&apos;&apos;&apos;&apos;&apos;);
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;if (INSTR(resourceName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(resourceName),&apos;&quot;&apos;) = 1) THEN 
&#x9;&#x9;&#x9;&#x9;set sqlStatement = sqlStatement || &apos; projectFolderName = &apos;||&apos;&apos;&apos;&apos;||SUBSTR(resourceName, 2, LENGTH(resourceName)-2)||&apos;&apos;&apos; &apos;;
&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;set sqlStatement = sqlStatement || &apos; projectFolderName = &apos;||&apos;&apos;&apos;&apos;||resourceName||&apos;&apos;&apos; &apos;;
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;end if;
&#x9;&#x9;-- AND greatGrandParentName
&#x9;&#x9;if (inGreatGrandParentName IS NOT NULL AND LENGTH(inGreatGrandParentName) &gt; 0) then
&#x9;&#x9;&#x9;set resourceName = inGreatGrandParentName;
&#x9;&#x9;&#x9;if (INSTR(resourceName, &apos;&apos;&apos;&apos;) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;set resourceName = REPLACE(resourceName, &apos;&apos;&apos;&apos;, &apos;&apos;&apos;&apos;&apos;&apos;);
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;if (INSTR(resourceName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(resourceName),&apos;&quot;&apos;) = 1) THEN 
&#x9;&#x9;&#x9;&#x9;set sqlStatement = sqlStatement || &apos; and (greatGrandParentName = &apos;||&apos;&apos;&apos;&apos;||SUBSTR(resourceName, 2, LENGTH(resourceName)-2)||&apos;&apos;&apos; or grandParentName = &apos;||&apos;&apos;&apos;&apos;||SUBSTR(resourceName, 2, LENGTH(resourceName)-2)||&apos;&apos;&apos;) &apos;;
&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;set sqlStatement = sqlStatement || &apos; and (greatGrandParentName = &apos;||&apos;&apos;&apos;&apos;||resourceName||&apos;&apos;&apos; or grandParentName = &apos;||&apos;&apos;&apos;&apos;||resourceName||&apos;&apos;&apos;) &apos;;
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;end if;
&#x9;&#x9;-- AND grandParentName
&#x9;&#x9;if (inGrandParentName IS NOT NULL AND LENGTH(inGrandParentName) &gt; 0) then
&#x9;&#x9;&#x9;set resourceName = inGrandParentName;
&#x9;&#x9;&#x9;if (INSTR(resourceName, &apos;&apos;&apos;&apos;) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;set resourceName = REPLACE(resourceName, &apos;&apos;&apos;&apos;, &apos;&apos;&apos;&apos;&apos;&apos;);
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;if (INSTR(resourceName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(resourceName),&apos;&quot;&apos;) = 1) THEN 
&#x9;&#x9;&#x9;&#x9;set sqlStatement = sqlStatement || &apos; and (grandParentName = &apos;||&apos;&apos;&apos;&apos;||SUBSTR(resourceName, 2, LENGTH(resourceName)-2)||&apos;&apos;&apos; or greatGrandParentName = &apos;||&apos;&apos;&apos;&apos;||SUBSTR(resourceName, 2, LENGTH(resourceName)-2)||&apos;&apos;&apos;) &apos;;
&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;set sqlStatement = sqlStatement || &apos; and (grandParentName = &apos;||&apos;&apos;&apos;&apos;||resourceName||&apos;&apos;&apos; or greatGrandParentName = &apos;||&apos;&apos;&apos;&apos;||resourceName||&apos;&apos;&apos;) &apos;;
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;end if;
&#x9;&#x9;-- AND parentName
&#x9;&#x9;if (inParentName IS NOT NULL AND LENGTH(inParentName) &gt; 0) then
&#x9;&#x9;&#x9;set resourceName = inParentName;
&#x9;&#x9;&#x9;if (INSTR(resourceName, &apos;&apos;&apos;&apos;) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;set resourceName = REPLACE(resourceName, &apos;&apos;&apos;&apos;, &apos;&apos;&apos;&apos;&apos;&apos;);
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;if (INSTR(resourceName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(resourceName),&apos;&quot;&apos;) = 1) THEN 
&#x9;&#x9;&#x9;&#x9;set sqlStatement = sqlStatement || &apos; and (parentName = &apos;||&apos;&apos;&apos;&apos;||SUBSTR(resourceName, 2, LENGTH(resourceName)-2)||&apos;&apos;&apos; or grandParentName = &apos;||&apos;&apos;&apos;&apos;||SUBSTR(resourceName, 2, LENGTH(resourceName)-2)||&apos;&apos;&apos;) &apos;;
&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;set sqlStatement = sqlStatement || &apos; and (parentName = &apos;||&apos;&apos;&apos;&apos;||resourceName||&apos;&apos;&apos; or grandParentName = &apos;||&apos;&apos;&apos;&apos;||resourceName||&apos;&apos;&apos;) &apos;;
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;end if;
&#x9;&#x9;-- containerName
&#x9;&#x9;if (inContainerName IS NOT NULL AND LENGTH(inContainerName) &gt; 0) then
&#x9;&#x9;&#x9;set resourceName = inContainerName;
&#x9;&#x9;&#x9;if (INSTR(resourceName, &apos;&apos;&apos;&apos;) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;set resourceName = REPLACE(resourceName, &apos;&apos;&apos;&apos;, &apos;&apos;&apos;&apos;&apos;&apos;);
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;if (INSTR(resourceName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(resourceName),&apos;&quot;&apos;) = 1) THEN 
&#x9;&#x9;&#x9;&#x9;set sqlStatement = sqlStatement || &apos; and (containerName = &apos;||&apos;&apos;&apos;&apos;||SUBSTR(resourceName, 2, LENGTH(resourceName)-2)||&apos;&apos;&apos; or parentName = &apos;||&apos;&apos;&apos;&apos;||SUBSTR(resourceName, 2, LENGTH(resourceName)-2)||&apos;&apos;&apos;) &apos;;
&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;set sqlStatement = sqlStatement || &apos; and (containerName = &apos;||&apos;&apos;&apos;&apos;||resourceName||&apos;&apos;&apos; or parentName = &apos;||&apos;&apos;&apos;&apos;||resourceName||&apos;&apos;&apos;) &apos;;
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;end if;
&#x9;&#x9;-- physicalName
&#x9;&#x9;if (inResourceName IS NOT NULL AND LENGTH(inResourceName) &gt; 0) then
&#x9;&#x9;&#x9;set resourceName = inResourceName;
&#x9;&#x9;&#x9;if (INSTR(resourceName, &apos;&apos;&apos;&apos;) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;set resourceName = REPLACE(resourceName, &apos;&apos;&apos;&apos;, &apos;&apos;&apos;&apos;&apos;&apos;);
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;if (INSTR(resourceName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(resourceName),&apos;&quot;&apos;) = 1) THEN 
&#x9;&#x9;&#x9;&#x9;set sqlStatement = sqlStatement || &apos; and (physicalName = &apos;||&apos;&apos;&apos;&apos;||SUBSTR(resourceName, 2, LENGTH(resourceName)-2)||&apos;&apos;&apos; or containerName = &apos;||&apos;&apos;&apos;&apos;||SUBSTR(resourceName, 2, LENGTH(resourceName)-2)||&apos;&apos;&apos;) &apos;;
&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;set sqlStatement = sqlStatement || &apos; and (physicalName = &apos;||&apos;&apos;&apos;&apos;||resourceName||&apos;&apos;&apos; or containerName = &apos;||&apos;&apos;&apos;&apos;||resourceName||&apos;&apos;&apos;) &apos;;
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;end if;
&#x9;&#x9;-- ORDER BY
&#x9;&#x9;set sqlStatement = sqlStatement || &apos; ORDER BY resourceNum&apos;;

&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, NVL(sqlStatement,&apos;null&apos;));
&#x9;&#x9;END IF;

&#x9;&#x9;SET containerList = &apos;&apos;;
&#x9;&#x9;open commonModelCursor for sqlStatement;
&#x9;&#x9;FOR r AS commonModelCursor DO
&#x9;&#x9;&#x9;IF (r.logicalName IS NOT NULL AND length(r.logicalName) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;IF (r.logicalType = &apos;TABLE&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;set logicalID = &apos;T&apos;;
&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;set logicalID = &apos;C&apos;;
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;SET physicalName = r.physicalName;
&#x9;&#x9;&#x9;&#x9;SET containerListTemp = i||&apos;!::!&apos;||r.logicalName||&apos;!::!&apos;||NVL(r.logicalType,&apos;null&apos;)||&apos;!::!&apos;||NVL(r.logicalTransformation,&apos;null&apos;)||&apos;!::!&apos;||NVL(r.annotation,&apos;null&apos;);
&#x9;&#x9;&#x9;&#x9;-- Encode the temporary list so that it does not interfere with required characters: ,[]|
&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedString(&apos;E&apos;, &apos;N&apos;, codingListRetriveColumns, containerListTemp, moduleName, debug2, &apos;containerListTemp&apos;, containerListTemp);
&#x9;&#x9;&#x9;&#x9;SET containerList = containerList || &apos;!:!&apos;||logicalID||&apos;:&apos;||NVL(physicalName,&apos;null&apos;)||&apos;!:!&apos;||&apos;[&apos;||REPLACE(containerListTemp,&apos;!::!&apos;,&apos;|&apos;)||&apos;]&apos;;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;set i = i + 1;
&#x9;&#x9;END FOR;

&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;SET duration = CURRENT_TIMESTAMP - startTime;
&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;duration=[&apos;||CAST(duration AS VARCHAR)||&apos;]  containerList=[&apos;||NVL(containerList,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;END IF;
&#x9;END IF;

&#x9;-- 1/24/19 mtinius: treat logicalID=F as a T
&#x9;SET logicalID = inLogicalID;
&#x9;-- For the purposes of folders just treat them as tables for the parsing.
&#x9;IF (logicalID = &apos;F&apos;) THEN
&#x9;&#x9;SET logicalID = &apos;T&apos;;
&#x9;END IF;

&#x9;SET resourceName = inResourceName;
&#x9;SET logicalName = NULL;
&#x9;SET logicalType = &apos;&apos;;
&#x9;SET logicalTransformation = &apos;&apos;;
&#x9;SET annotation = NULL;
&#x9;CALL /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedString(&apos;E&apos;, &apos;N&apos;, codingListRetriveColumns, physicalName, moduleName, debug2, &apos;physicalName&apos;, physicalName);

&#x9;CALL /shared/ASAssets/Utilities/string/extractBiDelimitedText(containerList, &apos;!:!&apos;||logicalID||&apos;:&apos;||resourceName||&apos;!:!&apos;, &apos;[&apos;,&apos;]&apos;,1,0,1, containerListTemp);
&#x9;--call print(&apos;containerListTemp=&apos;||containerListTemp);
&#x9;SET i = 1;
&#x9;FOR r AS SELECT * FROM /shared/ASAssets/Utilities/string/extractDelimitedText(containerListTemp,&apos;|&apos;,0,0,0,0,0) DO
&#x9;&#x9;SET decodedValue = r.object;
&#x9;&#x9;CALL /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedString(&apos;D&apos;, &apos;N&apos;, codingListRetriveColumns, r.object, moduleName, debug2, &apos;decodedValue&apos;, decodedValue);
&#x9;&#x9;--call print(&apos;decodedValue=&apos;||NVL(decodedValue,&apos;null&apos;));
&#x9;&#x9;CASE
&#x9;&#x9;&#x9;WHEN i = 1 THEN SET columnNumber = TRIM(decodedValue); 
&#x9;&#x9;&#x9;WHEN i = 2 THEN SET logicalName = decodedValue; 
&#x9;&#x9;&#x9;WHEN i = 3 THEN SET logicalType = TRIM(decodedValue); 
&#x9;&#x9;&#x9;WHEN i = 4 THEN SET logicalTransformation = TRIM(decodedValue); 
&#x9;&#x9;&#x9;WHEN i = 5 THEN SET annotation = decodedValue; 
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;END CASE;
&#x9;&#x9;SET status = &apos;FOUND&apos;;
&#x9;&#x9;SET i = i + 1;
&#x9;END FOR;

&#x9;IF (logicalName IS NULL OR LENGTH(logicalName) = 0) THEN
&#x9;&#x9;SET logicalName = inResourceName;
&#x9;&#x9;IF (generateWithSourceColumn = 1) THEN
&#x9;&#x9;&#x9;SET status = &apos;UNCHANGED&apos;;
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;SET status = &apos;DROPPED&apos;;
&#x9;&#x9;END IF;&#x9;&#x9;&#x9;
&#x9;END IF;

&#x9;-- Convert the &lt;TAB&gt;&lt;CR&gt;&lt;LF&gt; symbols present in the annotation field which comes from the spreadsheet to real values
&#x9;CALL /shared/ASAssets/BestPractices_v81/Procedures/retrieveName/replaceSymbol(&apos;F&apos;, annotation, annotation);

&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;SET duration = CURRENT_TIMESTAMP - startTime;
&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, 
&#x9;&#x9;&#x9;&apos;duration=[&apos;||CAST(duration AS VARCHAR)||
&#x9;&#x9;&#x9;&apos;]  logicalName=[&apos;||NVL(logicalName,&apos;null&apos;)||
&#x9;&#x9;&#x9;&apos;]  logicalType=[&apos;||NVL(logicalType,&apos;null&apos;)||
&#x9;&#x9;&#x9;&apos;]  logicalTransformation=[&apos;||NVL(logicalTransformation,&apos;null&apos;)||
&#x9;&#x9;&#x9;&apos;]  status=[&apos;||NVL(status,&apos;null&apos;)||
&#x9;&#x9;&#x9;&apos;]  annotation=[&apos;||NVL(annotation,&apos;null&apos;)||
&#x9;&#x9;&#x9;&apos;]&apos;);
&#x9;END IF;
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1564600195898</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
</metadata>