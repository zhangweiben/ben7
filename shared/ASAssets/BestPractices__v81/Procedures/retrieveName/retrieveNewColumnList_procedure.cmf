<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:e931daa6-7fda-456a-badf-4cdb1c228a1a -->
<metadata name="retrieveNewColumnList" path="/shared/ASAssets/BestPractices_v81/Procedures/retrieveName/retrieveNewColumnList" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>&lt;![CDATA[
&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

]]&gt;</annotation>
  <parameters>
    <parameter name="inProjectFolderName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="inGreatGrandParentName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="inGrandParentName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="inParentName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="inContainerName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="debug" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="resultCursor" direction="OUT" nullable="true">
      <datatype name="resultCursor" type="TABLE" refId="256">
        <element name="datasourceName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="projectFolderName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="greatGrandParentName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="grandParentName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="parentName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="containerName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="physicalName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="physicalType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="resourceNum">
          <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
        </element>
        <element name="logicalName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="logicalType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="annotation">
          <datatype name="VARCHAR" type="STRING" maxLength="32767"/>
        </element>
        <element name="logicalTransformation">
          <datatype name="VARCHAR" type="STRING" maxLength="1024"/>
        </element>
        <element name="physicalNameEncoded">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
      </datatype>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/_ProjectMaintenance/defaultValues" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/log/logDebugMessage" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="moduleName" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="moduleNameType" type="STRING" maxLength="4096"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="messageText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* retrieveNewColumnList:
&#x9;-- Composite Best Practices --
&#x9;This procedure is targeted at return only the &quot;new&quot; columns defined in the Common Model spreadsheet for a given 
&#x9;container name.  It is predicated on the resourceName being null and the container name not being null.  This 
&#x9;concept allows the procedure to locate fields for a view that are new constants or derived but do not have a 1 to 1 
&#x9;correspondence with the source view.
 
&#x9;Input:
&#x9;&#x9;inProjectFolderName - the name of the project folder (defaultValue.basePath)(projectName)
&#x9;&#x9;inGreatGrandParentName - the name of the great grand parent of the parent &#x9;(dataSourcename)
&#x9;&#x9;inGrandParentName - the name of the grand parent of the parent &#x9;&#x9;&#x9;&#x9;(catalogName)
&#x9;&#x9;inParentName - the name of the parent of the container &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(schemaName)
&#x9;&#x9;inContainer - the parent of the &quot;inResourceName&quot; or resource. &#x9;&#x9;&#x9;&#x9;(viewName)
&#x9;&#x9;&#x9;Values: any text without blanks in it
&#x9;Output:
&#x9;&#x9;resultCursor [pCommon_Model_Union.CommonModelType] - a cursor of rows containing all new fields associated with the incoming container name.
&#x9;&#x9;&#x9;datasourceName &#x9;&#x9;&#x9;VARCHAR(255), 
&#x9;&#x9;&#x9;projectFolderName &#x9;&#x9;VARCHAR(255), 
&#x9;&#x9;&#x9;greatGrandParentName &#x9;VARCHAR(255), 
&#x9;&#x9;&#x9;grandParentName &#x9;&#x9;VARCHAR(255), 
&#x9;&#x9;&#x9;parentName &#x9;&#x9;&#x9;&#x9;VARCHAR(255), 
&#x9;&#x9;&#x9;containerName &#x9;&#x9;&#x9;VARCHAR(255), 
&#x9;&#x9;&#x9;resourceName &#x9;&#x9;&#x9;VARCHAR(255),
&#x9;&#x9;&#x9;resourceNum&#x9;&#x9;&#x9;&#x9;INTEGER, 
&#x9;&#x9;&#x9;logicalName &#x9;&#x9;&#x9;VARCHAR(255), 
&#x9;&#x9;&#x9;logicalType &#x9;&#x9;&#x9;VARCHAR(255), 
&#x9;&#x9;&#x9;annotation &#x9;&#x9;&#x9;&#x9;VARCHAR(32767), 
&#x9;&#x9;&#x9;logicalTransformation &#x9;VARCHAR(32767),
&#x9;&#x9;&#x9;resourceNameEncoded&#x9;&#x9;VARCHAR(255)
&#x9;Exceptions:  none

&#x9;Modified Date:&#x9;Updated By:&#x9;&#x9;&#x9;CSW Version:&#x9;Reason:
&#x9;06/15/2010&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.2.0&#x9;&#x9;&#x9;Created new
&#x9;03/04/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.2.0&#x9;&#x9;&#x9;modified to fix issue with duplicate response because the inContainer was not qualified with a parent
&#x9;03/15/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.2.0&#x9;&#x9;&#x9;Modifications for Best Practices 7.0
&#x9;04/15/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.2.0&#x9;&#x9;&#x9;Added replaceSymbol() to convert annotation text with &lt;TAB&gt;&lt;CR&gt;&lt;LF&gt; to real values
 &#x9;06/24/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.0.0&#x9;&#x9;&#x9;7.2: Multiple instances of Best Practices supported
&#x9;10/10/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.1.0&#x9;&#x9;&#x9;8.0: Added datasourceName, projectFolderName, greatGrandParent and grandParentName
&#x9;11/25/2014&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.2.6&#x9;&#x9;&#x9;B.P. 8.1.5: Fixed issue when any of the input names contain a single quote which is caused by a path having a single quote.&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;
&#x9;04/15/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;B.P. 2019.200: Added scriptsPath for flexibility of the location of the _scripts folder.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   Changed custom functions to explicit paths.

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

*/
PROCEDURE retrieveNewColumnList(
&#x9;IN  inProjectFolderName&#x9;&#x9;&#x9;VARCHAR,
&#x9;IN  inGreatGrandParentName&#x9;&#x9;VARCHAR,
&#x9;IN  inGrandParentName&#x9;&#x9;&#x9;VARCHAR,
&#x9;IN  inParentName&#x9;&#x9;&#x9;&#x9;VARCHAR,
&#x9;IN  inContainerName&#x9;&#x9;&#x9;&#x9;VARCHAR,
&#x9;IN  debug&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1),
&#x9;OUT resultCursor&#x9;&#x9;&#x9;&#x9;CURSOR /shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions.CommonModelType
)
BEGIN
&#x9;DECLARE moduleName&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;    &apos;||&apos;retrieveNewColumnList&apos;;
&#x9;DECLARE sqlStatement&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE notEmpty&#x9;&#x9;&#x9;&#x9;INTEGER DEFAULT 0;
&#x9;DECLARE commonModelViewPath&#x9;&#x9;VARCHAR DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.commonModelViewPath;
&#x9;DECLARE commonModelRow&#x9;&#x9;&#x9;/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions.CommonModelType;
&#x9;DECLARE&#x9;commonModelCursor &#x9;&#x9;CURSOR /shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions.CommonModelType;
&#x9;DECLARE resourceName&#x9;&#x9;&#x9;VARCHAR(4000);

&#x9;if (debug = &apos;Y&apos;) then
&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, 
&#x9;&#x9;&#x9;&apos;inProjectFolderName=[&apos;||NVL(inProjectFolderName,&apos;null&apos;)||
&#x9;&#x9;&#x9;&apos;]  inGreatGrandParentName=[&apos;||NVL(inGreatGrandParentName,&apos;null&apos;)||
&#x9;&#x9;&#x9;&apos;]  inGrandParentName=[&apos;||NVL(inGrandParentName,&apos;null&apos;)||
&#x9;&#x9;&#x9;&apos;]  inParentName=[&apos;||NVL(inParentName,&apos;null&apos;)||
&#x9;&#x9;&#x9;&apos;]  inContainerName=[&apos;||NVL(inContainerName,&apos;null&apos;)||
&#x9;&#x9;&#x9;&apos;]  commonModelViewPath=[&apos;||NVL(commonModelViewPath,&apos;null&apos;)||&apos;]&apos;);
&#x9;end if;

&#x9;-- Construct the base SQL statement
&#x9;set sqlStatement = &apos;SELECT * FROM &apos;||commonModelViewPath||&apos; WHERE &apos;;

&#x9;set sqlStatement = sqlStatement || &apos;(physicalName IS NULL OR length(physicalName) = 0) AND logicalName IS NOT NULL AND length(logicalName) &gt; 0&apos;;
&#x9;/***********************************
&#x9; * Construct the where clause
&#x9; ***********************************/
&#x9;-- AND projectFolderName
&#x9;if (inProjectFolderName IS NOT NULL AND LENGTH(&apos;|&apos;||inProjectFolderName||&apos;|&apos;) &gt; 2) then  --notEmpty
&#x9;&#x9;set resourceName = inProjectFolderName;
&#x9;&#x9;if (INSTR(resourceName, &apos;&apos;&apos;&apos;) &gt; 0) then
&#x9;&#x9;&#x9;set resourceName = REPLACE(resourceName, &apos;&apos;&apos;&apos;, &apos;&apos;&apos;&apos;&apos;&apos;);
&#x9;&#x9;end if;
&#x9;&#x9;set sqlStatement = sqlStatement || &apos; AND REPLACE(projectFolderName,&apos;&apos;&quot;&apos;&apos;,&apos;&apos;&apos;&apos;) = &apos;||&apos;&apos;&apos;&apos;||REPLACE(resourceName,&apos;&quot;&apos;,&apos;&apos;)||&apos;&apos;&apos; &apos;;
&#x9;end if;
&#x9;-- AND greatGrandParentName
&#x9;if (inGreatGrandParentName IS NOT NULL AND LENGTH(&apos;|&apos;||inGreatGrandParentName||&apos;|&apos;) &gt; 2) then  --notEmpty
&#x9;&#x9;set resourceName = inGreatGrandParentName;
&#x9;&#x9;if (INSTR(resourceName, &apos;&apos;&apos;&apos;) &gt; 0) then
&#x9;&#x9;&#x9;set resourceName = REPLACE(resourceName, &apos;&apos;&apos;&apos;, &apos;&apos;&apos;&apos;&apos;&apos;);
&#x9;&#x9;end if;
&#x9;&#x9;set sqlStatement = sqlStatement || &apos; AND REPLACE(greatGrandParentName,&apos;&apos;&quot;&apos;&apos;,&apos;&apos;&apos;&apos;) = &apos;||&apos;&apos;&apos;&apos;||REPLACE(resourceName,&apos;&quot;&apos;,&apos;&apos;)||&apos;&apos;&apos; &apos;;
&#x9;end if;
&#x9;-- AND grandParentName
&#x9;if (inGrandParentName IS NOT NULL AND LENGTH(&apos;|&apos;||inGrandParentName||&apos;|&apos;) &gt; 2) then  --notEmpty
&#x9;&#x9;set resourceName = inGrandParentName;
&#x9;&#x9;if (INSTR(resourceName, &apos;&apos;&apos;&apos;) &gt; 0) then
&#x9;&#x9;&#x9;set resourceName = REPLACE(resourceName, &apos;&apos;&apos;&apos;, &apos;&apos;&apos;&apos;&apos;&apos;);
&#x9;&#x9;end if;
&#x9;&#x9;set sqlStatement = sqlStatement || &apos; AND REPLACE(grandParentName,&apos;&apos;&quot;&apos;&apos;,&apos;&apos;&apos;&apos;) = &apos;||&apos;&apos;&apos;&apos;||REPLACE(resourceName,&apos;&quot;&apos;,&apos;&apos;)||&apos;&apos;&apos; &apos;;
&#x9;end if;
&#x9;-- AND parentName
&#x9;if (inParentName IS NOT NULL AND LENGTH(&apos;|&apos;||inParentName||&apos;|&apos;) &gt; 2) then  --notEmpty
&#x9;&#x9;set resourceName = inParentName;
&#x9;&#x9;if (INSTR(resourceName, &apos;&apos;&apos;&apos;) &gt; 0) then
&#x9;&#x9;&#x9;set resourceName = REPLACE(resourceName, &apos;&apos;&apos;&apos;, &apos;&apos;&apos;&apos;&apos;&apos;);
&#x9;&#x9;end if;
&#x9;&#x9;set sqlStatement = sqlStatement || &apos; AND REPLACE(parentName,&apos;&apos;&quot;&apos;&apos;,&apos;&apos;&apos;&apos;) = &apos;||&apos;&apos;&apos;&apos;||REPLACE(resourceName,&apos;&quot;&apos;,&apos;&apos;)||&apos;&apos;&apos; &apos;;
&#x9;end if;
&#x9;-- AND containerName
&#x9;if (inContainerName IS NOT NULL AND LENGTH(&apos;|&apos;||inContainerName||&apos;|&apos;) &gt; 2) then  --notEmpty
&#x9;&#x9;set resourceName = inContainerName;
&#x9;&#x9;if (INSTR(resourceName, &apos;&apos;&apos;&apos;) &gt; 0) then
&#x9;&#x9;&#x9;set resourceName = REPLACE(resourceName, &apos;&apos;&apos;&apos;, &apos;&apos;&apos;&apos;&apos;&apos;);
&#x9;&#x9;end if;
&#x9;&#x9;set sqlStatement = sqlStatement || &apos; AND REPLACE(containerName,&apos;&apos;&quot;&apos;&apos;,&apos;&apos;&apos;&apos;) = &apos;||&apos;&apos;&apos;&apos;||REPLACE(resourceName,&apos;&quot;&apos;,&apos;&apos;)||&apos;&apos;&apos; &apos;;
&#x9;end if;
&#x9;-- ORDER BY
&#x9;set sqlStatement = sqlStatement || &apos; ORDER BY resourceNum&apos;;

&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, sqlStatement);
&#x9;open resultCursor for sqlStatement;
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1564515679068</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
</metadata>