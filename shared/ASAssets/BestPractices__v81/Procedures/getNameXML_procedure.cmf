<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:e931daa6-7fda-456a-badf-4cdb1c228a1a -->
<metadata name="getNameXML" path="/shared/ASAssets/BestPractices_v81/Procedures/getNameXML" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>&lt;![CDATA[
&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

]]&gt;</annotation>
  <parameters>
    <parameter name="inLogicalID" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="inContainerList" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="inProjectFolderName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="inGreatGrandParentName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="inGrandParentName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="inParentName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="inContainerName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="inResourceName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="columnType" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="applyReservedWordList" direction="IN" nullable="true">
      <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="ConfigParamsXML" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="containerList" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="logicalName" direction="OUT" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="logicalType" direction="OUT" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="compositeTransformation" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="annotation" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="status" direction="OUT" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/generateName/getNameGenerated" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inContainer" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inResourceName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="caseRule" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="separator" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="useAliasRule" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="generationScriptsPath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="status" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/getDefaultValuesXML" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="scriptsPath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="defaultValuesXML" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/retrieveName/getNameRetrieved" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inProjectFolderName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inGreatGrandParentName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inGrandParentName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inParentName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inContainerName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inResourceName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="generateWithSourceColumn" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="logicalName" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="logicalType" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="logicalTransformation" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="annotation" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="status" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/retrieveName/getNamesRetrievedContainer" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inLogicalID" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="inContainerList" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inProjectFolderName" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="inGreatGrandParentName" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="inGrandParentName" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="inParentName" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="inContainerName" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="inResourceName" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="generateWithSourceColumn" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="inDebug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="containerList" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="logicalName" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="logicalType" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="logicalTransformation" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="annotation" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="status" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="tagName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inXMLDoc" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="resultValue" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/_ProjectMaintenance/defaultValues" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/log/logDebugMessage" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="moduleName" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="moduleNameType" type="STRING" maxLength="4096"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="messageText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inWord" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* 
&#x9;getNameXML:  
&#x9;-- Data Virtualization Best Practices --

&#x9;Get the name of the resource (word) being passed in.  
&#x9;If Generate mode=&apos;G&apos; then generate the name and apply all the word rules for case and aliasing.  
&#x9;&#x9;Generate the composite transformation based on the columnType passed in.
&#x9;If Generate mode=&apos;R&apos; then retrieve the logical name and the composite transformation from the Common Model Excel
&#x9;&#x9;spreadsheet based on the resource name (word) and the container.
 
&#x9;Input:
&#x9;&#x9;inProjectFolderName - the name of the project folder (defaultValue.basePath)(projectName)
&#x9;&#x9;inGreatGrandParentName - the name of the great grand parent of the parent &#x9;(dataSourcename)
&#x9;&#x9;inGrandParentName - the name of the grand parent of the parent &#x9;&#x9;&#x9;&#x9;(catalogName)
&#x9;&#x9;inParentName - the name of the parent of the container &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(schemaName)
&#x9;&#x9;inContainer - the parent of the &quot;inResourceName&quot; or resource. &#x9;&#x9;&#x9;&#x9;(viewName)
&#x9;&#x9;&#x9;Values: any text without blanks in it
&#x9;&#x9;inResourceName - a generic term for any resource name&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(columnName)
&#x9;&#x9;&#x9;Values: any text without blanks in it
&#x9;&#x9;columnType - the type of column for the resource (&quot;word&quot;) passed in.
&#x9;&#x9;&#x9;Values: VARCHAR(30) or DOUBLE or INTEGER, etc.
&#x9;&#x9;applyReservedWordList - 1=true, apply the reserved word list to the output, 0=false, do not apply reserved word list
&#x9;&#x9;ConfigParamsXML - The XML of configuration parameters.  A full description can be found in /generationScripts/Configure/ConfigureParams
&#x9;Output:
&#x9;&#x9;logicalName - the result is the logical name found in the excel spreadsheet files
&#x9;&#x9;&#x9;Values: the logical column name
&#x9;&#x9;logicalType - the logical column type
&#x9;&#x9;compositeTransformation - the composite transformation found in the excel spreadsheet file
&#x9;&#x9;annotation - the &quot;Logical_Definition&quot; annotation for the view
&#x9;&#x9;status - the status of the result
&#x9;&#x9;&#x9;-- when generateMode = &apos;G&apos; possible values are:
&#x9;&#x9;&#x9;-- &#x9;&#x9;GENERATED - generated the column name based on rules supplied
&#x9;&#x9;&#x9;-- &#x9;&#x9;UNCHANGED - remains unchanged when it cannot match to the physical resourceName and the ConfigureParams.generateWithSourceColumn=1
&#x9;&#x9;&#x9;-- when generateMode = &apos;R&apos; possible values are:
&#x9;&#x9;&#x9;-- &#x9;&#x9;FOUND - found when it finds a match to physical name in the spreadsheet
&#x9;&#x9;&#x9;-- &#x9;&#x9;UNCHANGED - remains unchanged when it cannot match to the physical resourceName and the ConfigureParams.generateWithSourceColumn=1
&#x9;&#x9;&#x9;-- &#x9;&#x9;DROPPED - gets dropped from the list when it cannot match to the physical resourceName and the ConfigureParams.generateWithSourceColumn=0

&#x9;Exceptions:  none

&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;CSW Version:&#x9;Reason:
&#x9;06/15/2010&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.2.0&#x9;&#x9;&#x9;Created new
&#x9;04/22/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.2.0&#x9;&#x9;&#x9;Added logicalType for Best Pracices 7.1
&#x9;10/10/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.1.0&#x9;&#x9;&#x9;8.0: Added datasourceName, projectFolderName and grandParentName
&#x9;03/15/2014&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.2.0&#x9;&#x9;&#x9;Added &quot;AS&quot; to the composite transformation when generateMode=&quot;G&quot; so that the generated SQL matches what is created when generateMode=&quot;R&quot;.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Added new parameter &quot;applyReservedWordList&quot; to indicate whether to apply reserved word list to output or not.
&#x9;08/08/2014&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.2.5&#x9;&#x9;&#x9;B.P. 8.1.3: Modified ability create no transformation when generateMode=R and generateCast=0
&#x9;01/24/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;8.0.0&#x9;&#x9;&#x9;B.P. 2019.1: Added the ability to handle columnCaseRule, resourcePrefix, resourceSuffix and newColumnList for generateMode=&apos;G&apos;. 
&#x9;04/15/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;B.P. 2019.200: Added scriptsPath for flexibility of the location of the _scripts folder.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   Changed custom functions to explicit paths.
&#x9;06/12/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;B.P. 2019.200: Derived the new getNameXML from getName to eliminate vector usage.

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

*/
PROCEDURE getNameXML(
&#x9;IN  inLogicalID&#x9;&#x9;&#x9;&#x9;CHAR(1),&#x9;&#x9;-- C=column, T=table [alleviates confusion between the same physical name being a column or table.
&#x9;IN  inContainerList&#x9;&#x9;&#x9;LONGVARCHAR,
&#x9;IN  inProjectFolderName&#x9;&#x9;VARCHAR,
&#x9;IN  inGreatGrandParentName&#x9;VARCHAR,
&#x9;IN  inGrandParentName&#x9;&#x9;VARCHAR,
&#x9;IN  inParentName&#x9;&#x9;&#x9;VARCHAR,
&#x9;IN &#x9;inContainerName&#x9;&#x9;&#x9;VARCHAR,
&#x9;IN&#x9;inResourceName&#x9;&#x9;&#x9;VARCHAR,
&#x9;IN  columnType&#x9;&#x9;&#x9;&#x9;VARCHAR,
&#x9;IN  applyReservedWordList&#x9;BIT,
&#x9;IN &#x9;ConfigParamsXML&#x9;&#x9;&#x9;LONGVARCHAR,
&#x9;OUT containerList&#x9;&#x9;&#x9;LONGVARCHAR,
&#x9;OUT logicalName&#x9;&#x9;&#x9;&#x9;VARCHAR,
&#x9;OUT logicalType&#x9;&#x9;&#x9;&#x9;VARCHAR,
&#x9;OUT compositeTransformation&#x9;LONGVARCHAR,
&#x9;OUT annotation&#x9;&#x9;&#x9;&#x9;LONGVARCHAR,
&#x9;OUT&#x9;status&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR
&#x9;&#x9;-- when generateMode = &apos;G&apos; possible values are:
&#x9;&#x9;-- &#x9;&#x9;GENERATED - generated the column name based on rules supplied
&#x9;&#x9;-- &#x9;&#x9;UNCHANGED - remains unchanged when it cannot match to the physical resourceName and the ConfigureParams.generateWithSourceColumn=1
&#x9;&#x9;-- when generateMode = &apos;R&apos; possible values are:
&#x9;&#x9;-- &#x9;&#x9;FOUND - found when it finds a match to physical name in the spreadsheet
&#x9;&#x9;-- &#x9;&#x9;UNCHANGED - remains unchanged when it cannot match to the physical resourceName and the ConfigureParams.generateWithSourceColumn=1
&#x9;&#x9;-- &#x9;&#x9;DROPPED - gets dropped from the list when it cannot match to the physical resourceName and the ConfigureParams.generateWithSourceColumn=0
)
BEGIN
&#x9;DECLARE moduleName&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;  &apos;||&apos;getNameXML&apos;;
&#x9;DECLARE ConfigParamsRec&#x9;&#x9;&#x9;/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions.ConfigParamsType;
&#x9;DECLARE defaultValuesXML&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE configureScriptsPath&#x9;LONGVARCHAR;
&#x9;DECLARE retriveColumnOption&#x9;&#x9;VARCHAR DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.retriveColumnOption;
&#x9;DECLARE actionType&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;&apos;;
&#x9;DECLARE caseRule&#x9;&#x9;&#x9;&#x9;CHAR(1);
&#x9;DECLARE ex&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;EXCEPTION;


&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;debug3&apos;, ConfigParamsXML, ConfigParamsRec.debug3);
&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;generateMode&apos;, ConfigParamsXML, ConfigParamsRec.generateMode);
&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;generateCast&apos;, ConfigParamsXML, ConfigParamsRec.generateCast);
&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;resourceCaseRule&apos;, ConfigParamsXML, ConfigParamsRec.resourceCaseRule);
&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;columnCaseRule&apos;, ConfigParamsXML, ConfigParamsRec.columnCaseRule);
&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;generateWithSourceColumn&apos;, ConfigParamsXML, ConfigParamsRec.generateWithSourceColumn);
&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;separator&apos;, ConfigParamsXML, ConfigParamsRec.separator);
&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;useAliasRule&apos;, ConfigParamsXML, ConfigParamsRec.useAliasRule);
&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;resourcePrefix&apos;, ConfigParamsXML, ConfigParamsRec.resourcePrefix);
&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;resourceSuffix&apos;, ConfigParamsXML, ConfigParamsRec.resourceSuffix);
&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;scriptsPath&apos;, ConfigParamsXML, ConfigParamsRec.scriptsPath);

&#x9;if (ConfigParamsRec.debug3 = &apos;Y&apos;) then
&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, ConfigParamsRec.debug3, 
&#x9;&#x9;&#x9;&apos;   inProjectFolderName=[&apos;||NVL(inProjectFolderName,&apos;null&apos;)||
&#x9;&#x9;&#x9;&apos;]  inGreatGrandParentName=[&apos;||NVL(inGreatGrandParentName,&apos;null&apos;)||
&#x9;&#x9;&#x9;&apos;]  inGrandParentName=[&apos;||NVL(inGrandParentName,&apos;null&apos;)||
&#x9;&#x9;&#x9;&apos;]  inParentName=[&apos;||NVL(inParentName,&apos;null&apos;)||
&#x9;&#x9;&#x9;&apos;]  inContainerName=[&apos;||NVL(inContainerName,&apos;null&apos;)||
&#x9;&#x9;&#x9;&apos;]  inResourceName=[&apos;||NVL(inResourceName,&apos;null&apos;)||
&#x9;&#x9;&#x9;&apos;]  columnType=[&apos;||NVL(columnType,&apos;null&apos;)||
&#x9;&#x9;&#x9;&apos;]  generateMode=[&apos;||NVL(ConfigParamsRec.generateMode,&apos;null&apos;)||
&#x9;&#x9;&#x9;&apos;]  generateCast=[&apos;||NVL(CAST(ConfigParamsRec.generateCast AS VARCHAR),&apos;null&apos;)||
&#x9;&#x9;&#x9;&apos;]&apos;);
&#x9;end if;

&#x9;SET logicalType = &apos;&apos;;

&#x9;IF (UPPER(ConfigParamsRec.generateMode) = &apos;G&apos;) THEN &#x9;-- &apos;G&apos;
&#x9;&#x9;SET actionType = &apos;Generated&apos;;
&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/getDefaultValuesXML(ConfigParamsRec.scriptsPath, defaultValuesXML);
&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;configureScriptsPath&apos;, defaultValuesXML, configureScriptsPath);

&#x9;&#x9;-- Apply the case rule for folders, tables or columns
&#x9;&#x9;SET caseRule = ConfigParamsRec.resourceCaseRule; -- caseRule is used when inLogicalID: T=tables and F=folders
&#x9;&#x9;IF (inLogicalID = &apos;C&apos;) THEN
&#x9;&#x9;&#x9;SET caseRule = ConfigParamsRec.columnCaseRule;
 &#x9;&#x9;END IF;

&#x9;&#x9;-- Generated Name&#x9;&#x9;
&#x9;&#x9;CALL /shared/ASAssets/BestPractices_v81/Procedures/generateName/getNameGenerated(
&#x9;&#x9;&#x9;inContainerName,
&#x9;&#x9;&#x9;inResourceName, 
&#x9;&#x9;&#x9;caseRule,
&#x9;&#x9;&#x9;ConfigParamsRec.separator,
&#x9;&#x9;&#x9;ConfigParamsRec.useAliasRule,
&#x9;&#x9;&#x9;configureScriptsPath,
&#x9;&#x9;&#x9;ConfigParamsRec.debug3,
&#x9;&#x9;&#x9;logicalName, 
&#x9;&#x9;&#x9;status);&#x9;

&#x9;&#x9;-- Add the prefix to the table name if it exists
&#x9;&#x9;IF (inLogicalID = &apos;T&apos; AND ConfigParamsRec.resourcePrefix IS NOT NULL AND LENGTH(ConfigParamsRec.resourcePrefix) &gt; 0) THEN
&#x9;&#x9;&#x9;SET logicalName =  ConfigParamsRec.resourcePrefix || logicalName;
&#x9;&#x9;END IF;

&#x9;&#x9;-- Add the suffix to the table name if it exists
&#x9;&#x9;IF (inLogicalID = &apos;T&apos; AND ConfigParamsRec.resourceSuffix IS NOT NULL AND LENGTH(ConfigParamsRec.resourceSuffix) &gt; 0) THEN
&#x9;&#x9;&#x9;SET logicalName = logicalName || ConfigParamsRec.resourceSuffix;
&#x9;&#x9;END IF;
 
&#x9;&#x9;-- Apply double quotes around reserved words if required
&#x9;&#x9;IF (applyReservedWordList = 1) THEN
&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord(logicalName, null, logicalName);
&#x9;&#x9;END IF;

&#x9;&#x9;-- Generate the transform &quot;CAST&quot; statement [mtinius: 5/10/2012]
&#x9;&#x9;IF (ConfigParamsRec.generateCast &gt;= 1 and columnType is not null and LENGTH(columnType) &gt; 0) then
&#x9;&#x9;&#x9;SET compositeTransformation = &apos;CAST(? AS &apos;||columnType||&apos;) AS&apos;;
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;SET compositeTransformation = &apos;&apos;;
&#x9;&#x9;END IF;
&#x9;ELSE
&#x9;&#x9;SET actionType = &apos;Retrieved&apos;;

&#x9;&#x9;-- Retrieved Name from a list
&#x9;&#x9;-- New retrieve name
&#x9;&#x9;IF (retriveColumnOption = &apos;NEW&apos;) THEN
&#x9;&#x9;&#x9;CALL /shared/ASAssets/BestPractices_v81/Procedures/retrieveName/getNamesRetrievedContainer(
&#x9;&#x9;&#x9;&#x9;inLogicalID,
&#x9;&#x9;&#x9;&#x9;inContainerList,
&#x9;&#x9;&#x9;&#x9;inProjectFolderName,
&#x9;&#x9;&#x9;&#x9;inGreatGrandParentName,
&#x9;&#x9;&#x9;&#x9;inGrandParentName,
&#x9;&#x9;&#x9;&#x9;inParentName,
&#x9;&#x9;&#x9;&#x9;inContainerName, 
&#x9;&#x9;&#x9;&#x9;inResourceName, 
&#x9;&#x9;&#x9;&#x9;ConfigParamsRec.generateWithSourceColumn,
&#x9;&#x9;&#x9;&#x9;ConfigParamsRec.debug3, 
&#x9;&#x9;&#x9;&#x9;containerList,
&#x9;&#x9;&#x9;&#x9;logicalName, 
&#x9;&#x9;&#x9;&#x9;logicalType,
&#x9;&#x9;&#x9;&#x9;compositeTransformation, 
&#x9;&#x9;&#x9;&#x9;annotation,
&#x9;&#x9;&#x9;&#x9;status);&#x9;
&#x9;&#x9;-- Original retrieve name
&#x9;&#x9;ELSEIF (retriveColumnOption = &apos;ORIGINAL&apos;) then
&#x9;&#x9;&#x9;CALL /shared/ASAssets/BestPractices_v81/Procedures/retrieveName/getNameRetrieved(
&#x9;&#x9;&#x9;&#x9;inProjectFolderName,
&#x9;&#x9;&#x9;&#x9;inGreatGrandParentName,
&#x9;&#x9;&#x9;&#x9;inGrandParentName,
&#x9;&#x9;&#x9;&#x9;inParentName,
&#x9;&#x9;&#x9;&#x9;inContainerName, 
&#x9;&#x9;&#x9;&#x9;inResourceName, 
&#x9;&#x9;&#x9;&#x9;ConfigParamsRec.generateWithSourceColumn,
&#x9;&#x9;&#x9;&#x9;ConfigParamsRec.debug3, 
&#x9;&#x9;&#x9;&#x9;logicalName, 
&#x9;&#x9;&#x9;&#x9;logicalType,
&#x9;&#x9;&#x9;&#x9;compositeTransformation, 
&#x9;&#x9;&#x9;&#x9;annotation,
&#x9;&#x9;&#x9;&#x9;status);&#x9;

&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;raise ex value &apos;Invalid defaultValues.retriveColumnOption=&apos;||NVL(retriveColumnOption,&apos;null&apos;);
&#x9;&#x9;END IF;

&#x9;&#x9;-- Apply double quotes around reserved words if required
&#x9;&#x9;IF (applyReservedWordList = 1) THEN
&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord(logicalName, null, logicalName);
&#x9;&#x9;END IF;

&#x9;&#x9;-- 2014-08-04 mtinius: Generate the transform &quot;CAST&quot; statement
&#x9;&#x9;IF (ConfigParamsRec.generateCast = 0) then
&#x9;&#x9;&#x9;SET compositeTransformation = &apos;&apos;;
&#x9;&#x9;END IF;
&#x9;END IF;
&#x9;if (ConfigParamsRec.debug3 = &apos;Y&apos;) then
&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, ConfigParamsRec.debug3, 
&#x9;&#x9;&#x9;&apos;actionType=[&apos;||actionType||
&#x9;&#x9;&#x9;&apos;]  ProjectFolderName=[&apos;||NVL(inProjectFolderName,&apos;null&apos;)||
&#x9;&#x9;&#x9;&apos;]  GreatGrandParentName=[&apos;||NVL(inGreatGrandParentName,&apos;null&apos;)||
&#x9;&#x9;&#x9;&apos;]  GrandParentName=[&apos;||NVL(inGrandParentName,&apos;null&apos;)||
&#x9;&#x9;&#x9;&apos;]  GrandParent=[&apos;||NVL(inGrandParentName,&apos;null&apos;)||
&#x9;&#x9;&#x9;&apos;]  Parent=[&apos;||NVL(inParentName,&apos;null&apos;)||
&#x9;&#x9;&#x9;&apos;]  Container=[&apos;||NVL(inContainerName,&apos;null&apos;)||
&#x9;&#x9;&#x9;&apos;]  Name=[&apos;||NVL(inResourceName,&apos;null&apos;)||
&#x9;&#x9;&#x9;&apos;]  logicalName=[&apos;||NVL(logicalName,&apos;null&apos;)||
&#x9;&#x9;&#x9;&apos;]  logicalType=[&apos;||NVL(logicalType,&apos;null&apos;)||
&#x9;&#x9;&#x9;&apos;]  Transform=[&apos;||NVL(compositeTransformation,&apos;null&apos;)||
&#x9;&#x9;&#x9;&apos;]  Annotation=[&apos;||NVL(annotation,&apos;null&apos;)||
&#x9;&#x9;&#x9;&apos;]&apos;);
&#x9;end if;
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1564149750489</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="p:10:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="p:2:Customized" type="STRING">datatype.changed;datatype.changed</attribute>
  <attribute name="p:3:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="p:4:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="p:6:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="p:7:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="p:8:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="p:9:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="references" type="NULL"/>
</metadata>