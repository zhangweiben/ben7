<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:9a66723c-3693-47f1-a1f0-d7811996f9d5 -->
<metadata name="02_display_DYNAMIC_FILE_QUEUE" path="/shared/ASAssets/BestPractices_v81/DynamicFileFramework/02_display_DYNAMIC_FILE_QUEUE" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>&lt;![CDATA[02_display_DYNAMIC_FILE_QUEUE:

&#x9;Provides a mechanism to output the contents of the DYNAMIC_FILE_QUEUE table.

&#x9;Input
&#x9;&#x9;debug&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1),&#x9;&#x9;-- Y=debug on, N=debug off
&#x9;&#x9;sortOrder&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- Default=DESC if null.  Valid Values for sorting by REQUEST_DATE_START:   ASC|ASCENDING|DESC|DESCENDING
&#x9;&#x9;requestId&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- Filter applied on REQUEST_ID if not null.  The operators [&lt;,&gt;,&lt;=,&gt;=,&lt;&gt;] may be present before a valid integer.
&#x9;&#x9;requestDateStart&#x9;&#x9;VARCHAR,&#x9;&#x9;-- Filter applied on REQUEST_DATE_START if not null.  The operators [IS NULL, IS NOT NULL,&lt;,&gt;,&lt;=,&gt;=,&lt;&gt;] may be present before a valid timestamp.
&#x9;&#x9;requestDateEnd&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- Filter applied on REQUEST_DATE_END if not null.   The operators [IS NULL, IS NOT NULL,&lt;,&gt;,&lt;=,&gt;=,&lt;&gt;] may be present before a valid timestamp.
&#x9;&#x9;organization&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- Filter applied on ORGANIZATION if not null.  Valid operator=[IS NULL, IS NOT NULL].  If % is present perform a LIKE otherwise perform = in WHERE clause.
&#x9;&#x9;projectName&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- Filter applied on PROJECT_NAME if not null.  Valid operator=[IS NULL, IS NOT NULL].  If % is present perform a LIKE otherwise perform = in WHERE clause.
&#x9;&#x9;subProjectName&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- Filter applied on SUBPROJECT_NAME if not null.  Valid operator=[IS NULL, IS NOT NULL].  If % is present perform a LIKE otherwise perform = in WHERE clause.
&#x9;&#x9;actionOriginator&#x9;&#x9;VARCHAR(50),&#x9;-- Filter applied on ACTION_ORIGINATOR if not null.  Valid operator=[IS NULL, IS NOT NULL].  If % is present perform a LIKE otherwise perform = in WHERE clause.
&#x9;&#x9;actionType&#x9;&#x9;&#x9;&#x9;VARCHAR(1),&#x9;&#x9;-- Filter applied on ACTION_TYPE if not null. Allowed values: [A, R, C]
&#x9;&#x9;status&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(100),&#x9;-- Filter applied on STATUS if not null.  Valid operator=[IS NULL, IS NOT NULL].  If % is present perform a LIKE otherwise perform = in WHERE clause.
&#x9;&#x9;message&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(4000),&#x9;-- Filter applied on MESSAGE if not null.  Valid operator=[IS NULL, IS NOT NULL].  If % is present perform a LIKE otherwise perform = in WHERE clause.
&#x9;&#x9;emailError&#x9;&#x9;&#x9;&#x9;VARCHAR(4000),&#x9;-- Filter applied on EMAIL_ERROR if not null.  Valid operator=[IS NULL, IS NOT NULL].  If % is present perform a LIKE otherwise perform = in WHERE clause.
&#x9;&#x9;requestFileName&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- Filter applied on REQUEST_FILE_NAME if not null.  Valid operator=[IS NULL, IS NOT NULL].  If % is present perform a LIKE otherwise perform = in WHERE clause.
&#x9;&#x9;requestUserName&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- Filter applied on REQUEST_USER_NAME if not null.  Valid operator=[IS NULL, IS NOT NULL].  If % is present perform a LIKE otherwise perform = in WHERE clause.
&#x9;&#x9;requestDomainName&#x9;&#x9;VARCHAR,&#x9;&#x9;-- Filter applied on REQUEST_DOMAIN_NAME if not null.  Valid operator=[IS NULL, IS NOT NULL].  If % is present perform a LIKE otherwise perform = in WHERE clause.
&#x9;&#x9;fileName&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- Filter applied on FILE_NAME if not null.  Valid operator=[IS NULL, IS NOT NULL].  If % is present perform a LIKE otherwise perform = in WHERE clause.
&#x9;&#x9;proxyUserName&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- Filter applied on PROXY_USER_NAME if not null.  Valid operator=[IS NULL, IS NOT NULL].  If % is present perform a LIKE otherwise perform = in WHERE clause.
&#x9;&#x9;proxyUserEmail&#x9;&#x9;&#x9;VARCHAR(4000),&#x9;-- Filter applied on PROXY_USER_EMAIL if not null.  Valid operator=[IS NULL, IS NOT NULL].  If % is present perform a LIKE otherwise perform = in WHERE clause.
&#x9;&#x9;allowNullFileName&#x9;&#x9;SMALLINT,&#x9;&#x9;-- Filter applied on ALLOW_NULL_FILE_NAME if not null.  Value values are NULL, 0 and 1.
&#x9;&#x9;datasourcePath&#x9;&#x9;&#x9;VARCHAR(4000),&#x9;-- Filter applied on DATA_SOURCE_PATH if not null.  Valid operator=[IS NULL, IS NOT NULL].  If % is present perform a LIKE otherwise perform = in WHERE clause.
&#x9;&#x9;formattingLayerPath&#x9;&#x9;VARCHAR(4000),&#x9;-- Filter applied on FORMATTING_LAYER_PATH if not null.  Valid operator=[IS NULL, IS NOT NULL].  If % is present perform a LIKE otherwise perform = in WHERE clause.
&#x9;&#x9;businessLayerPath&#x9;&#x9;VARCHAR(4000),&#x9;-- Filter applied on BUSINESS_LAYER_PATH if not null.  Valid operator=[IS NULL, IS NOT NULL].  If % is present perform a LIKE otherwise perform = in WHERE clause.
&#x9;&#x9;applicationLayerPath&#x9;VARCHAR(4000),&#x9;-- Filter applied on APPLICATION_LAYER_PATH if not null.  Valid operator=[IS NULL, IS NOT NULL].  If % is present perform a LIKE otherwise perform = in WHERE clause.
&#x9;&#x9;publishedSchemaPath&#x9;&#x9;VARCHAR(4000),&#x9;-- Filter applied on PUBLISHED_SCHEMA_PATH if not null.  Valid operator=[IS NULL, IS NOT NULL].  If % is present perform a LIKE otherwise perform = in WHERE clause.
&#x9;&#x9;publishedDatabase&#x9;&#x9;VARCHAR,&#x9;&#x9;-- Filter applied on PUBLISHED_DATABASE if not null.  Valid operator=[IS NULL, IS NOT NULL].  If % is present perform a LIKE otherwise perform = in WHERE clause.
&#x9;&#x9;constantsPath&#x9;&#x9;&#x9;VARCHAR(4000),&#x9;-- Filter applied on CONSTANTS_PATH if not null.  Valid operator=[IS NULL, IS NOT NULL].  If % is present perform a LIKE otherwise perform = in WHERE clause.
&#x9;&#x9;retentionPolicyDays&#x9;&#x9;VARCHAR,&#x9;&#x9;-- Filter applied on RETENTION_POLICY_DAYS if not null.  The operators [&lt;,&gt;,&lt;=,&gt;=,&lt;&gt;] may be present before a valid integer.
&#x9;Output:
&#x9;&#x9;result&#x9;&#x9;&#x9;&#x9;&#x9;CURSOR &#x9;&#x9;-- Output of the DYNAMIC_FILE_QUEUE table

&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;CSW Version:&#x9;Reason:
&#x9;02/20/2018&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.5&#x9;&#x9;&#x9;Adapted for Assets Data Abstraction Best Practices

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.]]&gt;</annotation>
  <parameters>
    <parameter name="debug" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="sortOrder" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="requestId" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="requestDateStart" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="requestDateEnd" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="organization" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="projectName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="subProjectName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="actionOriginator" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="50"/>
    </parameter>
    <parameter name="actionType" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="1"/>
    </parameter>
    <parameter name="status" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="100"/>
    </parameter>
    <parameter name="message" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="emailError" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="requestFileName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="requestUserName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="requestDomainName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="fileName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="proxyUserName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="proxyUserEmail" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="allowNullFileName" direction="IN" nullable="true">
      <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
    </parameter>
    <parameter name="datasourcePath" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="formattingLayerPath" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="businessLayerPath" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="applicationLayerPath" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="publishedSchemaPath" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="publishedDatabase" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="constantsPath" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="retentionPolicyDays" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="queueResult" direction="OUT" nullable="true">
      <datatype name="queueResult" type="TABLE" refId="256">
        <element name="REQUEST_ID">
          <datatype name="DECIMAL" type="DECIMAL" maxDigits="19" maxFractionalDigits="0"/>
        </element>
        <element name="REQUEST_DATE_START">
          <datatype name="TIMESTAMP" type="DATETIME"/>
        </element>
        <element name="REQUEST_DATE_END">
          <datatype name="TIMESTAMP" type="DATETIME"/>
        </element>
        <element name="ORGANIZATION">
          <datatype name="VARCHAR" type="STRING" maxLength="50"/>
        </element>
        <element name="PROJECT_NAME">
          <datatype name="VARCHAR" type="STRING" maxLength="50"/>
        </element>
        <element name="SUBPROJECT_NAME">
          <datatype name="VARCHAR" type="STRING" maxLength="50"/>
        </element>
        <element name="ACTION_ORIGINATOR">
          <datatype name="VARCHAR" type="STRING" maxLength="50"/>
        </element>
        <element name="ACTION_TYPE">
          <datatype name="VARCHAR" type="STRING" maxLength="1"/>
        </element>
        <element name="STATUS">
          <datatype name="VARCHAR" type="STRING" maxLength="100"/>
        </element>
        <element name="MESSAGE">
          <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
        </element>
        <element name="EMAIL_ERROR">
          <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
        </element>
        <element name="REQUEST_FILE_NAME">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="REQUEST_USER_NAME">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="REQUEST_DOMAIN_NAME">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="FILE_NAME">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="PROXY_USER_NAME">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="PROXY_USER_EMAIL">
          <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
        </element>
        <element name="ALLOW_NULL_FILE_NAME">
          <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
        </element>
        <element name="DATA_SOURCE_PATH">
          <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
        </element>
        <element name="FORMATTING_LAYER_PATH">
          <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
        </element>
        <element name="BUSINESS_LAYER_PATH">
          <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
        </element>
        <element name="APPLICATION_LAYER_PATH">
          <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
        </element>
        <element name="PUBLISHED_SCHEMA_PATH">
          <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
        </element>
        <element name="PUBLISHED_DATABASE">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="CONSTANTS_PATH">
          <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
        </element>
        <element name="RETENTION_POLICY_DAYS">
          <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
        </element>
      </datatype>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/util/Pause" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="timeInMilliSeconds" direction="IN">
        <datatype type="INTEGER"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/DynamicFileFramework/constants" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="EXECUTE_DDL_PACKAGE_PATH" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="DATASOURCE_PATH" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="CATALOG_NAME" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="SCHEMA_NAME" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="DYNAMIC_FILE_SEQ" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="DYNAMIC_FILE_EMAIL" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="DYNAMIC_FILE_QUEUE" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="TABLESPACE_FILEGROUP" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="PROCESS_WAIT_TIME_SECONDS" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="DEFAULT_EMAIL" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="DEFAULT_RETENTION_POLICY_DAYS" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="CSV_SUPPORTED_FILE_EXTENSIONS" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="EXCEL_SUPPORTED_FILE_EXTENSIONS" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inPath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/getConstantV2" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="constantsPath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="constantsName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="optionReturn" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="outValue" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* 02_display_DYNAMIC_FILE_QUEUE:

&#x9;Provides a mechanism to output the contents of the DYNAMIC_FILE_QUEUE table.

&#x9;Input
&#x9;&#x9;debug&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1),&#x9;&#x9;-- Y=debug on, N=debug off
&#x9;&#x9;sortOrder&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- Default=DESC if null.  Valid Values for sorting by REQUEST_DATE_START:   ASC|ASCENDING|DESC|DESCENDING
&#x9;&#x9;requestId&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- Filter applied on REQUEST_ID if not null.  The operators [&lt;,&gt;,&lt;=,&gt;=,&lt;&gt;] may be present before a valid integer.
&#x9;&#x9;requestDateStart&#x9;&#x9;VARCHAR,&#x9;&#x9;-- Filter applied on REQUEST_DATE_START if not null.  The operators [IS NULL, IS NOT NULL,&lt;,&gt;,&lt;=,&gt;=,&lt;&gt;] may be present before a valid timestamp.
&#x9;&#x9;requestDateEnd&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- Filter applied on REQUEST_DATE_END if not null.   The operators [IS NULL, IS NOT NULL,&lt;,&gt;,&lt;=,&gt;=,&lt;&gt;] may be present before a valid timestamp.
&#x9;&#x9;organization&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- Filter applied on ORGANIZATION if not null.  Valid operator=[IS NULL, IS NOT NULL].  If % is present perform a LIKE otherwise perform = in WHERE clause.
&#x9;&#x9;projectName&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- Filter applied on PROJECT_NAME if not null.  Valid operator=[IS NULL, IS NOT NULL].  If % is present perform a LIKE otherwise perform = in WHERE clause.
&#x9;&#x9;subProjectName&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- Filter applied on SUBPROJECT_NAME if not null.  Valid operator=[IS NULL, IS NOT NULL].  If % is present perform a LIKE otherwise perform = in WHERE clause.
&#x9;&#x9;actionOriginator&#x9;&#x9;VARCHAR(50),&#x9;-- Filter applied on ACTION_ORIGINATOR if not null.  Valid operator=[IS NULL, IS NOT NULL].  If % is present perform a LIKE otherwise perform = in WHERE clause.
&#x9;&#x9;actionType&#x9;&#x9;&#x9;&#x9;VARCHAR(1),&#x9;&#x9;-- Filter applied on ACTION_TYPE if not null. Allowed values: [A, R, C]
&#x9;&#x9;status&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(100),&#x9;-- Filter applied on STATUS if not null.  Valid operator=[IS NULL, IS NOT NULL].  If % is present perform a LIKE otherwise perform = in WHERE clause.
&#x9;&#x9;message&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(4000),&#x9;-- Filter applied on MESSAGE if not null.  Valid operator=[IS NULL, IS NOT NULL].  If % is present perform a LIKE otherwise perform = in WHERE clause.
&#x9;&#x9;emailError&#x9;&#x9;&#x9;&#x9;VARCHAR(4000),&#x9;-- Filter applied on EMAIL_ERROR if not null.  Valid operator=[IS NULL, IS NOT NULL].  If % is present perform a LIKE otherwise perform = in WHERE clause.
&#x9;&#x9;requestFileName&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- Filter applied on REQUEST_FILE_NAME if not null.  Valid operator=[IS NULL, IS NOT NULL].  If % is present perform a LIKE otherwise perform = in WHERE clause.
&#x9;&#x9;requestUserName&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- Filter applied on REQUEST_USER_NAME if not null.  Valid operator=[IS NULL, IS NOT NULL].  If % is present perform a LIKE otherwise perform = in WHERE clause.
&#x9;&#x9;requestDomainName&#x9;&#x9;VARCHAR,&#x9;&#x9;-- Filter applied on REQUEST_DOMAIN_NAME if not null.  Valid operator=[IS NULL, IS NOT NULL].  If % is present perform a LIKE otherwise perform = in WHERE clause.
&#x9;&#x9;fileName&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- Filter applied on FILE_NAME if not null.  Valid operator=[IS NULL, IS NOT NULL].  If % is present perform a LIKE otherwise perform = in WHERE clause.
&#x9;&#x9;proxyUserName&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- Filter applied on PROXY_USER_NAME if not null.  Valid operator=[IS NULL, IS NOT NULL].  If % is present perform a LIKE otherwise perform = in WHERE clause.
&#x9;&#x9;proxyUserEmail&#x9;&#x9;&#x9;VARCHAR(4000),&#x9;-- Filter applied on PROXY_USER_EMAIL if not null.  Valid operator=[IS NULL, IS NOT NULL].  If % is present perform a LIKE otherwise perform = in WHERE clause.
&#x9;&#x9;allowNullFileName&#x9;&#x9;SMALLINT,&#x9;&#x9;-- Filter applied on ALLOW_NULL_FILE_NAME if not null.  Value values are NULL, 0 and 1.
&#x9;&#x9;datasourcePath&#x9;&#x9;&#x9;VARCHAR(4000),&#x9;-- Filter applied on DATA_SOURCE_PATH if not null.  Valid operator=[IS NULL, IS NOT NULL].  If % is present perform a LIKE otherwise perform = in WHERE clause.
&#x9;&#x9;formattingLayerPath&#x9;&#x9;VARCHAR(4000),&#x9;-- Filter applied on FORMATTING_LAYER_PATH if not null.  Valid operator=[IS NULL, IS NOT NULL].  If % is present perform a LIKE otherwise perform = in WHERE clause.
&#x9;&#x9;businessLayerPath&#x9;&#x9;VARCHAR(4000),&#x9;-- Filter applied on BUSINESS_LAYER_PATH if not null.  Valid operator=[IS NULL, IS NOT NULL].  If % is present perform a LIKE otherwise perform = in WHERE clause.
&#x9;&#x9;applicationLayerPath&#x9;VARCHAR(4000),&#x9;-- Filter applied on APPLICATION_LAYER_PATH if not null.  Valid operator=[IS NULL, IS NOT NULL].  If % is present perform a LIKE otherwise perform = in WHERE clause.
&#x9;&#x9;publishedSchemaPath&#x9;&#x9;VARCHAR(4000),&#x9;-- Filter applied on PUBLISHED_SCHEMA_PATH if not null.  Valid operator=[IS NULL, IS NOT NULL].  If % is present perform a LIKE otherwise perform = in WHERE clause.
&#x9;&#x9;publishedDatabase&#x9;&#x9;VARCHAR,&#x9;&#x9;-- Filter applied on PUBLISHED_DATABASE if not null.  Valid operator=[IS NULL, IS NOT NULL].  If % is present perform a LIKE otherwise perform = in WHERE clause.
&#x9;&#x9;constantsPath&#x9;&#x9;&#x9;VARCHAR(4000),&#x9;-- Filter applied on CONSTANTS_PATH if not null.  Valid operator=[IS NULL, IS NOT NULL].  If % is present perform a LIKE otherwise perform = in WHERE clause.
&#x9;&#x9;retentionPolicyDays&#x9;&#x9;VARCHAR,&#x9;&#x9;-- Filter applied on RETENTION_POLICY_DAYS if not null.  The operators [&lt;,&gt;,&lt;=,&gt;=,&lt;&gt;] may be present before a valid integer.
&#x9;Output:
&#x9;&#x9;result&#x9;&#x9;&#x9;&#x9;&#x9;CURSOR &#x9;&#x9;-- Output of the DYNAMIC_FILE_QUEUE table

&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;CSW Version:&#x9;Reason:
&#x9;02/20/2018&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.5&#x9;&#x9;&#x9;Adapted for Assets Data Abstraction Best Practices

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.
*/
PROCEDURE &quot;02_display_DYNAMIC_FILE_QUEUE&quot;(
&#x9;IN  debug&#x9;&#x9;&#x9;&#x9;CHAR(1),&#x9;&#x9;&#x9;-- Y=debug on, N=debug off
&#x9;IN &#x9;sortOrder&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- Valid Values for sorting by REQUEST_DATE_START:   ASC|ASCENDING|DESC|DESCENDING
&#x9;IN &#x9;requestId&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- Filter applied on REQUEST_ID if not null.  The operators [=,!=,&lt;&gt;,&lt;,&gt;,&lt;=,&gt;=] may be present before a valid integer.
&#x9;IN &#x9;requestDateStart&#x9;&#x9;VARCHAR,&#x9;&#x9;-- Filter applied on REQUEST_DATE_START if not null.  The operators [IS NULL, IS NOT NULL,=,!=,&lt;&gt;,&lt;,&gt;,&lt;=,&gt;=] may be present before a valid timestamp.
&#x9;IN &#x9;requestDateEnd&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- Filter applied on REQUEST_DATE_END if not null.   The operators [IS NULL, IS NOT NULL,=,!=,&lt;&gt;,&lt;,&gt;,&lt;=,&gt;=] may be present before a valid timestamp.
&#x9;IN &#x9;organization&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- Filter applied on ORGANIZATION if not null.  Valid operator=[IS NULL, IS NOT NULL].  If % is present perform a LIKE otherwise perform = in WHERE clause.
&#x9;IN &#x9;projectName&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- Filter applied on PROJECT_NAME if not null.  Valid operator=[IS NULL, IS NOT NULL].  If % is present perform a LIKE otherwise perform = in WHERE clause.
&#x9;IN &#x9;subProjectName&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- Filter applied on SUBPROJECT_NAME if not null.  Valid operator=[IS NULL, IS NOT NULL].  If % is present perform a LIKE otherwise perform = in WHERE clause.
&#x9;IN &#x9;actionOriginator&#x9;&#x9;VARCHAR(50),&#x9;-- Filter applied on ACTION_ORIGINATOR if not null.  Valid operator=[IS NULL, IS NOT NULL].  If % is present perform a LIKE otherwise perform = in WHERE clause.
&#x9;IN &#x9;actionType&#x9;&#x9;&#x9;&#x9;VARCHAR(1),&#x9;&#x9;-- Filter applied on ACTION_TYPE if not null. Allowed values: [A, R, C]
&#x9;IN &#x9;status&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(100),&#x9;-- Filter applied on STATUS if not null.  Valid operator=[IS NULL, IS NOT NULL].  If % is present perform a LIKE otherwise perform = in WHERE clause.
&#x9;IN &#x9;message&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(4000),&#x9;-- Filter applied on MESSAGE if not null.  Valid operator=[IS NULL, IS NOT NULL].  If % is present perform a LIKE otherwise perform = in WHERE clause.
&#x9;IN &#x9;emailError&#x9;&#x9;&#x9;&#x9;VARCHAR(4000),&#x9;-- Filter applied on EMAIL_ERROR if not null.  Valid operator=[IS NULL, IS NOT NULL].  If % is present perform a LIKE otherwise perform = in WHERE clause.
&#x9;IN &#x9;requestFileName&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- Filter applied on REQUEST_FILE_NAME if not null.  Valid operator=[IS NULL, IS NOT NULL].  If % is present perform a LIKE otherwise perform = in WHERE clause.
&#x9;IN &#x9;requestUserName&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- Filter applied on REQUEST_USER_NAME if not null.  Valid operator=[IS NULL, IS NOT NULL].  If % is present perform a LIKE otherwise perform = in WHERE clause.
&#x9;IN &#x9;requestDomainName&#x9;&#x9;VARCHAR,&#x9;&#x9;-- Filter applied on REQUEST_DOMAIN_NAME if not null.  Valid operator=[IS NULL, IS NOT NULL].  If % is present perform a LIKE otherwise perform = in WHERE clause.
&#x9;IN &#x9;fileName&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- Filter applied on FILE_NAME if not null.  Valid operator=[IS NULL, IS NOT NULL].  If % is present perform a LIKE otherwise perform = in WHERE clause.
&#x9;IN &#x9;proxyUserName&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- Filter applied on PROXY_USER_NAME if not null.  Valid operator=[IS NULL, IS NOT NULL].  If % is present perform a LIKE otherwise perform = in WHERE clause.
&#x9;IN &#x9;proxyUserEmail&#x9;&#x9;&#x9;VARCHAR(4000),&#x9;-- Filter applied on PROXY_USER_EMAIL if not null.  Valid operator=[IS NULL, IS NOT NULL].  If % is present perform a LIKE otherwise perform = in WHERE clause.
&#x9;IN&#x9;allowNullFileName&#x9;&#x9;SMALLINT,&#x9;&#x9;-- Filter applied on ALLOW_NULL_FILE_NAME if not null.  Value values are NULL, 0 and 1.
&#x9;IN &#x9;datasourcePath&#x9;&#x9;&#x9;VARCHAR(4000),&#x9;-- Filter applied on DATA_SOURCE_PATH if not null.  Valid operator=[IS NULL, IS NOT NULL].  If % is present perform a LIKE otherwise perform = in WHERE clause.
&#x9;IN &#x9;formattingLayerPath&#x9;&#x9;VARCHAR(4000),&#x9;-- Filter applied on FORMATTING_LAYER_PATH if not null.  Valid operator=[IS NULL, IS NOT NULL].  If % is present perform a LIKE otherwise perform = in WHERE clause.
&#x9;IN &#x9;businessLayerPath&#x9;&#x9;VARCHAR(4000),&#x9;-- Filter applied on BUSINESS_LAYER_PATH if not null.  Valid operator=[IS NULL, IS NOT NULL].  If % is present perform a LIKE otherwise perform = in WHERE clause.
&#x9;IN &#x9;applicationLayerPath&#x9;VARCHAR(4000),&#x9;-- Filter applied on APPLICATION_LAYER_PATH if not null.  Valid operator=[IS NULL, IS NOT NULL].  If % is present perform a LIKE otherwise perform = in WHERE clause.
&#x9;IN &#x9;publishedSchemaPath&#x9;&#x9;VARCHAR(4000),&#x9;-- Filter applied on PUBLISHED_SCHEMA_PATH if not null.  Valid operator=[IS NULL, IS NOT NULL].  If % is present perform a LIKE otherwise perform = in WHERE clause.
&#x9;IN &#x9;publishedDatabase&#x9;&#x9;VARCHAR,&#x9;&#x9;-- Filter applied on PUBLISHED_DATABASE if not null.  Valid operator=[IS NULL, IS NOT NULL].  If % is present perform a LIKE otherwise perform = in WHERE clause.
&#x9;IN &#x9;constantsPath&#x9;&#x9;&#x9;VARCHAR(4000),&#x9;-- Filter applied on CONSTANTS_PATH if not null.  Valid operator=[IS NULL, IS NOT NULL].  If % is present perform a LIKE otherwise perform = in WHERE clause.
&#x9;IN&#x9;retentionPolicyDays&#x9;&#x9;VARCHAR,&#x9;&#x9;-- Filter applied on RETENTION_POLICY_DAYS if not null.  The operators [=,!=,&lt;&gt;,&lt;,&gt;,&lt;=,&gt;=] may be present before a valid integer.
    OUT queueResult &#x9;CURSOR /shared/ASAssets/BestPractices_v81/DynamicFileFramework/constants.queueResultType
)
BEGIN
&#x9;DECLARE moduleName&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;02_display_DYNAMIC_FILE_QUEUE&apos;;
&#x9;DECLARE&#x9;globalConstantsPath&#x9;&#x9;VARCHAR(4000) DEFAULT /shared/ASAssets/BestPractices_v81/DynamicFileFramework/constants.globalConstantsPath;
&#x9;DECLARE sortOrderVal&#x9;&#x9;&#x9;VARCHAR DEFAULT sortOrder;
&#x9;DECLARE sqlStatement&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE queueDatasourcePath&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE queueCatalogName&#x9;&#x9;VARCHAR;
&#x9;DECLARE queueSchemaName&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE queueTableName&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE fullTablePath&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE validSortOrder&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;|ASC|ASCENDING|DESC|DESCENDING|&apos;;
&#x9;DECLARE val&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE valINT&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE valTIMESTAMP&#x9;&#x9;&#x9;TIMESTAMP;
&#x9;DECLARE col&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE i&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE op&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE ch&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1);
&#x9;DECLARE whereClauseFilter&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE ex&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;EXCEPTION;

&#x9;-- Determine the sort order validity
&#x9;IF (sortOrderVal IS NULL OR LENGTH(TRIM(sortOrderVal)) = 0) THEN
&#x9;&#x9;SET sortOrderVal = &apos;DESC&apos;;
&#x9;ELSE
&#x9;&#x9;IF (INSTR(validSortOrder, &apos;|&apos;||UPPER(sortOrderVal)||&apos;|&apos;) = 0) THEN
&#x9;&#x9;&#x9;RAISE ex VALUE &apos;Invalid &quot;sortOrder&quot; value provided.  Valid=[&apos;||validSortOrder||&apos;]&apos;;
&#x9;&#x9;END IF;
&#x9;END IF;
&#x9;IF (globalConstantsPath IS NULL OR LENGTH(TRIM(globalConstantsPath)) = 0) THEN
&#x9;&#x9;RAISE ex VALUE &apos;The global constants path may not be null or emtpy.&apos;;
&#x9;END IF;
&#x9;-- Validate action type
&#x9;IF (actionType IS NOT NULL AND actionType NOT IN (&apos;A&apos;,&apos;R&apos;,&apos;C&apos;)) THEN
&#x9;&#x9;RAISE ex VALUE &apos;The input parameter &quot;actionType&quot; must be a member of (&apos;&apos;A&apos;&apos;,&apos;&apos;R&apos;&apos;,&apos;&apos;C&apos;&apos;).  actionType=&apos;||actionType||&apos;.&apos;;
&#x9;END IF;
&#x9;-- Validate allowNullFileName
&#x9;IF (allowNullFileName IS NOT NULL AND allowNullFileName &lt;&gt; 0 AND allowNullFileName &lt;&gt; 1) THEN
&#x9;&#x9;RAISE ex VALUE &apos;The input parameter &quot;allowNullFileName&quot; must be 0 or 1.  allowNullFileName=&apos;||allowNullFileName||&apos;.&apos;;
&#x9;END IF;
&#x9;
&#x9;-- This procedure is used to provide a queue for processing &quot;Dynamic View Framework&quot; requests.
&#x9;-- Get the datasource path, catalog and schema name to construct the path dynamically
&#x9;CALL /shared/ASAssets/Utilities/string/getConstantV2(globalConstantsPath, &apos;DATASOURCE_PATH&apos;, 1, queueDatasourcePath);
&#x9;CALL /shared/ASAssets/Utilities/string/getConstantV2(globalConstantsPath, &apos;CATALOG_NAME&apos;, 1, queueCatalogName);
&#x9;CALL /shared/ASAssets/Utilities/string/getConstantV2(globalConstantsPath, &apos;SCHEMA_NAME&apos;, 1, queueSchemaName);
&#x9;CALL /shared/ASAssets/Utilities/string/getConstantV2(globalConstantsPath, &apos;DYNAMIC_FILE_QUEUE&apos;, 1, queueTableName);
&#x9;IF (queueDatasourcePath IS NULL OR LENGTH(TRIM(queueDatasourcePath)) = 0) THEN
&#x9;&#x9;RAISE ex VALUE &apos;The datasource path may not be null or empty:  &apos;||globalConstantsPath||&apos;.DATASOURCE_PATH&apos;;
&#x9;END IF;
&#x9;IF (queueSchemaName IS NULL OR LENGTH(TRIM(queueSchemaName)) = 0) THEN
&#x9;&#x9;RAISE ex VALUE &apos;The schema name may not be null or empty:  &apos;||globalConstantsPath||&apos;.SCHEMA_NAME&apos;;
&#x9;END IF;
&#x9;IF (queueCatalogName IS NULL OR LENGTH(TRIM(queueCatalogName)) = 0) THEN
&#x9;&#x9;SET queueCatalogName = &apos;&apos;;
&#x9;ELSE
&#x9;&#x9;SET queueCatalogName = &apos;/&apos;||queueCatalogName;
&#x9;END IF;
&#x9;IF (queueTableName IS NULL OR LENGTH(TRIM(queueTableName)) = 0) THEN
&#x9;&#x9;RAISE ex VALUE &apos;The table name may not be null or empty:  &apos;||globalConstantsPath||&apos;.DYNAMIC_FILE_QUEUE&apos;;
&#x9;END IF;
&#x9;SET fullTablePath = queueDatasourcePath || queueCatalogName || &apos;/&apos;||queueSchemaName || &apos;/&apos;||queueTableName;
&#x9;CALL /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(fullTablePath, null, fullTablePath);

&#x9;-- Determine the where clause
&#x9;SET whereClauseFilter = &apos;&apos;;

&#x9;-- Apply where clause for REQUEST_ID
&#x9;SET col = &apos;REQUEST_ID&apos;;
&#x9;SET val = TRIM(REPLACE(requestId,CHR(9),&apos; &apos;));
&#x9;IF (val IS NOT NULL AND LENGTH(TRIM(val)) &gt; 0) THEN
&#x9;&#x9;IF (length(whereClauseFilter) &gt; 0) THEN
&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter ||CHR(10)||&apos;      &apos;||&apos;AND&apos;;
&#x9;&#x9;END IF;
&#x9;&#x9;--The operators [=,!=,&lt;&gt;,&lt;,&gt;,&lt;=,&gt;=] may be present before a valid integer.
&#x9;&#x9;SET i = 1;
&#x9;&#x9;SET op = &apos;&apos;;
&#x9;&#x9;WHILE (i &lt;= LENGTH(val) AND SUBSTRING(val,i,1) NOT IN (&apos;0&apos;,&apos;1&apos;,&apos;2&apos;,&apos;3&apos;,&apos;4&apos;,&apos;5&apos;,&apos;6&apos;,&apos;7&apos;,&apos;8&apos;,&apos;9&apos;)) DO
&#x9;&#x9;&#x9;SET op = TRIM(op || SUBSTRING(val,i,1));
&#x9;&#x9;&#x9;SET i = i + 1;
&#x9;&#x9;END WHILE;
&#x9;&#x9;SET valINT = CAST(SUBSTRING(TRIM(val),i) AS INTEGER);
&#x9;&#x9;IF (LENGTH(op) = 0) THEN
&#x9;&#x9;&#x9;SET op = &apos;=&apos;;
&#x9;&#x9;END IF;
&#x9;&#x9;IF (op NOT IN (&apos;=&apos;,&apos;!=&apos;,&apos;&lt;&gt;&apos;,&apos;&lt;&apos;,&apos;&gt;&apos;,&apos;&lt;=&apos;,&apos;&gt;=&apos;)) THEN
&#x9;&#x9;&#x9;RAISE ex VALUE &apos;The operator=[&apos;||op||&apos;] is not valid for the request=[&apos;||val||&apos;]&apos;;
&#x9;&#x9;END IF;
&#x9;&#x9;-- Create the where clause
&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; &apos;||op||&apos; &apos;||valINT;
&#x9;END IF;

&#x9;-- Apply where clause for REQUEST_DATE_START
&#x9;SET col = &apos;REQUEST_DATE_START&apos;;
&#x9;SET val = REPLACE(TRIM(REPLACE(requestDateStart,CHR(9),&apos; &apos;)),&apos;/&apos;,&apos;-&apos;);
&#x9;IF (val IS NOT NULL AND LENGTH(TRIM(val)) &gt; 0) THEN
&#x9;&#x9;IF (length(whereClauseFilter) &gt; 0) THEN
&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter ||CHR(10)||&apos;      &apos;||&apos;AND&apos;;
&#x9;&#x9;END IF;
&#x9;&#x9;-- Reduce the number of double spaces to a single space
&#x9;&#x9;while (INSTR(val, &apos;  &apos;) &gt; 0) do
&#x9;&#x9;&#x9;set val = REPLACE(val, &apos;  &apos;, &apos; &apos;);
&#x9;&#x9;end while;
&#x9;&#x9;-- Check for keywords: IS NULL or IS NOT NULL
&#x9;&#x9;IF (UPPER(val) = &apos;IS NULL&apos; OR UPPER(val) = &apos;IS NOT NULL&apos;) THEN
&#x9;&#x9;&#x9;-- Create the where clause
&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; &apos;||UPPER(val);
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;--The operators [=,!=,&lt;&gt;,&lt;,&gt;,&lt;=,&gt;=] may be present before a valid integer.
&#x9;&#x9;&#x9;SET i = 1;
&#x9;&#x9;&#x9;SET op = &apos;&apos;;
&#x9;&#x9;&#x9;-- YYYY-MM-DD HH24:MI:SS.FFF
&#x9;&#x9;&#x9;WHILE (i &lt;= LENGTH(val) AND SUBSTRING(val,i,1) NOT IN (&apos;0&apos;,&apos;1&apos;,&apos;2&apos;,&apos;3&apos;,&apos;4&apos;,&apos;5&apos;,&apos;6&apos;,&apos;7&apos;,&apos;8&apos;,&apos;9&apos;)) DO
&#x9;&#x9;&#x9;&#x9;SET op = TRIM(op || SUBSTRING(val,i,1));
&#x9;&#x9;&#x9;&#x9;SET i = i + 1;
&#x9;&#x9;&#x9;END WHILE;
&#x9;&#x9;&#x9;SET valTIMESTAMP = CAST(SUBSTRING(TRIM(val),i) AS TIMESTAMP);
&#x9;&#x9;&#x9;IF (LENGTH(op) = 0) THEN
&#x9;&#x9;&#x9;&#x9;SET op = &apos;=&apos;;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;IF (op NOT IN (&apos;=&apos;,&apos;!=&apos;,&apos;&lt;&gt;&apos;,&apos;&lt;&apos;,&apos;&gt;&apos;,&apos;&lt;=&apos;,&apos;&gt;=&apos;)) THEN
&#x9;&#x9;&#x9;&#x9;RAISE ex VALUE &apos;The operator=[&apos;||op||&apos;] is not valid for the request=[&apos;||val||&apos;]&apos;;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;-- Create the where clause
&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; &apos;||op||&apos; &apos;&apos;&apos;||valTIMESTAMP||&apos;&apos;&apos;&apos;;
&#x9;&#x9;END IF;
&#x9;END IF;

&#x9;-- Apply where clause for REQUEST_DATE_END
&#x9;SET col = &apos;REQUEST_DATE_END&apos;;
&#x9;SET val = REPLACE(TRIM(REPLACE(requestDateEnd,CHR(9),&apos; &apos;)),&apos;/&apos;,&apos;-&apos;);
&#x9;IF (val IS NOT NULL AND LENGTH(TRIM(val)) &gt; 0) THEN
&#x9;&#x9;IF (length(whereClauseFilter) &gt; 0) THEN
&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter ||CHR(10)||&apos;      &apos;||&apos;AND&apos;;
&#x9;&#x9;END IF;
&#x9;&#x9;-- Reduce the number of double spaces to a single space
&#x9;&#x9;while (INSTR(val, &apos;  &apos;) &gt; 0) do
&#x9;&#x9;&#x9;set val = REPLACE(val, &apos;  &apos;, &apos; &apos;);
&#x9;&#x9;end while;
&#x9;&#x9;-- Check for keywords: IS NULL or IS NOT NULL
&#x9;&#x9;IF (UPPER(val) = &apos;IS NULL&apos; OR UPPER(val) = &apos;IS NOT NULL&apos;) THEN
&#x9;&#x9;&#x9;-- Create the where clause
&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; &apos;||UPPER(val);
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;--The operators [=,!=,&lt;&gt;,&lt;,&gt;,&lt;=,&gt;=] may be present before a valid integer.
&#x9;&#x9;&#x9;SET i = 1;
&#x9;&#x9;&#x9;SET op = &apos;&apos;;
&#x9;&#x9;&#x9;-- YYYY-MM-DD HH24:MI:SS.FFF
&#x9;&#x9;&#x9;WHILE (i &lt;= LENGTH(val) AND SUBSTRING(val,i,1) NOT IN (&apos;0&apos;,&apos;1&apos;,&apos;2&apos;,&apos;3&apos;,&apos;4&apos;,&apos;5&apos;,&apos;6&apos;,&apos;7&apos;,&apos;8&apos;,&apos;9&apos;)) DO
&#x9;&#x9;&#x9;&#x9;SET op = TRIM(op || SUBSTRING(val,i,1));
&#x9;&#x9;&#x9;&#x9;SET i = i + 1;
&#x9;&#x9;&#x9;END WHILE;
&#x9;&#x9;&#x9;SET valTIMESTAMP = CAST(SUBSTRING(TRIM(val),i) AS TIMESTAMP);
&#x9;&#x9;&#x9;IF (LENGTH(op) = 0) THEN
&#x9;&#x9;&#x9;&#x9;SET op = &apos;=&apos;;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;IF (op NOT IN (&apos;=&apos;,&apos;!=&apos;,&apos;&lt;&gt;&apos;,&apos;&lt;&apos;,&apos;&gt;&apos;,&apos;&lt;=&apos;,&apos;&gt;=&apos;)) THEN
&#x9;&#x9;&#x9;&#x9;RAISE ex VALUE &apos;The operator=[&apos;||op||&apos;] is not valid for the request=[&apos;||val||&apos;]&apos;;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;-- Create the where clause
&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; &apos;||op||&apos; &apos;&apos;&apos;||valTIMESTAMP||&apos;&apos;&apos;&apos;;
&#x9;&#x9;END IF;
&#x9;END IF;

&#x9;-- Apply where clause for ORGANIZATION
&#x9;SET col = &apos;ORGANIZATION&apos;;
&#x9;SET val = TRIM(REPLACE(organization,CHR(9),&apos; &apos;));
&#x9;IF (val IS NOT NULL AND LENGTH(TRIM(val)) &gt; 0) THEN
&#x9;&#x9;IF (length(whereClauseFilter) &gt; 0) THEN
&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter ||CHR(10)||&apos;      &apos;||&apos;AND&apos;;
&#x9;&#x9;END IF;
&#x9;&#x9;-- Reduce the number of double spaces to a single space
&#x9;&#x9;while (INSTR(val, &apos;  &apos;) &gt; 0) do
&#x9;&#x9;&#x9;set val = REPLACE(val, &apos;  &apos;, &apos; &apos;);
&#x9;&#x9;end while;
&#x9;&#x9;-- Check for keywords: IS NULL or IS NOT NULL
&#x9;&#x9;IF (UPPER(val) = &apos;IS NULL&apos; OR UPPER(val) = &apos;IS NOT NULL&apos;) THEN
&#x9;&#x9;&#x9;-- Create the where clause
&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; &apos;||UPPER(val);
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;IF (INSTR(val, &apos;%&apos;) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; LIKE &apos;&apos;&apos;||val||&apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; = &apos;&apos;&apos;||val||&apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END IF;
&#x9;END IF;

&#x9;-- Apply where clause for PROJECT_NAME
&#x9;SET col = &apos;PROJECT_NAME&apos;;
&#x9;SET val = TRIM(REPLACE(projectName,CHR(9),&apos; &apos;));
&#x9;IF (val IS NOT NULL AND LENGTH(TRIM(val)) &gt; 0) THEN
&#x9;&#x9;IF (length(whereClauseFilter) &gt; 0) THEN
&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter ||CHR(10)||&apos;      &apos;||&apos;AND&apos;;
&#x9;&#x9;END IF;
&#x9;&#x9;-- Reduce the number of double spaces to a single space
&#x9;&#x9;while (INSTR(val, &apos;  &apos;) &gt; 0) do
&#x9;&#x9;&#x9;set val = REPLACE(val, &apos;  &apos;, &apos; &apos;);
&#x9;&#x9;end while;
&#x9;&#x9;-- Check for keywords: IS NULL or IS NOT NULL
&#x9;&#x9;IF (UPPER(val) = &apos;IS NULL&apos; OR UPPER(val) = &apos;IS NOT NULL&apos;) THEN
&#x9;&#x9;&#x9;-- Create the where clause
&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; &apos;||UPPER(val);
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;IF (INSTR(val, &apos;%&apos;) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; LIKE &apos;&apos;&apos;||val||&apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; = &apos;&apos;&apos;||val||&apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END IF;
&#x9;END IF;

&#x9;-- Apply where clause for SUBPROJECT_NAME
&#x9;SET col = &apos;SUBPROJECT_NAME&apos;;
&#x9;SET val = TRIM(REPLACE(subProjectName,CHR(9),&apos; &apos;));
&#x9;IF (val IS NOT NULL AND LENGTH(TRIM(val)) &gt; 0) THEN
&#x9;&#x9;IF (length(whereClauseFilter) &gt; 0) THEN
&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter ||CHR(10)||&apos;      &apos;||&apos;AND&apos;;
&#x9;&#x9;END IF;
&#x9;&#x9;-- Reduce the number of double spaces to a single space
&#x9;&#x9;while (INSTR(val, &apos;  &apos;) &gt; 0) do
&#x9;&#x9;&#x9;set val = REPLACE(val, &apos;  &apos;, &apos; &apos;);
&#x9;&#x9;end while;
&#x9;&#x9;-- Check for keywords: IS NULL or IS NOT NULL
&#x9;&#x9;IF (UPPER(val) = &apos;IS NULL&apos; OR UPPER(val) = &apos;IS NOT NULL&apos;) THEN
&#x9;&#x9;&#x9;-- Create the where clause
&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; &apos;||UPPER(val);
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;IF (INSTR(val, &apos;%&apos;) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; LIKE &apos;&apos;&apos;||val||&apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; = &apos;&apos;&apos;||val||&apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END IF;
&#x9;END IF;

&#x9;-- Apply where clause for ACTION_ORIGINATOR
&#x9;SET col = &apos;ACTION_ORIGINATOR&apos;;
&#x9;SET val = TRIM(REPLACE(actionOriginator,CHR(9),&apos; &apos;));
&#x9;IF (val IS NOT NULL AND LENGTH(TRIM(val)) &gt; 0) THEN
&#x9;&#x9;IF (length(whereClauseFilter) &gt; 0) THEN
&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter ||CHR(10)||&apos;      &apos;||&apos;AND&apos;;
&#x9;&#x9;END IF;
&#x9;&#x9;-- Reduce the number of double spaces to a single space
&#x9;&#x9;while (INSTR(val, &apos;  &apos;) &gt; 0) do
&#x9;&#x9;&#x9;set val = REPLACE(val, &apos;  &apos;, &apos; &apos;);
&#x9;&#x9;end while;
&#x9;&#x9;-- Check for keywords: IS NULL or IS NOT NULL
&#x9;&#x9;IF (UPPER(val) = &apos;IS NULL&apos; OR UPPER(val) = &apos;IS NOT NULL&apos;) THEN
&#x9;&#x9;&#x9;-- Create the where clause
&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; &apos;||UPPER(val);
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;IF (INSTR(val, &apos;%&apos;) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; LIKE &apos;&apos;&apos;||val||&apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; = &apos;&apos;&apos;||val||&apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END IF;
&#x9;END IF;

&#x9;-- Apply where clause for ACTION_TYPE
&#x9;SET col = &apos;ACTION_TYPE&apos;;
&#x9;SET val = actionType;
&#x9;IF (val IS NOT NULL AND LENGTH(TRIM(val)) &gt; 0) THEN
&#x9;&#x9;IF (length(whereClauseFilter) &gt; 0) THEN
&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter ||CHR(10)||&apos;      &apos;||&apos;AND&apos;;
&#x9;&#x9;END IF;
&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; = &apos;&apos;&apos;||val||&apos;&apos;&apos;&apos;;
&#x9;END IF;

&#x9;-- Apply where clause for STATUS
&#x9;SET col = &apos;STATUS&apos;;
&#x9;SET val = TRIM(REPLACE(status,CHR(9),&apos; &apos;));
&#x9;IF (val IS NOT NULL AND LENGTH(TRIM(val)) &gt; 0) THEN
&#x9;&#x9;IF (length(whereClauseFilter) &gt; 0) THEN
&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter ||CHR(10)||&apos;      &apos;||&apos;AND&apos;;
&#x9;&#x9;END IF;
&#x9;&#x9;IF (INSTR(val, &apos;%&apos;) &gt; 0) THEN
&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; LIKE &apos;&apos;&apos;||val||&apos;&apos;&apos;&apos;;
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; = &apos;&apos;&apos;||val||&apos;&apos;&apos;&apos;;
&#x9;&#x9;END IF;
&#x9;END IF;

&#x9;-- Apply where clause for MESSAGE
&#x9;SET col = &apos;MESSAGE&apos;;
&#x9;SET val = TRIM(REPLACE(message,CHR(9),&apos; &apos;));
&#x9;IF (val IS NOT NULL AND LENGTH(TRIM(val)) &gt; 0) THEN
&#x9;&#x9;IF (length(whereClauseFilter) &gt; 0) THEN
&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter ||CHR(10)||&apos;      &apos;||&apos;AND&apos;;
&#x9;&#x9;END IF;
&#x9;&#x9;-- Reduce the number of double spaces to a single space
&#x9;&#x9;while (INSTR(val, &apos;  &apos;) &gt; 0) do
&#x9;&#x9;&#x9;set val = REPLACE(val, &apos;  &apos;, &apos; &apos;);
&#x9;&#x9;end while;
&#x9;&#x9;-- Check for keywords: IS NULL or IS NOT NULL
&#x9;&#x9;IF (UPPER(val) = &apos;IS NULL&apos; OR UPPER(val) = &apos;IS NOT NULL&apos;) THEN
&#x9;&#x9;&#x9;-- Create the where clause
&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; &apos;||UPPER(val);
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;IF (INSTR(val, &apos;%&apos;) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; LIKE &apos;&apos;&apos;||val||&apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; = &apos;&apos;&apos;||val||&apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END IF;
&#x9;END IF;

&#x9;-- Apply where clause for EMAIL_ERROR
&#x9;SET col = &apos;EMAIL_ERROR&apos;;
&#x9;SET val = TRIM(REPLACE(emailError,CHR(9),&apos; &apos;));
&#x9;IF (val IS NOT NULL AND LENGTH(TRIM(val)) &gt; 0) THEN
&#x9;&#x9;IF (length(whereClauseFilter) &gt; 0) THEN
&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter ||CHR(10)||&apos;      &apos;||&apos;AND&apos;;
&#x9;&#x9;END IF;
&#x9;&#x9;-- Reduce the number of double spaces to a single space
&#x9;&#x9;while (INSTR(val, &apos;  &apos;) &gt; 0) do
&#x9;&#x9;&#x9;set val = REPLACE(val, &apos;  &apos;, &apos; &apos;);
&#x9;&#x9;end while;
&#x9;&#x9;-- Check for keywords: IS NULL or IS NOT NULL
&#x9;&#x9;IF (UPPER(val) = &apos;IS NULL&apos; OR UPPER(val) = &apos;IS NOT NULL&apos;) THEN
&#x9;&#x9;&#x9;-- Create the where clause
&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; &apos;||UPPER(val);
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;IF (INSTR(val, &apos;%&apos;) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; LIKE &apos;&apos;&apos;||val||&apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; = &apos;&apos;&apos;||val||&apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END IF;
&#x9;END IF;

&#x9;-- Apply where clause for REQUEST_FILE_NAME
&#x9;SET col = &apos;REQUEST_FILE_NAME&apos;;
&#x9;SET val = TRIM(REPLACE(requestFileName,CHR(9),&apos; &apos;));
&#x9;IF (val IS NOT NULL AND LENGTH(TRIM(val)) &gt; 0) THEN
&#x9;&#x9;IF (length(whereClauseFilter) &gt; 0) THEN
&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter ||CHR(10)||&apos;      &apos;||&apos;AND&apos;;
&#x9;&#x9;END IF;
&#x9;&#x9;-- Reduce the number of double spaces to a single space
&#x9;&#x9;while (INSTR(val, &apos;  &apos;) &gt; 0) do
&#x9;&#x9;&#x9;set val = REPLACE(val, &apos;  &apos;, &apos; &apos;);
&#x9;&#x9;end while;
&#x9;&#x9;-- Check for keywords: IS NULL or IS NOT NULL
&#x9;&#x9;IF (UPPER(val) = &apos;IS NULL&apos; OR UPPER(val) = &apos;IS NOT NULL&apos;) THEN
&#x9;&#x9;&#x9;-- Create the where clause
&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; &apos;||UPPER(val);
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;IF (INSTR(val, &apos;%&apos;) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; LIKE &apos;&apos;&apos;||val||&apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; = &apos;&apos;&apos;||val||&apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END IF;
&#x9;END IF;

&#x9;-- Apply where clause for REQUEST_USER_NAME
&#x9;SET col = &apos;REQUEST_USER_NAME&apos;;
&#x9;SET val = TRIM(REPLACE(requestUserName,CHR(9),&apos; &apos;));
&#x9;IF (val IS NOT NULL AND LENGTH(TRIM(val)) &gt; 0) THEN
&#x9;&#x9;IF (length(whereClauseFilter) &gt; 0) THEN
&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter ||CHR(10)||&apos;      &apos;||&apos;AND&apos;;
&#x9;&#x9;END IF;
&#x9;&#x9;-- Reduce the number of double spaces to a single space
&#x9;&#x9;while (INSTR(val, &apos;  &apos;) &gt; 0) do
&#x9;&#x9;&#x9;set val = REPLACE(val, &apos;  &apos;, &apos; &apos;);
&#x9;&#x9;end while;
&#x9;&#x9;-- Check for keywords: IS NULL or IS NOT NULL
&#x9;&#x9;IF (UPPER(val) = &apos;IS NULL&apos; OR UPPER(val) = &apos;IS NOT NULL&apos;) THEN
&#x9;&#x9;&#x9;-- Create the where clause
&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; &apos;||UPPER(val);
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;IF (INSTR(val, &apos;%&apos;) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; LIKE &apos;&apos;&apos;||val||&apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; = &apos;&apos;&apos;||val||&apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END IF;
&#x9;END IF;

&#x9;-- Apply where clause for REQUEST_DOMAIN_NAME
&#x9;SET col = &apos;REQUEST_DOMAIN_NAME&apos;;
&#x9;SET val = TRIM(REPLACE(requestDomainName,CHR(9),&apos; &apos;));
&#x9;IF (val IS NOT NULL AND LENGTH(TRIM(val)) &gt; 0) THEN
&#x9;&#x9;IF (length(whereClauseFilter) &gt; 0) THEN
&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter ||CHR(10)||&apos;      &apos;||&apos;AND&apos;;
&#x9;&#x9;END IF;
&#x9;&#x9;-- Reduce the number of double spaces to a single space
&#x9;&#x9;while (INSTR(val, &apos;  &apos;) &gt; 0) do
&#x9;&#x9;&#x9;set val = REPLACE(val, &apos;  &apos;, &apos; &apos;);
&#x9;&#x9;end while;
&#x9;&#x9;-- Check for keywords: IS NULL or IS NOT NULL
&#x9;&#x9;IF (UPPER(val) = &apos;IS NULL&apos; OR UPPER(val) = &apos;IS NOT NULL&apos;) THEN
&#x9;&#x9;&#x9;-- Create the where clause
&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; &apos;||UPPER(val);
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;IF (INSTR(val, &apos;%&apos;) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; LIKE &apos;&apos;&apos;||val||&apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; = &apos;&apos;&apos;||val||&apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END IF;
&#x9;END IF;

&#x9;-- Apply where clause for FILE_NAME
&#x9;SET col = &apos;FILE_NAME&apos;;
&#x9;SET val = TRIM(REPLACE(fileName,CHR(9),&apos; &apos;));
&#x9;IF (val IS NOT NULL AND LENGTH(TRIM(val)) &gt; 0) THEN
&#x9;&#x9;IF (length(whereClauseFilter) &gt; 0) THEN
&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter ||CHR(10)||&apos;      &apos;||&apos;AND&apos;;
&#x9;&#x9;END IF;
&#x9;&#x9;-- Reduce the number of double spaces to a single space
&#x9;&#x9;while (INSTR(val, &apos;  &apos;) &gt; 0) do
&#x9;&#x9;&#x9;set val = REPLACE(val, &apos;  &apos;, &apos; &apos;);
&#x9;&#x9;end while;
&#x9;&#x9;-- Check for keywords: IS NULL or IS NOT NULL
&#x9;&#x9;IF (UPPER(val) = &apos;IS NULL&apos; OR UPPER(val) = &apos;IS NOT NULL&apos;) THEN
&#x9;&#x9;&#x9;-- Create the where clause
&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; &apos;||UPPER(val);
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;IF (INSTR(val, &apos;%&apos;) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; LIKE &apos;&apos;&apos;||val||&apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; = &apos;&apos;&apos;||val||&apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END IF;
&#x9;END IF;

&#x9;-- Apply where clause for PROXY_USER_NAME
&#x9;SET col = &apos;PROXY_USER_NAME&apos;;
&#x9;SET val = TRIM(REPLACE(proxyUserName,CHR(9),&apos; &apos;));
&#x9;IF (val IS NOT NULL AND LENGTH(TRIM(val)) &gt; 0) THEN
&#x9;&#x9;IF (length(whereClauseFilter) &gt; 0) THEN
&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter ||CHR(10)||&apos;      &apos;||&apos;AND&apos;;
&#x9;&#x9;END IF;
&#x9;&#x9;-- Reduce the number of double spaces to a single space
&#x9;&#x9;while (INSTR(val, &apos;  &apos;) &gt; 0) do
&#x9;&#x9;&#x9;set val = REPLACE(val, &apos;  &apos;, &apos; &apos;);
&#x9;&#x9;end while;
&#x9;&#x9;-- Check for keywords: IS NULL or IS NOT NULL
&#x9;&#x9;IF (UPPER(val) = &apos;IS NULL&apos; OR UPPER(val) = &apos;IS NOT NULL&apos;) THEN
&#x9;&#x9;&#x9;-- Create the where clause
&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; &apos;||UPPER(val);
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;IF (INSTR(val, &apos;%&apos;) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; LIKE &apos;&apos;&apos;||val||&apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; = &apos;&apos;&apos;||val||&apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END IF;
&#x9;END IF;

&#x9;-- Apply where clause for PROXY_USER_EMAIL
&#x9;SET col = &apos;PROXY_USER_EMAIL&apos;;
&#x9;SET val = TRIM(REPLACE(proxyUserEmail,CHR(9),&apos; &apos;));
&#x9;IF (val IS NOT NULL AND LENGTH(TRIM(val)) &gt; 0) THEN
&#x9;&#x9;IF (length(whereClauseFilter) &gt; 0) THEN
&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter ||CHR(10)||&apos;      &apos;||&apos;AND&apos;;
&#x9;&#x9;END IF;
&#x9;&#x9;-- Reduce the number of double spaces to a single space
&#x9;&#x9;while (INSTR(val, &apos;  &apos;) &gt; 0) do
&#x9;&#x9;&#x9;set val = REPLACE(val, &apos;  &apos;, &apos; &apos;);
&#x9;&#x9;end while;
&#x9;&#x9;-- Check for keywords: IS NULL or IS NOT NULL
&#x9;&#x9;IF (UPPER(val) = &apos;IS NULL&apos; OR UPPER(val) = &apos;IS NOT NULL&apos;) THEN
&#x9;&#x9;&#x9;-- Create the where clause
&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; &apos;||UPPER(val);
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;IF (INSTR(val, &apos;%&apos;) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; LIKE &apos;&apos;&apos;||val||&apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; = &apos;&apos;&apos;||val||&apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END IF;
&#x9;END IF;

&#x9;-- Apply where clause for ALLOW_NULL_FILE_NAME
&#x9;SET col = &apos;ALLOW_NULL_FILE_NAME&apos;;
&#x9;SET valINT = allowNullFileName;
&#x9;IF (valINT IS NOT NULL) THEN
&#x9;&#x9;IF (length(whereClauseFilter) &gt; 0) THEN
&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter ||CHR(10)||&apos;      &apos;||&apos;AND&apos;;
&#x9;&#x9;END IF;
&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; = &apos;||valINT;
&#x9;END IF;

&#x9;-- Apply where clause for DATA_SOURCE_PATH
&#x9;SET col = &apos;DATA_SOURCE_PATH&apos;;
&#x9;SET val = TRIM(REPLACE(datasourcePath,CHR(9),&apos; &apos;));
&#x9;IF (val IS NOT NULL AND LENGTH(TRIM(val)) &gt; 0) THEN
&#x9;&#x9;IF (length(whereClauseFilter) &gt; 0) THEN
&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter ||CHR(10)||&apos;      &apos;||&apos;AND&apos;;
&#x9;&#x9;END IF;
&#x9;&#x9;-- Reduce the number of double spaces to a single space
&#x9;&#x9;while (INSTR(val, &apos;  &apos;) &gt; 0) do
&#x9;&#x9;&#x9;set val = REPLACE(val, &apos;  &apos;, &apos; &apos;);
&#x9;&#x9;end while;
&#x9;&#x9;-- Check for keywords: IS NULL or IS NOT NULL
&#x9;&#x9;IF (UPPER(val) = &apos;IS NULL&apos; OR UPPER(val) = &apos;IS NOT NULL&apos;) THEN
&#x9;&#x9;&#x9;-- Create the where clause
&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; &apos;||UPPER(val);
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;IF (INSTR(val, &apos;%&apos;) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; LIKE &apos;&apos;&apos;||val||&apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; = &apos;&apos;&apos;||val||&apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END IF;
&#x9;END IF;

&#x9;-- Apply where clause for FORMATTING_LAYER_PATH
&#x9;SET val = formattingLayerPath;
&#x9;SET col = &apos;FORMATTING_LAYER_PATH&apos;;
&#x9;SET val = TRIM(REPLACE(val,CHR(9),&apos; &apos;));
&#x9;IF (val IS NOT NULL AND LENGTH(TRIM(val)) &gt; 0) THEN
&#x9;&#x9;IF (length(whereClauseFilter) &gt; 0) THEN
&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter ||CHR(10)||&apos;      &apos;||&apos;AND&apos;;
&#x9;&#x9;END IF;
&#x9;&#x9;-- Reduce the number of double spaces to a single space
&#x9;&#x9;while (INSTR(val, &apos;  &apos;) &gt; 0) do
&#x9;&#x9;&#x9;set val = REPLACE(val, &apos;  &apos;, &apos; &apos;);
&#x9;&#x9;end while;
&#x9;&#x9;-- Check for keywords: IS NULL or IS NOT NULL
&#x9;&#x9;IF (UPPER(val) = &apos;IS NULL&apos; OR UPPER(val) = &apos;IS NOT NULL&apos;) THEN
&#x9;&#x9;&#x9;-- Create the where clause
&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; &apos;||UPPER(val);
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;IF (INSTR(val, &apos;%&apos;) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; LIKE &apos;&apos;&apos;||val||&apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; = &apos;&apos;&apos;||val||&apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END IF;
&#x9;END IF;

&#x9;-- Apply where clause for BUSINESS_LAYER_PATH
&#x9;SET col = &apos;BUSINESS_LAYER_PATH&apos;;
&#x9;SET val = TRIM(REPLACE(businessLayerPath,CHR(9),&apos; &apos;));
&#x9;IF (val IS NOT NULL AND LENGTH(TRIM(val)) &gt; 0) THEN
&#x9;&#x9;IF (length(whereClauseFilter) &gt; 0) THEN
&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter ||CHR(10)||&apos;      &apos;||&apos;AND&apos;;
&#x9;&#x9;END IF;
&#x9;&#x9;-- Reduce the number of double spaces to a single space
&#x9;&#x9;while (INSTR(val, &apos;  &apos;) &gt; 0) do
&#x9;&#x9;&#x9;set val = REPLACE(val, &apos;  &apos;, &apos; &apos;);
&#x9;&#x9;end while;
&#x9;&#x9;-- Check for keywords: IS NULL or IS NOT NULL
&#x9;&#x9;IF (UPPER(val) = &apos;IS NULL&apos; OR UPPER(val) = &apos;IS NOT NULL&apos;) THEN
&#x9;&#x9;&#x9;-- Create the where clause
&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; &apos;||UPPER(val);
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;IF (INSTR(val, &apos;%&apos;) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; LIKE &apos;&apos;&apos;||val||&apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; = &apos;&apos;&apos;||val||&apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END IF;
&#x9;END IF;

&#x9;-- Apply where clause for APPLICATION_LAYER_PATH
&#x9;SET col = &apos;APPLICATION_LAYER_PATH&apos;;
&#x9;SET val = TRIM(REPLACE(applicationLayerPath,CHR(9),&apos; &apos;));
&#x9;IF (val IS NOT NULL AND LENGTH(TRIM(val)) &gt; 0) THEN
&#x9;&#x9;IF (length(whereClauseFilter) &gt; 0) THEN
&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter ||CHR(10)||&apos;      &apos;||&apos;AND&apos;;
&#x9;&#x9;END IF;
&#x9;&#x9;-- Reduce the number of double spaces to a single space
&#x9;&#x9;while (INSTR(val, &apos;  &apos;) &gt; 0) do
&#x9;&#x9;&#x9;set val = REPLACE(val, &apos;  &apos;, &apos; &apos;);
&#x9;&#x9;end while;
&#x9;&#x9;-- Check for keywords: IS NULL or IS NOT NULL
&#x9;&#x9;IF (UPPER(val) = &apos;IS NULL&apos; OR UPPER(val) = &apos;IS NOT NULL&apos;) THEN
&#x9;&#x9;&#x9;-- Create the where clause
&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; &apos;||UPPER(val);
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;IF (INSTR(val, &apos;%&apos;) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; LIKE &apos;&apos;&apos;||val||&apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; = &apos;&apos;&apos;||val||&apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END IF;
&#x9;END IF;

&#x9;-- Apply where clause for PUBLISHED_SCHEMA_PATH
&#x9;SET col = &apos;PUBLISHED_SCHEMA_PATH&apos;;
&#x9;SET val = TRIM(REPLACE(publishedSchemaPath,CHR(9),&apos; &apos;));
&#x9;IF (val IS NOT NULL AND LENGTH(TRIM(val)) &gt; 0) THEN
&#x9;&#x9;IF (length(whereClauseFilter) &gt; 0) THEN
&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter ||CHR(10)||&apos;      &apos;||&apos;AND&apos;;
&#x9;&#x9;END IF;
&#x9;&#x9;-- Reduce the number of double spaces to a single space
&#x9;&#x9;while (INSTR(val, &apos;  &apos;) &gt; 0) do
&#x9;&#x9;&#x9;set val = REPLACE(val, &apos;  &apos;, &apos; &apos;);
&#x9;&#x9;end while;
&#x9;&#x9;-- Check for keywords: IS NULL or IS NOT NULL
&#x9;&#x9;IF (UPPER(val) = &apos;IS NULL&apos; OR UPPER(val) = &apos;IS NOT NULL&apos;) THEN
&#x9;&#x9;&#x9;-- Create the where clause
&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; &apos;||UPPER(val);
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;IF (INSTR(val, &apos;%&apos;) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; LIKE &apos;&apos;&apos;||val||&apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; = &apos;&apos;&apos;||val||&apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END IF;
&#x9;END IF;

&#x9;-- Apply where clause for PUBLISHED_DATABASE
&#x9;SET col = &apos;PUBLISHED_DATABASE&apos;;
&#x9;SET val = TRIM(REPLACE(publishedDatabase,CHR(9),&apos; &apos;));
&#x9;IF (val IS NOT NULL AND LENGTH(TRIM(val)) &gt; 0) THEN
&#x9;&#x9;IF (length(whereClauseFilter) &gt; 0) THEN
&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter ||CHR(10)||&apos;      &apos;||&apos;AND&apos;;
&#x9;&#x9;END IF;
&#x9;&#x9;-- Reduce the number of double spaces to a single space
&#x9;&#x9;while (INSTR(val, &apos;  &apos;) &gt; 0) do
&#x9;&#x9;&#x9;set val = REPLACE(val, &apos;  &apos;, &apos; &apos;);
&#x9;&#x9;end while;
&#x9;&#x9;-- Check for keywords: IS NULL or IS NOT NULL
&#x9;&#x9;IF (UPPER(val) = &apos;IS NULL&apos; OR UPPER(val) = &apos;IS NOT NULL&apos;) THEN
&#x9;&#x9;&#x9;-- Create the where clause
&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; &apos;||UPPER(val);
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;IF (INSTR(val, &apos;%&apos;) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; LIKE &apos;&apos;&apos;||val||&apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; = &apos;&apos;&apos;||val||&apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END IF;
&#x9;END IF;

&#x9;-- Apply where clause for CONSTANTS_PATH
&#x9;SET col = &apos;CONSTANTS_PATH&apos;;
&#x9;SET val = TRIM(REPLACE(constantsPath,CHR(9),&apos; &apos;));
&#x9;IF (val IS NOT NULL AND LENGTH(TRIM(val)) &gt; 0) THEN
&#x9;&#x9;IF (length(whereClauseFilter) &gt; 0) THEN
&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter ||CHR(10)||&apos;      &apos;||&apos;AND&apos;;
&#x9;&#x9;END IF;
&#x9;&#x9;-- Reduce the number of double spaces to a single space
&#x9;&#x9;while (INSTR(val, &apos;  &apos;) &gt; 0) do
&#x9;&#x9;&#x9;set val = REPLACE(val, &apos;  &apos;, &apos; &apos;);
&#x9;&#x9;end while;
&#x9;&#x9;-- Check for keywords: IS NULL or IS NOT NULL
&#x9;&#x9;IF (UPPER(val) = &apos;IS NULL&apos; OR UPPER(val) = &apos;IS NOT NULL&apos;) THEN
&#x9;&#x9;&#x9;-- Create the where clause
&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; &apos;||UPPER(val);
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;IF (INSTR(val, &apos;%&apos;) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; LIKE &apos;&apos;&apos;||val||&apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; = &apos;&apos;&apos;||val||&apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END IF;
&#x9;END IF;

&#x9;-- Apply where clause for RETENTION_POLICY_DAYS
&#x9;SET col = &apos;RETENTION_POLICY_DAYS&apos;;
&#x9;SET val = TRIM(REPLACE(retentionPolicyDays,CHR(9),&apos; &apos;));
&#x9;IF (val IS NOT NULL) THEN
&#x9;&#x9;IF (length(whereClauseFilter) &gt; 0) THEN
&#x9;&#x9;&#x9;SET whereClauseFilter = whereClauseFilter ||CHR(10)||&apos;      &apos;||&apos;AND&apos;;
&#x9;&#x9;END IF;
&#x9;&#x9;--The operators [=,!=,&lt;&gt;,&lt;,&gt;,&lt;=,&gt;=] may be present before a valid integer.
&#x9;&#x9;SET i = 1;
&#x9;&#x9;SET op = &apos;&apos;;
&#x9;&#x9;WHILE (i &lt;= LENGTH(val) AND SUBSTRING(val,i,1) NOT IN (&apos;0&apos;,&apos;1&apos;,&apos;2&apos;,&apos;3&apos;,&apos;4&apos;,&apos;5&apos;,&apos;6&apos;,&apos;7&apos;,&apos;8&apos;,&apos;9&apos;)) DO
&#x9;&#x9;&#x9;SET op = TRIM(op || SUBSTRING(val,i,1));
&#x9;&#x9;&#x9;SET i = i + 1;
&#x9;&#x9;END WHILE;
&#x9;&#x9;SET valINT = CAST(SUBSTRING(TRIM(val),i) AS INTEGER);
&#x9;&#x9;IF (LENGTH(op) = 0) THEN
&#x9;&#x9;&#x9;SET op = &apos;=&apos;;
&#x9;&#x9;END IF;
&#x9;&#x9;IF (op NOT IN (&apos;=&apos;,&apos;!=&apos;,&apos;&lt;&gt;&apos;,&apos;&lt;&apos;,&apos;&gt;&apos;,&apos;&lt;=&apos;,&apos;&gt;=&apos;)) THEN
&#x9;&#x9;&#x9;RAISE ex VALUE &apos;The operator=[&apos;||op||&apos;] is not valid for the request=[&apos;||val||&apos;]&apos;;
&#x9;&#x9;END IF;
&#x9;&#x9;-- Create the where clause
&#x9;&#x9;SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; &apos;||op||&apos; &apos;||valINT;
&#x9;END IF;

&#x9;-- Add the WHERE clause predicate if a where clause exists
&#x9;IF (length(whereClauseFilter) &gt; 0) THEN
&#x9;&#x9;SET whereClauseFilter = CHR(10)||&apos;    &apos;||&apos;WHERE&apos; || whereClauseFilter;
&#x9;END IF;

&#x9;-- Add the where clause and order by clause
&#x9;SET sqlStatement = CHR(10)||&apos;    &apos;||&apos;SELECT * FROM &apos;||fullTablePath||whereClauseFilter||CHR(10)||&apos;    &apos;||&apos;ORDER BY REQUEST_DATE_START &apos;||UPPER(sortOrderVal);

&#x9;-- Debug if applicable
&#x9;IF (upper(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;CALL print(moduleName||&apos; : sqlStatement=&apos;||NVL(sqlStatement,&apos;null&apos;));
&#x9;&#x9;CALL PAUSE(1000);
&#x9;END IF;

&#x9;-- Execute the SQL Statement
&#x9;OPEN queueResult FOR sqlStatement;
END</attribute>
  <attribute name="creationDate" type="LONG">1410976495807</attribute>
  <attribute name="creatorUserDomain" type="STRING">ldap</attribute>
  <attribute name="creatorUserName" type="STRING">zkxl6un</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1564410509964</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">8/778</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>util</item>
        <item>Pause</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/777</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
  </attribute>
</metadata>