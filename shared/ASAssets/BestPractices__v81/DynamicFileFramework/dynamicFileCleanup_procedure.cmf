<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:e931daa6-7fda-456a-badf-4cdb1c228a1a -->
<metadata name="dynamicFileCleanup" path="/shared/ASAssets/BestPractices_v81/DynamicFileFramework/dynamicFileCleanup" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>&lt;![CDATA[dynamicFileCleanup:

    A custom script that cleans up files and views for Excel (non-ODBC) and File-Delimited data sources 
&#x9;&#x9;based on a retention policy defined by the project&apos;s constants procedure.
 
&#x9;Input:
&#x9;&#x9;debug:&#x9;&#x9;&#x9;&#x9;&#x9;Y=debug on, N=debug off
&#x9;&#x9;inFileName:&#x9;&#x9;&#x9;&#x9;The name of the file to introspect or null if all files in the file system are to be introspected.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If null then allowNullFileName must be set to 1.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Undocumented feature only to be used for the Web Upload Application Service Account.  DO NOT GIVE THIS INFORMATION TO USERS
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Format: USERNAME[nbkid]nbkid-filename.ext
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;When the file name contains USERNAME[nbkid], it informs this procedure that the proxy user within the square brackets
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;is the actual owner of the file and overrides the environment username which is set when the service account invokes
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;this procedure.  This is required because this procedure verifies the actual user with the nbkid prefixed in front of
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;the filename.  If they are different it does not perform any action.   With a service account there has to be a way
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;in which the service account can inform this procedure who the actual user is.  Therefore the nbkid must match within
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;the square brackets and prefixed to the filename in order for an action to be taken.  The service account acquires the
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;actual username from its context before invoking this procedure.
&#x9;&#x9;allowNullFileName:&#x9;&#x9;Allows the invoking interface procedure to control the behavior of this implementation procedure.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;0=Do not allow user to pass in null/empty for the file name.  Throw an exception.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;1=Allow the user to pass in null/empty for the file name which results in picking up all unclaimed (not introspected) files in the file system for the invoking user.
   &#x9; &#x9;datasourcePath: &#x9;&#x9;Fully Qualified path to a data source
&#x9;&#x9;publishedDatabase:&#x9;&#x9;The name of the published databases
&#x9;
&#x9;Output:
&#x9;&#x9;result cursor with columns:
            status&#x9;&#x9;&#x9;&#x9;- status message
                                    &apos;RETENTION POLICY EXCEEDED.  &apos;+ dynamicFileRemove message
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;or
                                    &apos;FILE NOT SUPPORTED.  &apos;+ dynamicFileRemove message

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;- dynamicFileRemove messages:
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;FILE REMOVED.  PUBLISHED VIEWS REMOVED&apos; 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;FILE REMOVED.  VIEWS NOT PUBLISHED&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;UNABLE TO REMOVE FILE.  PUBLISHED VIEWS REMOVED&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;UNABLE TO REMOVE FILE.  VIEWS NOT PUBLISHED&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;FILE DOES NOT EXIST.  PUBLISHED VIEWS REMOVED&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;FILE DOES NOT EXIST&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;FILE NOT ASSOCIATED WITH USERNAME=&lt;username&gt;&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;FILE DOES NOT EXIST.  FILE NOT ASSOCIATED WITH USERNAME=&lt;username&gt;&apos;

            fileName &#x9;&#x9;&#x9;- file name from the file system
            publishedTableName &#x9;- name of the published file associated with the file 
            publishedTablePath &#x9;- SQL URL of the published table
&#x9;    &#x9;publishedDatabase&#x9;- published database name
            metadataTableName&#x9;- the CIS metadata datasource table name
            metadataTablePath&#x9;- the CIS metadata datasource table path

&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;CSW Version:&#x9;Reason:
&#x9;02/20/2018&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.5&#x9;&#x9;&#x9;Adapted for Assets Data Abstraction Best Practices

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.]]&gt;</annotation>
  <parameters>
    <parameter name="debug" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="organization" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="projectname" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="subprojectname" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="retentionPolicy" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="datasourcePath" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="publishedDatabase" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="result" direction="OUT" nullable="true">
      <datatype name="result" type="TABLE" refId="256">
        <element name="status">
          <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
        </element>
        <element name="username">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="useremail">
          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
        </element>
        <element name="fileName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="publishedTableName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="publishedTablePath">
          <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
        </element>
        <element name="publishedDatabase">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="metadataTableName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="metadataTablePath">
          <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
        </element>
      </datatype>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/shared/ASAssets/BestPractices_v81/DynamicFileFramework/Helper/emailGetUser" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="userName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="userEmail" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/DynamicFileFramework/constants" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="EXECUTE_DDL_PACKAGE_PATH" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="DATASOURCE_PATH" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="CATALOG_NAME" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="SCHEMA_NAME" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="DYNAMIC_FILE_SEQ" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="DYNAMIC_FILE_EMAIL" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="DYNAMIC_FILE_QUEUE" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="TABLESPACE_FILEGROUP" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="PROCESS_WAIT_TIME_SECONDS" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="DEFAULT_EMAIL" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="DEFAULT_RETENTION_POLICY_DAYS" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="CSV_SUPPORTED_FILE_EXTENSIONS" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="EXCEL_SUPPORTED_FILE_EXTENSIONS" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/DynamicFileFramework/dynamicFileList" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="datasourcePath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="status">
            <datatype type="STRING" maxLength="4000"/>
          </element>
          <element name="fileName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="userEmail">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="fileTimestamp">
            <datatype type="DATETIME"/>
          </element>
          <element name="fileSize">
            <datatype type="INTEGER"/>
          </element>
          <element name="publishedTableName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="publishedTablePath">
            <datatype type="STRING" maxLength="4000"/>
          </element>
          <element name="publishedDatabase">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="metadataTableName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="metadataTablePath">
            <datatype type="STRING" maxLength="4000"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/DynamicFileFramework/dynamicFileRemove" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="inUsername" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inFileName" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="datasourcePath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="publishedDatabase" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="status">
            <datatype type="STRING" maxLength="4000"/>
          </element>
          <element name="fileName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="publishedTableName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="publishedTablePath">
            <datatype type="STRING" maxLength="4000"/>
          </element>
          <element name="publishedDatabase">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="metadataTableName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="metadataTablePath">
            <datatype type="STRING" maxLength="4000"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/log/logDebugMessage" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="moduleName" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="moduleNameType" type="STRING" maxLength="4096"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="messageText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inPath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/getConstantV2" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="constantsPath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="constantsName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="optionReturn" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="outValue" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* dynamicFileCleanup:

    A custom script that cleans up files and views for Excel (non-ODBC) and File-Delimited data sources 
&#x9;&#x9;based on a retention policy defined by the project&apos;s constants procedure.
 
&#x9;Input:
&#x9;&#x9;debug:&#x9;&#x9;&#x9;&#x9;&#x9;Y=debug on, N=debug off
&#x9;&#x9;inFileName:&#x9;&#x9;&#x9;&#x9;The name of the file to introspect or null if all files in the file system are to be introspected.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If null then allowNullFileName must be set to 1.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Undocumented feature only to be used for the Web Upload Application Service Account.  DO NOT GIVE THIS INFORMATION TO USERS
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Format: USERNAME[nbkid]nbkid-filename.ext
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;When the file name contains USERNAME[nbkid], it informs this procedure that the proxy user within the square brackets
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;is the actual owner of the file and overrides the environment username which is set when the service account invokes
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;this procedure.  This is required because this procedure verifies the actual user with the nbkid prefixed in front of
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;the filename.  If they are different it does not perform any action.   With a service account there has to be a way
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;in which the service account can inform this procedure who the actual user is.  Therefore the nbkid must match within
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;the square brackets and prefixed to the filename in order for an action to be taken.  The service account acquires the
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;actual username from its context before invoking this procedure.
&#x9;&#x9;allowNullFileName:&#x9;&#x9;Allows the invoking interface procedure to control the behavior of this implementation procedure.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;0=Do not allow user to pass in null/empty for the file name.  Throw an exception.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;1=Allow the user to pass in null/empty for the file name which results in picking up all unclaimed (not introspected) files in the file system for the invoking user.
   &#x9; &#x9;datasourcePath: &#x9;&#x9;Fully Qualified path to a data source
&#x9;&#x9;publishedDatabase:&#x9;&#x9;The name of the published databases
&#x9;
&#x9;Output:
&#x9;&#x9;result cursor with columns:
            status&#x9;&#x9;&#x9;&#x9;- status message
                                    &apos;RETENTION POLICY EXCEEDED.  &apos;+ dynamicFileRemove message
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;or
                                    &apos;FILE NOT SUPPORTED.  &apos;+ dynamicFileRemove message

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;- dynamicFileRemove messages:
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;FILE REMOVED.  &apos; + 1 of the following:
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;PUBLISHED VIEWS REMOVED&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;VIEWS NOT PUBLISHED&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;UNABLE TO REMOVE FILE.  &apos;  + 1 of the following:
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;PUBLISHED VIEWS REMOVED&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;VIEWS NOT PUBLISHED&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;FILE DOES NOT EXIST.  &apos; + 1 of the following:
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;PUBLISHED VIEWS REMOVED&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;VIEWS NOT PUBLISHED&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;FILE NOT ASSOCIATED WITH USERNAME=&lt;username&gt;&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;FILE DOES NOT EXIST.  FILE NOT ASSOCIATED WITH USERNAME=&lt;username&gt;&apos;

            fileName &#x9;&#x9;&#x9;- file name from the file system
            publishedTableName &#x9;- name of the published file associated with the file 
            publishedTablePath &#x9;- SQL URL of the published table
&#x9;    &#x9;publishedDatabase&#x9;- published database name
            metadataTableName&#x9;- the CIS metadata datasource table name
            metadataTablePath&#x9;- the CIS metadata datasource table path

&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;CSW Version:&#x9;Reason:
&#x9;02/20/2018&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.5&#x9;&#x9;&#x9;Adapted for Assets Data Abstraction Best Practices

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.
*/
PROCEDURE dynamicFileCleanup(
&#x9;IN  debug&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1),&#x9;-- N=no, Y=yes
&#x9;IN&#x9;organization&#x9;&#x9;&#x9;VARCHAR,
&#x9;IN&#x9;projectname&#x9;&#x9;&#x9;&#x9;VARCHAR,
&#x9;IN&#x9;subprojectname&#x9;&#x9;&#x9;VARCHAR,
&#x9;IN  retentionPolicy&#x9;&#x9;&#x9;INTEGER,
&#x9;IN&#x9;datasourcePath&#x9;&#x9;&#x9;VARCHAR(4000),
&#x9;IN&#x9;publishedDatabase&#x9;&#x9;VARCHAR,
&#x9;OUT&#x9;result&#x9;&#x9;&#x9;&#x9;&#x9;PIPE (
        status &#x9;&#x9;&#x9;&#x9;VARCHAR(4000),
&#x9;&#x9;username&#x9;&#x9;&#x9;VARCHAR(255),
&#x9;&#x9;useremail&#x9;&#x9;&#x9;LONGVARCHAR,
&#x9;&#x9;fileName&#x9;&#x9;&#x9;VARCHAR(255),
        publishedTableName &#x9;VARCHAR(255), 
        publishedTablePath &#x9;VARCHAR(4000),
&#x9;&#x9;publishedDatabase&#x9;VARCHAR(255),
&#x9;&#x9;metadataTableName&#x9;VARCHAR(255),
&#x9;&#x9;metadataTablePath&#x9;VARCHAR(4000)
&#x9;&#x9;)
)
BEGIN
&#x9;DECLARE moduleName&#x9;&#x9;&#x9;&#x9;VARCHAR(255) DEFAULT &apos;dynamicFileCleanup&apos;;
&#x9;DECLARE&#x9;globalConstantsPath&#x9;&#x9;VARCHAR(4000) DEFAULT /shared/ASAssets/BestPractices_v81/DynamicFileFramework/constants.globalConstantsPath;
&#x9;DECLARE performClean&#x9;&#x9;&#x9;BIT;&#x9;-- 1=clean/remove old files.  0=Do not clean/remove files but report which ones will be removed.
&#x9;DECLARE retentionCompareDate&#x9;TIMESTAMP;
&#x9;DECLARE username&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE useremail&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE fileName&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE fileUsername&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE prestatus&#x9;&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE status&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE pos&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE ex&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;EXCEPTION;
&#x9;DECLARE sqlStatement&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE whereClauseStatement&#x9;LONGVARCHAR;
&#x9;DECLARE queueDatasourcePath&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE queueCatalogName&#x9;&#x9;VARCHAR;
&#x9;DECLARE queueSchemaName&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE queueTableName&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE fullTablePath&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE queueResult &#x9;&#x9;&#x9;CURSOR /shared/ASAssets/BestPractices_v81/DynamicFileFramework/constants.queueResultType;

&#x9;IF (debug = &apos;Y&apos;) THEN
&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;: Entered &apos;||moduleName);
&#x9;END IF;

&#x9;-- Validate input parameters
&#x9;IF (organization IS NULL OR LENGTH(TRIM(organization)) = 0) THEN
&#x9;&#x9;RAISE ex VALUE moduleName||&apos;: The input parameter &quot;organization&quot; cannot be null or empty.&apos;;
&#x9;END IF;
&#x9;IF (projectname IS NULL OR LENGTH(TRIM(projectname)) = 0) THEN
&#x9;&#x9;RAISE ex VALUE moduleName||&apos;: The input parameter &quot;projectname&quot; cannot be null or empty.&apos;;
&#x9;END IF;
&#x9;IF (datasourcePath IS NULL OR LENGTH(TRIM(datasourcePath)) = 0) THEN
&#x9;&#x9;RAISE ex VALUE moduleName||&apos;: The input parameter &quot;datasourcePath&quot; cannot be null or empty.&apos;;
&#x9;END IF;
&#x9;IF (retentionPolicy IS NULL) THEN
&#x9;&#x9;RAISE ex VALUE moduleName||&apos;: The input parameter &quot;retentionPolicy&quot; cannot be null or empty.&apos;;
&#x9;END IF;

&#x9;-- Get the datasource path, catalog and schema name to construct the path dynamically
&#x9;CALL /shared/ASAssets/Utilities/string/getConstantV2(globalConstantsPath, &apos;DATASOURCE_PATH&apos;, 1, queueDatasourcePath);
&#x9;CALL /shared/ASAssets/Utilities/string/getConstantV2(globalConstantsPath, &apos;CATALOG_NAME&apos;, 1, queueCatalogName);
&#x9;CALL /shared/ASAssets/Utilities/string/getConstantV2(globalConstantsPath, &apos;SCHEMA_NAME&apos;, 1, queueSchemaName);
&#x9;&#x9;CALL /shared/ASAssets/Utilities/string/getConstantV2(globalConstantsPath, &apos;DYNAMIC_FILE_QUEUE&apos;, 1, queueTableName);
&#x9;IF (queueDatasourcePath IS NULL OR LENGTH(TRIM(queueDatasourcePath)) = 0) THEN
&#x9;&#x9;RAISE ex VALUE moduleName||&apos;: The datasource path may not be null or empty:  &apos;||globalConstantsPath||&apos;.DATASOURCE_PATH&apos;;
&#x9;END IF;
&#x9;IF (queueSchemaName IS NULL OR LENGTH(TRIM(queueSchemaName)) = 0) THEN
&#x9;&#x9;RAISE ex VALUE &apos;The schema name may not be null or empty:  &apos;||globalConstantsPath||&apos;.SCHEMA_NAME&apos;;
&#x9;END IF;
&#x9;IF (queueCatalogName IS NULL OR LENGTH(TRIM(queueCatalogName)) = 0) THEN
&#x9;&#x9;SET queueCatalogName = &apos;&apos;;
&#x9;ELSE
&#x9;&#x9;SET queueCatalogName = &apos;/&apos;||queueCatalogName;
&#x9;END IF;
&#x9;IF (queueTableName IS NULL OR LENGTH(TRIM(queueTableName)) = 0) THEN
&#x9;&#x9;RAISE ex VALUE &apos;The table name may not be null or empty:  &apos;||globalConstantsPath||&apos;.DYNAMIC_FILE_QUEUE&apos;;
&#x9;END IF;
&#x9;SET fullTablePath = queueDatasourcePath || queueCatalogName || &apos;/&apos;||queueSchemaName || &apos;/&apos;||queueTableName;
&#x9;CALL /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(fullTablePath, null, fullTablePath);

&#x9;-- Calculate retention date
&#x9;SET retentionCompareDate = CURRENT_TIMESTAMP - retentionPolicy;

&#x9;IF (debug = &apos;Y&apos;) THEN
&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;:    INPUT: ORGANIZATION=&apos;||NVL(organization,&apos;null&apos;));
&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;:    INPUT: PROJECT NAME=&apos;||NVL(projectname,&apos;null&apos;));
&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;:    INPUT: SUBPROJECT NAME=&apos;||NVL(subprojectname,&apos;null&apos;));
&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;:    INPUT: RETENTION POLICY=&apos;||NVL(CAST(retentionPolicy AS VARCHAR),&apos;null&apos;));
&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;:    INPUT: PUBLISHED DATABASE=[&apos;||NVL(publishedDatabase,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;:    INPUT: METADATA DATASOURCE PATH=[&apos;||NVL(datasourcePath,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;:    CALCULATED: retentionCompareDate=&apos;||NVL(CAST(retentionCompareDate AS VARCHAR),&apos;null&apos;));
&#x9;END IF;

&#x9;FOR r AS 
&#x9;&#x9;SELECT DISTINCT status, fileName, fileTimestamp 
&#x9;&#x9;&#x9;FROM /shared/ASAssets/BestPractices_v81/DynamicFileFramework/dynamicFileList(debug, datasourcePath)
&#x9;&#x9;&#x9;WHERE (status = &apos;PUBLISHED&apos; and metadataTablePath like datasourcePath||&apos;%&apos;)
&#x9;&#x9;&#x9;   OR  status = &apos;NOT PUBLISHED&apos; 
&#x9;&#x9;&#x9;   OR  status = &apos;FILE NOT SUPPORTED&apos;
&#x9;DO
&#x9;&#x9;-- Initialize variables
&#x9;&#x9;SET username = null;
&#x9;&#x9;SET useremail = null;
&#x9;&#x9;SET fileName = r.fileName;
&#x9;&#x9;SET whereClauseStatement = &apos;&apos;;
&#x9;&#x9;-- Get the file username if it is prepended to the filename
&#x9;&#x9;SET fileUsername = null;
&#x9;&#x9;SET pos = INSTR(fileName, &apos;-&apos;);
&#x9;&#x9;IF (pos &gt; 0) THEN
&#x9;&#x9;&#x9;SET fileUsername = SUBSTRING(fileName, 1, pos-1);
&#x9;&#x9;END IF;

&#x9;&#x9;-- Lookup the original username for the latest file that was submitted.
&#x9;&#x9;IF (organization IS NOT NULL AND LENGTH(TRIM(organization)) &gt; 0) THEN
&#x9;&#x9;&#x9;SET whereClauseStatement = whereClauseStatement || &apos;       AND ORGANIZATION = &apos;&apos;&apos;||organization||&apos;&apos;&apos;&apos;||CHR(10);
&#x9;&#x9;END IF;
&#x9;&#x9;IF (projectname IS NOT NULL AND LENGTH(TRIM(projectname)) &gt; 0) THEN
&#x9;&#x9;&#x9;SET whereClauseStatement = whereClauseStatement || &apos;       AND PROJECT_NAME = &apos;&apos;&apos;||projectname||&apos;&apos;&apos;&apos;||CHR(10);
&#x9;&#x9;END IF;
&#x9;&#x9;IF (subprojectname IS NOT NULL AND LENGTH(TRIM(subprojectname)) &gt; 0) THEN
&#x9;&#x9;&#x9;SET whereClauseStatement = whereClauseStatement || &apos;       AND SUBPROJECT_NAME = &apos;&apos;&apos;||subprojectname||&apos;&apos;&apos;&apos;||CHR(10);
&#x9;&#x9;END IF;
&#x9;&#x9;IF (fileName IS NOT NULL AND LENGTH(TRIM(fileName)) &gt; 0) THEN
&#x9;&#x9;&#x9;SET whereClauseStatement = whereClauseStatement || &apos;       AND FILE_NAME = &apos;&apos;&apos;||REPLACE(fileName,&apos;&apos;&apos;&apos;,&apos;&apos;&apos;&apos;&apos;&apos;)||&apos;&apos;&apos;&apos;||CHR(10);
&#x9;&#x9;END IF;
&#x9;&#x9;IF (fileUsername IS NOT NULL AND LENGTH(TRIM(fileUsername)) &gt; 0) THEN
&#x9;&#x9;&#x9;SET whereClauseStatement = whereClauseStatement || &apos;       AND PROXY_USER_NAME = &apos;&apos;&apos;||REPLACE(fileUsername,&apos;&apos;&apos;&apos;,&apos;&apos;&apos;&apos;&apos;&apos;)||&apos;&apos;&apos;&apos;||CHR(10);
&#x9;&#x9;END IF;

&#x9;&#x9;SET sqlStatement = &apos;SELECT * FROM &apos;||fullTablePath||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&apos; WHERE REQUEST_ID = &apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&apos;   ( SELECT MAX(REQUEST_ID) FROM &apos;||fullTablePath||CHR(10)||
                &apos;     WHERE ACTION_TYPE = &apos;&apos;A&apos;&apos;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;whereClauseStatement || 
&#x9;&#x9;&#x9;&#x9;&apos;   )&apos;;
&#x9;&#x9;IF (debug = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;sqlStatement=[&apos;||sqlStatement||&apos;]&apos;);
&#x9;&#x9;END IF;

&#x9;&#x9;-- Perform the lookup
&#x9;&#x9;OPEN queueResult for sqlStatement;
&#x9;&#x9;FOR u AS queueResult DO
&#x9;&#x9;&#x9;-- Get the last record for this particular file which is the most current record because the rows are sorted by the REQUEST_DATE_START ascending.
&#x9;&#x9;&#x9;SET username = u.PROXY_USER_NAME;
&#x9;&#x9;&#x9;SET useremail = u.PROXY_USER_EMAIL;
&#x9;&#x9;END FOR;
&#x9;&#x9;-- If the file exists but there is no entry in the database then try an alternative approach to getting the user name and email
&#x9;&#x9;IF (username IS NULL AND useremail IS NULL) THEN
&#x9;&#x9;&#x9;-- Get the file username
&#x9;&#x9;&#x9;SET pos = INSTR(r.fileName, &apos;-&apos;);
&#x9;&#x9;&#x9;IF (pos &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;SET username = SUBSTRING(r.fileName, 1, pos-1);
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;SET username = &apos;admin&apos;;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;-- Get the email for the username
&#x9;&#x9;&#x9;CALL /shared/ASAssets/BestPractices_v81/DynamicFileFramework/Helper/emailGetUser(debug, username, useremail);
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;SET fileName = &apos;USERNAME[&apos;||username||&apos;]&apos;||fileName;
&#x9;&#x9;END IF;

&#x9;&#x9;IF (debug = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;fileName=[&apos;||fileName||&apos;]  status=[&apos;||r.status||&apos;]  fileTimestamp=[&apos;||r.fileTimestamp||&apos;]  username=[&apos;||NVL(username,&apos;null&apos;)||&apos;]  useremail=[&apos;||NVL(useremail,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;END IF;

&#x9;&#x9;-- Remove the file if it is beyond the retention policy
&#x9;&#x9;IF (r.fileTimestamp &lt;= retentionCompareDate OR r.status = &apos;FILE NOT SUPPORTED&apos;) THEN
&#x9;&#x9;&#x9;SET status = &apos;&apos;;
&#x9;&#x9;&#x9;IF (r.status = &apos;FILE NOT SUPPORTED&apos;) THEN
&#x9;&#x9;&#x9;&#x9;SET prestatus = r.status||&apos;.  &apos;;
&#x9;&#x9;&#x9;&#x9;IF (debug = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;File is not supported and will be deleted.  Filename=[&apos;||r.fileName||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;ELSEIF (r.fileTimestamp &lt;= retentionCompareDate) THEN
&#x9;&#x9;&#x9;&#x9;SET prestatus = &apos;RETENTION POLICY EXCEEDED.  &apos;;
&#x9;&#x9;&#x9;&#x9;IF (debug = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;File timestamp is older than the retention policy and will be deleted.  Filename=[&apos;||r.fileName||&apos;]&apos;||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;  fileTimestamp=[&apos;||r.fileTimestamp||&apos;]  &lt;= retentionCompareDate=[&apos;||retentionCompareDate||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;-- Delete the file and views
&#x9;&#x9;&#x9;FOR m AS SELECT * FROM /shared/ASAssets/BestPractices_v81/DynamicFileFramework/dynamicFileRemove(debug, username, fileName, datasourcePath, publishedDatabase) DO
&#x9;&#x9;&#x9;&#x9;SET status = prestatus || m.status;
&#x9;&#x9;&#x9;&#x9;IF (debug = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;REMOVED FILE:  Filename=[&apos;||m.fileName||&apos;]  status=[&apos;||status||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;INSERT INTO result VALUES(status, username, useremail, r.fileName, m.publishedTableName, m.publishedTablePath, m.publishedDatabase, m.metadataTableName, m.metadataTablePath);
&#x9;&#x9;&#x9;END FOR;
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;IF (debug = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;File timestamp is within the retention policy.  Filename=[&apos;||r.fileName||&apos;]&apos;||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;  fileTimestamp=[&apos;||r.fileTimestamp||&apos;]  &gt; retentionCompareDate=[&apos;||retentionCompareDate||&apos;]&apos;);
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END IF;
&#x9;END FOR;

&#x9;IF (debug = &apos;Y&apos;) THEN
&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;: Exiting &apos;||moduleName);
&#x9;END IF;
END</attribute>
  <attribute name="creationDate" type="LONG">1503576149458</attribute>
  <attribute name="creatorUserDomain" type="STRING">composite</attribute>
  <attribute name="creatorUserId" type="INTEGER">1500</attribute>
  <attribute name="creatorUserName" type="STRING">dynview</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1564411089594</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserId" type="INTEGER">1500</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
  <attribute name="resourceModifiedDateOnSourceCISSite" type="LONG">1503576149458</attribute>
</metadata>