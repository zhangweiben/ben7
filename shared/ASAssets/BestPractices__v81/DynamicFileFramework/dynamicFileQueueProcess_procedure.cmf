<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:9a66723c-3693-47f1-a1f0-d7811996f9d5 -->
<metadata name="dynamicFileQueueProcess" path="/shared/ASAssets/BestPractices_v81/DynamicFileFramework/dynamicFileQueueProcess" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>&lt;![CDATA[dynamicFileQueueProcess:

&#x9;This procedure manages the execution of requests for A=Add, R=Remove, and C=Clean it retrieves from the database queue table...DYNAMIC_FILE_QUEUE.
&#x9;Since the requests are executed on a first-in first-out basis and in a single-threaded manner, this procedures servers as a way of 
&#x9;throttling requests so that the DV server does not become overwhelmed by file/view generation.  The DYNAMIC_FILE_QUEUE servers as a 
&#x9;historical log of activity and can be reported on and sorted using ORGANIZATION, PROJECT_NAME and SUBPROJECT_NAME.

 &#x9;Input:
&#x9;&#x9;debug&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;N=no, Y=yes
&#x9;Output:
&#x9;&#x9;N/A

&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;CSW Version:&#x9;Reason:
&#x9;02/20/2018&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.5&#x9;&#x9;&#x9;Adapted for Assets Data Abstraction Best Practices

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.]]&gt;</annotation>
  <parameters>
    <parameter name="debug" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/util/GetProperty" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="property" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="PropertyName" type="STRING" maxLength="255"/>
      </element>
      <element name="result" direction="OUT">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="PropertyValue" type="STRING" maxLength="4096"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/util/Pause" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="timeInMilliSeconds" direction="IN">
        <datatype type="INTEGER"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/util/SendEMail" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="from" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="EMailAddress" type="STRING" maxLength="1024"/>
      </element>
      <element name="replyTo" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="EMailAddress" type="STRING" maxLength="1024"/>
      </element>
      <element name="to" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="EMailAddress" type="STRING" maxLength="1024"/>
      </element>
      <element name="cc" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="EMailAddress" type="STRING" maxLength="1024"/>
      </element>
      <element name="bcc" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="EMailAddress" type="STRING" maxLength="1024"/>
      </element>
      <element name="subject" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="PropertyValue" type="STRING" maxLength="4096"/>
      </element>
      <element name="contentType" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="PropertyName" type="STRING" maxLength="255"/>
      </element>
      <element name="content" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Content" type="STRING" maxLength="65535"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/DynamicFileFramework/02_display_DYNAMIC_FILE_QUEUE" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="sortOrder" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="requestId" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="requestDateStart" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="requestDateEnd" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="organization" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="projectName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="subProjectName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="actionOriginator" direction="IN">
        <datatype type="STRING" maxLength="50"/>
      </element>
      <element name="actionType" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="status" direction="IN">
        <datatype type="STRING" maxLength="100"/>
      </element>
      <element name="message" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="emailError" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="requestFileName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="requestUserName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="requestDomainName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="fileName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="proxyUserName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="proxyUserEmail" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="allowNullFileName" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="datasourcePath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="formattingLayerPath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="businessLayerPath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="applicationLayerPath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="publishedSchemaPath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="publishedDatabase" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="constantsPath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="retentionPolicyDays" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="queueResult" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="REQUEST_ID">
            <datatype type="DECIMAL" maxDigits="19" maxFractionalDigits="0"/>
          </element>
          <element name="REQUEST_DATE_START">
            <datatype type="DATETIME"/>
          </element>
          <element name="REQUEST_DATE_END">
            <datatype type="DATETIME"/>
          </element>
          <element name="ORGANIZATION">
            <datatype type="STRING" maxLength="50"/>
          </element>
          <element name="PROJECT_NAME">
            <datatype type="STRING" maxLength="50"/>
          </element>
          <element name="SUBPROJECT_NAME">
            <datatype type="STRING" maxLength="50"/>
          </element>
          <element name="ACTION_ORIGINATOR">
            <datatype type="STRING" maxLength="50"/>
          </element>
          <element name="ACTION_TYPE">
            <datatype type="STRING" maxLength="1"/>
          </element>
          <element name="STATUS">
            <datatype type="STRING" maxLength="100"/>
          </element>
          <element name="MESSAGE">
            <datatype type="STRING" maxLength="4000"/>
          </element>
          <element name="EMAIL_ERROR">
            <datatype type="STRING" maxLength="4000"/>
          </element>
          <element name="REQUEST_FILE_NAME">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="REQUEST_USER_NAME">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="REQUEST_DOMAIN_NAME">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="FILE_NAME">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="PROXY_USER_NAME">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="PROXY_USER_EMAIL">
            <datatype type="STRING" maxLength="4000"/>
          </element>
          <element name="ALLOW_NULL_FILE_NAME">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="DATA_SOURCE_PATH">
            <datatype type="STRING" maxLength="4000"/>
          </element>
          <element name="FORMATTING_LAYER_PATH">
            <datatype type="STRING" maxLength="4000"/>
          </element>
          <element name="BUSINESS_LAYER_PATH">
            <datatype type="STRING" maxLength="4000"/>
          </element>
          <element name="APPLICATION_LAYER_PATH">
            <datatype type="STRING" maxLength="4000"/>
          </element>
          <element name="PUBLISHED_SCHEMA_PATH">
            <datatype type="STRING" maxLength="4000"/>
          </element>
          <element name="PUBLISHED_DATABASE">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="CONSTANTS_PATH">
            <datatype type="STRING" maxLength="4000"/>
          </element>
          <element name="RETENTION_POLICY_DAYS">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/DynamicFileFramework/DYNAMIC_FILE_LOCAL_LOOPBACK/BestPractices_v81/DynamicFileFramework/dynamicFileCleanup" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="organization" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="projectname" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="subprojectname" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="retentionPolicy" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="datasourcePath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="publishedDatabase" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="status">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="username">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="useremail">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="fileName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="publishedTableName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="publishedTablePath">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="publishedDatabase">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="metadataTableName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="metadataTablePath">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/DynamicFileFramework/DYNAMIC_FILE_LOCAL_LOOPBACK/BestPractices_v81/DynamicFileFramework/dynamicFileCreate" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="inUsername" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inFileName" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="allowNullFileName" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="datasourcePath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="formattingPath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="businessPath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="applicationPath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="publishPath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="status">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="fileName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="publishedTableName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="publishedTablePath">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="publishedDatabase">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="metadataTableName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="metadataTablePath">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/DynamicFileFramework/DYNAMIC_FILE_LOCAL_LOOPBACK/BestPractices_v81/DynamicFileFramework/dynamicFileRemove" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="inUsername" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inFileName" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="datasourcePath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="publishedDatabase" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="status">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="fileName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="publishedTableName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="publishedTablePath">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="publishedDatabase">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="metadataTableName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="metadataTablePath">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/DynamicFileFramework/constants" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="EXECUTE_DDL_PACKAGE_PATH" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="DATASOURCE_PATH" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="CATALOG_NAME" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="SCHEMA_NAME" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="DYNAMIC_FILE_SEQ" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="DYNAMIC_FILE_EMAIL" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="DYNAMIC_FILE_QUEUE" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="TABLESPACE_FILEGROUP" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="PROCESS_WAIT_TIME_SECONDS" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="DEFAULT_EMAIL" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="DEFAULT_RETENTION_POLICY_DAYS" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="CSV_SUPPORTED_FILE_EXTENSIONS" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="EXCEL_SUPPORTED_FILE_EXTENSIONS" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/environment/getEnvName" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="envName" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/log/logDebugMessage" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="moduleName" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="moduleNameType" type="STRING" maxLength="4096"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="messageText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inPath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/getConstantV2" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="constantsPath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="constantsName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="optionReturn" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="outValue" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* dynamicFileQueueProcess:

&#x9;This procedure manages the execution of requests for A=Add, R=Remove, and C=Clean it retrieves from the database queue table...DYNAMIC_FILE_QUEUE.
&#x9;Since the requests are executed on a first-in first-out basis and in a single-threaded manner, this procedures servers as a way of 
&#x9;throttling requests so that the DV server does not become overwhelmed by file/view generation.  The DYNAMIC_FILE_QUEUE servers as a 
&#x9;historical log of activity and can be reported on and sorted using ORGANIZATION, PROJECT_NAME and SUBPROJECT_NAME.

 &#x9;Input:
&#x9;&#x9;debug&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;N=no, Y=yes
&#x9;Output:
&#x9;&#x9;N/A

&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;CSW Version:&#x9;Reason:
&#x9;02/20/2018&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.5&#x9;&#x9;&#x9;Adapted for Assets Data Abstraction Best Practices

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.
*/
PROCEDURE dynamicFileQueueProcess(
&#x9;IN debug&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1) -- N=no, Y=yes
)
BEGIN
&#x9;DECLARE moduleName&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;dynamicFileQueueProcess&apos;;
&#x9;DECLARE&#x9;globalConstantsPath&#x9;VARCHAR(4000) DEFAULT /shared/ASAssets/BestPractices_v81/DynamicFileFramework/constants.globalConstantsPath;
&#x9;DECLARE subModuleName&#x9;&#x9;VARCHAR;
&#x9;DECLARE nodehost&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE nodeport&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE port_num&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE filename&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE prevfilename&#x9;&#x9;VARCHAR DEFAULT &apos;&apos;;
&#x9;DECLARE envName&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE organization&#x9;&#x9;VARCHAR;
&#x9;DECLARE project&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE subproject&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE processWaitTimeCH&#x9;VARCHAR;
&#x9;DECLARE processWaitTime&#x9;&#x9;INTEGER;
&#x9;DECLARE l_status&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE l_message&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE c_status&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE c_message&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE c_message_orig&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE default_email&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE user_email&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE email_subjectline&#x9;VARCHAR(1000);
&#x9;DECLARE email_message&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE email_message2&#x9;&#x9;VARCHAR(4000) DEFAULT &apos;&apos;;
&#x9;DECLARE email_exception&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE sent_email&#x9;&#x9;&#x9;BOOLEAN DEFAULT true;
&#x9;DECLARE publishedDatabase&#x9;VARCHAR;
&#x9;DECLARE publishedTableName&#x9;VARCHAR;
&#x9;DECLARE publishedTablePath&#x9;VARCHAR(4000);
&#x9;DECLARE i&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE events&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE ex&#x9;&#x9;&#x9;&#x9;&#x9;EXCEPTION;
&#x9;DECLARE sqlStatement&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE queueDatasourcePath&#x9;LONGVARCHAR;
&#x9;DECLARE queueCatalogName&#x9;VARCHAR;
&#x9;DECLARE queueCatalogNameTmp&#x9;VARCHAR;
&#x9;DECLARE queueSchemaName&#x9;&#x9;VARCHAR;
&#x9;DECLARE queueTableName&#x9;&#x9;VARCHAR;
&#x9;DECLARE fullTablePath&#x9;&#x9;LONGVARCHAR;

&#x9;-- Get the DV Environment Indicator
&#x9;CALL /shared/ASAssets/Utilities/environment/getEnvName(envName);
&#x9;-- Get the hostname and port
&#x9;SELECT A.result INTO nodehost FROM /lib/util/GetProperty(&apos;SERVER_HOSTNAME&apos;) A;
&#x9;SELECT A.result INTO port_num FROM /lib/util/GetProperty(&apos;SERVER_JDBC_PORT&apos;) A;
&#x9;SET nodeport = CAST(port_num AS INTEGER) - 1;

&#x9;-- Get the datasource path, catalog and schema name to construct the path dynamically
&#x9;CALL /shared/ASAssets/Utilities/string/getConstantV2(globalConstantsPath, &apos;DATASOURCE_PATH&apos;, 1, queueDatasourcePath);
&#x9;CALL /shared/ASAssets/Utilities/string/getConstantV2(globalConstantsPath, &apos;CATALOG_NAME&apos;, 1, queueCatalogName);
&#x9;CALL /shared/ASAssets/Utilities/string/getConstantV2(globalConstantsPath, &apos;SCHEMA_NAME&apos;, 1, queueSchemaName);
&#x9;CALL /shared/ASAssets/Utilities/string/getConstantV2(globalConstantsPath, &apos;DYNAMIC_FILE_QUEUE&apos;, 1, queueTableName);
&#x9;IF (queueDatasourcePath IS NULL OR LENGTH(TRIM(queueDatasourcePath)) = 0) THEN
&#x9;&#x9;RAISE ex VALUE &apos;The datasource path may not be null or empty:  &apos;||globalConstantsPath||&apos;.DATASOURCE_PATH&apos;;
&#x9;END IF;
&#x9;IF (queueSchemaName IS NULL OR LENGTH(TRIM(queueSchemaName)) = 0) THEN
&#x9;&#x9;RAISE ex VALUE &apos;The schema name may not be null or empty:  &apos;||globalConstantsPath||&apos;.SCHEMA_NAME&apos;;
&#x9;END IF;
&#x9;IF (queueCatalogName IS NULL OR LENGTH(TRIM(queueCatalogName)) = 0) THEN
&#x9;&#x9;SET queueCatalogNameTmp = &apos;&apos;;
&#x9;ELSE
&#x9;&#x9;SET queueCatalogNameTmp = &apos;/&apos;||queueCatalogName;
&#x9;END IF;
&#x9;IF (queueTableName IS NULL OR LENGTH(TRIM(queueTableName)) = 0) THEN
&#x9;&#x9;RAISE ex VALUE &apos;The table name may not be null or empty:  &apos;||globalConstantsPath||&apos;.DYNAMIC_FILE_QUEUE&apos;;
&#x9;END IF;
&#x9;SET fullTablePath = queueDatasourcePath || queueCatalogNameTmp || &apos;/&apos;||queueSchemaName || &apos;/&apos;||queueTableName;
&#x9;CALL /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(fullTablePath, null, fullTablePath);

&#x9;-- Get the email default
&#x9;CALL /shared/ASAssets/Utilities/string/getConstantV2(globalConstantsPath, &apos;DEFAULT_EMAIL&apos;, 1, default_email);
&#x9;-- Get the process wait time and calcuate the number of miliseconds to wait
&#x9;CALL /shared/ASAssets/Utilities/string/getConstantV2(globalConstantsPath, &apos;PROCESS_WAIT_TIME_SECONDS&apos;, 1, processWaitTimeCH);
&#x9;IF (processWaitTimeCH IS NULL OR LENGTH(TRIM(processWaitTimeCH)) = 0) THEN
&#x9;&#x9;SET processWaitTimeCH = &apos;0&apos;;
&#x9;END IF;
&#x9;SET processWaitTime = CAST(processWaitTimeCH AS INTEGER) * 1000;

&#x9;IF (debug = &apos;Y&apos;) THEN
&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;GLOBAL DATASOURCE_PATH: queueDatasourcePath=[&apos;||NVL(queueDatasourcePath,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;GLOBAL CATALOG_NAME: queueCatalogName=[&apos;||NVL(queueCatalogName,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;GLOBAL SCHEMA_NAME: queueSchemaName=[&apos;||NVL(queueSchemaName,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;GLOBAL DEFAULT_EMAIL: default_email=[&apos;||NVL(default_email,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;GLOBAL PROCESS_WAIT_TIME_SECONDS: processWaitTimeCH=[&apos;||NVL(processWaitTimeCH,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;GLOBAL DV ENV: envName=[&apos;||NVL(envName,&apos;null&apos;)||&apos;]  nodehost=[&apos;||NVL(nodehost,&apos;null&apos;)||&apos;]  nodeport=[&apos;||NVL(CAST(nodeport as VARCHAR),&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INTERNAL:  processWaitTime=[&apos;||CAST(processWaitTime AS VARCHAR)||&apos;]&apos;);
&#x9;END IF;

&#x9;-- Loop through the requests in single file that have not been processed yet 
&#x9;SET i = 0;
&#x9;SET events = 0;
&#x9;FOR r AS 
&#x9;&#x9;SELECT * FROM /shared/ASAssets/BestPractices_v81/DynamicFileFramework/&quot;02_display_DYNAMIC_FILE_QUEUE&quot;(
&#x9;&#x9;&#x9;debug,&#x9;&#x9;-- Y=debug on, N=debug off
&#x9;&#x9;&#x9;&apos;ASC&apos;,&#x9;&#x9;-- Valid Values for sorting by REQUEST_DATE_START:   ASC|ASCENDING|DESC|DESCENDING
&#x9;&#x9;&#x9;null, null, 
&#x9;&#x9;&#x9;&apos;IS NULL&apos;,&#x9;-- REQUEST_DATE_END IS NULL:  This represents a request that has been initiated but not completed
&#x9;&#x9;&#x9;null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null
&#x9;&#x9;&#x9;) 
&#x9;DO
&#x9;&#x9;SET organization = r.ORGANIZATION;
&#x9;&#x9;SET project = r.PROJECT_NAME;
&#x9;&#x9;SET subproject = r.SUBPROJECT_NAME;
&#x9;&#x9;SET events = events + 1;
&#x9;&#x9;IF (events &gt; 1) THEN
&#x9;&#x9;&#x9;CALL pause(processWaitTime);
&#x9;&#x9;END IF;
&#x9;&#x9;CASE
&#x9;&#x9;&#x9;WHEN r.ACTION_TYPE = &apos;A&apos; THEN SET subModuleName = &apos;dynamicFileCreate&apos;;
&#x9;&#x9;&#x9;WHEN r.ACTION_TYPE = &apos;R&apos; THEN SET subModuleName = &apos;dynamicFileRemove&apos;;
&#x9;&#x9;&#x9;WHEN r.ACTION_TYPE = &apos;C&apos; THEN SET subModuleName = &apos;dynamicFileCleanup&apos;;
&#x9;&#x9;&#x9;ELSE                          SET subModuleName = &apos;UNKNOWN&apos;;
&#x9;&#x9;END CASE;
&#x9;&#x9;IF (debug = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;&apos;);
&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;---------------------------------------------------&apos;);
&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INTERNAL: PROCESSING DYNAMIC FILE EVENT WHERE ACTION_TYPE=[&apos;||NVL(r.ACTION_TYPE,&apos;null&apos;)||&apos;]  event number=[&apos;||events||&apos;]&apos;);
&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, subModuleName||&apos;: REQUEST_ID=[&apos;||NVL(CAST(r.REQUEST_ID AS VARCHAR),&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, subModuleName||&apos;: REQUEST_DATE_START=[&apos;||NVL(CAST(r.REQUEST_DATE_START AS VARCHAR),&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, subModuleName||&apos;: ORGANIZATION=[&apos;||NVL(r.ORGANIZATION,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, subModuleName||&apos;: PROJECT_NAME=[&apos;||NVL(r.PROJECT_NAME,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, subModuleName||&apos;: SUBPROJECT_NAME=[&apos;||NVL(r.SUBPROJECT_NAME,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, subModuleName||&apos;: ACTION_ORIGINATOR=[&apos;||NVL(r.ACTION_ORIGINATOR,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, subModuleName||&apos;: REQUEST_FILE_NAME=[&apos;||NVL(r.REQUEST_FILE_NAME,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, subModuleName||&apos;: REQUEST_USER_NAME=[&apos;||NVL(r.REQUEST_USER_NAME,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, subModuleName||&apos;: REQUEST_DOMAIN_NAME=[&apos;||NVL(r.REQUEST_DOMAIN_NAME,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, subModuleName||&apos;: PROXY_USER_NAME=[&apos;||NVL(r.PROXY_USER_NAME,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, subModuleName||&apos;: PROXY_USER_EMAIL=[&apos;||NVL(r.PROXY_USER_EMAIL,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, subModuleName||&apos;: FILE_NAME=[&apos;||NVL(r.FILE_NAME,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, subModuleName||&apos;: ALLOW_NULL_FILE_NAME=[&apos;||CAST(r.ALLOW_NULL_FILE_NAME AS VARCHAR)||&apos;]&apos;);
&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, subModuleName||&apos;: DATA_SOURCE_PATH=[&apos;||NVL(r.DATA_SOURCE_PATH,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, subModuleName||&apos;: FORMAT_LAYER_PATH=[&apos;||NVL(r.FORMATTING_LAYER_PATH,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, subModuleName||&apos;: BUSINESS_LAYER_PATH=[&apos;||NVL(r.BUSINESS_LAYER_PATH,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, subModuleName||&apos;: APPLICATION_LAYER_PATH=[&apos;||NVL(r.APPLICATION_LAYER_PATH,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, subModuleName||&apos;: PUBLISHED_SCHEMA_PATH=[&apos;||NVL(r.PUBLISHED_SCHEMA_PATH,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, subModuleName||&apos;: PUBLISHED_DATABASE=[&apos;||NVL(r.PUBLISHED_DATABASE,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, subModuleName||&apos;: CONSTANTS_PATH=[&apos;||NVL(r.CONSTANTS_PATH,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, subModuleName||&apos;: RETENTION_POLICY_DAYS=[&apos;||CAST(r.RETENTION_POLICY_DAYS AS VARCHAR)||&apos;]&apos;);
&#x9;&#x9;END IF;

&#x9;&#x9;-- Initialize variables
&#x9;&#x9;SET email_message = &apos;&apos;;
&#x9;&#x9;SET c_status = &apos;&apos;;
&#x9;&#x9;SET c_message = &apos;&apos;;

&#x9;&#x9;/*********************************************************
&#x9;&#x9; * Add Dynamic File/Views
&#x9;&#x9; ********************************************************/
&#x9;&#x9;IF (r.ACTION_TYPE = &apos;A&apos;) THEN 
&#x9;&#x9;&#x9;SET i = 0;
&#x9;&#x9;&#x9;manageViewLoop:
&#x9;&#x9;&#x9;FOR m AS SELECT * FROM /shared/ASAssets/BestPractices_v81/DynamicFileFramework/DYNAMIC_FILE_LOCAL_LOOPBACK/BestPractices_v81/DynamicFileFramework/dynamicFileCreate(
&#x9;&#x9;&#x9;&#x9;debug,&#x9;&#x9;-- N=no debug, Y=debug
&#x9;&#x9;&#x9;&#x9;r.PROXY_USER_NAME,
&#x9;&#x9;&#x9;&#x9;r.REQUEST_FILE_NAME,
&#x9;&#x9;&#x9;&#x9;r.ALLOW_NULL_FILE_NAME,
&#x9;&#x9;&#x9;&#x9;r.DATA_SOURCE_PATH,
&#x9;&#x9;&#x9;&#x9;r.FORMATTING_LAYER_PATH,
&#x9;&#x9;&#x9;&#x9;r.BUSINESS_LAYER_PATH,
&#x9;&#x9;&#x9;&#x9;r.APPLICATION_LAYER_PATH,
&#x9;&#x9;&#x9;&#x9;r.PUBLISHED_SCHEMA_PATH
&#x9;&#x9;&#x9;&#x9;)
&#x9;&#x9;&#x9;DO
&#x9;&#x9;&#x9;&#x9;SET publishedTablePath = m.publishedTablePath;
&#x9;&#x9;&#x9;&#x9;SET i = i + 1;
&#x9;&#x9;&#x9;&#x9;SET l_status = &apos;&apos;&apos;&apos;||m.status||&apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;&#x9;SET l_message = &apos;null&apos;;
&#x9;&#x9;&#x9;&#x9;IF (INSTR(UPPER(m.status), &apos;ERROR&apos;) &gt; 0 OR INSTR(UPPER(m.status), &apos;EXCEPTION&apos;) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;SET l_status = &apos;&apos;&apos;ERROR&apos;&apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;SET l_message = &apos;&apos;&apos;&apos;||REPLACE(m.status,&apos;&apos;&apos;&apos;,&apos;&apos;)||&apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;IF (LENGTH(TRIM(c_status)) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET c_status = c_status || &apos;.  &apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET c_message = c_message || &apos;.  &apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;SET c_status = c_status || &apos;[ERROR] &apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;SET c_message = c_message || &apos;[&apos;||REPLACE(m.status,&apos;&apos;&apos;&apos;,&apos;&apos;)||&apos;] &apos;;
&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;IF (LENGTH(TRIM(c_status)) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (INSTR(c_status, m.status) = 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET c_status = c_status || &apos;.  &apos;||m.status;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET c_status = c_status || m.status;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;-- Construct the email message for each row returned
&#x9;&#x9;&#x9;&#x9;SET email_message = email_message ||
&apos;    &lt;TR&gt;
          &lt;TD style=&quot;font-size: 15px&quot;&gt;&apos; || REPLACE(NVL(l_status,&apos;null&apos;),&apos;&apos;&apos;&apos;,&apos;&apos;) || &apos;&lt;/TD&gt;
          &lt;TD style=&quot;font-size: 15px&quot;&gt;&apos; || NVL(m.fileName,&apos;null&apos;) || &apos;&lt;/TD&gt;
          &lt;TD style=&quot;font-size: 15px&quot;&gt;&apos; || NVL(m.publishedDatabase,&apos;null&apos;) || &apos;&lt;/TD&gt;
          &lt;TD style=&quot;font-size: 15px&quot;&gt;&apos; || NVL(m.publishedTableName,&apos;null&apos;) || &apos;&lt;/TD&gt;
          &lt;TD style=&quot;font-size: 15px&quot;&gt;&apos; || NVL(m.publishedTablePath,&apos;null&apos;) || &apos;&lt;/TD&gt;
          &lt;TD style=&quot;font-size: 15px&quot;&gt;&apos;|| REPLACE(l_message,&apos;&apos;&apos;&apos;,&apos;&apos;) || &apos;&lt;/TD&gt;
     &lt;/TR&gt;
&apos;;
&#x9;&#x9;&#x9;END FOR; -- END OF FILE LOOP

&#x9;&#x9;&#x9;-- If no error then set the message to null
&#x9;&#x9;&#x9;IF (INSTR(c_status, &apos;ERROR&apos;) = 0) THEN
&#x9;&#x9;&#x9;&#x9;SET c_status = &apos;&apos;&apos;&apos;||SUBSTRING(c_status,1,100)||&apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;&#x9;SET c_message = &apos;null&apos;;
&#x9;&#x9;&#x9;&#x9;SET c_message_orig = &apos;&apos;;
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;SET c_status = &apos;&apos;&apos;&apos;||SUBSTRING(c_status,1,100)||&apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;&#x9;SET c_message_orig = SUBSTRING(c_message,1,3998);
&#x9;&#x9;&#x9;&#x9;SET c_message = &apos;&apos;&apos;&apos;||c_message_orig||&apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;&#x9;&#x9;SET sqlStatement = 
&#x9;&#x9;&#x9;&#x9;&apos;UPDATE &apos;||fullTablePath||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&apos;   SET REQUEST_DATE_END = CAST(&apos;&apos;&apos;||CURRENT_TIMESTAMP||&apos;&apos;&apos; AS TIMESTAMP),&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&apos;       STATUS = &apos;||c_status||&apos;,&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&apos;      MESSAGE = &apos;||c_message||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&apos;  WHERE REQUEST_ID = &apos;||r.REQUEST_ID;
&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INTERNAL: sqlStatement=[&apos;||sqlStatement||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;EXECUTE IMMEDIATE sqlStatement;
&#x9;&#x9;&#x9;EXCEPTION
&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;RAISE;
&#x9;&#x9;&#x9;END;

&#x9;&#x9;&#x9;-- Construct email to the user using m.USER_EMAIL
&#x9;&#x9;&#x9;-- 1. Get email
&#x9;&#x9;&#x9;SET user_email = r.PROXY_USER_EMAIL;

&#x9;&#x9;&#x9;-- 2. If email exists then send email
&#x9;&#x9;&#x9;IF (user_email IS NOT NULL AND LENGTH(TRIM(user_email)) &gt; 0 AND INSTR(user_email,&apos;@&apos;) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;-- Construct email message
&#x9;&#x9;&#x9;&#x9;SET email_message = 
&apos;&lt;H1&gt;Dynamic File: Creation Report&lt;/H1&gt;
&lt;H2&gt;&lt;span style=&quot;font-size:20px&quot;&gt;Environment: &lt;/span&gt;&lt;span style=&quot;font-size:20px;color:blue&quot;&gt;&apos; || NVL(envName,&apos;null&apos;) || &apos;&lt;/span&gt;
&lt;/H2&gt;
&lt;H2&gt;&lt;span style=&quot;font-size: 20px&quot;&gt;Hostname: &lt;/span&gt;&lt;span style=&quot;font-size:20px;color:blue&quot;&gt;&apos; || NVL(nodehost,&apos;null&apos;) || &apos;&lt;/span&gt;&apos;||
   &apos;&lt;span style=&quot;font-size:20px&quot;&gt;    Port: &lt;/span&gt;&lt;span style=&quot;font-size:20px;color:blue&quot;&gt;&apos; || NVL(CAST(nodeport AS VARCHAR),&apos;null&apos;) || &apos;&lt;/span&gt;
&lt;/H2&gt;
&lt;H2&gt;&lt;span style=&quot;font-size: 20px&quot;&gt;Organization: &lt;/span&gt;&lt;span style=&quot;font-size:20px;color:blue&quot;&gt;&apos;|| NVL(organization,&apos;N/A&apos;) || &apos;&lt;/span&gt;&apos;||
   &apos;&lt;span style=&quot;font-size:20px&quot;&gt;    Project: &lt;/span&gt;&lt;span style=&quot;font-size:20px;color:blue&quot;&gt;&apos; || NVL(project,&apos;N/A&apos;) || &apos;&lt;/span&gt;&apos;||
   &apos;&lt;span style=&quot;font-size:20px&quot;&gt;    SubProject: &lt;/span&gt;&lt;span style=&quot;font-size:20px;color:blue&quot;&gt;&apos; || NVL(subproject,&apos;N/A&apos;) || &apos;&lt;/span&gt;
&lt;/H2&gt;
&lt;TABLE border=1&gt;
    &lt;TR&gt;
        &lt;TH style=&quot;font-size: 15px&quot;&gt;Status&lt;/TH&gt;
        &lt;TH style=&quot;font-size: 15px&quot;&gt;File Name&lt;/TH&gt;
        &lt;TH style=&quot;font-size: 15px&quot;&gt;Published Database Name&lt;/TH&gt;
        &lt;TH style=&quot;font-size: 15px&quot;&gt;Published Table Name&lt;/TH&gt;
        &lt;TH style=&quot;font-size: 15px&quot;&gt;Published Table Path&lt;/TH&gt;
        &lt;TH style=&quot;font-size: 15px&quot;&gt;Message&lt;/TH&gt;
    &lt;/TR&gt;
&apos; || email_message ||
&apos;&lt;/TABLE&gt;&apos;;

&#x9;&#x9;&#x9;&#x9;SET email_subjectline = &apos;Dynamic File: [&apos;||NVL(envName,&apos;no env&apos;)||&apos;/&apos;||NVL(project,&apos;no project&apos;)||&apos;/&apos;||NVL(subproject,&apos;no subproject&apos;)||&apos;]&apos;||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos; Creation Report - &apos;||NVL(publishedTablePath,&apos;no published table path&apos;);
&#x9;&#x9;&#x9;&#x9;IF (debug = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INTERNAL: Sending Email Subject [inside loop]:&apos;||CHR(10)||NVL(email_subjectline,&apos;null email subject line&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INTERNAL: Sending Email Body [inside loop]:&apos;||CHR(10)||NVL(email_message,&apos;null email message&apos;));
&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;&#x9;&#x9;&#x9;SET email_exception = &apos;&apos;;

&#x9;&#x9;&#x9;&#x9;&#x9;-- Send the email to the user
&#x9;&#x9;&#x9;&#x9;&#x9;CALL /lib/util/SendEMail (
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;null, 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;null,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;user_email,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;null, 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;null,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;email_subjectline,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;TEXT_HTML&apos;,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;email_message
&#x9;&#x9;&#x9;&#x9;&#x9;);
&#x9;&#x9;&#x9;&#x9;EXCEPTION
&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET email_exception = CAST(CURRENT_EXCEPTION.message AS LONGVARCHAR);
&#x9; &#x9;&#x9;&#x9;END;

&#x9;&#x9;&#x9;&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;&#x9;&#x9;&#x9;IF (LENGTH(email_exception) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET email_exception = &apos;&apos;&apos;&apos;||SUBSTRING(email_exception, 1, 3998)||&apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET sqlStatement = 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;UPDATE &apos;||fullTablePath||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;   SET EMAIL_ERROR = &apos;||email_exception||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;  WHERE REQUEST_ID = &apos;||r.REQUEST_ID;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INTERNAL: sqlStatement=[&apos;||sqlStatement||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;EXECUTE IMMEDIATE sqlStatement;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;EXCEPTION
&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;RAISE;
&#x9;&#x9;&#x9;&#x9;END;
&#x9;&#x9;&#x9;&#x9;SET email_exception = &apos;&apos;;

&#x9;&#x9;&#x9;&#x9;-- Raise an error
&#x9;&#x9;&#x9;&#x9;IF (INSTR(c_status, &apos;ERROR&apos;) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;RAISE ex VALUE REPLACE(c_message,&apos;&apos;&apos;&apos;,&apos;&apos;);
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END IF;

&#x9;&#x9;/*********************************************************
&#x9;&#x9; * Remove Dynamic File/Views
&#x9;&#x9; ********************************************************/
&#x9;&#x9;IF (r.ACTION_TYPE = &apos;R&apos;) THEN
&#x9;&#x9;&#x9;SET i = 0;
&#x9;&#x9;&#x9;removeViewLoop:
&#x9;&#x9;&#x9;FOR m AS SELECT * FROM /shared/ASAssets/BestPractices_v81/DynamicFileFramework/DYNAMIC_FILE_LOCAL_LOOPBACK/BestPractices_v81/DynamicFileFramework/dynamicFileRemove(
&#x9;&#x9;&#x9;&#x9;debug,&#x9;-- N=no debug, Y=debug
&#x9;&#x9;&#x9;&#x9;r.PROXY_USER_NAME,
&#x9;&#x9;&#x9;&#x9;r.FILE_NAME,
&#x9;&#x9;&#x9;&#x9;r.DATA_SOURCE_PATH,
&#x9;&#x9;&#x9;&#x9;r.PUBLISHED_DATABASE
&#x9;&#x9;&#x9;&#x9;)
&#x9;&#x9;&#x9;DO
&#x9;&#x9;&#x9;&#x9;SET publishedTablePath = m.publishedTablePath;
&#x9;&#x9;&#x9;&#x9;SET i = i + 1;
&#x9;&#x9;&#x9;&#x9;SET l_status = &apos;&apos;&apos;&apos;||m.status||&apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;&#x9;SET l_message = &apos;null&apos;;
&#x9;&#x9;&#x9;&#x9;IF (INSTR(UPPER(m.status), &apos;ERROR&apos;) &gt; 0 OR INSTR(UPPER(m.status), &apos;EXCEPTION&apos;) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;SET l_status = &apos;&apos;&apos;ERROR&apos;&apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;SET l_message = &apos;&apos;&apos;&apos;||REPLACE(m.status,&apos;&apos;&apos;&apos;,&apos;&apos;)||&apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;IF (LENGTH(TRIM(c_status)) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET c_status = c_status || &apos;.  &apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET c_message = c_message || &apos;.  &apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;SET c_status = c_status || &apos;[ERROR] &apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;SET c_message = c_message || &apos;[&apos;||REPLACE(m.status,&apos;&apos;&apos;&apos;,&apos;&apos;)||&apos;] &apos;;
&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;IF (LENGTH(TRIM(c_status)) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (INSTR(c_status, m.status) = 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET c_status = c_status || &apos;.  &apos;||m.status;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET c_status = c_status || m.status;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;-- Construct the email message for each row returned
&#x9;&#x9;&#x9;&#x9;SET email_message = email_message ||
&apos;    &lt;TR&gt;
          &lt;TD style=&quot;font-size: 15px&quot;&gt;&apos; || REPLACE(NVL(l_status,&apos;null&apos;),&apos;&apos;&apos;&apos;,&apos;&apos;) || &apos;&lt;/TD&gt;
          &lt;TD style=&quot;font-size: 15px&quot;&gt;&apos; || NVL(m.fileName,&apos;null&apos;) || &apos;&lt;/TD&gt;
          &lt;TD style=&quot;font-size: 15px&quot;&gt;&apos; || NVL(m.publishedDatabase,&apos;null&apos;) || &apos;&lt;/TD&gt;
          &lt;TD style=&quot;font-size: 15px&quot;&gt;&apos; || NVL(m.publishedTableName,&apos;null&apos;) || &apos;&lt;/TD&gt;
          &lt;TD style=&quot;font-size: 15px&quot;&gt;&apos; || NVL(m.publishedTablePath,&apos;null&apos;) || &apos;&lt;/TD&gt;
          &lt;TD style=&quot;font-size: 15px&quot;&gt;&apos;|| REPLACE(l_message,&apos;&apos;&apos;&apos;,&apos;&apos;) || &apos;&lt;/TD&gt;
     &lt;/TR&gt;
&apos;;
&#x9;&#x9;&#x9;END FOR; -- END OF FILE LOOP

&#x9;&#x9;&#x9;-- If no error then set the message to null
&#x9;&#x9;&#x9;IF (INSTR(c_status, &apos;ERROR&apos;) = 0) THEN
&#x9;&#x9;&#x9;&#x9;SET c_status = &apos;&apos;&apos;&apos;||SUBSTRING(c_status,1,100)||&apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;&#x9;SET c_message = &apos;null&apos;;
&#x9;&#x9;&#x9;&#x9;SET c_message_orig = &apos;&apos;;
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;SET c_status = &apos;&apos;&apos;&apos;||SUBSTRING(c_status,1,100)||&apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;&#x9;SET c_message_orig = SUBSTRING(c_message,1,3998);
&#x9;&#x9;&#x9;&#x9;SET c_message = &apos;&apos;&apos;&apos;||c_message_orig||&apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;&#x9;&#x9;SET sqlStatement = 
&#x9;&#x9;&#x9;&#x9;&apos;UPDATE &apos;||fullTablePath||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&apos;   SET REQUEST_DATE_END = CAST(&apos;&apos;&apos;||CURRENT_TIMESTAMP||&apos;&apos;&apos; AS TIMESTAMP),&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&apos;       STATUS = &apos;||c_status||&apos;,&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&apos;      MESSAGE = &apos;||c_message||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&apos;  WHERE REQUEST_ID = &apos;||r.REQUEST_ID;
&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INTERNAL: sqlStatement=[&apos;||sqlStatement||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;EXECUTE IMMEDIATE sqlStatement;
&#x9;&#x9;&#x9;EXCEPTION
&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;RAISE;
&#x9;&#x9;&#x9;END;

&#x9;&#x9;&#x9;-- Construct email to the user using m.USER_EMAIL
&#x9;&#x9;&#x9;-- 1. Get email
&#x9;&#x9;&#x9;SET user_email = r.PROXY_USER_EMAIL;

&#x9;&#x9;&#x9;-- 2. If email exists then send email
&#x9;&#x9;&#x9;IF (user_email IS NOT NULL AND LENGTH(TRIM(user_email)) &gt; 0 AND INSTR(user_email,&apos;@&apos;) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;-- Construct email message
&#x9;&#x9;&#x9;&#x9;SET email_message = 
&apos;&lt;H1&gt;Dynamic File: Removal Report&lt;/H1&gt;
&lt;H2&gt;&lt;span style=&quot;font-size:20px&quot;&gt;Environment: &lt;/span&gt;&lt;span style=&quot;font-size:20px;color:blue&quot;&gt;&apos; || NVL(envName,&apos;null&apos;) || &apos;&lt;/span&gt;
&lt;/H2&gt;
&lt;H2&gt;&lt;span style=&quot;font-size: 20px&quot;&gt;Hostname: &lt;/span&gt;&lt;span style=&quot;font-size:20px;color:blue&quot;&gt;&apos; || NVL(nodehost,&apos;null&apos;) || &apos;&lt;/span&gt;&apos;||
   &apos;&lt;span style=&quot;font-size:20px&quot;&gt;    Port: &lt;/span&gt;&lt;span style=&quot;font-size:20px;color:blue&quot;&gt;&apos; || NVL(CAST(nodeport AS VARCHAR),&apos;null&apos;) || &apos;&lt;/span&gt;
&lt;/H2&gt;
&lt;H2&gt;&lt;span style=&quot;font-size: 20px&quot;&gt;Organization: &lt;/span&gt;&lt;span style=&quot;font-size:20px;color:blue&quot;&gt;&apos;|| NVL(organization,&apos;N/A&apos;) || &apos;&lt;/span&gt;&apos;||
   &apos;&lt;span style=&quot;font-size:20px&quot;&gt;    Project: &lt;/span&gt;&lt;span style=&quot;font-size:20px;color:blue&quot;&gt;&apos; || NVL(project,&apos;N/A&apos;) || &apos;&lt;/span&gt;&apos;||
   &apos;&lt;span style=&quot;font-size:20px&quot;&gt;    SubProject: &lt;/span&gt;&lt;span style=&quot;font-size:20px;color:blue&quot;&gt;&apos; || NVL(subproject,&apos;N/A&apos;) || &apos;&lt;/span&gt;
&lt;/H2&gt;
&lt;TABLE border=1&gt;
    &lt;TR&gt;
        &lt;TH style=&quot;font-size: 15px&quot;&gt;Status&lt;/TH&gt;
        &lt;TH style=&quot;font-size: 15px&quot;&gt;File Name&lt;/TH&gt;
        &lt;TH style=&quot;font-size: 15px&quot;&gt;Published Database Name&lt;/TH&gt;
        &lt;TH style=&quot;font-size: 15px&quot;&gt;Published Table Name&lt;/TH&gt;
        &lt;TH style=&quot;font-size: 15px&quot;&gt;Published Table Path&lt;/TH&gt;
        &lt;TH style=&quot;font-size: 15px&quot;&gt;Message&lt;/TH&gt;
    &lt;/TR&gt;
&apos; || email_message ||
&apos;&lt;/TABLE&gt;&apos;;

&#x9;&#x9;&#x9;&#x9;SET email_subjectline = &apos;Dynamic File: [&apos;||NVL(envName,&apos;no env&apos;)||&apos;/&apos;||NVL(project,&apos;no project&apos;)||&apos;/&apos;||NVL(subproject,&apos;no subproject&apos;)||&apos;]&apos;||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos; Removal Report - &apos;||NVL(publishedTablePath,NVL(r.FILE_NAME,&apos;no filename available&apos;));
&#x9;&#x9;&#x9;&#x9;IF (debug = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INTERNAL: Sending Email Subject [inside loop]:&apos;||CHR(10)||NVL(email_subjectline,&apos;null email subject line&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INTERNAL: Sending Email Body [inside loop]:&apos;||CHR(10)||NVL(email_message,&apos;null email message&apos;));
&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;&#x9;&#x9;&#x9;SET email_exception = &apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;-- Send the email to the user
&#x9;&#x9;&#x9;&#x9;&#x9;CALL /lib/util/SendEMail (
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;null, 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;null,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;user_email,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;null, 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;null,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;email_subjectline,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;TEXT_HTML&apos;,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;email_message
&#x9;&#x9;&#x9;&#x9;&#x9;);
&#x9;&#x9;&#x9;&#x9;EXCEPTION
&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET email_exception = CAST(CURRENT_EXCEPTION.message AS LONGVARCHAR);
&#x9; &#x9;&#x9;&#x9;END;

&#x9;&#x9;&#x9;&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;&#x9;&#x9;&#x9;IF (LENGTH(email_exception) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET email_exception = &apos;&apos;&apos;&apos;||SUBSTRING(email_exception, 1, 3998)||&apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET sqlStatement = 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;UPDATE &apos;||fullTablePath||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;   SET EMAIL_ERROR = &apos;||email_exception||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;  WHERE REQUEST_ID = &apos;||r.REQUEST_ID;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INTERNAL: sqlStatement=[&apos;||sqlStatement||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;EXECUTE IMMEDIATE sqlStatement;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;EXCEPTION
&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;RAISE;
&#x9;&#x9;&#x9;&#x9;END;
&#x9;&#x9;&#x9;&#x9;SET email_exception = &apos;&apos;;

&#x9;&#x9;&#x9;&#x9;-- Raise an error
&#x9;&#x9;&#x9;&#x9;IF (INSTR(c_status, &apos;ERROR&apos;) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;RAISE ex VALUE REPLACE(l_message,&apos;&apos;&apos;&apos;,&apos;&apos;);
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END IF;

&#x9;&#x9;/*********************************************************
&#x9;&#x9; * Clean-up Dynamic File/Views
&#x9;&#x9; ********************************************************/
&#x9;&#x9;IF (r.ACTION_TYPE = &apos;C&apos;) THEN
&#x9;&#x9;&#x9;SET prevfilename = &apos;&apos;;
&#x9;&#x9;&#x9;SET email_message2 = &apos;&apos;;
&#x9;&#x9;&#x9;SET l_status = &apos;&apos;;
&#x9;&#x9;&#x9;SET l_message = &apos;&apos;;
&#x9;&#x9;&#x9;SET email_exception = &apos;&apos;;
&#x9;&#x9;&#x9;SET i = 0;

&#x9;&#x9;&#x9;-- Clean-up the file system files and views
&#x9;&#x9;&#x9;FOR m AS SELECT * FROM /shared/ASAssets/BestPractices_v81/DynamicFileFramework/DYNAMIC_FILE_LOCAL_LOOPBACK/BestPractices_v81/DynamicFileFramework/dynamicFileCleanup(
&#x9;&#x9;&#x9;&#x9;debug,&#x9;&#x9;-- N=no debug, Y=debug
&#x9;&#x9;&#x9;&#x9;r.ORGANIZATION,
&#x9;&#x9;&#x9;&#x9;r.PROJECT_NAME,
&#x9;&#x9;&#x9;&#x9;r.SUBPROJECT_NAME,
&#x9;&#x9;&#x9;&#x9;r.RETENTION_POLICY_DAYS,
&#x9;&#x9;&#x9;&#x9;r.DATA_SOURCE_PATH,
&#x9;&#x9;&#x9;&#x9;r.PUBLISHED_DATABASE
&#x9;&#x9;&#x9;&#x9;)
&#x9;&#x9;&#x9;DO
&#x9;&#x9;&#x9;&#x9;SET filename = m.fileName;

&#x9;&#x9;&#x9;&#x9;IF (debug = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INTERNAL: VARIABLES INSIDE LOOP&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INTERNAL: i=&apos;||i);
&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INTERNAL: filename=[&apos;||filename||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INTERNAL: Previous Variables INSIDE LOOP&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INTERNAL: prevfilename=[&apos;||prevfilename||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INTERNAL: sent_email=[&apos;||CAST(sent_email as varchar)||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INTERNAL: user_email=[&apos;||NVL(user_email,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INTERNAL: publishedDatabase=[&apos;||NVL(publishedDatabase,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INTERNAL: publishedTableName=[&apos;||NVL(publishedTableName,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INTERNAL: publishedTablePath=[&apos;||NVL(publishedTablePath,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INTERNAL: l_status=[&apos;||NVL(l_status,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INTERNAL: l_message=[&apos;||NVL(l_message,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INTERNAL: email_message2=[&apos;||NVL(email_message2,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;-- Send the email when it is not the first time through the loop and the filename changes
&#x9;&#x9;&#x9;&#x9;IF (i &gt; 0 AND prevfilename &lt;&gt; filename AND LENGTH(TRIM(prevfilename)) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;-- Construct the clean-up message
&#x9;&#x9;&#x9;&#x9;&#x9;SET c_message = c_message || CAST(i AS VARCHAR)||&apos;.[&apos;||REPLACE(prevfilename,&apos;&apos;&apos;&apos;,&apos;&apos;&apos;&apos;&apos;&apos;)||&apos;: &apos;||REPLACE(l_status,&apos;&apos;&apos;&apos;,&apos;&apos;)||&apos;]  &apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;IF (LENGTH(TRIM(l_message)) = 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET l_message = null;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;-- Construct email to the user using m.USER_EMAIL
&#x9;&#x9;&#x9;&#x9;&#x9;-- 1. Get email
&#x9;&#x9;&#x9;&#x9;&#x9;IF (user_email IS NULL) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET user_email = default_email;
&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET user_email = user_email || &apos;, &apos;||default_email;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;-- 2. If email exists then send email
&#x9;&#x9;&#x9;&#x9;&#x9;IF (user_email IS NOT NULL AND LENGTH(TRIM(user_email)) &gt; 0 AND INSTR(user_email,&apos;@&apos;) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Construct email message
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET email_message = 
&apos;&lt;H1&gt;Dynamic File: Clean-up Report&lt;/H1&gt;
&lt;H2&gt;&lt;span style=&quot;font-size:20px&quot;&gt;Environment: &lt;/span&gt;&lt;span style=&quot;font-size:20px;color:blue&quot;&gt;&apos; || NVL(envName,&apos;null&apos;) || &apos;&lt;/span&gt;
&lt;/H2&gt;
&lt;H2&gt;&lt;span style=&quot;font-size: 20px&quot;&gt;Hostname: &lt;/span&gt;&lt;span style=&quot;font-size:20px;color:blue&quot;&gt;&apos; || NVL(nodehost,&apos;null&apos;) || &apos;&lt;/span&gt;&apos;||
   &apos;&lt;span style=&quot;font-size:20px&quot;&gt;    Port: &lt;/span&gt;&lt;span style=&quot;font-size:20px;color:blue&quot;&gt;&apos; || NVL(CAST(nodeport AS VARCHAR),&apos;null&apos;) || &apos;&lt;/span&gt;
&lt;/H2&gt;
&lt;H2&gt;&lt;span style=&quot;font-size: 20px&quot;&gt;Organization: &lt;/span&gt;&lt;span style=&quot;font-size:20px;color:blue&quot;&gt;&apos;|| NVL(organization,&apos;N/A&apos;) || &apos;&lt;/span&gt;&apos;||
   &apos;&lt;span style=&quot;font-size:20px&quot;&gt;    Project: &lt;/span&gt;&lt;span style=&quot;font-size:20px;color:blue&quot;&gt;&apos; || NVL(project,&apos;N/A&apos;) || &apos;&lt;/span&gt;&apos;||
   &apos;&lt;span style=&quot;font-size:20px&quot;&gt;    SubProject: &lt;/span&gt;&lt;span style=&quot;font-size:20px;color:blue&quot;&gt;&apos; || NVL(subproject,&apos;N/A&apos;) || &apos;&lt;/span&gt;
&lt;/H2&gt;
&lt;TABLE border=1&gt;
    &lt;TR&gt;
        &lt;TH style=&quot;font-size: 15px&quot;&gt;Status&lt;/TH&gt;
        &lt;TH style=&quot;font-size: 15px&quot;&gt;File Name&lt;/TH&gt;
        &lt;TH style=&quot;font-size: 15px&quot;&gt;Published Database Name&lt;/TH&gt;
        &lt;TH style=&quot;font-size: 15px&quot;&gt;Published Table Name&lt;/TH&gt;
        &lt;TH style=&quot;font-size: 15px&quot;&gt;Published Table Path&lt;/TH&gt;
        &lt;TH style=&quot;font-size: 15px&quot;&gt;Message&lt;/TH&gt;
    &lt;/TR&gt;
&apos;||NVL(email_message2,&apos;null message&apos;)||&apos;
&lt;/TABLE&gt;&apos;;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET email_subjectline = &apos;Dynamic File: [&apos;||NVL(envName,&apos;no env&apos;)||&apos;/&apos;||NVL(project,&apos;no project&apos;)||&apos;/&apos;||NVL(subproject,&apos;no subproject&apos;)||&apos;]&apos;||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos; Clean-up Report - &apos;||NVL(prevfilename,&apos;no filename available&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (debug = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INTERNAL: Sending Email Subject [inside loop]:&apos;||CHR(10)||NVL(email_subjectline,&apos;null email subject line&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INTERNAL: Sending Email Body [inside loop]:&apos;||CHR(10)||NVL(email_message,&apos;null email message&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Send the email to the user
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /lib/util/SendEMail (
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;null, 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;null,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;user_email,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;null, 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;null,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;email_subjectline,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;TEXT_HTML&apos;,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;email_message
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;EXCEPTION
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- If the exception is not found then add it to the exception list
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (INSTR(email_exception, CAST(CURRENT_EXCEPTION.MESSAGE AS LONGVARCHAR)) = 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (LENGTH(email_exception) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET email_exception = email_exception || &apos; || &apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET email_exception = email_exception || CAST(CURRENT_EXCEPTION.MESSAGE AS LONGVARCHAR);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Raise an error
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (INSTR(m.status, &apos;ERROR&apos;) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;RAISE ex VALUE REPLACE(l_message,&apos;&apos;&apos;&apos;,&apos;&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET l_status = &apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET l_message = &apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET email_message2 = &apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;END IF; -- END: (i &gt; 0 and prevfilename &lt;&gt; filename and LENGTH(TRIM(prevfilename)) &gt; 0)

&#x9;&#x9;&#x9;&#x9;-- Get the current variable
&#x9;&#x9;&#x9;&#x9;SET user_email = m.useremail;
&#x9;&#x9;&#x9;&#x9;SET publishedDatabase = m.publishedDatabase;
&#x9;&#x9;&#x9;&#x9;SET publishedTableName = m.publishedTableName;
&#x9;&#x9;&#x9;&#x9;SET publishedTablePath = m.publishedTablePath;

&#x9;&#x9;&#x9;&#x9;-- Construct the status and message
&#x9;&#x9;&#x9;&#x9;IF (INSTR(UPPER(m.status), &apos;ERROR&apos;) &gt; 0 OR INSTR(UPPER(m.status), &apos;EXCEPTION&apos;) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;IF (LENGTH(TRIM(l_status)) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (INSTR(l_status, &apos;ERROR&apos;) = 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET l_status = l_status ||&apos;.  &apos;||&apos;ERROR&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET l_status = &apos;ERROR&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;IF (LENGTH(TRIM(l_message)) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (INSTR(l_message, m.status) = 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET l_message = l_message ||&apos;.  &apos;||REPLACE(m.status,&apos;&apos;&apos;&apos;,&apos;&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET l_message = REPLACE(m.status,&apos;&apos;&apos;&apos;,&apos;&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;IF (LENGTH(TRIM(l_status)) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (INSTR(l_status, m.status) = 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET l_status = l_status ||&apos;.  &apos;||m.status;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET l_status = REPLACE(m.status,&apos;&apos;&apos;&apos;,&apos;&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;SET email_message2 = email_message2 ||
&apos;    &lt;TR&gt;
          &lt;TD style=&quot;font-size: 15px&quot;&gt;&apos; || NVL(l_status,&apos;null&apos;) || &apos;&lt;/TD&gt;
          &lt;TD style=&quot;font-size: 15px&quot;&gt;&apos; || NVL(filename,&apos;null&apos;) || &apos;&lt;/TD&gt;
          &lt;TD style=&quot;font-size: 15px&quot;&gt;&apos; || NVL(publishedDatabase,&apos;null&apos;) || &apos;&lt;/TD&gt;
          &lt;TD style=&quot;font-size: 15px&quot;&gt;&apos; || NVL(publishedTableName,&apos;null&apos;) || &apos;&lt;/TD&gt;
          &lt;TD style=&quot;font-size: 15px&quot;&gt;&apos; || NVL(publishedTablePath,&apos;null&apos;) || &apos;&lt;/TD&gt;
          &lt;TD style=&quot;font-size: 15px&quot;&gt;&apos; || NVL(l_message,&apos;null&apos;) || &apos;&lt;/TD&gt;
     &lt;/TR&gt;&apos;;

&#x9;&#x9;&#x9;&#x9;IF (i = 0 OR prevfilename &lt;&gt; filename) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;SET i = i + 1;
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;-- Track the previous file name
&#x9;&#x9;&#x9;&#x9;SET prevfilename = filename;
&#x9;&#x9;&#x9;&#x9;SET sent_email = false;
&#x9;&#x9;&#x9;END FOR; -- END OF CLEAN-UP LOOP

&#x9;&#x9;&#x9;/*************************************
&#x9;&#x9;&#x9; * Begin final end of loop processing
&#x9;&#x9;&#x9; *************************************/
&#x9;&#x9;&#x9;IF (debug = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INTERNAL: VARIABLES OUTSIDE LOOP&apos;);
&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INTERNAL: i=&apos;||i);
&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INTERNAL: filename=[&apos;||filename||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INTERNAL: Previous Variables OUTSIDE LOOP&apos;);
&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INTERNAL: prevfilename=[&apos;||prevfilename||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INTERNAL: sent_email=[&apos;||CAST(sent_email as varchar)||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INTERNAL: user_email=[&apos;||NVL(user_email,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INTERNAL: publishedDatabase=[&apos;||NVL(publishedDatabase,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INTERNAL: publishedTableName=[&apos;||NVL(publishedTableName,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INTERNAL: publishedTablePath=[&apos;||NVL(publishedTablePath,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INTERNAL: email_message2 [outside loop]:&apos;||CHR(10)||NVL(email_message2,&apos;null email_message2&apos;));
&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INTERNAL: l_status=[&apos;||NVL(l_status,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INTERNAL: l_message=[&apos;||NVL(l_message,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INTERNAL: email_message2=[&apos;||NVL(email_message2,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;-- Send the final email when the filename changes
&#x9;&#x9;&#x9;IF (i &gt; 0 AND NOT sent_email) THEN
&#x9;&#x9;&#x9;&#x9;-- Construct the clean-up message
&#x9;&#x9;&#x9;&#x9;SET c_message = c_message || CAST(i AS VARCHAR)||&apos;.[&apos;||REPLACE(prevfilename,&apos;&apos;&apos;&apos;,&apos;&apos;&apos;&apos;&apos;&apos;)||&apos;: &apos;||REPLACE(l_status,&apos;&apos;&apos;&apos;,&apos;&apos;)||&apos;]  &apos;;
&#x9;&#x9;&#x9;&#x9;IF (LENGTH(TRIM(l_message)) = 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;SET l_message = null;
&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;-- Construct email to the user using m.USER_EMAIL
&#x9;&#x9;&#x9;&#x9;-- 1. Get email
&#x9;&#x9;&#x9;&#x9;IF (user_email IS NULL) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;SET user_email = default_email;
&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;SET user_email = user_email || &apos;, &apos;||default_email;
&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;-- 2. If email exists then send email
&#x9;&#x9;&#x9;&#x9;IF (user_email IS NOT NULL AND LENGTH(TRIM(user_email)) &gt; 0 AND INSTR(user_email,&apos;@&apos;) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;-- Construct email message
&#x9;&#x9;&#x9;&#x9;&#x9;SET email_message = 
&apos;&lt;H1&gt;Dynamic File: Clean-up Report&lt;/H1&gt;
&lt;H2&gt;&lt;span style=&quot;font-size:20px&quot;&gt;Environment: &lt;/span&gt;&lt;span style=&quot;font-size:20px;color:blue&quot;&gt;&apos; || NVL(envName,&apos;null&apos;) || &apos;&lt;/span&gt;
&lt;/H2&gt;
&lt;H2&gt;&lt;span style=&quot;font-size: 20px&quot;&gt;Hostname: &lt;/span&gt;&lt;span style=&quot;font-size:20px;color:blue&quot;&gt;&apos; || NVL(nodehost,&apos;null&apos;) || &apos;&lt;/span&gt;&apos;||
   &apos;&lt;span style=&quot;font-size:20px&quot;&gt;    Port: &lt;/span&gt;&lt;span style=&quot;font-size:20px;color:blue&quot;&gt;&apos; || NVL(CAST(nodeport AS VARCHAR),&apos;null&apos;) || &apos;&lt;/span&gt;
&lt;/H2&gt;
&lt;H2&gt;&lt;span style=&quot;font-size: 20px&quot;&gt;Organization: &lt;/span&gt;&lt;span style=&quot;font-size:20px;color:blue&quot;&gt;&apos;|| NVL(organization,&apos;N/A&apos;) || &apos;&lt;/span&gt;&apos;||
   &apos;&lt;span style=&quot;font-size:20px&quot;&gt;    Project: &lt;/span&gt;&lt;span style=&quot;font-size:20px;color:blue&quot;&gt;&apos; || NVL(project,&apos;N/A&apos;) || &apos;&lt;/span&gt;&apos;||
   &apos;&lt;span style=&quot;font-size:20px&quot;&gt;    SubProject: &lt;/span&gt;&lt;span style=&quot;font-size:20px;color:blue&quot;&gt;&apos; || NVL(subproject,&apos;N/A&apos;) || &apos;&lt;/span&gt;
&lt;/H2&gt;
&lt;TABLE border=1&gt;
    &lt;TR&gt;
        &lt;TH style=&quot;font-size: 15px&quot;&gt;Status&lt;/TH&gt;
        &lt;TH style=&quot;font-size: 15px&quot;&gt;File Name&lt;/TH&gt;
        &lt;TH style=&quot;font-size: 15px&quot;&gt;Published Database Name&lt;/TH&gt;
        &lt;TH style=&quot;font-size: 15px&quot;&gt;Published Table Name&lt;/TH&gt;
        &lt;TH style=&quot;font-size: 15px&quot;&gt;Published Table Path&lt;/TH&gt;
        &lt;TH style=&quot;font-size: 15px&quot;&gt;Message&lt;/TH&gt;
    &lt;/TR&gt;
&apos;||NVL(email_message2,&apos;null message&apos;)||&apos;
&lt;/TABLE&gt;&apos;;

&#x9;&#x9;&#x9;&#x9;&#x9;SET email_subjectline = &apos;Dynamic File: [&apos;||NVL(envName,&apos;no env&apos;)||&apos;/&apos;||NVL(project,&apos;no project&apos;)||&apos;/&apos;||NVL(subproject,&apos;no subproject&apos;)||&apos;]&apos;||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos; Clean-up Report - &apos;||NVL(prevfilename,&apos;no filename available&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;IF (debug = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INTERNAL: Sending Email Subject [outside loop]:&apos;||CHR(10)||NVL(email_subjectline,&apos;null email subject line&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INTERNAL: Sending Email Body [outside loop]:&apos;||CHR(10)||NVL(email_message,&apos;null email message&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Send the email to the user
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /lib/util/SendEMail (
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;null, 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;null,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;user_email,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;null, 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;null,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;email_subjectline,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;TEXT_HTML&apos;,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;email_message
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;);
&#x9;&#x9;&#x9;&#x9;&#x9;EXCEPTION
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- If the exception is not found then add it to the exception list
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (INSTR(email_exception, CAST(CURRENT_EXCEPTION.MESSAGE AS LONGVARCHAR)) = 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (LENGTH(email_exception) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET email_exception = email_exception || &apos; || &apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET email_exception = email_exception || CAST(CURRENT_EXCEPTION.MESSAGE AS LONGVARCHAR);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;END; -- end BEGIN INDEPENDENT TRANSACTION

&#x9;&#x9;&#x9;&#x9;&#x9;-- Raise an error
&#x9;&#x9;&#x9;&#x9;&#x9;IF (INSTR(l_status, &apos;ERROR&apos;) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;RAISE ex VALUE REPLACE(l_message,&apos;&apos;&apos;&apos;,&apos;&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;-- Update the status for this record
&#x9;&#x9;&#x9;IF (LENGTH(TRIM(c_message)) = 0) THEN
&#x9;&#x9;&#x9;&#x9;SET c_status = &apos;&apos;&apos;NO FILES/VIEWS REMOVED&apos;&apos;&apos;;
&#x9;&#x9;&#x9;&#x9;SET c_message = &apos;null&apos;;
&#x9;&#x9;&#x9;&#x9;SET c_message_orig = &apos;&apos;;
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;SET c_status = &apos;&apos;&apos;FILE CLEAN UP ACTIVITY&apos;&apos;&apos;;
&#x9;&#x9;&#x9;&#x9;SET c_message_orig = SUBSTRING(c_message,1,3998);
&#x9;&#x9;&#x9;&#x9;SET c_message = &apos;&apos;&apos;&apos;||c_message_orig||&apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;-- Check for any email exceptions
&#x9;&#x9;&#x9;IF (LENGTH(email_exception) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;SET email_exception = &apos;&apos;&apos;&apos;||SUBSTRING(email_exception,1,3998)||&apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;SET email_exception = &apos;null&apos;;
&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;&#x9;&#x9;SET sqlStatement = 
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;UPDATE &apos;||fullTablePath||CHR(10)||
    &#x9;            &apos;   SET REQUEST_DATE_END = CAST(&apos;&apos;&apos;||CURRENT_TIMESTAMP||&apos;&apos;&apos; AS TIMESTAMP),&apos;||CHR(10)||
        &#x9;        &apos;         STATUS = &apos;||c_status||&apos;,&apos;||CHR(10)||
        &#x9;        &apos;        MESSAGE = &apos;||c_message||&apos;,&apos;||CHR(10)||
       &#x9;     &#x9;&#x9;&apos;    EMAIL_ERROR = &apos;||email_exception||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos; WHERE REQUEST_ID = &apos;||r.REQUEST_ID;
&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INTERNAL: sqlStatement=[&apos;||sqlStatement||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;EXECUTE IMMEDIATE sqlStatement;
&#x9;&#x9;&#x9;EXCEPTION
&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;RAISE;
&#x9;&#x9;&#x9;END; -- end BEGIN INDEPENDENT TRANSACTION

&#x9;&#x9;&#x9;SET email_exception = &apos;&apos;;
&#x9;&#x9;END IF;
&#x9;END FOR;
&#x9;IF (debug = &apos;Y&apos;) THEN
&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INTERNAL: TOTAL DYNAMIC FILE EVENTS PROCESSED.  events=[&apos;||events||&apos;]&apos;);
&#x9;END IF;

EXCEPTION
&#x9;ELSE
&#x9;&#x9;IF (default_email IS NOT NULL AND LENGTH(TRIM(default_email)) &gt; 0) THEN
&#x9;&#x9;&#x9;SET email_message = 
&apos;&lt;H2 style=&quot;font-size: 20px&quot;&gt;Environment: &apos; || NVL(envName,&apos;null&apos;) || &apos;&lt;/H2&gt;
&lt;H2&gt;&lt;span style=&quot;font-size:20px&quot;&gt;Environment: &lt;/span&gt;&lt;span style=&quot;font-size:20px;color:blue&quot;&gt;&apos; || NVL(envName,&apos;null&apos;) || &apos;&lt;/span&gt;
&lt;/H2&gt;
&lt;H2&gt;&lt;span style=&quot;font-size: 20px&quot;&gt;Hostname: &lt;/span&gt;&lt;span style=&quot;font-size:20px;color:blue&quot;&gt;&apos; || NVL(nodehost,&apos;null&apos;) || &apos;&lt;/span&gt;&apos;||
   &apos;&lt;span style=&quot;font-size:20px&quot;&gt;    Port: &lt;/span&gt;&lt;span style=&quot;font-size:20px;color:blue&quot;&gt;&apos; || NVL(CAST(nodeport AS VARCHAR),&apos;null&apos;) || &apos;&lt;/span&gt;
&lt;/H2&gt;
&lt;H2&gt;&lt;span style=&quot;font-size: 20px&quot;&gt;Organization: &lt;/span&gt;&lt;span style=&quot;font-size:20px;color:blue&quot;&gt;&apos;|| NVL(organization,&apos;N/A&apos;) || &apos;&lt;/span&gt;&apos;||
   &apos;&lt;span style=&quot;font-size:20px&quot;&gt;    Project: &lt;/span&gt;&lt;span style=&quot;font-size:20px;color:blue&quot;&gt;&apos; || NVL(project,&apos;N/A&apos;) || &apos;&lt;/span&gt;&apos;||
   &apos;&lt;span style=&quot;font-size:20px&quot;&gt;    SubProject: &lt;/span&gt;&lt;span style=&quot;font-size:20px;color:blue&quot;&gt;&apos; || NVL(subproject,&apos;N/A&apos;) || &apos;&lt;/span&gt;
&lt;/H2&gt;
&lt;H2 style=&quot;font-size: 15px&quot;&gt;Exception: &apos; || SUBSTRING(NVL(CAST(CURRENT_EXCEPTION.TRACE AS LONGVARCHAR),&apos;null&apos;),1,2000) ||&apos;&lt;/H2&gt;&apos;;

&#x9;&#x9;&#x9;SET email_subjectline = &apos;Dynamic File: [&apos;||NVL(envName,&apos;no env&apos;)||&apos;/&apos;||NVL(project,&apos;no project&apos;)||&apos;/&apos;||NVL(subproject,&apos;no subproject&apos;)||&apos;]&apos;||
&#x9;&#x9;&#x9;&#x9;&apos; Error Report - &apos;||NVL(filename,&apos;no filename available.&apos;);
&#x9;&#x9;&#x9;IF (debug = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;EXCEPTION: Sending Email Subject [exception]:&apos;||CHR(10)||NVL(email_subjectline,&apos;null email subject line&apos;));
&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;EXCEPTION: Sending Email Body [exception]:&apos;||CHR(10)||NVL(email_message,&apos;null email message&apos;));
&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;-- Send the email
&#x9;&#x9;&#x9;CALL /lib/util/SendEMail (
&#x9;&#x9;&#x9;&#x9;null, 
&#x9;&#x9;&#x9;&#x9;null,
&#x9;&#x9;&#x9;&#x9;default_email,
&#x9;&#x9;&#x9;&#x9;null, 
&#x9;&#x9;&#x9;&#x9;null,
&#x9;&#x9;&#x9;&#x9;email_subjectline,
&#x9;&#x9;&#x9;&#x9;&apos;TEXT_HTML&apos;,
&#x9;&#x9;&#x9;&#x9;email_message
&#x9;&#x9;&#x9;);
&#x9;&#x9;END IF;
&#x9;&#x9;RAISE;
END</attribute>
  <attribute name="creationDate" type="LONG">1502831486145</attribute>
  <attribute name="creatorUserDomain" type="STRING">composite</attribute>
  <attribute name="creatorUserId" type="INTEGER">1500</attribute>
  <attribute name="creatorUserName" type="STRING">dynview</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1564410509964</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserId" type="INTEGER">1500</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">9/141</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>util</item>
        <item>Pause</item>
      </value>
    </item>
  </attribute>
  <attribute name="resourceModifiedDateOnSourceCISSite" type="LONG">1502831486145</attribute>
</metadata>