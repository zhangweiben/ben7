<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:9a66723c-3693-47f1-a1f0-d7811996f9d5 -->
<metadata name="_README_INSTALLATION" path="/shared/ASAssets/BestPractices_v81/DynamicFileFramework/_README_INSTALLATION" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <parameters></parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <attribute name="Script" type="STRING">/*
    A custom script that manages files dynamically.
&#x9;----------------------------
&#x9;Installation Instructions:  
&#x9;----------------------------
&#x9;1. Configure the Data Virtualization  Email
&#x9;&#x9;a. In Studio, go to Administration í Server í Configuration í E-Mail

&#x9;2. Configure the environment name for /shared/ASAssets/Utilities/environment/getEnvName()
&#x9;&#x9;a. Set it to a unique environment name for each DV environment such as: DEV, TEST, QA, DR, PROD

&#x9;3. Modify the &quot;admin&quot; password for the data source DYNAMIC_FILE_LOCAL_LOOPBACK
&#x9;&#x9;a. The loopback is required so that execution of &quot;triggered&quot; procedure run as a user with proper rights to execute internal
&#x9;&#x9;&#x9;procedures for creating and dropping views and assigning privileges.  

&#x9;4.&#x9;Provide a datasource to be used for the Dynamic File Framework queue and email tables.
&#x9;&#x9;a.&#x9;You may choose to use the out-of-the-box Postgres datasource with the built in &quot;ciscache&quot; schema.  
&#x9;&#x9;&#x9;For this, you will have to set the connection information for this datasource: 
&#x9;&#x9;&#x9;/shared/ASAssets/BestPractices_v81/DynamicFileFramework/DYNAMIC_FILE_QUEUE_DS
&#x9;&#x9;b.&#x9;You may also choose to use your own database but it must be Oracle, SQL Server or Postgres.  
&#x9;&#x9;&#x9;A datasource must be provided within DV.   The path, catalog, schema and tablespace/filegroup 
&#x9;&#x9;&#x9;are configured in the &quot;constants&quot; procedure in step 5.

&#x9;5. Modify the constants file and set the following accordingly
&#x9;&#x9;SET EXECUTE_DDL_PACKAGE_PATH =&apos;/shared/ASAssets/BestPractices_v81/DynamicFileFramework/00_ExecuteDDL&apos;;&#x9;-- [mandatory] The location of the Execute DDL package path
&#x9;&#x9;SET DATASOURCE_PATH = &apos;/shared/ASAssets/BestPractices_v81/DynamicFileFramework/DYNAMIC_FILE_QUEUE_DS&apos;;&#x9;-- [mandatory] CIS datasource path. Supported: Oracle, SQL Server and Postgres
&#x9;&#x9;SET CATALOG_NAME = null;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- [optional] Catalog name for SQL Server
&#x9;&#x9;SET SCHEMA_NAME&#x9;= &apos;ciscache&apos;;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- [mandatory] Schema name
&#x9;&#x9;SET TABLESPACE_FILEGROUP = null;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- [optional] Tablespace name if Oracle or Postgres and file group name if SQL Server.
&#x9;&#x9;SET PROCESS_WAIT_TIME_SECONDS = &apos;5&apos;;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- [mandatory] The number of seconds to wait in between processing requests.
&#x9;&#x9;SET DEFAULT_EMAIL = &apos;admin-email@company.com&apos;;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- [mandatory] Default email to send exceptions to.
&#x9;&#x9;SET DEFAULT_RETENTION_POLICY_DAYS = &apos;30&apos;;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- [mandatory] Default retention policy.  Delete files and CIS resources older than x days.  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;This is a numeric value that will be converted from text to integer.
&#x9;&#x9;SET DYNAMIC_FILE_SEQ = &apos;DYNAMIC_FILE_SEQ&apos;;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- [DO NOT CHANGE] Dynamic File Sequence Name.
&#x9;&#x9;SET DYNAMIC_FILE_EMAIL = &apos;DYNAMIC_FILE_EMAIL&apos;;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- [DO NOT CHANGE] Dynamic File Email Table Name.
&#x9;&#x9;SET DYNAMIC_FILE_QUEUE = &apos;DYNAMIC_FILE_QUEUE&apos;;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- [DO NOT CHANGE] Dynamic File Queue Table Name.
&#x9;&#x9;SET CSV_SUPPORTED_FILE_EXTENSIONS = &apos;.csv,.txt&apos;;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- [DO NOT CHANGE] CSV Supported File Extensions
&#x9;&#x9;SET EXCEL_SUPPORTED_FILE_EXTENSIONS = &apos;.xls,.xlsx&apos;;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- [DO NOT CHANGE] Excel Supported File Extensions

&#x9;6. Create the sequence generator and queue table and rebind 00_ExecuteDDL
&#x9;&#x9;a. Execute 01_pqCreateDrop_dynamic_file_tables and provide the following:
&#x9;&#x9;&#x9;This procedure uses information from the &quot;constants&quot; procedure to dynamically 
&#x9;&#x9;&#x9;construct the DDL.  Using the parameters below, you can achieve different 
&#x9;&#x9;&#x9;combinations of dropping and creating or nothing at all.
&#x9;&#x9;&#x9;Input:
&#x9;&#x9;&#x9;&#x9;executeDDL:&#x9;&#x9;&#x9;y=execute DDL, &#x9;&#x9;n=print DDL
&#x9;&#x9;&#x9;&#x9;dropResources:&#x9;&#x9;y=Drop resources, &#x9;n=don&apos;t drop resources
&#x9;&#x9;&#x9;&#x9;createResources:&#x9;y=Create resources, n=don&apos;t create resources
&#x9;&#x9;&#x9;What gets created/dropped:
&#x9;&#x9;&#x9;&#x9;Sequence Name:&#x9;DYNAMIC_FILE_SEQ
&#x9;&#x9;&#x9;&#x9;Table Name:&#x9;&#x9;DYNAMIC_FILE_QUEUE
&#x9;&#x9;&#x9;&#x9;Table Name:&#x9;&#x9;DYNAMIC_FILE_EMAIL
&#x9;&#x9;b. The script rebinds the 00_ExecuteDDL to point to the datasource.
&#x9;&#x9;c. The script introspects resources on the target datasource.
&#x9;&#x9;&#x9;Add the table DYNAMIC_FILE_QUEUE
&#x9;&#x9;&#x9;Add the table DYNAMIC_FILE_EMAIL

&#x9;7. Add emails for each user that will be invoking the procedures
&#x9;&#x9;a. Invoke /shared/ASAssets/BestPractices_v81/DynamicFileFramework/Helper/emailAddUser
&#x9;&#x9;b. Add a general group email for the user &quot;admin&quot; so that
&#x9;&#x9;&#x9;if files are generically created/deleted at least the admin will be notified.

&#x9;8. Turn on the Trigger:&#x9;&#x9;&#x9;DynamicFileFrameworkProcessTrigger
&#x9;&#x9;a. Set the periodic refresh rate according to your policy.  Default is 15 minutes.
&#x9;&#x9;&#x9;This is how often the trigger will wake up and look for rows in DYNAMIC_FILE_QUEUE table to process.
&#x9;&#x9;&#x9;If it finds no rows then no work is done.  If it does find rows, the requests are executed in a single-threaded
&#x9;&#x9;&#x9;fashion with the default time delay applied in between requests as set in constants.PROCESS_WAIT_TIME_SECONDS.
&#x9;&#x9;&#x9;The purpose of the time-delay is so that DV does not get overwhelmed by processing files.

&#x9;9. Proceed to either OPTION 1 (automated install) or OPTION 2 (manual install) below
&#x9;&#x9;to generate the Dynamic File Framework within a project folder for a user application.

&#x9;----------------------------------------
&#x9;OPTION 1 - Automated template creation
&#x9;----------------------------------------
&#x9;1. Locate the procedure: /shared/ASAssets/BestPractices_v81/DynamicFileFramework/Example/example_Create_or_Remove
&#x9;&#x9;a. Make a copy of it.
&#x9;&#x9;b. Rename it to give it a meaningful name associated with the target project.
&#x9;&#x9;c. Modify the paths and other variables for your use case.
&#x9;&#x9;d. Execute it with a 1 to create the Dynamic File Framework resources in your project path.
&#x9;&#x9;e. Execute it with a 0 to destroy the Dynamic File Framework resources in your project path. [Validating the removal works.]
&#x9;&#x9;e. Execute it with a 1 to create the Dynamic File Framework resources in your project path.
 &#x9;2. Proceed to the &quot;Executing the Dynamic File Framework&quot; section
&#x9;&#x9;
&#x9;----------------------------------------
&#x9;OPTION 2 - Manual template creation
&#x9;----------------------------------------
&#x9;1. Copy the Dynamic folder from DynamicFileFramework/Templates/Application/Services/Dynamic and 
&#x9;&#x9;paste it into your project&apos;s /Application/Services folder.
&#x9;&#x9;ex. /shared/base_project_path/business_area/subject_area/Application/Services

&#x9;2. Modify the variables in your new location &quot;constants&quot; procedure
&#x9;&#x9;&#x9;NOTE: Take note of mandatory and optional variable settings within the constants.

&#x9;&#x9;&#x9;-- Standard application default settings [ORG, PRJ1, S1, ORGDB]
&#x9;&#x9;&#x9;SET ORGANIZATION = &apos;&apos;;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- [mandatory] Identifies your organization for tracking/filtering purposes.
&#x9;&#x9;&#x9;SET PROJECT_NAME = &apos;&apos;;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- [mandatory] This is your project folder name and is used for tracking/filtering purposes.
&#x9;&#x9;&#x9;SET SUBPROJECT_NAME&#x9;= &apos;&apos;;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- [optional] Leave blank if your project folder does not have a sub project
&#x9;&#x9;&#x9;SET PUBLISHED_DATABASE = &apos;&apos;;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- [mandatory] This is the published database name.

&#x9;&#x9;&#x9;-- Published Schema Path: e.g. /services/databases/published_data_source/catalog/Dynamic : Dynamic is recommended for the schema name
&#x9;&#x9;&#x9;SET PUBLISHED_SCHEMA_PATH = &apos;&apos;;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- [mandatory] The full path to the published Dynamic schema within your published databases
&#x9;&#x9;&#x9;-- Physical Metadata Layer Path
&#x9;&#x9;&#x9;SET PHYSICAL_METADATA_LAYER = &apos;&apos;;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- [mandatory] The full path to the physical metadata Dynamic folder where the dynamic file data sources reside.
&#x9;&#x9;&#x9;-- Set to the default null for no view generation in the layers.  Otherwise set to Option 2 to generate views in the layers.
&#x9;&#x9;&#x9;SET APPLICATION_LAYER = null;                                       -- Option 1: null,  Option 2: Full path to /Physical/Formatting/Dynamic folder
&#x9;&#x9;&#x9;SET    BUSINESS_LAYER = null;                                       -- Option 1: null,  Option 2: Full path to /Business/Logical/Dynamic folder
&#x9;&#x9;&#x9;SET  FORMATTING_LAYER = null;                                       -- Option 1: null,  Option 2: Full path to /Application/Views/Dynamic folder

&#x9;&#x9;&#x9;-- Allows the invoking interface procedure to control the behavior of the implementation procedure.
&#x9;&#x9;&#x9;SET ALLOW_NULL_FILE_NAME = &apos;0&apos;;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- 0=Do not allow user to pass in null/empty for the file name.  Throw an exception.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- 1=Allow the user to pass in null/empty for the file name which results in picking up all unclaimed (not introspected) files in the file system for the invoking user.
&#x9;&#x9;&#x9;-- Default retention policy.  
&#x9;&#x9;&#x9;SET RETENTION_POLICY_DAYS = &apos;30&apos;;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- [mandatory] Delete files and CIS resources older than x days.  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   This is a numeric value that will be converted from text to integer.
&#x9;&#x9;b. Save the procedure

&#x9;3. Copy the Dynamic folder from Templates/Physical/Metadata/Dynamic and paste it into your project&apos;s /Metadata folder.
&#x9;&#x9;Note: In both cases, if file system security is being used on the DV server, then you will need to put in the &quot;File System Security Root Mapping Name&quot;
&#x9;&#x9;&#x9;&#x9;associated with the file system location.  Work with the DV administrator to set up Root Mapping Names and paths.
&#x9;&#x9;&#x9;E.g.  /shared/BusArea/SubjectArea/Physical/Metadata
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/Dynamic
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/DynamicTempFiles_CSV
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/DynamicTempFiles_Excel
&#x9;&#x9;a. Open the data source &quot;Dynamic/DynamicTempFiles_CSV&quot; 
&#x9;&#x9;&#x9;i. Edit the Root Path to point to the DV file system path where your project files are stored or use the root mapping name if applicable.
&#x9;&#x9;&#x9;ii. Test the connection and execute the Add/Remove Tables to make sure the files are visible.
&#x9;&#x9;b. Open the data source &quot;Dynamic/DynamicTempFiles_Excel&quot; 
&#x9;&#x9;&#x9;i. Edit the Root Path to point to the DV file system path where your project files are stored or use the root mapping name if applicable.
&#x9;&#x9;&#x9;ii. Test the connection and execute the Add/Remove Tables to make sure the files are visible.

&#x9;4. Create a published relational catalog and schema
&#x9;&#x9;a. Create a published database if it does not exist as per constants.PUBLISHED_DATABASE.
&#x9;&#x9;a. Create a catalog name according to your project and subproject
&#x9;&#x9;b. Create a schema name called Dynamic. 
&#x9;&#x9;c. Publish the procedures to the published /services/databases/published_datasource/catalog/Dynamic schema
&#x9;&#x9;&#x9;&#x9;Select the following procedures.   You will need to Control-Click to select them all
&#x9;&#x9;&#x9;&#x9;&#x9;i.&#x9;&#x9;dynamicFileCleanup
&#x9;&#x9;&#x9;&#x9;&#x9;ii.&#x9;&#x9;dynamicFileCreate
&#x9;&#x9;&#x9;&#x9;&#x9;iii.&#x9;dynamicFileList
&#x9;&#x9;&#x9;&#x9;&#x9;iv.&#x9;&#x9;dynamicFileRebuild
&#x9;&#x9;&#x9;&#x9;&#x9;v.&#x9;&#x9;dynamicFileRemove
&#x9;&#x9;&#x9;&#x9;Right-click on the selected procedures and choose Publish
&#x9;&#x9;&#x9;&#x9;Browse and select the /services/databases/published_datasource/catalog/Dynamic schema and click OK

&#x9;5. Create a web service
&#x9;&#x9;a. Create a folder that mimics the catalog and schema name from the relational datasource.
&#x9;&#x9;&#x9;e.g. /services/webservices/published_datasource/catalog/Dynamic
&#x9;&#x9;b. Create a web service in /services/webservices/published_datasource/catalog/Dynamic called Utilities

&#x9;&#x9;c. Publish the procedures to the published /services/webservices/published_datasource/catalog/Dynamic/Utilities web service
&#x9;&#x9;&#x9;&#x9;Select the following procedures.   You will need to Control-Click to select them all
&#x9;&#x9;&#x9;&#x9;&#x9;i.&#x9;&#x9;dynamicFileCleanup
&#x9;&#x9;&#x9;&#x9;&#x9;ii.&#x9;&#x9;dynamicFileCreate
&#x9;&#x9;&#x9;&#x9;&#x9;iii.&#x9;dynamicFileList
&#x9;&#x9;&#x9;&#x9;&#x9;iv.&#x9;&#x9;dynamicFileRebuild
&#x9;&#x9;&#x9;&#x9;&#x9;v.&#x9;&#x9;dynamicFileRemove
&#x9;&#x9;&#x9;&#x9;Right-click on the selected procedures and choose Publish
&#x9;&#x9;&#x9;&#x9;Browse and select the Utilities web service and click OK

&#x9;6. Test the procedures for create, remove and list
&#x9;&#x9;a. SFTP files to your designated file system location on the target DV server host.

&#x9;&#x9;b. Create files/views
&#x9;&#x9;&#x9;Execute the published &quot;dynamicFileCreate&quot; procedure from a 3rd party tool such as DB Visualizer
&#x9;&#x9;&#x9;File Views should be visible now to execute queries from in the DV published schema

&#x9;&#x9;b. List files/views
&#x9;&#x9;&#x9;Execute the published &quot;dynamicFileList&quot; procedure from a 3rd party tool such as DB Visualizer
&#x9;&#x9;&#x9;A listing of files and published views should be displayed.

&#x9;&#x9;c. Remove the file from the target DV server file system.
&#x9;&#x9;&#x9;Execute the published &quot;dynamicFileRemove&quot; procedure from a 3rd party tool such as DB Visualizer
&#x9;&#x9;&#x9;Files and Views should now be removed and therefore the same query should fail that was previously executed.

&#x9;7. Turn on both triggers if applicable:
&#x9;&#x9;DynamicFileFrameworkAutoPublishTrigger - Will automatically detect files in the file system and publish them if turned on.
&#x9;&#x9;DynamicFileFrameworkCleanupTrigger - Will automatically detect files that are out of policy and remove the views and files.

&#x9;8. Proceed to the &quot;Executing the Dynamic File Framework&quot; section

&#x9;--------------------------------------
&#x9;Executing the Dynamic File Framework:  
&#x9;--------------------------------------
&#x9;1. How to invoke from a 3rd party tool such as Toad or DB Visualizer:
&#x9;&#x9;Once you have completed OPTION 1 or OPTION 2 for the installation/setup, now you are ready to start using the Dynamic File Framework.
&#x9;&#x9;a. Create either an ODBC or JDBC connection from your favorite 3rd party tool to the target DV instance.
&#x9;&#x9;b. Open your favorite Query tool
&#x9;&#x9;c. Execute the following using the sample project as a guideline:
&#x9;&#x9;&#x9;---------------------------------------------------
&#x9;&#x9;&#x9;LIST FILES - dynamicFileList():
&#x9;&#x9;&#x9;---------------------------------------------------
&#x9;&#x9;&#x9;&#x9;The purpose of the &quot;dynamic file list&quot; is to show what files are published as views, 
&#x9;&#x9;&#x9;&#x9;&#x9;not published at all and which ones are not supported.
&#x9;&#x9;&#x9;&#x9;DATABASE: ex_project - ODBC/JDBC connection is made
&#x9;&#x9;&#x9;&#x9;SELECT * FROM &quot;cat1&quot;.&quot;Dynamic&quot;.&quot;dynamicFileList&quot;()

&#x9;&#x9;&#x9;&#x9;Output Messages:
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;PUBLISHED&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;NOT PUBLISHED&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;FILE NOT SUPPORTED&apos;

&#x9;&#x9;&#x9;---------------------------------------------------
&#x9;&#x9;&#x9;ADD FILE - dynamicFileCreate():
&#x9;&#x9;&#x9;---------------------------------------------------
&#x9;&#x9;&#x9;&#x9;The purpose of &quot;dynamic file create&quot; is to add/create the views for the specified file 
&#x9;&#x9;&#x9;&#x9;&#x9;residing in the file system.  This procedure queues up the request into the DYNAMIC_FILE_QUEUE 
&#x9;&#x9;&#x9;&#x9;&#x9;table.  The request is processed by the framework procedure &quot;dynamicFileQueueProcess&quot; which is 
&#x9;&#x9;&#x9;&#x9;&#x9;triggered by the framework trigger &quot;DynamicFileFrameworkProcessTrigger&quot;.
&#x9;&#x9;&#x9;&#x9;DATABASE: ex_project - ODBC/JDBC connection is made
&#x9;&#x9;&#x9;&#x9;How to register a file to be created as the actual user who owns the file:
&#x9;&#x9;&#x9;&#x9;&#x9;This scenario is useful for users who are directly connecting to DV to upload files to their file system
&#x9;&#x9;&#x9;&#x9;&#x9;area and invoking the DV Dynamic File Framework API to register the file creation.

&#x9;&#x9;&#x9;&#x9;&#x9;SELECT * FROM &quot;cat1&quot;.&quot;Dynamic&quot;.&quot;dynamicFileCreate&quot;(&apos;user1-Common_Model_v3_file2.xlsx&apos;)

&#x9;&#x9;&#x9;&#x9;How to register a file to be created as a proxy user (service account) who does not own the file:
&#x9;&#x9;&#x9;&#x9;&#x9;This scenario comes into play when there is a service account such as an application that is controlling the 
&#x9;&#x9;&#x9;&#x9;&#x9;interface between the user and the DV layer.  For example, there may be a front-end web application that the 
&#x9;&#x9;&#x9;&#x9;&#x9;users log into to upload their files.  Therefore, the service account of the application is the proxy user
&#x9;&#x9;&#x9;&#x9;&#x9;which both uploads the file and invokes the DV Dynamic File Framework API&apos;s to register the file creation.

&#x9;&#x9;&#x9;&#x9;&#x9;SELECT * FROM &quot;cat1&quot;.&quot;Dynamic&quot;.&quot;dynamicFileCreate&quot;(&apos;USERNAME[user1]user1-Common_Model_v3_file2.xlsx&apos;)

&#x9;&#x9;&#x9;&#x9;Queuing Messages:
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;FILE ADD QUEUED&apos;&#x9;&#x9;&#x9;&#x9;actiontype=&apos;A&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;INVALID FILENAME&apos;&#x9;&#x9;&#x9;&#x9;actiontype=&apos;A&apos;,&apos;R&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;DUPLICATE REQUEST IGNORED&apos;&#x9;&#x9;actiontype=&apos;A&apos;,&apos;R&apos;,&apos;C&apos;

&#x9;&#x9;&#x9;&#x9;Email Messages:
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;UNKNOWN&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;FILE ADDED.  NO VIEWS PUBLISHED&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;FILE ADDED.  VIEWS PUBLISHED&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;FILE ADDED.  VIEWS ALREADY EXISTS&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;FILE ADDED.  VIEWS OVERWRITTEN&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;FILE DOES NOT EXIST&apos;

&#x9;&#x9;&#x9;&#x9;&#x9;- Occurs when the file being added contains no Excel sheets and/or no columns and no data
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;FILE REMOVED.  NO COLUMNS DETECTED.  VIEWS NOT PUBLISHED&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;UNABLE TO REMOVE FILE.  NO COLUMNS DETECTED.  VIEWS NOT PUBLISHED&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;FILE DOES NOT EXIST.  NO COLUMNS DETECTED.  VIEWS NOT PUBLISHED&apos;

&#x9;&#x9;&#x9;&#x9;&#x9;&apos;ERROR: Data source type not supported: &apos;+&lt;dataSourceType&gt;
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;ERROR: File Name is required.&apos;  - occurs when (allowNullFileName = 0 and (fileName IS NULL OR LENGTH(fileName) = 0))

&#x9;&#x9;&#x9;---------------------------------------------------
&#x9;&#x9;&#x9;REMOVE FILE - dynamicFileRemove():
&#x9;&#x9;&#x9;---------------------------------------------------
&#x9;&#x9;&#x9;&#x9;The purpose of the &quot;dynamic file remove&quot; is to remove the file and views for the specified file 
&#x9;&#x9;&#x9;&#x9;&#x9;residing in the file system.  This procedure queues up the request into the DYNAMIC_FILE_QUEUE 
&#x9;&#x9;&#x9;&#x9;&#x9;table.  The request is processed by the framework procedure &quot;dynamicFileQueueProcess&quot; which is 
&#x9;&#x9;&#x9;&#x9;&#x9;triggered by the framework trigger &quot;DynamicFileFrameworkProcessTrigger&quot;.
&#x9;&#x9;&#x9;&#x9;DATABASE: ex_project - ODBC/JDBC connection is made
&#x9;&#x9;&#x9;&#x9;How to register a file to be removed as the actual user who owns the file:
&#x9;&#x9;&#x9;&#x9;&#x9;SELECT * FROM &quot;cat1&quot;.&quot;Dynamic&quot;.&quot;dynamicFileRemove&quot;(&apos;user1-Common_Model_v3_file2.xlsx&apos;)

&#x9;&#x9;&#x9;&#x9;How to register a file to be removed as a proxy user (service account) who does not own the file:
&#x9;&#x9;&#x9;&#x9;&#x9;SELECT * FROM &quot;cat1&quot;.&quot;Dynamic&quot;.&quot;dynamicFileRemove&quot;(&apos;USERNAME[user1]user1-Common_Model_v3_file2.xlsx&apos;)

&#x9;&#x9;&#x9;&#x9;Queuing Messages:
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;FILE REMOVE QUEUED&apos;&#x9;&#x9;&#x9;actiontype=&apos;R&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;INVALID FILENAME&apos;&#x9;&#x9;&#x9;&#x9;actiontype=&apos;A&apos;,&apos;R&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;DUPLICATE REQUEST IGNORED&apos;&#x9;&#x9;actiontype=&apos;A&apos;,&apos;R&apos;,&apos;C&apos;

&#x9;&#x9;&#x9;&#x9;Email Messages:
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;FILE REMOVED.  &apos; + 1 of the following:
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;PUBLISHED VIEWS REMOVED&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;VIEWS NOT PUBLISHED&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;UNABLE TO REMOVE FILE.  &apos;  + 1 of the following:
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;PUBLISHED VIEWS REMOVED&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;VIEWS NOT PUBLISHED&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;FILE DOES NOT EXIST.  &apos; + 1 of the following:
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;PUBLISHED VIEWS REMOVED&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;VIEWS NOT PUBLISHED&apos;

&#x9;&#x9;&#x9;&#x9;&#x9;&apos;FILE NOT ASSOCIATED WITH USERNAME=&lt;username&gt;&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;FILE DOES NOT EXIST.  FILE NOT ASSOCIATED WITH USERNAME=&lt;username&gt;&apos;

&#x9;&#x9;&#x9;---------------------------------------------------
&#x9;&#x9;&#x9;CLEANUP FILES - dynamicFileCleanup():
&#x9;&#x9;&#x9;---------------------------------------------------
&#x9;&#x9;&#x9;&#x9;The purpose of the &quot;dynamic file cleanup&quot; is to clean-up old files that have a file timestamp beyond 
&#x9;&#x9;&#x9;&#x9;&#x9;the retention policy.  The file and the associate views are removed. This procedure queues up 
&#x9;&#x9;&#x9;&#x9;&#x9;the request into the DYNAMIC_FILE_QUEUE table.  The file cleanup procedure may be invoked manually 
&#x9;&#x9;&#x9;&#x9;&#x9;or it may be triggered once a day by the trigger &quot;DynamicFileFrameworkCleanupTrigger&quot;.  The request 
&#x9;&#x9;&#x9;&#x9;&#x9;is processed by the framework procedure &quot;dynamicFileQueueProcess&quot; which is triggered by the framework 
&#x9;&#x9;&#x9;&#x9;&#x9;trigger &quot;DynamicFileFrameworkProcessTrigger&quot;.
&#x9;&#x9;&#x9;&#x9;DATABASE: ex_project - ODBC/JDBC connection is made
&#x9;&#x9;&#x9;&#x9;How to register a cleanup for either an actual user or proxy service account user:
&#x9;&#x9;&#x9;&#x9;&#x9;SELECT * FROM &quot;cat1&quot;.&quot;Dynamic&quot;.&quot;dynamicFileCleanup&quot;()

&#x9;&#x9;&#x9;&#x9;Queuing Messages:
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;FILE CLEAN-UP QUEUED&apos;&#x9;&#x9;&#x9;actiontype=&apos;C&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;DUPLICATE REQUEST IGNORED&apos;&#x9;&#x9;actiontype=&apos;A&apos;,&apos;R&apos;,&apos;C&apos;

&#x9;&#x9;&#x9;&#x9;Email Messages:
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;RETENTION POLICY EXCEEDED.  &apos; + dynamicFileRemove message
&#x9;&#x9;&#x9;&#x9;&#x9;or
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;FILE NOT SUPPORTED.  &apos; + dynamicFileRemove message

&#x9;&#x9;&#x9;&#x9;&#x9;- dynamicFileRemove messages:
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;FILE REMOVED.  &apos; + 1 of the following:
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;PUBLISHED VIEWS REMOVED&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;VIEWS NOT PUBLISHED&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;UNABLE TO REMOVE FILE.  &apos;  + 1 of the following:
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;PUBLISHED VIEWS REMOVED&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;VIEWS NOT PUBLISHED&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;FILE DOES NOT EXIST.  &apos; + 1 of the following:
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;PUBLISHED VIEWS REMOVED&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;VIEWS NOT PUBLISHED&apos;

&#x9;&#x9;&#x9;&#x9;&#x9;&apos;FILE NOT ASSOCIATED WITH USERNAME=&lt;username&gt;&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;FILE DOES NOT EXIST.  FILE NOT ASSOCIATED WITH USERNAME=&lt;username&gt;&apos;

&#x9;&#x9;&#x9;---------------------------------------------------
&#x9;&#x9;&#x9;REBUILD FILES - dynamicFileRebuild():
&#x9;&#x9;&#x9;---------------------------------------------------
&#x9;&#x9;&#x9;&#x9;The purpose of &quot;dynamic file rebuild&quot; is to add/create the views for all unpublished files residing 
&#x9;&#x9;&#x9;&#x9;&#x9;in the file system.  This procedure queues up requests for each into the DYNAMIC_FILE_QUEUE table.  
&#x9;&#x9;&#x9;&#x9;&#x9;The request is processed by the framework procedure &quot;dynamicFileQueueProcess&quot; which is triggered 
&#x9;&#x9;&#x9;&#x9;&#x9;by the framework trigger &quot;DynamicFileFrameworkProcessTrigger&quot;.
&#x9;&#x9;&#x9;&#x9;DATABASE: ex_project - ODBC/JDBC connection is made
&#x9;&#x9;&#x9;&#x9;How to register a rebuild for either an actual user or proxy service account user:
&#x9;&#x9;&#x9;&#x9;&#x9;SELECT * FROM &quot;cat1&quot;.&quot;Dynamic&quot;.&quot;dynamicFileRebuild&quot;()

&#x9;&#x9;&#x9;&#x9;Queuing Messages:
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;FILE ADD QUEUED&apos;&#x9;&#x9;&#x9;&#x9;actiontype=&apos;A&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;INVALID FILENAME&apos;&#x9;&#x9;&#x9;&#x9;actiontype=&apos;A&apos;,&apos;R&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;DUPLICATE REQUEST IGNORED&apos;&#x9;&#x9;actiontype=&apos;A&apos;,&apos;R&apos;,&apos;C&apos;

&#x9;&#x9;&#x9;&#x9;Email Messages:
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;UNKNOWN&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;FILE ADDED.  NO VIEWS PUBLISHED&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;FILE ADDED.  VIEWS PUBLISHED&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;FILE ADDED.  VIEWS ALREADY EXISTS&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;FILE ADDED.  VIEWS OVERWRITTEN&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;FILE DOES NOT EXIST&apos;

&#x9;&#x9;&#x9;&#x9;&#x9;- Occurs when the file being added contains no Excel sheets and/or no columns and no data
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;FILE REMOVED.  NO COLUMNS DETECTED.  VIEWS NOT PUBLISHED&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;UNABLE TO REMOVE FILE.  NO COLUMNS DETECTED.  VIEWS NOT PUBLISHED&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;FILE DOES NOT EXIST.  NO COLUMNS DETECTED.  VIEWS NOT PUBLISHED&apos;

&#x9;&#x9;&#x9;&#x9;&#x9;&apos;ERROR: Data source type not supported: &apos;+&lt;dataSourceType&gt;
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;ERROR: File Name is required.&apos;  - occurs when (allowNullFileName = 0 and (fileName IS NULL OR LENGTH(fileName) = 0))

&#x9;&#x9;&#x9;---------------------------------------------------
&#x9;&#x9;&#x9;AUTOMATED PUBLISH (ADD) - dynamicFileAutoPublish():
&#x9;&#x9;&#x9;---------------------------------------------------
&#x9;&#x9;&#x9;&#x9;The purpose of &quot;dynamic file auto-publish&quot; is to automatically add/create the views for any new files residing 
&#x9;&#x9;&#x9;&#x9;&#x9;in the file system.  This procedure queues up the request for each new file found into the DYNAMIC_FILE_QUEUE 
&#x9;&#x9;&#x9;&#x9;&#x9;table.  The request is processed by the framework procedure &quot;dynamicFileQueueProcess&quot; which is triggered by the 
&#x9;&#x9;&#x9;&#x9;&#x9;framework trigger &quot;DynamicFileFrameworkProcessTrigger&quot;.

&#x9;&#x9;&#x9;&#x9;Turn on the trigger &quot;DynamicFileFrameworkAutoPublishTrigger&quot;.  
&#x9;&#x9;&#x9;&#x9;Check the schedule to determine how often you want it to wake up and look for files to add to the queue.
&#x9;&#x9;&#x9;&#x9;The default is every 5 minutes at nn:04.  The reason for 04 is that the &quot;DynamicFileFrameworkProcessTrigger&quot;
&#x9;&#x9;&#x9;&#x9;&#x9;wakes up on the :00 or :05 or :15 so that the processing of the Publish trigger would be picked soon
&#x9;&#x9;&#x9;&#x9;&#x9;after it was registered.

&#x9;&#x9;&#x9;Queuing Messages:
&#x9;&#x9;&#x9;&#x9;&apos;FILE ADD QUEUED&apos;&#x9;&#x9;&#x9;&#x9;actiontype=&apos;A&apos;
&#x9;&#x9;&#x9;&#x9;&apos;INVALID FILENAME&apos;&#x9;&#x9;&#x9;&#x9;actiontype=&apos;A&apos;,&apos;R&apos;
&#x9;&#x9;&#x9;&#x9;&apos;DUPLICATE REQUEST IGNORED&apos;&#x9;&#x9;actiontype=&apos;A&apos;,&apos;R&apos;,&apos;C&apos;

&#x9;&#x9;&#x9;Email Messages:
&#x9;&#x9;&#x9;&#x9;&apos;UNKNOWN&apos;
&#x9;&#x9;&#x9;&#x9;&apos;FILE ADDED.  NO VIEWS PUBLISHED&apos;
&#x9;&#x9;&#x9;&#x9;&apos;FILE ADDED.  VIEWS PUBLISHED&apos;
&#x9;&#x9;&#x9;&#x9;&apos;FILE ADDED.  VIEWS ALREADY EXISTS&apos;
&#x9;&#x9;&#x9;&#x9;&apos;FILE ADDED.  VIEWS OVERWRITTEN&apos;
&#x9;&#x9;&#x9;&#x9;&apos;FILE DOES NOT EXIST&apos;

&#x9;&#x9;&#x9;&#x9;- Occurs when the file being added contains no Excel sheets and/or no columns and no data
&#x9;&#x9;&#x9;&#x9;&apos;FILE REMOVED.  NO COLUMNS DETECTED.  VIEWS NOT PUBLISHED&apos;
&#x9;&#x9;&#x9;&#x9;&apos;UNABLE TO REMOVE FILE.  NO COLUMNS DETECTED.  VIEWS NOT PUBLISHED&apos;
&#x9;&#x9;&#x9;&#x9;&apos;FILE DOES NOT EXIST.  NO COLUMNS DETECTED.  VIEWS NOT PUBLISHED&apos;

&#x9;&#x9;&#x9;&#x9;&apos;ERROR: Data source type not supported: &apos;+&lt;dataSourceType&gt;
&#x9;&#x9;&#x9;&#x9;&apos;ERROR: File Name is required.&apos;  - occurs when (allowNullFileName = 0 and (fileName IS NULL OR LENGTH(fileName) = 0))

&#x9;&#x9;&#x9;---------------------------------------------------
&#x9;&#x9;&#x9;AUTOMATED CLEANUP - dynamicFileCleanup():
&#x9;&#x9;&#x9;---------------------------------------------------
&#x9;&#x9;&#x9;&#x9;The purpose of the &quot;dynamic file cleanup&quot; is to automatically clean-up old files that have a file timestamp beyond 
&#x9;&#x9;&#x9;&#x9;&#x9;the retention policy.  The file and the associate views are removed. This procedure queues up the request into 
&#x9;&#x9;&#x9;&#x9;&#x9;the DYNAMIC_FILE_QUEUE table.  The request is processed by the framework procedure &quot;dynamicFileQueueProcess&quot; 
&#x9;&#x9;&#x9;&#x9;&#x9;which is triggered by the framework trigger &quot;DynamicFileFrameworkProcessTrigger&quot;.

&#x9;&#x9;&#x9;&#x9;Turn on the trigger &quot;DynamicFileFrameworkCleanupTrigger&quot;.
&#x9;&#x9;&#x9;&#x9;Check the schedule to determine how often you want it to wake up and schedule a cleanup into the queue.
&#x9;&#x9;&#x9;&#x9;The default is once a day at 4:59 am.  This is on an odd number for the same reason as the publish trigger
&#x9;&#x9;&#x9;&#x9;&#x9;is so the processing would be picked up soon after it was registered.

&#x9;&#x9;&#x9;&#x9;Queuing Messages:
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;FILE CLEAN-UP QUEUED&apos;&#x9;&#x9;&#x9;actiontype=&apos;C&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;DUPLICATE REQUEST IGNORED&apos;&#x9;&#x9;actiontype=&apos;A&apos;,&apos;R&apos;,&apos;C&apos;

&#x9;&#x9;&#x9;&#x9;Email Messages:
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;RETENTION POLICY EXCEEDED.  &apos; + dynamicFileRemove message
&#x9;&#x9;&#x9;&#x9;&#x9;or
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;FILE NOT SUPPORTED.  &apos; + dynamicFileRemove message

&#x9;&#x9;&#x9;&#x9;&#x9;- dynamicFileRemove messages:
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;FILE REMOVED.  &apos; + 1 of the following:
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;PUBLISHED VIEWS REMOVED&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;VIEWS NOT PUBLISHED&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;UNABLE TO REMOVE FILE.  &apos;  + 1 of the following:
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;PUBLISHED VIEWS REMOVED&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;VIEWS NOT PUBLISHED&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;FILE DOES NOT EXIST.  &apos; + 1 of the following:
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;PUBLISHED VIEWS REMOVED&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;VIEWS NOT PUBLISHED&apos;

&#x9;&#x9;&#x9;&#x9;&#x9;&apos;FILE NOT ASSOCIATED WITH USERNAME=&lt;username&gt;&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;FILE DOES NOT EXIST.  FILE NOT ASSOCIATED WITH USERNAME=&lt;username&gt;&apos;



&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.
*/
PROCEDURE &quot;_README_INSTALLATION&quot;()
BEGIN
END</attribute>
  <attribute name="creationDate" type="LONG">1454346388895</attribute>
  <attribute name="creatorUserDomain" type="STRING">composite</attribute>
  <attribute name="creatorUserId" type="INTEGER">-1973</attribute>
  <attribute name="creatorUserName" type="STRING">admin</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1519683412781</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserId" type="INTEGER">-1973</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
  <attribute name="resourceModifiedDateOnSourceCISSite" type="LONG">1454346388895</attribute>
</metadata>