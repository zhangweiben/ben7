<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:e931daa6-7fda-456a-badf-4cdb1c228a1a -->
<metadata name="01_pqCreateDrop_dynamic_file_tables" path="/shared/ASAssets/BestPractices_v81/DynamicFileFramework/01_pqCreateDrop_dynamic_file_tables" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>&lt;![CDATA[01_pqCreateDrop_dynamic_file:

&#x9;Provides a mechanism to create the Dynamic File Framework database repository sequence and tables.

&#x9;Input
&#x9;&#x9;executeDDL&#x9;&#x9;&#x9;&#x9;CHAR(1),&#x9;-- Y=execute the DDL, N=display the DDL in the console window only.
&#x9;&#x9;dropResources&#x9;&#x9;&#x9;CHAR(1),&#x9;-- Y=drop the triggers, functions and tables first.  N=do not drop the resources.
&#x9;&#x9;reateResources&#x9;&#x9;&#x9;CHAR(1),&#x9;-- Y=create all resources.  N=do not create resources.
&#x9;Output:
&#x9;&#x9;ursCombinedResult&#x9;&#x9;LONGVARCHAR,-- Provides a status on each sql statement executed
&#x9;&#x9;sqlScript&#x9;&#x9;&#x9;&#x9;LONGVARCHAR&#x9;-- Generates an output of the entire script which can be used for external execution

&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;CSW Version:&#x9;Reason:
&#x9;02/20/2018&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.5&#x9;&#x9;&#x9;Adapted for Assets Data Abstraction Best Practices

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.]]&gt;</annotation>
  <parameters>
    <parameter name="executeDDL" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="dropResources" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="createResources" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="cursCombinedResult" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="sqlScript" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/resource/ResourceExists" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="path" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="type" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="version" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceVersion" type="STRING" maxLength="255"/>
      </element>
      <element name="exists" direction="OUT">
        <datatype type="BOOLEAN"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/DynamicFileFramework/00_ExecuteDDL" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inputSQL" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="outputValue">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/DynamicFileFramework/constants" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="EXECUTE_DDL_PACKAGE_PATH" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="DATASOURCE_PATH" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="CATALOG_NAME" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="SCHEMA_NAME" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="DYNAMIC_FILE_SEQ" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="DYNAMIC_FILE_EMAIL" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="DYNAMIC_FILE_QUEUE" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="TABLESPACE_FILEGROUP" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="PROCESS_WAIT_TIME_SECONDS" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="DEFAULT_EMAIL" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="DEFAULT_RETENTION_POLICY_DAYS" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="CSV_SUPPORTED_FILE_EXTENSIONS" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="EXCEL_SUPPORTED_FILE_EXTENSIONS" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/definitions/RepositoryDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/destroyResource" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="createResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="257"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <reference refId="257"/>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getBasicResourceCursor" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceCursor" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="name">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="path">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="type">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="id">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="changeid">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="version">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="introspectState">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ownerDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ownerName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="impactLevel">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="impactMessage">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="annotation">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="explicitlyDesigned">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="tableType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="sqlText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="scriptText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="childCount">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="dataSourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getUsedResourcesCursor" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="usedResCursor" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="resourceName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resourcePath">
            <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
          </element>
          <element name="resourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="id">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="tableType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="explicitlyDesigned">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="sqlText">
            <datatype type="STRING" maxLength="32768"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/introspectResources" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="dsPath" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="catalogName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="schemaNames" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="schemaTablePatterns" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="tableNames" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="schemaProcedurePatterns" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="procedureNames" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="separator" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inDebug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="errStatus" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="errMessage" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="introspectionResult" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="dataSourceType" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="dataSourceSubtype" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/rebindResource" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="resourcePath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="rebindVector" direction="IN">
        <datatype type="ARRAY" maxLength="0">
          <itemDatatype>
            <datatype name="rebindVector" type="TREE" refId="257">
              <element name="oldPath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="oldType">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="newPath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="newType">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
            </datatype>
          </itemDatatype>
        </datatype>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="createResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="513"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <reference refId="513"/>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/getConstantV2" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="constantsPath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="constantsName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="optionReturn" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="outValue" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* 01_pqCreateDrop_dynamic_file:

&#x9;Provides a mechanism to create the Dynamic File Framework database repository sequence and tables.

&#x9;Input
&#x9;&#x9;executeDDL&#x9;&#x9;&#x9;&#x9;CHAR(1),&#x9;-- Y=execute the DDL, N=display the DDL in the console window only.
&#x9;&#x9;dropResources&#x9;&#x9;&#x9;CHAR(1),&#x9;-- Y=drop the triggers, functions and tables first.  N=do not drop the resources.
&#x9;&#x9;reateResources&#x9;&#x9;&#x9;CHAR(1),&#x9;-- Y=create all resources.  N=do not create resources.
&#x9;Output:
&#x9;&#x9;ursCombinedResult&#x9;&#x9;LONGVARCHAR,-- Provides a status on each sql statement executed
&#x9;&#x9;sqlScript&#x9;&#x9;&#x9;&#x9;LONGVARCHAR&#x9;-- Generates an output of the entire script which can be used for external execution

&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;CSW Version:&#x9;Reason:
&#x9;02/20/2018&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.5&#x9;&#x9;&#x9;Adapted for Assets Data Abstraction Best Practices

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.
*/
PROCEDURE &quot;01_pqCreateDrop_dynamic_file_tables&quot;(
&#x9;IN  executeDDL&#x9;&#x9;&#x9;&#x9;CHAR(1),&#x9;-- Y=execute the DDL, N=display the DDL in the console window only.
&#x9;IN  dropResources&#x9;&#x9;&#x9;CHAR(1),&#x9;-- Y=drop the triggers, functions and tables first.  N=do not drop the resources.
&#x9;IN  createResources&#x9;&#x9;&#x9;CHAR(1),&#x9;-- Y=create all resources.  N=do not create resources.
&#x9;OUT cursCombinedResult&#x9;&#x9;LONGVARCHAR,-- Provides a status on each sql statement executed
&#x9;OUT sqlScript&#x9;&#x9;&#x9;&#x9;LONGVARCHAR&#x9;-- Generates an output of the entire script which can be used for external execution
)
BEGIN
&#x9;DECLARE debug&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1) DEFAULT &apos;N&apos;;
&#x9;DECLARE&#x9;globalConstantsPath&#x9;&#x9;&#x9;VARCHAR(4000) DEFAULT /shared/ASAssets/BestPractices_v81/DynamicFileFramework/constants.globalConstantsPath;
&#x9;DECLARE executeDDLPackagePath&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE packageDatasourcePath&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE rebindVector &#x9;&#x9;&#x9;&#x9;/shared/ASAssets/Utilities/repository/definitions/RepositoryDefinitions.rebindVector;
&#x9;DECLARE sqlStatement&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE cursType&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE i&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE ex&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;EXCEPTION;
&#x9;DECLARE curs&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CURSOR (result INTEGER);
&#x9;DECLARE cursResult&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE status&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE TYPE sqlRowType&#x9;&#x9;&#x9;&#x9;ROW(cursType VARCHAR, sqlStatement LONGVARCHAR);
&#x9;DECLARE sqlRow&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sqlRowType;
&#x9;DECLARE sqlVect&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VECTOR(sqlRowType);
&#x9;DECLARE vectorCount&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE queueDataSourceType&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE datasourceType&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE queueDatasourcePath&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE tablespaceStatement&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;&apos;;
&#x9;DECLARE queueSchemaName&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE queueCatalogName&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE queueCatalogNameTemp&#x9;&#x9;VARCHAR;
&#x9;DECLARE queueSequenceDynamicFile&#x9;VARCHAR;
&#x9;DECLARE queueTableDynamicFileEmail&#x9;VARCHAR;
&#x9;DECLARE queueTableDynamicFileQueue&#x9;VARCHAR;
&#x9;DECLARE tablespaceName&#x9;&#x9;&#x9;&#x9;VARCHAR;&#x9;-- Optional value.  If not provided then it will use the default tablespace.
&#x9;DECLARE finalResultQuery&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE success&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;BIT;
&#x9;DECLARE createResponse &#x9;&#x9;&#x9;&#x9;XML;
&#x9;DECLARE faultResponse&#x9;&#x9;&#x9;&#x9;XML;
&#x9;DECLARE resExists&#x9;&#x9;&#x9;&#x9;&#x9;BOOLEAN;
&#x9;DECLARE fullResourcePath&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE fullSchemaPath&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE resourceType&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE tableName&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE procedureName&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE sep&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;,&apos;;
&#x9;DECLARE errStatus &#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR;&#x9;&#x9;-- SUCCESS OR FAILED
&#x9;DECLARE errMessage &#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;&#x9;-- Error message if errStatus=FAILED
&#x9;DECLARE introspectionResult &#x9;&#x9;LONGVARCHAR;&#x9;-- A line (CHR(10)) delimited string of results.  Use introspectResourcesResultCursor() to  return a cursor.
&#x9;DECLARE dataSourceType&#x9;&#x9;&#x9;&#x9;VARCHAR;&#x9;&#x9;-- The type of data source that was introspected.
&#x9;DECLARE dataSourceSubtype &#x9;&#x9;&#x9;VARCHAR;&#x9;&#x9;-- The subtype of data source that was introspected.


&#x9;/********************************
&#x9; * INITIALIZE PATHS
&#x9; ********************************/
&#x9;SET sqlScript = &apos;&apos;;

&#x9;-- Get the datasource path, catalog and schema name to construct the path dynamically
&#x9;CALL /shared/ASAssets/Utilities/string/getConstantV2(globalConstantsPath, &apos;EXECUTE_DDL_PACKAGE_PATH&apos;, 1, executeDDLPackagePath);
&#x9;CALL /shared/ASAssets/Utilities/string/getConstantV2(globalConstantsPath, &apos;DATASOURCE_PATH&apos;, 1, queueDatasourcePath);
&#x9;CALL /shared/ASAssets/Utilities/string/getConstantV2(globalConstantsPath, &apos;CATALOG_NAME&apos;, 1, queueCatalogName);
&#x9;CALL /shared/ASAssets/Utilities/string/getConstantV2(globalConstantsPath, &apos;SCHEMA_NAME&apos;, 1, queueSchemaName);
&#x9;CALL /shared/ASAssets/Utilities/string/getConstantV2(globalConstantsPath, &apos;TABLESPACE_FILEGROUP&apos;, 1, tablespaceName);
&#x9;CALL /shared/ASAssets/Utilities/string/getConstantV2(globalConstantsPath, &apos;DYNAMIC_FILE_QUEUE&apos;, 1, queueTableDynamicFileQueue);
&#x9;CALL /shared/ASAssets/Utilities/string/getConstantV2(globalConstantsPath, &apos;DYNAMIC_FILE_EMAIL&apos;, 1, queueTableDynamicFileEmail);
&#x9;CALL /shared/ASAssets/Utilities/string/getConstantV2(globalConstantsPath, &apos;DYNAMIC_FILE_SEQ&apos;, 1, queueSequenceDynamicFile);
&#x9;-- Validate the constants
&#x9;IF (queueDatasourcePath IS NULL OR LENGTH(TRIM(queueDatasourcePath)) = 0) THEN
&#x9;&#x9;RAISE ex VALUE &apos;The data source path name may not be null or empty:  &apos;||globalConstantsPath||&apos;.DATASOURCE_PATH&apos;;
&#x9;END IF;
&#x9;IF (queueSchemaName IS NULL OR LENGTH(TRIM(queueSchemaName)) = 0) THEN
&#x9;&#x9;RAISE ex VALUE &apos;The schema name may not be null or empty:  &apos;||globalConstantsPath||&apos;.SCHEMA_NAME&apos;;
&#x9;END IF;
&#x9;IF (queueCatalogName IS NULL OR LENGTH(TRIM(queueCatalogName)) = 0) THEN
&#x9;&#x9;SET queueCatalogNameTemp = &apos;&apos;;
&#x9;ELSE
&#x9;&#x9;SET queueCatalogNameTemp = &apos;/&apos;||queueCatalogName;
&#x9;END IF;
&#x9;IF (queueTableDynamicFileQueue IS NULL OR LENGTH(TRIM(queueTableDynamicFileQueue)) = 0) THEN
&#x9;&#x9;RAISE ex VALUE &apos;The table name may not be null or empty:  &apos;||globalConstantsPath||&apos;.DYNAMIC_FILE_QUEUE&apos;;
&#x9;END IF;
&#x9;IF (queueTableDynamicFileEmail IS NULL OR LENGTH(TRIM(queueTableDynamicFileEmail)) = 0) THEN
&#x9;&#x9;RAISE ex VALUE &apos;The table name may not be null or empty:  &apos;||globalConstantsPath||&apos;.DYNAMIC_FILE_EMAIL&apos;;
&#x9;END IF;
&#x9;IF (queueSequenceDynamicFile IS NULL OR LENGTH(TRIM(queueSequenceDynamicFile)) = 0) THEN
&#x9;&#x9;RAISE ex VALUE &apos;The sequence name may not be null or empty:  &apos;||globalConstantsPath||&apos;.DYNAMIC_FILE_SEQ&apos;;
&#x9;END IF;
&#x9;SET fullSchemaPath = queueDatasourcePath || queueCatalogNameTemp || &apos;/&apos;||queueSchemaName;

&#x9;-- Get the data source type in order to determine the syntax for the sequence
&#x9;FOR r AS SELECT dataSourceType from /shared/ASAssets/Utilities/repository/getBasicResourceCursor(queueDatasourcePath, &apos;DATA_SOURCE&apos;) DO
&#x9;&#x9;SET queueDataSourceType = r.dataSourceType;
&#x9;END FOR;
&#x9;-- queueDataSourceType=Oracle 11g (Thin Driver)
&#x9;IF (INSTR(LOWER(REPLACE(queueDataSourceType,&apos; &apos;,&apos;&apos;)), &apos;oracle&apos;) &gt; 0) THEN
&#x9;&#x9;SET finalResultQuery = &apos;SELECT 1 FROM DUAL&apos;;
&#x9;&#x9;SET datasourceType = &apos;oracle&apos;;
&#x9;&#x9;IF (tablespaceName IS NOT NULL and LENGTH(tablespaceName) &gt; 0) THEN
&#x9;&#x9;&#x9;SET tablespaceStatement = &apos;TABLESPACE &quot;&apos;||tablespaceName||&apos;&quot;&apos;;
&#x9;&#x9;END IF;
&#x9;END IF;
&#x9;-- queueDataSourceType=Microsoft SQL Server 2012
&#x9;IF (INSTR(LOWER(REPLACE(queueDataSourceType,&apos; &apos;,&apos;&apos;)), &apos;sqlserver&apos;) &gt; 0) THEN
&#x9;&#x9;SET finalResultQuery = &apos;SELECT 1&apos;;
&#x9;&#x9;SET datasourceType = &apos;sqlserver&apos;;
&#x9;&#x9;IF (tablespaceName IS NOT NULL and LENGTH(tablespaceName) &gt; 0) THEN
&#x9;&#x9;&#x9;SET tablespaceStatement = &apos;ON &quot;&apos;||tablespaceName||&apos;&quot;&apos;;
&#x9;&#x9;END IF;
&#x9;END IF;
&#x9;-- queueDataSourceType=PostgreSQL 9.1
&#x9;IF (INSTR(LOWER(REPLACE(queueDataSourceType,&apos; &apos;,&apos;&apos;)), &apos;postgre&apos;) &gt; 0) THEN
&#x9;&#x9;SET finalResultQuery = &apos;SELECT 1&apos;;
&#x9;&#x9;SET datasourceType = &apos;postgres&apos;;
&#x9;&#x9;IF (tablespaceName IS NOT NULL and LENGTH(tablespaceName) &gt; 0) THEN
&#x9;&#x9;&#x9;SET tablespaceStatement = &apos;TABLESPACE &quot;&apos;||tablespaceName||&apos;&quot;&apos;;
&#x9;&#x9;END IF;
&#x9;END IF;
&#x9;-- Rebind the package procedure &quot;00_ExecuteDDL&quot; datasource path
&#x9;FOR r AS SELECT * from /shared/ASAssets/Utilities/repository/getUsedResourcesCursor(executeDDLPackagePath, &apos;PROCEDURE&apos;) DO
&#x9;&#x9;IF (r.resourceType = &apos;DATA_SOURCE&apos;) THEN
&#x9;&#x9;&#x9;SET packageDatasourcePath = r.resourcePath;
&#x9;&#x9;END IF;
&#x9;END FOR;
&#x9;IF (packageDatasourcePath IS NOT NULL AND packageDatasourcePath &lt;&gt; queueDatasourcePath) THEN
&#x9;&#x9;SET rebindVector = VECTOR[(packageDatasourcePath, &apos;DATA_SOURCE&apos;, queueDatasourcePath, &apos;DATA_SOURCE&apos; ) ];

&#x9;&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/repository/rebindResource(executeDDLPackagePath, &apos;PROCEDURE&apos;, rebindVector, success, createResponse, faultResponse);
&#x9;&#x9;END;
&#x9;END IF;

/************************************************************************************************
 * DROP all resources first
 ************************************************************************************************/
&#x9;IF (datasourceType = &apos;oracle&apos;) THEN
&#x9;&#x9;SET sqlVect = VECTOR[
&#x9;&#x9;&#x9;(&apos;DROP SEQUENCE &apos;||queueSequenceDynamicFile||&apos;&apos;, &#x9;&#x9;&apos;DROP SEQUENCE &quot;{0}&quot;.&quot;&apos;||queueSequenceDynamicFile||&apos;&quot;&apos;),
&#x9;&#x9;&#x9;(&apos;DROP TABLE &apos;||queueTableDynamicFileQueue||&apos;&apos;, &#x9;&#x9;&apos;DROP TABLE &quot;{0}&quot;.&quot;&apos;||queueTableDynamicFileQueue||&apos;&quot;&apos;),
&#x9;&#x9;&#x9;(&apos;DROP TABLE &apos;||queueTableDynamicFileEmail||&apos;&apos;, &#x9;&#x9;&apos;DROP TABLE &quot;{0}&quot;.&quot;&apos;||queueTableDynamicFileEmail||&apos;&quot;&apos;)
&#x9;&#x9;];
&#x9;END IF;

&#x9;IF (datasourceType = &apos;sqlserver&apos;) THEN
&#x9;&#x9;SET sqlVect = VECTOR[
&#x9;&#x9;&#x9;(&apos;DROP SEQUENCE &apos;||queueSequenceDynamicFile||&apos;&apos;, &#x9;&#x9;&apos;DROP SEQUENCE &quot;{0}&quot;.&quot;&apos;||queueSequenceDynamicFile||&apos;&quot;&apos;),
&#x9;&#x9;&#x9;(&apos;DROP TABLE &apos;||queueTableDynamicFileQueue||&apos;&apos;, &#x9;&#x9;&apos;DROP TABLE &quot;{0}&quot;.&quot;&apos;||queueTableDynamicFileQueue||&apos;&quot;&apos;),
&#x9;&#x9;&#x9;(&apos;DROP TABLE &apos;||queueTableDynamicFileEmail||&apos;&apos;, &#x9;&#x9;&apos;DROP TABLE &quot;{0}&quot;.&quot;&apos;||queueTableDynamicFileEmail||&apos;&quot;&apos;)
&#x9;&#x9;];
&#x9;END IF;

&#x9;IF (datasourceType = &apos;postgres&apos;) THEN
&#x9;&#x9;SET sqlVect = VECTOR[
&#x9;&#x9;&#x9;(&apos;DROP SEQUENCE &apos;||queueSequenceDynamicFile||&apos;&apos;, &#x9;&#x9;&apos;DROP SEQUENCE IF EXISTS &quot;{0}&quot;.&quot;&apos;||queueSequenceDynamicFile||&apos;&quot;&apos;),
&#x9;&#x9;&#x9;(&apos;DROP TABLE &apos;||queueTableDynamicFileQueue||&apos;&apos;, &#x9;&#x9;&apos;DROP TABLE IF EXISTS &quot;{0}&quot;.&quot;&apos;||queueTableDynamicFileQueue||&apos;&quot; CASCADE&apos;),
&#x9;&#x9;&#x9;(&apos;DROP TABLE &apos;||queueTableDynamicFileEmail||&apos;&apos;, &#x9;&#x9;&apos;DROP TABLE IF EXISTS &quot;{0}&quot;.&quot;&apos;||queueTableDynamicFileEmail||&apos;&quot; CASCADE&apos;)
&#x9;&#x9;];
&#x9;END IF;
&#x9;SET vectorCount = CARDINALITY(sqlVect);

/************************************************************************************************
 * CREATE DYNAMIC_FILE_SEQ
 ************************************************************************************************/
&#x9;-- This is the sequence generator for processing &quot;Dynamic File Framework&quot; requests.
&#x9;IF (datasourceType = &apos;oracle&apos;) THEN
&#x9;&#x9;SET sqlStatement = &apos;CREATE SEQUENCE &quot;{0}&quot;.&quot;&apos;||queueSequenceDynamicFile||&apos;&quot; START WITH 1 NOCYCLE NOCACHE NOORDER&apos;;
&#x9;END IF;

&#x9;IF (datasourceType = &apos;sqlserver&apos;) THEN
&#x9;&#x9;SET sqlStatement = &apos;CREATE SEQUENCE &quot;{0}&quot;.&quot;&apos;||queueSequenceDynamicFile||&apos;&quot; START WITH 1 NO CACHE NO CYCLE&apos;;
&#x9;END IF;

&#x9;IF (datasourceType = &apos;postgres&apos;) THEN
&#x9;&#x9;SET sqlStatement = &apos;CREATE SEQUENCE &quot;{0}&quot;.&quot;&apos;||queueSequenceDynamicFile||&apos;&quot; START WITH 1 NO CYCLE&apos;;
&#x9;END IF;

&#x9;SET vectorCount = vectorCount + 1;
&#x9;SET sqlVect = EXTEND(sqlVect, 1);
&#x9;SET sqlVect[vectorCount].cursType = &apos;CREATE SEQUENCE &apos;||queueSequenceDynamicFile;
&#x9;SET sqlVect[vectorCount].sqlStatement = sqlStatement;

/************************************************************************************************
 * CREATE DYNAMIC_FILE_QUEUE
 ************************************************************************************************/
&#x9;-- This table is used to provide a queue for processing &quot;Dynamic File Framework&quot; requests.
&#x9;IF (datasourceType = &apos;oracle&apos;) THEN
&#x9;&#x9;SET sqlStatement = 
&apos;CREATE TABLE &quot;{0}&quot;.&quot;&apos;||queueTableDynamicFileQueue||&apos;&quot; (
  &quot;REQUEST_ID&quot;             NUMBER(19),
  &quot;REQUEST_DATE_START&quot;     TIMESTAMP(9),
  &quot;REQUEST_DATE_END&quot;       TIMESTAMP(9),
  &quot;ORGANIZATION&quot;           VARCHAR2(50 BYTE),
  &quot;PROJECT_NAME&quot;           VARCHAR2(50 BYTE),
  &quot;SUBPROJECT_NAME&quot;        VARCHAR2(50 BYTE),
  &quot;ACTION_ORIGINATOR&quot;      VARCHAR2(50 BYTE),
  &quot;ACTION_TYPE&quot;            VARCHAR2(1 BYTE),    --A=ADD, R=REMOVE, C=CLEANUP
  &quot;STATUS&quot;                 VARCHAR2(100 BYTE),
  &quot;MESSAGE&quot;                VARCHAR2(4000 BYTE),
  &quot;EMAIL_ERROR&quot;            VARCHAR2(4000 BYTE),
  &quot;REQUEST_FILE_NAME&quot;      VARCHAR2(255 BYTE),
  &quot;REQUEST_USER_NAME&quot;      VARCHAR2(255 BYTE),
  &quot;REQUEST_DOMAIN_NAME&quot;    VARCHAR2(255 BYTE),
  &quot;FILE_NAME&quot;              VARCHAR2(255 BYTE),
  &quot;PROXY_USER_NAME&quot;        VARCHAR2(255 BYTE),
  &quot;PROXY_USER_EMAIL&quot;       VARCHAR2(4000 BYTE),
  &quot;ALLOW_NULL_FILE_NAME&quot;   NUMBER(9,0),
  &quot;DATA_SOURCE_PATH&quot;       VARCHAR2(4000 BYTE), -- layer is required
  &quot;FORMATTING_LAYER_PATH&quot;  VARCHAR2(4000 BYTE), -- layer is required
  &quot;BUSINESS_LAYER_PATH&quot;    VARCHAR2(4000 BYTE), -- if null then do not create
  &quot;APPLICATION_LAYER_PATH&quot; VARCHAR2(4000 BYTE), -- if null then do not create
  &quot;PUBLISHED_SCHEMA_PATH&quot;  VARCHAR2(4000 BYTE), -- layer is required
  &quot;PUBLISHED_DATABASE&quot;     VARCHAR2(255 BYTE),  -- published database name
  &quot;CONSTANTS_PATH&quot;         VARCHAR2(4000 BYTE), -- path to constants file
  &quot;RETENTION_POLICY_DAYS&quot;  NUMBER(9,0)&#x9;&#x9;&#x9;-- The number of days to allow a file and views to be retained.
   ) &apos;||tablespaceStatement||&apos;
   RESULT_CACHE (MODE DEFAULT)  PCTUSED 0  PCTFREE 10  INITRANS 1  MAXTRANS 255
   STORAGE (INITIAL 64K  NEXT 1M  MAXSIZE UNLIMITED  MINEXTENTS 1  MAXEXTENTS UNLIMITED  PCTINCREASE 0
            BUFFER_POOL DEFAULT  FLASH_CACHE DEFAULT  CELL_FLASH_CACHE DEFAULT)
   LOGGING NOCOMPRESS MONITORING&apos;;
&#x9;END IF;

&#x9;IF (datasourceType = &apos;sqlserver&apos;) THEN
&#x9;&#x9;SET sqlStatement = 
&apos;CREATE TABLE &quot;{0}&quot;.&quot;&apos;||queueTableDynamicFileQueue||&apos;&quot; (
  &quot;REQUEST_ID&quot;             NUMERIC(19),
  &quot;REQUEST_DATE_START&quot;     DATETIME2(3),
  &quot;REQUEST_DATE_END&quot;       DATETIME2(3),
  &quot;ORGANIZATION&quot;           VARCHAR(50),
  &quot;PROJECT_NAME&quot;           VARCHAR(50),
  &quot;SUBPROJECT_NAME&quot;        VARCHAR(50),
  &quot;ACTION_ORIGINATOR&quot;      VARCHAR(50),
  &quot;ACTION_TYPE&quot;            VARCHAR(1),    --A=ADD, R=REMOVE, C=CLEANUP
  &quot;STATUS&quot;                 VARCHAR(100),
  &quot;MESSAGE&quot;                VARCHAR(4000),
  &quot;EMAIL_ERROR&quot;            VARCHAR(4000),
  &quot;REQUEST_FILE_NAME&quot;      VARCHAR(255),
  &quot;REQUEST_USER_NAME&quot;      VARCHAR(255),
  &quot;REQUEST_DOMAIN_NAME&quot;    VARCHAR(255),
  &quot;FILE_NAME&quot;              VARCHAR(255),
  &quot;PROXY_USER_NAME&quot;        VARCHAR(255),
  &quot;PROXY_USER_EMAIL&quot;       VARCHAR(4000),
  &quot;ALLOW_NULL_FILE_NAME&quot;   NUMERIC(9,0),
  &quot;DATA_SOURCE_PATH&quot;       VARCHAR(4000), -- layer is required
  &quot;FORMATTING_LAYER_PATH&quot;  VARCHAR(4000), -- layer is required
  &quot;BUSINESS_LAYER_PATH&quot;    VARCHAR(4000), -- if null then do not create
  &quot;APPLICATION_LAYER_PATH&quot; VARCHAR(4000), -- if null then do not create
  &quot;PUBLISHED_SCHEMA_PATH&quot;  VARCHAR(4000), -- layer is required
  &quot;PUBLISHED_DATABASE&quot;     VARCHAR(255),  -- published database name
  &quot;CONSTANTS_PATH&quot;         VARCHAR(4000), -- path to constants file
  &quot;RETENTION_POLICY_DAYS&quot;  NUMERIC(9,0)&#x9;  -- The number of days to allow a file and views to be retained.
) &apos;;
&#x9;END IF;

&#x9;IF (datasourceType = &apos;postgres&apos;) THEN
&#x9;&#x9;SET sqlStatement = 
&apos;CREATE TABLE &quot;{0}&quot;.&quot;&apos;||queueTableDynamicFileQueue||&apos;&quot; (
  &quot;REQUEST_ID&quot;             NUMERIC(19,0),
  &quot;REQUEST_DATE_START&quot;     TIMESTAMP(9),
  &quot;REQUEST_DATE_END&quot;       TIMESTAMP(9),
  &quot;ORGANIZATION&quot;           VARCHAR(50),
  &quot;PROJECT_NAME&quot;           VARCHAR(50),
  &quot;SUBPROJECT_NAME&quot;        VARCHAR(50),
  &quot;ACTION_ORIGINATOR&quot;      VARCHAR(50),
  &quot;ACTION_TYPE&quot;            VARCHAR(1),    --A=ADD, R=REMOVE, C=CLEANUP
  &quot;STATUS&quot;                 VARCHAR(100),
  &quot;MESSAGE&quot;                VARCHAR(4000),
  &quot;EMAIL_ERROR&quot;            VARCHAR(4000),
  &quot;REQUEST_FILE_NAME&quot;      VARCHAR(255),
  &quot;REQUEST_USER_NAME&quot;      VARCHAR(255),
  &quot;REQUEST_DOMAIN_NAME&quot;    VARCHAR(255),
  &quot;FILE_NAME&quot;              VARCHAR(255),
  &quot;PROXY_USER_NAME&quot;        VARCHAR(255),
  &quot;PROXY_USER_EMAIL&quot;       VARCHAR(4000),
  &quot;ALLOW_NULL_FILE_NAME&quot;   NUMERIC(9,0),
  &quot;DATA_SOURCE_PATH&quot;       VARCHAR(4000), -- layer is required
  &quot;FORMATTING_LAYER_PATH&quot;  VARCHAR(4000), -- layer is required
  &quot;BUSINESS_LAYER_PATH&quot;    VARCHAR(4000), -- if null then do not create
  &quot;APPLICATION_LAYER_PATH&quot; VARCHAR(4000), -- if null then do not create
  &quot;PUBLISHED_SCHEMA_PATH&quot;  VARCHAR(4000), -- layer is required
  &quot;PUBLISHED_DATABASE&quot;     VARCHAR(255),  -- published database name
  &quot;CONSTANTS_PATH&quot;         VARCHAR(4000), -- path to constants file
  &quot;RETENTION_POLICY_DAYS&quot;  NUMERIC(9,0)&#x9;  -- The number of days to allow a file and views to be retained.
) &apos;;
&#x9;END IF;

&#x9;SET vectorCount = vectorCount + 1;
&#x9;SET sqlVect = EXTEND(sqlVect, 1);
&#x9;SET sqlVect[vectorCount].cursType = &apos;CREATE TABLE &apos;||queueTableDynamicFileQueue;
&#x9;SET sqlVect[vectorCount].sqlStatement = sqlStatement;


/************************************************************************************************
 * CREATE DYNAMIC_FILE_EMAIL
 ************************************************************************************************/
&#x9;-- This table is used to provide a table to track username emails &quot;Dynamic File Framework&quot;.
&#x9;IF (datasourceType = &apos;oracle&apos;) THEN
&#x9;&#x9;SET sqlStatement = 
&apos;CREATE TABLE &quot;{0}&quot;.&quot;&apos;||queueTableDynamicFileEmail||&apos;&quot; (
  &quot;USER_NAME&quot;        VARCHAR2(255 BYTE),
  &quot;USER_EMAIL&quot;       VARCHAR2(4000 BYTE)
   ) &apos;||tablespaceStatement||&apos;
   RESULT_CACHE (MODE DEFAULT)  PCTUSED 0  PCTFREE 10  INITRANS 1  MAXTRANS 255
   STORAGE (INITIAL 64K  NEXT 1M  MAXSIZE UNLIMITED  MINEXTENTS 1  MAXEXTENTS UNLIMITED  PCTINCREASE 0
            BUFFER_POOL DEFAULT  FLASH_CACHE DEFAULT  CELL_FLASH_CACHE DEFAULT)
   LOGGING NOCOMPRESS MONITORING&apos;;
&#x9;END IF;

&#x9;IF (datasourceType = &apos;sqlserver&apos;) THEN
&#x9;&#x9;SET sqlStatement = 
&apos;CREATE TABLE &quot;{0}&quot;.&quot;&apos;||queueTableDynamicFileEmail||&apos;&quot; (
  &quot;USER_NAME&quot;        VARCHAR(255),
  &quot;USER_EMAIL&quot;       VARCHAR(4000)
   ) &apos;;
&#x9;END IF;

&#x9;IF (datasourceType = &apos;postgres&apos;) THEN
&#x9;&#x9;SET sqlStatement = 
&apos;CREATE TABLE &quot;{0}&quot;.&quot;&apos;||queueTableDynamicFileEmail||&apos;&quot; (
  &quot;USER_NAME&quot;        VARCHAR(255),
  &quot;USER_EMAIL&quot;       VARCHAR(4000)
   ) &apos;;
&#x9;END IF;

&#x9;SET vectorCount = vectorCount + 1;
&#x9;SET sqlVect = EXTEND(sqlVect, 1);
&#x9;SET sqlVect[vectorCount].cursType = &apos;CREATE TABLE &apos;||queueTableDynamicFileEmail;
&#x9;SET sqlVect[vectorCount].sqlStatement = sqlStatement;


&#x9;/***************************************************
&#x9; * PROCESS the sqlStatements
&#x9; ***************************************************/
&#x9;SET sqlScript = &apos;&apos;;
&#x9;SET i = 1;
&#x9;WHILE (i &lt;= CARDINALITY(sqlVect)) DO
&#x9;&#x9;SET sqlRow = sqlVect[i];
&#x9;&#x9;IF  (sqlRow.cursType LIKE &apos;DROP%&apos; OR
&#x9;&#x9;&#x9; sqlRow.cursType LIKE &apos;CREATE%&apos; ) THEN
&#x9;&#x9;&#x9;-- Replace the {0} with the dataSourceSchemaName value
&#x9;&#x9;&#x9;SET sqlRow.sqlStatement = REPLACE(sqlRow.sqlStatement, &apos;{0}&apos;, queueSchemaName)||&apos;; ;&apos;||CHR(10);
&#x9;&#x9;&#x9;SET sqlRow.sqlStatement = sqlRow.sqlStatement || finalResultQuery;&#x9;--&apos;SELECT 1 FROM DUAL&apos;

&#x9;&#x9;&#x9;CALL PRINT(&apos;-- &apos;||i||&apos;:-----------------------------------------------------------------------------------------------&apos;);
&#x9;&#x9;&#x9;CALL PRINT(sqlRow.sqlStatement||&apos;; ;&apos;);
&#x9;&#x9;&#x9;SET sqlScript = sqlScript || CHR(10) || TRIM(sqlRow.sqlStatement)||&apos;; ;&apos;||CHR(10);

&#x9;&#x9;&#x9;IF (executeDDL IS NOT NULL and UPPER(executeDDL) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;-- If CREATE DDL then createResources must be = &apos;Y&apos;..  If DROP DDL then dropResources must be = &apos;Y&apos;.
&#x9;&#x9;&#x9;&#x9;IF ((sqlRow.cursType LIKE &apos;CREATE%&apos; AND createResources IS NOT NULL AND UPPER(createResources) = &apos;Y&apos;) OR
&#x9;&#x9;&#x9;&#x9;&#x9;(sqlRow.cursType LIKE &apos;DROP%&apos; AND dropResources IS NOT NULL AND UPPER(dropResources) = &apos;Y&apos;)) THEN

&#x9;&#x9;&#x9;&#x9;&#x9;-- Initialize the result
&#x9;&#x9;&#x9;&#x9;&#x9;SET status = &apos;PASS&apos;;

&#x9;&#x9;&#x9;&#x9;&#x9;-- Create/Drop the resource
&#x9;&#x9;&#x9;&#x9;&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;OPEN curs FOR SELECT * FROM /shared/ASAssets/BestPractices_v81/DynamicFileFramework/&quot;00_ExecuteDDL&quot;(sqlRow.sqlStatement);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FETCH curs INTO cursResult;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CLOSE curs;
&#x9;&#x9;&#x9;&#x9;&#x9;EXCEPTION
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(sqlRow.cursType||&apos; EXCEPTION=&apos;||CAST(CURRENT_EXCEPTION.TRACE AS LONGVARCHAR));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET cursResult = -1;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET status = &apos;FAIL&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;END;

&#x9;&#x9;&#x9;&#x9;&#x9;-- Delete the CIS TABLE resource
&#x9;&#x9;&#x9;&#x9;&#x9;IF (sqlRow.cursType LIKE &apos;DROP%&apos; AND dropResources IS NOT NULL AND UPPER(dropResources) = &apos;Y&apos; AND 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(INSTR(UPPER(sqlRow.cursType), &apos;DROP TABLE&apos;) &gt; 0 OR INSTR(UPPER(sqlRow.cursType), &apos;DROP PROCEDURE&apos;) &gt; 0) ) THEN

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (INSTR(UPPER(sqlRow.cursType), &apos;DROP TABLE&apos;) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET fullResourcePath = fullSchemaPath || &apos;/&apos; || TRIM(REPLACE(UPPER(sqlRow.cursType), &apos;DROP TABLE&apos;, &apos;&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET resourceType = &apos;TABLE&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (INSTR(UPPER(sqlRow.cursType), &apos;DROP PROCEDURE&apos;) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET fullResourcePath = fullSchemaPath || &apos;/&apos; || TRIM(REPLACE(UPPER(sqlRow.cursType), &apos;DROP PROCEDURE&apos;, &apos;&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET resourceType = &apos;PROCEDURE&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /lib/resource/ResourceExists(fullResourcePath, resourceType, null, resExists);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(&apos;DROP: Test resource exists.  resExists=[&apos;||CAST(resExists AS VARCHAR)||&apos;]  resourceType=[&apos;||NVL(resourceType,&apos;null&apos;)||&apos;]  fullResourcePath=[&apos;||NVL(fullResourcePath,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (resExists) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(&apos;Destroy resourceType=[&apos;||resourceType||&apos;]  fullResourcePath=[&apos;||fullResourcePath||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/repository/destroyResource(fullResourcePath, null, resourceType, success, createResponse, faultResponse);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;EXCEPTION
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(sqlRow.cursType||&apos; EXCEPTION=&apos;||CAST(CURRENT_EXCEPTION.TRACE AS LONGVARCHAR));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET cursResult = -1;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET status = &apos;FAIL&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;-- Introspect the CIS TABLE or PROCEDURE resource
&#x9;&#x9;&#x9;&#x9;&#x9;IF (sqlRow.cursType LIKE &apos;CREATE%&apos; AND dropResources IS NOT NULL AND UPPER(dropResources) = &apos;Y&apos; AND 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(INSTR(UPPER(sqlRow.cursType), &apos;CREATE TABLE&apos;) &gt; 0 OR INSTR(UPPER(sqlRow.cursType), &apos;CREATE PROCEDURE&apos;) &gt; 0) ) THEN

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET tableName = null;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET procedureName = null;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET fullResourcePath = null;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (INSTR(UPPER(sqlRow.cursType), &apos;CREATE TABLE&apos;) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET tableName = TRIM(REPLACE(UPPER(sqlRow.cursType), &apos;CREATE TABLE&apos;, &apos;&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET resourceType = &apos;TABLE&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET fullResourcePath = fullSchemaPath || &apos;/&apos; || tableName;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (INSTR(UPPER(sqlRow.cursType), &apos;CREATE PROCEDURE&apos;) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET procedureName = TRIM(REPLACE(UPPER(sqlRow.cursType), &apos;CREATE PROCEDURE&apos;, &apos;&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET resourceType = &apos;PROCEDURE&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET fullResourcePath = fullSchemaPath || &apos;/&apos; || procedureName;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /lib/resource/ResourceExists(fullResourcePath, resourceType, null, resExists);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(&apos;CREATE: Test resource exists.  resExists=[&apos;||CAST(resExists AS VARCHAR)||&apos;]  resourceType=[&apos;||NVL(resourceType,&apos;null&apos;)||&apos;]  fullResourcePath=[&apos;||NVL(fullResourcePath,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (NOT resExists AND (tableName IS NOT NULL OR procedureName IS NOT NULL)) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(&apos;INTROSPECT: queueDatasourcePath=[&apos;||queueDatasourcePath||&apos;]  queueCatalogName=[&apos;||NVL(queueCatalogName,&apos;null&apos;)||&apos;]&apos;||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;  queueSchemaName=[&apos;||NVL(queueSchemaName,&apos;null&apos;)||&apos;]&apos;||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;  tableName=[&apos;||NVL(tableName,&apos;null&apos;)||&apos;]  procedureName=[&apos;||NVL(procedureName,&apos;null&apos;)||&apos;]&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/repository/introspectResources(
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;queueDatasourcePath,&#x9;&#x9;-- mandatory.   Full path to datasource
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;queueCatalogName,&#x9;&#x9;&#x9;-- optional (null) - Database catalog Name if applicable
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;queueSchemaName,&#x9;&#x9;&#x9;-- mandatory - Database schema name.  Overrides the schema pattern.  When schemaPatterns is null the schemaName must be provided.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;null,&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- optional (null).  Comma separated list of patterns such as D%, E%, F%.    Introspect all tables starting with D, E and F.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;tableName,&#x9;&#x9;&#x9;&#x9;&#x9;-- optional.  NULL=no specified table list OR one or more comma separated tables to introspect.  When NULL, all tables for the schema are introspected.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;null,&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- comma separated list of patterns such as D%, E%, F%.    Introspect all new procedures starting with D, E and F.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;procedureName, &#x9;&#x9;&#x9;&#x9;-- NULL=no specified procedure list OR 1 or more comma separated procedures to introspect.  When NULL, all procedures are introspected.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sep,&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Default=,  The separator used to separate lists for the input parameters: tableNames and procedureNames
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;debug,&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Y=debug on, N=debug off, null=defaultValues.EnableDebugging1
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;errStatus,&#x9;&#x9;&#x9;&#x9;&#x9;-- SUCCESS or FAILED
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;errMessage,&#x9;&#x9;&#x9;&#x9;&#x9;-- Error message if errStatus=FAILED, otherwise null
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;introspectionResult,&#x9;&#x9;-- A line (CHR(10)) delimited string of results.  Use introspectResourcesResultCursor() to  return a cursor.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;dataSourceType,&#x9;&#x9;&#x9;&#x9;-- The type of data source that was introspected.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;dataSourceSubtype&#x9;&#x9;&#x9;-- The subtype of data source that was introspected.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;EXCEPTION
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(sqlRow.cursType||&apos; EXCEPTION=&apos;||CAST(CURRENT_EXCEPTION.TRACE AS LONGVARCHAR));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET cursResult = -1;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET status = &apos;FAIL&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;SET status = &apos;SKIP&apos;;
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;SET status = &apos;SKIP&apos;;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;SET status = &apos;SKIP&apos;;
&#x9;&#x9;END IF;
&#x9;&#x9;IF (cursCombinedResult IS NULL) THEN
&#x9;&#x9;&#x9;SET cursCombinedResult = &apos;&apos;;
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;SET cursCombinedResult = cursCombinedResult || &apos;,  &apos;||CHR(10);
&#x9;&#x9;END IF;
&#x9;&#x9;SET cursCombinedResult = cursCombinedResult ||status||&apos;=&apos;||sqlRow.cursType;
&#x9;&#x9;CALL PRINT(&apos;&apos;);
&#x9;&#x9;SET i = i + 1;
&#x9;END WHILE;
END</attribute>
  <attribute name="creationDate" type="LONG">1410976495807</attribute>
  <attribute name="creatorUserDomain" type="STRING">ldap</attribute>
  <attribute name="creatorUserName" type="STRING">zkxl6un</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1564745476781</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">9/375</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">13/393</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">14/471</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/374</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">14/420</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">13/413</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">13/446</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">14/415</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">14/448</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/491</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
  </attribute>
</metadata>