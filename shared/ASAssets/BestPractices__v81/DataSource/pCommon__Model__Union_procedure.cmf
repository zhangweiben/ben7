<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:e931daa6-7fda-456a-badf-4cdb1c228a1a -->
<metadata name="pCommon_Model_Union" path="/shared/ASAssets/BestPractices_v81/DataSource/pCommon_Model_Union" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>&lt;![CDATA[
&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

]]&gt;</annotation>
  <parameters>
    <parameter name="result" direction="OUT" nullable="true">
      <datatype name="CommonModelType" type="TABLE" refId="256">
        <element name="datasourceName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="projectFolderName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="greatGrandParentName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="grandParentName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="parentName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="containerName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="physicalName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="physicalType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="resourceNum">
          <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
        </element>
        <element name="logicalName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="logicalType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="annotation">
          <datatype name="VARCHAR" type="STRING" maxLength="32767"/>
        </element>
        <element name="logicalTransformation">
          <datatype name="VARCHAR" type="STRING" maxLength="1024"/>
        </element>
        <element name="physicalNameEncoded">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
      </datatype>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/shared/ASAssets/BestPractices_v81/DataSource/CommonModelCSVSources/Common_Model_v3_file1.csv" type="TABLE">
    <datatype type="TABLE" refId="256">
      <element name="Data Source">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Project Folder Name">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Great Grandparent Name">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Grandparent Name">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Parent Name">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Container Name">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Physical Name">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Physical Type">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Logical Name">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Logical Type">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Logical Transformation">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Logical Definition">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="System Messages">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="datasourceName">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="projectFolderName">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="greatGrandparentName">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="grandparentName">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="parentName">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="containerName">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="physicalName">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="physicalType">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="logicalName">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="logicalType">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="compositeTransformation">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="annotation">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="blank">
        <datatype type="STRING" maxLength="32768"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/DataSource/CommonModelCSVSources/Common_Model_v3_file2.csv" type="TABLE">
    <datatype type="TABLE" refId="256">
      <element name="Data Source">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Project Folder Name">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Great Grandparent Name">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Grandparent Name">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Parent Name">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Container Name">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Physical Name">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Physical Type">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Logical Name">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Logical Type">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Logical Transformation">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Logical Definition">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="System Messages">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="datasourceName">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="projectFolderName">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="greatGrandparentName">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="grandparentName">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="parentName">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="containerName">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="physicalName">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="physicalType">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="logicalName">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="logicalType">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="compositeTransformation">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="annotation">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="blank">
        <datatype type="STRING" maxLength="32768"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/DataSource/CommonModelCSVSources/Common_Model_v3_file3.csv" type="TABLE">
    <datatype type="TABLE" refId="256">
      <element name="Data Source">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Project Folder Name">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Great Grandparent Name">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Grandparent Name">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Parent Name">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Container Name">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Physical Name">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Physical Type">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Logical Name">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Logical Type">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Logical Transformation">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Logical Definition">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="System Messages">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="datasourceName">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="projectFolderName">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="greatGrandparentName">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="grandparentName">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="parentName">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="containerName">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="physicalName">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="physicalType">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="logicalName">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="logicalType">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="compositeTransformation">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="annotation">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="blank">
        <datatype type="STRING" maxLength="32768"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/DataSource/CommonModelCSVSources/Common_Model_v3_file4_sample_lab.csv" type="TABLE">
    <datatype type="TABLE" refId="256">
      <element name="Data Source">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Project Folder Name">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Great Grandparent Name">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Grandparent Name">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Parent Name">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Container Name">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Physical Name">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Physical Type">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Logical Name">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Logical Type">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Logical Transformation">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Logical Definition">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="System Messages">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="datasourceName">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="projectFolderName">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="greatGrandparentName">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="grandparentName">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="parentName">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="containerName">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="physicalName">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="physicalType">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="logicalName">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="logicalType">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="compositeTransformation">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="annotation">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="blank">
        <datatype type="STRING" maxLength="32768"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/DataSource/CommonModelExcelSources/Common_Model_v3_file1.xlsx/Sheet1" type="TABLE">
    <datatype type="TABLE" refId="256">
      <element name="Data Source">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Project Folder Name">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Great Grandparent Name">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Grandparent Name">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Parent Name">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Container Name">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Physical Name">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Physical Type">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Logical Name">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Logical Type">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Logical Transformation">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Logical Definition">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="System Messages">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="datasourceName">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="projectFolderName">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="greatGrandparentName">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="grandparentName">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="parentName">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="containerName">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="physicalName">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="physicalType">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="logicalName">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="logicalType">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="compositeTransformation">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="annotation">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="blank">
        <datatype type="STRING" maxLength="32767"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/DataSource/CommonModelExcelSources/Common_Model_v3_file2.xlsx/Sheet1" type="TABLE">
    <datatype type="TABLE" refId="256">
      <element name="Data Source">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Project Folder Name">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Great Grandparent Name">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Grandparent Name">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Parent Name">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Container Name">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Physical Name">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Physical Type">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Logical Name">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Logical Type">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Logical Transformation">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Logical Definition">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="System Messages">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="datasourceName">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="projectFolderName">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="greatGrandparentName">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="grandparentName">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="parentName">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="containerName">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="physicalName">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="physicalType">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="logicalName">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="logicalType">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="compositeTransformation">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="annotation">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="blank">
        <datatype type="STRING" maxLength="32767"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/DataSource/CommonModelExcelSources/Common_Model_v3_file3.xlsx/Sheet1" type="TABLE">
    <datatype type="TABLE" refId="256">
      <element name="Data Source">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Project Folder Name">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Great Grandparent Name">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Grandparent Name">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Parent Name">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Container Name">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Physical Name">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Physical Type">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Logical Name">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Logical Type">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Logical Transformation">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Logical Definition">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="System Messages">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="datasourceName">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="projectFolderName">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="greatGrandparentName">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="grandparentName">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="parentName">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="containerName">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="physicalName">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="physicalType">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="logicalName">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="logicalType">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="compositeTransformation">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="annotation">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="blank">
        <datatype type="STRING" maxLength="32767"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/DataSource/CommonModelExcelSources/Common_Model_v3_file4_sample_lab.xlsx/Sheet1" type="TABLE">
    <datatype type="TABLE" refId="256">
      <element name="Data Source">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Project Folder Name">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Great Grandparent Name">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Grandparent Name">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Parent Name">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Container Name">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Physical Name">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Physical Type">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Logical Name">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Logical Type">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Logical Transformation">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Logical Definition">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="System Messages">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="datasourceName">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="projectFolderName">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="greatGrandparentName">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="grandparentName">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="parentName">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="containerName">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="physicalName">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="physicalType">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="logicalName">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="logicalType">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="compositeTransformation">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="annotation">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="blank">
        <datatype type="STRING" maxLength="32767"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/DataSource/common_model_v3" type="TABLE">
    <datatype type="TABLE" refId="256">
      <element name="ResourceId">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="DataSource">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="ProjectFolderName">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="GreatGrandParentName">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="GrandParentName">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="ParentName">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="ContainerName">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="PhysicalName">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="NativeType">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="LogicalName">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="LogicalType">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="LogicalTransformation">
        <datatype type="STRING" maxLength="1024"/>
      </element>
      <element name="LogicalDefinition">
        <datatype type="STRING" maxLength="32767"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedList" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="codingListType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="codingList" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedString" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inCodingType" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="inEncodingActions" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="codingList" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inModuleNameInvoking" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inDebug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="inStringName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="outString" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/_ProjectMaintenance/defaultValues" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258"></datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* 
&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;CSW Version:&#x9;Reason:
&#x9;11/21/2014&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.2.6&#x9;&#x9;&#x9;Added code to only strip out enclosing double quotes and not if there is a double quote in between as part of the various name fields.

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.
*/
PROCEDURE pCommon_Model_Union(
    OUT result PIPE /shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions.CommonModelType
)
BEGIN
&#x9;DECLARE moduleName&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;pCommon_Model_Union&apos;;
&#x9;DECLARE codingListColumns&#x9;&#x9;VARCHAR(4000);&#x9;-- comma separate list of encoded values
&#x9;-- Get the default value for which common model spreadsheet type to access
&#x9;DECLARE commonModelType&#x9;&#x9;&#x9;VARCHAR DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.commonModelType;
&#x9;DECLARE resourceNameEncoded&#x9;&#x9;VARCHAR;
&#x9;DECLARE PUBLIC TYPE CommonModelType ROW(
        datasourceName &#x9;&#x9;&#x9;&#x9;VARCHAR(255), 
        projectFolderName &#x9;&#x9;&#x9;VARCHAR(255), 
        greatGrandParentName &#x9;&#x9;VARCHAR(255), 
        grandParentName &#x9;&#x9;&#x9;VARCHAR(255), 
        parentName &#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(255), 
        containerName &#x9;&#x9;&#x9;&#x9;VARCHAR(255), 
        physicalName &#x9;&#x9;&#x9;&#x9;VARCHAR(255), 
        physicalType &#x9;&#x9;&#x9;&#x9;VARCHAR(255), 
&#x9;&#x9;resourceNum&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER,
        logicalName &#x9;&#x9;&#x9;&#x9;VARCHAR(255), 
        logicalType &#x9;&#x9;&#x9;&#x9;VARCHAR(255), 
        annotation &#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(32767), 
        logicalTransformation &#x9;&#x9;VARCHAR(1024),
&#x9;&#x9;physicalNameEncoded&#x9;&#x9;&#x9;VARCHAR(255)
        );
&#x9;DECLARE CommonModel&#x9;&#x9;&#x9;&#x9;CommonModelType;
&#x9;DECLARE rnum&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER DEFAULT 0;
&#x9;DECLARE ex&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;EXCEPTION;

&#x9;-- Get the list of encoding values
&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedList(&apos;codingListColumns&apos;, codingListColumns);

&#x9;IF (commonModelType = &apos;EXCEL&apos;) THEN
&#x9;&#x9;/************************************************
&#x9;&#x9; * Read EXCEL spreadsheets (default)
&#x9;&#x9; ************************************************/
        FOR r AS  
            SELECT 
&#x9;&#x9;&#x9;&#x9;-- 2014/11/21 mtinius: added code to only strip out enclosing double quotes and not if there is a double quote in between as part of the datasourceName.
&#x9;&#x9;&#x9;&#x9;CAST(CASE WHEN datasourceName IS NOT NULL AND INSTR(datasourceName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(datasourceName),&apos;&quot;&apos;) = 1 THEN SUBSTR(datasourceName, 2, LENGTH(datasourceName)-2)
&#x9;&#x9;&#x9;&#x9;&#x9; ELSE datasourceName
&#x9;&#x9;&#x9;&#x9;&#x9; END AS VARCHAR(255)) datasourceName,

&#x9;&#x9;&#x9;&#x9;-- 2014/11/21 mtinius: added code to only strip out enclosing double quotes and not if there is a double quote in between as part of the projectFolderName.
&#x9;&#x9;&#x9;&#x9;CAST(CASE WHEN projectFolderName IS NOT NULL AND INSTR(projectFolderName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(projectFolderName),&apos;&quot;&apos;) = 1 THEN SUBSTR(projectFolderName, 2, LENGTH(projectFolderName)-2)
&#x9;&#x9;&#x9;&#x9;&#x9; ELSE projectFolderName
&#x9;&#x9;&#x9;&#x9;&#x9; END AS VARCHAR(255)) projectFolderName,

&#x9;&#x9;&#x9;&#x9;-- 2014/11/21 mtinius: added code to only strip out enclosing double quotes and not if there is a double quote in between as part of the greatGrandParentName.
&#x9;&#x9;&#x9;&#x9;CAST(CASE WHEN greatGrandParentName IS NOT NULL AND INSTR(greatGrandParentName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(greatGrandParentName),&apos;&quot;&apos;) = 1 THEN SUBSTR(greatGrandParentName, 2, LENGTH(greatGrandParentName)-2)
&#x9;&#x9;&#x9;&#x9;&#x9; ELSE greatGrandParentName
&#x9;&#x9;&#x9;&#x9;&#x9; END AS VARCHAR(255)) greatGrandParentName,

&#x9;&#x9;&#x9;&#x9;-- 2014/11/21 mtinius: added code to only strip out enclosing double quotes and not if there is a double quote in between as part of the grandParentName.
&#x9;&#x9;&#x9;&#x9;CAST(CASE WHEN grandParentName IS NOT NULL AND INSTR(grandParentName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(grandParentName),&apos;&quot;&apos;) = 1 THEN SUBSTR(grandParentName, 2, LENGTH(grandParentName)-2)
&#x9;&#x9;&#x9;&#x9;&#x9; ELSE grandParentName
&#x9;&#x9;&#x9;&#x9;&#x9; END AS VARCHAR(255)) grandParentName,

&#x9;&#x9;&#x9;&#x9;-- 2014/11/21 mtinius: added code to only strip out enclosing double quotes and not if there is a double quote in between as part of the parent name.
&#x9;&#x9;&#x9;&#x9;CAST(CASE WHEN parentName IS NOT NULL AND INSTR(parentName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(parentName),&apos;&quot;&apos;) = 1 THEN SUBSTR(parentName, 2, LENGTH(parentName)-2)
&#x9;&#x9;&#x9;&#x9;&#x9; ELSE parentName
&#x9;&#x9;&#x9;&#x9;&#x9; END AS VARCHAR(255)) parentName,

&#x9;&#x9;&#x9;&#x9;-- 2014/11/21 mtinius: added code to only strip out enclosing double quotes and not if there is a double quote in between as part of the container name.
&#x9;&#x9;&#x9;&#x9;CAST(CASE WHEN containerName IS NOT NULL AND INSTR(containerName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(containerName),&apos;&quot;&apos;) = 1 THEN SUBSTR(containerName, 2, LENGTH(containerName)-2)
&#x9;&#x9;&#x9;&#x9;&#x9; ELSE containerName
&#x9;&#x9;&#x9;&#x9;&#x9; END AS VARCHAR(255)) containerName,

&#x9;&#x9;&#x9;&#x9;-- 2014/11/21 mtinius: added code to only strip out enclosing double quotes and not if there is a double quote in between as part of the physical name.
&#x9;&#x9;&#x9;&#x9;CAST(CASE WHEN physicalName IS NOT NULL AND INSTR(physicalName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(physicalName),&apos;&quot;&apos;) = 1 THEN SUBSTR(physicalName, 2, LENGTH(physicalName)-2)
&#x9;&#x9;&#x9;&#x9;&#x9; ELSE physicalName
&#x9;&#x9;&#x9;&#x9;&#x9; END AS VARCHAR(255)) physicalName,

&#x9;&#x9;&#x9;    CAST(physicalType AS VARCHAR(255)) physicalType, 
&#x9;&#x9;&#x9;&#x9;CAST(0 as INTEGER) resourceNum,

&#x9;&#x9;&#x9;&#x9;-- 2014/11/21 mtinius: added code to only strip out enclosing double quotes and not if there is a double quote in between as part of the column name.
&#x9;&#x9;&#x9;&#x9;CAST(CASE WHEN logicalName IS NOT NULL AND INSTR(logicalName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(logicalName),&apos;&quot;&apos;) = 1 THEN SUBSTR(logicalName, 2, LENGTH(logicalName)-2)
&#x9;&#x9;&#x9;&#x9;&#x9; ELSE logicalName
&#x9;&#x9;&#x9;&#x9;&#x9; END AS VARCHAR(255)) logicalName,

&#x9;&#x9;&#x9;    CAST(logicalType AS VARCHAR(255)) logicalType, 
&#x9;&#x9;&#x9;    CAST(annotation AS  VARCHAR(32767)) annotation, 
&#x9;&#x9;&#x9;    CAST(
&#x9;&#x9;&#x9;&#x9;  CASE WHEN logicalType = &apos;TABLE&apos; THEN &apos;&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;   WHEN logicalType = &apos;PROCEDURE&apos; THEN &apos;&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;   ELSE compositeTransformation
&#x9;&#x9;&#x9;&#x9;  END AS VARCHAR(4000)) AS logicalTransformation,
&#x9;&#x9;&#x9;&#x9;physicalName physicalNameEncoded -- original value
&#x9;&#x9;&#x9;FROM 
&#x9;&#x9;&#x9;&#x9;-- UNION of 4 Excel Spreadsheets
&#x9;&#x9;&#x9;&#x9;(((SELECT * FROM /shared/ASAssets/BestPractices_v81/DataSource/CommonModelExcelSources/&quot;Common_Model_v3_file1.xlsx&quot;/Sheet1
&#x9;&#x9;&#x9;&#x9; UNION ALL
&#x9;&#x9;&#x9;&#x9;  SELECT * FROM /shared/ASAssets/BestPractices_v81/DataSource/CommonModelExcelSources/&quot;Common_Model_v3_file2.xlsx&quot;/Sheet1)
&#x9;&#x9;&#x9;&#x9; UNION ALL
&#x9;&#x9;&#x9;&#x9;  SELECT * FROM /shared/ASAssets/BestPractices_v81/DataSource/CommonModelExcelSources/&quot;Common_Model_v3_file3.xlsx&quot;/Sheet1)
&#x9;&#x9;&#x9;&#x9; UNION ALL
&#x9;&#x9;&#x9;&#x9;  SELECT * FROM /shared/ASAssets/BestPractices_v81/DataSource/CommonModelExcelSources/&quot;Common_Model_v3_file4_sample_lab.xlsx&quot;/Sheet1) Common_Model
&#x9;&#x9;&#x9;WHERE logicalName is not null and LENGTH(logicalName) &gt; 0
&#x9;&#x9;DO
&#x9;&#x9;&#x9;set CommonModel = r;
&#x9;&#x9;&#x9;set rnum = rnum + 1;
&#x9;&#x9;&#x9;set CommonModel.resourceNum = rnum;
&#x9;&#x9;&#x9;-- Validate input from Excel
&#x9;&#x9;&#x9;if ( (CommonModel.physicalName is null or LENGTH(CommonModel.physicalName) = 0) and (CommonModel.logicalType is null or LENGTH(CommonModel.logicalType) = 0) ) then
&#x9;&#x9;&#x9;&#x9;raise ex value &apos;SPREADSHEET ERROR (Common_Model_v3_file[1-3].xlsx): Logical Type required.  New fields that are not inherited from a physical view must be assigned a logical type.&apos;;
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;-- Get the encoded value for the original resourceName value
&#x9;&#x9;&#x9;if (INSTR(CommonModel.physicalNameEncoded, &apos;&quot;&apos;) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedString(&apos;E&apos;, &apos;D&apos;, codingListColumns, CommonModel.physicalNameEncoded, moduleName, &apos;N&apos;, &apos;physicalNameEncoded&apos;, CommonModel.physicalNameEncoded);
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;INSERT INTO result VALUES(CommonModel);
&#x9;&#x9;END FOR;
&#x9;ELSEIF (commonModelType = &apos;CSV&apos;) THEN
&#x9;&#x9;/************************************************
&#x9;&#x9; * Read CSV spreadsheets
&#x9;&#x9; ************************************************/
        FOR r AS 
&#x9;&#x9;&#x9;SELECT
&#x9;&#x9;&#x9;&#x9;-- 2014/11/21 mtinius: added code to only strip out enclosing double quotes and not if there is a double quote in between as part of the datasourceName.
&#x9;&#x9;&#x9;&#x9;CAST(CASE WHEN datasourceName IS NOT NULL AND INSTR(datasourceName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(datasourceName),&apos;&quot;&apos;) = 1 THEN SUBSTR(datasourceName, 2, LENGTH(datasourceName)-2)
&#x9;&#x9;&#x9;&#x9;&#x9; ELSE datasourceName
&#x9;&#x9;&#x9;&#x9;&#x9; END AS VARCHAR(255)) datasourceName,

&#x9;&#x9;&#x9;&#x9;-- 2014/11/21 mtinius: added code to only strip out enclosing double quotes and not if there is a double quote in between as part of the projectFolderName.
&#x9;&#x9;&#x9;&#x9;CAST(CASE WHEN projectFolderName IS NOT NULL AND INSTR(projectFolderName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(projectFolderName),&apos;&quot;&apos;) = 1 THEN SUBSTR(projectFolderName, 2, LENGTH(projectFolderName)-2)
&#x9;&#x9;&#x9;&#x9;&#x9; ELSE projectFolderName
&#x9;&#x9;&#x9;&#x9;&#x9; END AS VARCHAR(255)) projectFolderName,

&#x9;&#x9;&#x9;&#x9;-- 2014/11/21 mtinius: added code to only strip out enclosing double quotes and not if there is a double quote in between as part of the greatGrandParentName.
&#x9;&#x9;&#x9;&#x9;CAST(CASE WHEN greatGrandParentName IS NOT NULL AND INSTR(greatGrandParentName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(greatGrandParentName),&apos;&quot;&apos;) = 1 THEN SUBSTR(greatGrandParentName, 2, LENGTH(greatGrandParentName)-2)
&#x9;&#x9;&#x9;&#x9;&#x9; ELSE greatGrandParentName
&#x9;&#x9;&#x9;&#x9;&#x9; END AS VARCHAR(255)) greatGrandParentName,

&#x9;&#x9;&#x9;&#x9;-- 2014/11/21 mtinius: added code to only strip out enclosing double quotes and not if there is a double quote in between as part of the grandParentName.
&#x9;&#x9;&#x9;&#x9;CAST(CASE WHEN grandParentName IS NOT NULL AND INSTR(grandParentName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(grandParentName),&apos;&quot;&apos;) = 1 THEN SUBSTR(grandParentName, 2, LENGTH(grandParentName)-2)
&#x9;&#x9;&#x9;&#x9;&#x9; ELSE grandParentName
&#x9;&#x9;&#x9;&#x9;&#x9; END AS VARCHAR(255)) grandParentName,

&#x9;&#x9;&#x9;&#x9;-- 2014/11/21 mtinius: added code to only strip out enclosing double quotes and not if there is a double quote in between as part of the parent name.
&#x9;&#x9;&#x9;&#x9;CAST(CASE WHEN parentName IS NOT NULL AND INSTR(parentName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(parentName),&apos;&quot;&apos;) = 1 THEN SUBSTR(parentName, 2, LENGTH(parentName)-2)
&#x9;&#x9;&#x9;&#x9;&#x9; ELSE parentName
&#x9;&#x9;&#x9;&#x9;&#x9; END AS VARCHAR(255)) parentName,

&#x9;&#x9;&#x9;&#x9;-- 2014/11/21 mtinius: added code to only strip out enclosing double quotes and not if there is a double quote in between as part of the container name.
&#x9;&#x9;&#x9;&#x9;CAST(CASE WHEN containerName IS NOT NULL AND INSTR(containerName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(containerName),&apos;&quot;&apos;) = 1 THEN SUBSTR(containerName, 2, LENGTH(containerName)-2)
&#x9;&#x9;&#x9;&#x9;&#x9; ELSE containerName
&#x9;&#x9;&#x9;&#x9;&#x9; END AS VARCHAR(255)) containerName,

&#x9;&#x9;&#x9;&#x9;-- 2014/11/21 mtinius: added code to only strip out enclosing double quotes and not if there is a double quote in between as part of the physical name.
&#x9;&#x9;&#x9;&#x9;CAST(CASE WHEN physicalName IS NOT NULL AND INSTR(physicalName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(physicalName),&apos;&quot;&apos;) = 1 THEN SUBSTR(physicalName, 2, LENGTH(physicalName)-2)
&#x9;&#x9;&#x9;&#x9;&#x9; ELSE physicalName
&#x9;&#x9;&#x9;&#x9;&#x9; END AS VARCHAR(255)) physicalName,

&#x9;&#x9;&#x9;    CAST(physicalType AS VARCHAR(255)) physicalType, 
&#x9;&#x9;&#x9;&#x9;CAST(0 as INTEGER) resourceNum,

&#x9;&#x9;&#x9;&#x9;-- 2014/11/21 mtinius: added code to only strip out enclosing double quotes and not if there is a double quote in between as part of the column name.
&#x9;&#x9;&#x9;&#x9;CAST(CASE WHEN logicalName IS NOT NULL AND INSTR(logicalName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(logicalName),&apos;&quot;&apos;) = 1 THEN SUBSTR(logicalName, 2, LENGTH(logicalName)-2)
&#x9;&#x9;&#x9;&#x9;&#x9; ELSE logicalName
&#x9;&#x9;&#x9;&#x9;&#x9; END AS VARCHAR(255)) logicalName,

&#x9;&#x9;&#x9;&#x9;CAST(logicalType AS VARCHAR(255)) logicalType, 
&#x9;&#x9;&#x9;&#x9;CAST(annotation AS  VARCHAR(32767)) annotation, 
&#x9;&#x9;&#x9;    CAST(
&#x9;&#x9;&#x9;&#x9;  CASE WHEN logicalType = &apos;TABLE&apos; THEN &apos;&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;   WHEN logicalType = &apos;PROCEDURE&apos; THEN &apos;&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;   ELSE compositeTransformation
&#x9;&#x9;&#x9;&#x9;  END AS VARCHAR(4000)) AS logicalTransformation,
&#x9;&#x9;&#x9;&#x9;physicalName physicalNameEncoded&#x9;-- original value
&#x9;&#x9;&#x9;FROM 
&#x9;&#x9;&#x9;&#x9;-- UNION of 4 CSV Spreadsheets (An export of Excel worksheets)
&#x9;&#x9;&#x9;&#x9;(((SELECT * FROM      /shared/ASAssets/BestPractices_v81/DataSource/CommonModelCSVSources/&quot;Common_Model_v3_file1.csv&quot;
&#x9;&#x9;&#x9;&#x9; UNION ALL
&#x9;&#x9;&#x9;&#x9;  SELECT * FROM      /shared/ASAssets/BestPractices_v81/DataSource/CommonModelCSVSources/&quot;Common_Model_v3_file2.csv&quot;)
&#x9;&#x9;&#x9;&#x9; UNION ALL
&#x9;&#x9;&#x9;&#x9;  SELECT * FROM      /shared/ASAssets/BestPractices_v81/DataSource/CommonModelCSVSources/&quot;Common_Model_v3_file3.csv&quot;)
&#x9;&#x9;&#x9;&#x9; UNION ALL
&#x9;&#x9;&#x9;&#x9;  SELECT * FROM      /shared/ASAssets/BestPractices_v81/DataSource/CommonModelCSVSources/&quot;Common_Model_v3_file4_sample_lab.csv&quot;) Common_Model
&#x9;&#x9;&#x9;WHERE logicalName is not null and LENGTH(logicalName) &gt; 0 
&#x9;&#x9;DO
&#x9;&#x9;&#x9;set CommonModel = r;
&#x9;&#x9;&#x9;set rnum = rnum + 1;
&#x9;&#x9;&#x9;set CommonModel.resourceNum = rnum;
&#x9;&#x9;&#x9;-- Validate input from Excel
&#x9;&#x9;&#x9;if ( (CommonModel.physicalName is null or LENGTH(CommonModel.physicalName) = 0) and (CommonModel.logicalType is null or LENGTH(CommonModel.logicalType) = 0) ) then
&#x9;&#x9;&#x9;&#x9;raise ex value &apos;SPREADSHEET ERROR (Common_Model_v3_file[1-3].csv): Logical Type required.  New fields that are not inherited from a physical view must be assigned a logical type.&apos;;
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;-- Get the encoded value for the original resourceName value
&#x9;&#x9;&#x9;if (INSTR(CommonModel.physicalNameEncoded, &apos;&quot;&apos;) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedString(&apos;E&apos;, &apos;D&apos;, codingListColumns, CommonModel.physicalNameEncoded, moduleName, &apos;N&apos;, &apos;physicalNameEncoded&apos;, CommonModel.physicalNameEncoded);
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;INSERT INTO result VALUES(CommonModel);
&#x9;&#x9;END FOR;
&#x9;ELSEIF (commonModelType = &apos;DB&apos;) THEN
&#x9;&#x9;/************************************************
&#x9;&#x9; * Read CSV spreadsheets
&#x9;&#x9; ************************************************/
        FOR r AS 
&#x9;&#x9;&#x9;SELECT
&#x9;&#x9;&#x9;&#x9;-- 2014/11/21 mtinius: added code to only strip out enclosing double quotes and not if there is a double quote in between as part of the datasourceName.
&#x9;&#x9;&#x9;&#x9;CAST(CASE WHEN DataSource IS NOT NULL AND INSTR(DataSource,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(DataSource),&apos;&quot;&apos;) = 1 THEN SUBSTR(DataSource, 2, LENGTH(DataSource)-2)
&#x9;&#x9;&#x9;&#x9;&#x9; ELSE DataSource
&#x9;&#x9;&#x9;&#x9;&#x9; END AS VARCHAR(255)) datasourceName,

&#x9;&#x9;&#x9;&#x9;-- 2014/11/21 mtinius: added code to only strip out enclosing double quotes and not if there is a double quote in between as part of the projectFolderName.
&#x9;&#x9;&#x9;&#x9;CAST(CASE WHEN ProjectFolderName IS NOT NULL AND INSTR(ProjectFolderName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(ProjectFolderName),&apos;&quot;&apos;) = 1 THEN SUBSTR(ProjectFolderName, 2, LENGTH(ProjectFolderName)-2)
&#x9;&#x9;&#x9;&#x9;&#x9; ELSE ProjectFolderName
&#x9;&#x9;&#x9;&#x9;&#x9; END AS VARCHAR(255)) projectFolderName,

&#x9;&#x9;&#x9;&#x9;-- 2014/11/21 mtinius: added code to only strip out enclosing double quotes and not if there is a double quote in between as part of the greatGrandParentName.
&#x9;&#x9;&#x9;&#x9;CAST(CASE WHEN GreatGrandParentName IS NOT NULL AND INSTR(GreatGrandParentName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(GreatGrandParentName),&apos;&quot;&apos;) = 1 THEN SUBSTR(GreatGrandParentName, 2, LENGTH(GreatGrandParentName)-2)
&#x9;&#x9;&#x9;&#x9;&#x9; ELSE GreatGrandParentName
&#x9;&#x9;&#x9;&#x9;&#x9; END AS VARCHAR(255)) greatGrandParentName,

&#x9;&#x9;&#x9;&#x9;-- 2014/11/21 mtinius: added code to only strip out enclosing double quotes and not if there is a double quote in between as part of the grandParentName.
&#x9;&#x9;&#x9;&#x9;CAST(CASE WHEN GrandParentName IS NOT NULL AND INSTR(GrandParentName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(GrandParentName),&apos;&quot;&apos;) = 1 THEN SUBSTR(GrandParentName, 2, LENGTH(GrandParentName)-2)
&#x9;&#x9;&#x9;&#x9;&#x9; ELSE GrandParentName
&#x9;&#x9;&#x9;&#x9;&#x9; END AS VARCHAR(255)) grandParentName,

&#x9;&#x9;&#x9;&#x9;-- 2014/11/21 mtinius: added code to only strip out enclosing double quotes and not if there is a double quote in between as part of the parent name.
&#x9;&#x9;&#x9;&#x9;CAST(CASE WHEN ParentName IS NOT NULL AND INSTR(ParentName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(ParentName),&apos;&quot;&apos;) = 1 THEN SUBSTR(ParentName, 2, LENGTH(ParentName)-2)
&#x9;&#x9;&#x9;&#x9;&#x9; ELSE ParentName
&#x9;&#x9;&#x9;&#x9;&#x9; END AS VARCHAR(255)) parentName,

&#x9;&#x9;&#x9;&#x9;-- 2014/11/21 mtinius: added code to only strip out enclosing double quotes and not if there is a double quote in between as part of the container name.
&#x9;&#x9;&#x9;&#x9;CAST(CASE WHEN ContainerName IS NOT NULL AND INSTR(ContainerName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(ContainerName),&apos;&quot;&apos;) = 1 THEN SUBSTR(ContainerName, 2, LENGTH(ContainerName)-2)
&#x9;&#x9;&#x9;&#x9;&#x9; ELSE ContainerName
&#x9;&#x9;&#x9;&#x9;&#x9; END AS VARCHAR(255)) containerName,

&#x9;&#x9;&#x9;&#x9;-- 2014/11/21 mtinius: added code to only strip out enclosing double quotes and not if there is a double quote in between as part of the physical name.
&#x9;&#x9;&#x9;&#x9;CAST(CASE WHEN PhysicalName IS NOT NULL AND INSTR(PhysicalName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(PhysicalName),&apos;&quot;&apos;) = 1 THEN SUBSTR(PhysicalName, 2, LENGTH(PhysicalName)-2)
&#x9;&#x9;&#x9;&#x9;&#x9; ELSE PhysicalName
&#x9;&#x9;&#x9;&#x9;&#x9; END AS VARCHAR(255)) physicalName,

&#x9;&#x9;&#x9;    CAST(NativeType AS VARCHAR(255)) physicalType, 
&#x9;&#x9;&#x9;&#x9;CAST(0 as INTEGER) resourceNum,

&#x9;&#x9;&#x9;&#x9;-- 2014/11/21 mtinius: added code to only strip out enclosing double quotes and not if there is a double quote in between as part of the column name.
&#x9;&#x9;&#x9;&#x9;CAST(CASE WHEN LogicalName IS NOT NULL AND INSTR(LogicalName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(LogicalName),&apos;&quot;&apos;) = 1 THEN SUBSTR(LogicalName, 2, LENGTH(LogicalName)-2)
&#x9;&#x9;&#x9;&#x9;&#x9; ELSE LogicalName
&#x9;&#x9;&#x9;&#x9;&#x9; END AS VARCHAR(255)) logicalName,

&#x9;&#x9;&#x9;&#x9;CAST(LogicalType AS VARCHAR(255)) logicalType, 
&#x9;&#x9;&#x9;&#x9;CAST(LogicalDefinition AS  VARCHAR(32767)) annotation, 
&#x9;&#x9;&#x9;    CAST(
&#x9;&#x9;&#x9;&#x9;  CASE WHEN LogicalType = &apos;TABLE&apos; THEN &apos;&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;   WHEN LogicalType = &apos;PROCEDURE&apos; THEN &apos;&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;   ELSE LogicalTransformation
&#x9;&#x9;&#x9;&#x9;  END AS VARCHAR(4000)) AS logicalTransformation,
&#x9;&#x9;&#x9;&#x9;PhysicalName physicalNameEncoded&#x9;-- original value
&#x9;&#x9;&#x9;FROM 
&#x9;&#x9;&#x9;&#x9;-- Retrieve from the Postgres &quot;ciscache&quot;.&quot;common_model_v3&quot; database table
&#x9;&#x9;&#x9;&#x9;/shared/ASAssets/BestPractices_v81/DataSource/common_model_v3
&#x9;&#x9;&#x9;WHERE LogicalName is not null and LENGTH(LogicalName) &gt; 0
&#x9;&#x9;&#x9;ORDER BY ResourceId  
&#x9;&#x9;DO
&#x9;&#x9;&#x9;set CommonModel = r;
&#x9;&#x9;&#x9;set rnum = rnum + 1;
&#x9;&#x9;&#x9;set CommonModel.resourceNum = rnum;
&#x9;&#x9;&#x9;-- Validate input from Excel
&#x9;&#x9;&#x9;if ( (CommonModel.physicalName is null or LENGTH(CommonModel.physicalName) = 0) and (CommonModel.logicalType is null or LENGTH(CommonModel.logicalType) = 0) ) then
&#x9;&#x9;&#x9;&#x9;raise ex value &apos;SPREADSHEET ERROR (Common_Model_v3_file[1-3].csv): Logical Type required.  New fields that are not inherited from a physical view must be assigned a logical type.&apos;;
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;-- Get the encoded value for the original resourceName value
&#x9;&#x9;&#x9;if (INSTR(CommonModel.physicalNameEncoded, &apos;&quot;&apos;) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedString(&apos;E&apos;, &apos;D&apos;, codingListColumns, CommonModel.physicalNameEncoded, moduleName, &apos;N&apos;, &apos;physicalNameEncoded&apos;, CommonModel.physicalNameEncoded);
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;INSERT INTO result VALUES(CommonModel);
&#x9;&#x9;END FOR;
&#x9;END IF;
END</attribute>
  <attribute name="cacheLastTracking" type="STRING">/shared/PSAssets/BestPractices_v80/DataSource/CommonModelCache/cache_tracking</attribute>
  <attribute name="creationDate" type="LONG">1383011700167</attribute>
  <attribute name="creatorUserDomain" type="STRING">composite</attribute>
  <attribute name="creatorUserName" type="STRING">admin</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1572986813872</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">na</attribute>
  <attribute name="lastModifiedUserName" type="STRING">asp5665</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="public_types" type="MAP">
    <item>
      <key type="STRING">CommonModelType</key>
      <value type="BYTE_ARRAY">EB8GAgAPAEMAbwBtAG0AbwBuAE0AbwBkAGUAbABUAHkAcABlBikAQQAvAHMAaABhAHIAZQBkAC8AQQBTAEEAcwBzAGUAdABzAC8AQgBlAHMAdABQAHIAYQBjAHQAaQBjAGUAcwBfAHYAOAAxAC8ARABhAHQAYQBTAG8AdQByAGMAZQAvAHAAQwBvAG0AbQBvAG4AXwBNAG8AZABlAGwAXwBVAG4AaQBvAG4GKgAPAEMAbwBtAG0AbwBuAE0AbwBkAGUAbABUAHkAcABlAxIAAAABAxIAAAABARMBCRQAAAAOECEGFQAOAGQAYQB0AGEAcwBvAHUAcgBjAGUATgBhAG0AZQMvAAAAAQMWAAAAAAMaAAAAAQMbAAAAAQMg/////wMiAAAAAAgZEBsGAgAHAFYAQQBSAEMASABBAFIDEgAAAAIEBAAAAAAAAAD/ARMB/////xAhBhUAEQBwAHIAbwBqAGUAYwB0AEYAbwBsAGQAZQByAE4AYQBtAGUDLwAAAAEDFgAAAAADGgAAAAEDGwAAAAEDIP////8DIgAAAAADEgAAAAL//xAhBhUAFABnAHIAZQBhAHQARwByAGEAbgBkAFAAYQByAGUAbgB0AE4AYQBtAGUDLwAAAAEDFgAAAAADGgAAAAEDGwAAAAEDIP////8DIgAAAAADEgAAAAL//xAhBhUADwBnAHIAYQBuAGQAUABhAHIAZQBuAHQATgBhAG0AZQMvAAAAAQMWAAAAAAMaAAAAAQMbAAAAAQMg/////wMiAAAAAAMSAAAAAv//ECEGFQAKAHAAYQByAGUAbgB0AE4AYQBtAGUDLwAAAAEDFgAAAAADGgAAAAEDGwAAAAEDIP////8DIgAAAAADEgAAAAL//xAhBhUADQBjAG8AbgB0AGEAaQBuAGUAcgBOAGEAbQBlAy8AAAABAxYAAAAAAxoAAAABAxsAAAABAyD/////AyIAAAAAAxIAAAAC//8QIQYVAAwAcABoAHkAcwBpAGMAYQBsAE4AYQBtAGUDLwAAAAEDFgAAAAADGgAAAAEDGwAAAAEDIP////8DIgAAAAADEgAAAAL//xAhBhUADABwAGgAeQBzAGkAYwBhAGwAVAB5AHAAZQMvAAAAAQMWAAAAAAMaAAAAAQMbAAAAAQMg/////wMiAAAAAAMSAAAAAv//ECEGFQALAHIAZQBzAG8AdQByAGMAZQBOAHUAbQMvAAAAAQMWAAAAAAMaAAAAAQMbAAAAAQMg/////wMiAAAAAAgZEBkGAgAHAEkATgBUAEUARwBFAFIDEgAAAAMEB/////+AAAAABAYAAAAAf/////////8QIQYVAAsAbABvAGcAaQBjAGEAbABOAGEAbQBlAy8AAAABAxYAAAAAAxoAAAABAxsAAAABAyD/////AyIAAAAAAxIAAAAC//8QIQYVAAsAbABvAGcAaQBjAGEAbABUAHkAcABlAy8AAAABAxYAAAAAAxoAAAABAxsAAAABAyD/////AyIAAAAAAxIAAAAC//8QIQYVAAoAYQBuAG4AbwB0AGEAdABpAG8AbgMvAAAAAQMWAAAAAAMaAAAAAQMbAAAAAQMg/////wMiAAAAAAgZEBsGAgAHAFYAQQBSAEMASABBAFIDEgAAAAQEBAAAAAAAAH//ARMB/////xAhBhUAFQBsAG8AZwBpAGMAYQBsAFQAcgBhAG4AcwBmAG8AcgBtAGEAdABpAG8AbgMvAAAAAQMWAAAAAAMaAAAAAQMbAAAAAQMg/////wMiAAAAAAgZEBsGAgAHAFYAQQBSAEMASABBAFIDEgAAAAUEBAAAAAAAAAQAARMB/////xAhBhUAEwBwAGgAeQBzAGkAYwBhAGwATgBhAG0AZQBFAG4AYwBvAGQAZQBkAy8AAAABAxYAAAAAAxoAAAABAxsAAAABAyD/////AyIAAAAAAxIAAAAC/////w==</value>
    </item>
  </attribute>
  <attribute name="references" type="NULL"/>
</metadata>