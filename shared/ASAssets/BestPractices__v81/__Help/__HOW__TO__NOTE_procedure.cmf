<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:e931daa6-7fda-456a-badf-4cdb1c228a1a -->
<metadata name="_HOW_TO_NOTE" path="/shared/ASAssets/BestPractices_v81/_Help/_HOW_TO_NOTE" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>&lt;![CDATA[
&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

]]&gt;</annotation>
  <parameters></parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <attribute name="Script" type="STRING">/*  _HOW_TO_NOTE

&#x9;=========================================================
&#x9;Best Practices View Generation Scripts v8.1
&#x9;=========================================================
&#x9;Author:      Mike Tinius
&#x9;Date:        05/20/2015
&#x9;CSW Version: 6.2.x, 7.0.x

&#x9;-----------------------------------------
&#x9;Upgrading Best Practices 1.0 and higher
&#x9;-----------------------------------------
&#x9;Please refer to &quot;Best Practices Getting Started Guide vX.X.pdf&quot; for instructions on how to upgrade.

&#x9;The procedure “upgradeProject” now supports the ability to automatically upgrade any Best Practices version starting with 1.0. 
 
&#x9;Location: /shared/ASAssets/BestPractices_v80/_ProjectMaintenance/upgradeProject

&#x9;----------------------------------------------------------------------------------
&#x9;HOW TO:  Create a new CIS project based on the Best Practices Generic Template
&#x9;----------------------------------------------------------------------------------
&#x9;*******************
&#x9;**** AUTOMATED ****
&#x9;*******************
&#x9;1) Execute the script to generate a project
&#x9;&#x9;Location: /shared/ASAssets/BestPractices_vXX/_ProjectMaintenance/generateProject()

&#x9;&#x9;a) Execute &quot;/shared/ASAssets/BestPractices_vXX/generateProject(&lt;path-to-project&gt;, generateTestFolder, overwrite)&quot;

&#x9;2) Create Data Sources

&#x9;3) Execute the script to generate the &quot;ConfigureStartingFolders&quot; script
&#x9;&#x9;Location: /shared/ASAssets/BestPractices_vXX/_ProjectMaintenance/generateConfigureStartingFolders()

&#x9;&#x9;Note:  These folders are the key to the generation scripts.  The entries tell the generation scripts which source folders and target folders to use for the generation.

&#x9;&#x9;a) Execute &quot;/shared/ASAssets/BestPractices_vXX/generateConfigureStartingFolders(&lt;path-to-project&gt;)&quot;

&#x9;4) Proceed to the View Generation section.

&#x9;****************
&#x9;**** MANUAL ****
&#x9;****************

&#x9;1) Copy the generic best practices project
&#x9;&#x9;a) Right-mouse click on &quot;DataAbstraction_GENERIC_Template&quot; and select copy

&#x9;2) Paste the generic project
&#x9;&#x9;a) Select a target folder in which to paste. This is entirely your choice.  
&#x9;&#x9;&#x9;You may want projects to be created off of the /Shared folder or you may want sub-folders.
&#x9;&#x9;b) Right-mouse click on the selected folder and select paste

&#x9;3) Rename the folder to your project name
&#x9;&#x9;a) right-click on the folder and select rename
&#x9;&#x9;b) this also rebinds the procedures in the /generationScripts/Generate folder 
&#x9;&#x9;&#x9;to the correct /constants/defaultValues() procedure.  Make sure that these are not 
&#x9;&#x9;&#x9;pointing to /shared/ASAssets/BestPractices_vXX/DataAbstraction_GENERIC_Template/constants/defaultValues
&#x9;&#x9;&#x9;but instead point to &lt;your-project-folder&gt;/constants/defaultValues().

&#x9;4) Update the defaultValues with the correct base path
&#x9;&#x9;Note:  All the generation is dynamically driven off of this basePath.
&#x9;&#x9;a) Copy the folder path
&#x9;&#x9;&#x9;1) Right click on the folder and select open
&#x9;&#x9;&#x9;2) Click on the info tab
&#x9;&#x9;&#x9;3) Copy the path in the &quot;Name:&quot; field
&#x9;&#x9;b) Open &lt;your-project-folder&gt;/constants/defaultValues
&#x9;&#x9;c) Replace basePath with your-project-folder base path.

&#x9;5) Edit the ConfigureStartingFolders
&#x9;&#x9;Note:  These folders are the key to the generation scripts.  The entries tell the generation scripts
&#x9;&#x9;&#x9;&#x9;which source folders and target folders to use for the generation.
&#x9;&#x9;a) There is an &quot;INSERT&quot; template for each level of the Best Practices containing a source and target folder
&#x9;&#x9;&#x9;Typically, the target folder for one level becomes the source folder for the next level up.
&#x9;&#x9;b) Modify the folders according to the sources that you have and your folder structure.

&#x9;6) Proceed to the View Generation section.

&#x9;*************************
&#x9;**** VIEW GENERATION ****
&#x9;*************************

&#x9;1) Generate Views
&#x9;&#x9;Note:  You are now ready to generate views.  View generation options:
&#x9;&#x9;a) generatePhysicalViews()&#x9;&#x9;- This procedure is used for generating &quot;Physical Views&quot; from a data sources. Deprecated but still useful when you need CRUD operations.
&#x9;&#x9;b) generateFormattingViews()&#x9;- This procedure is used for generating &quot;Physical/Formatting&quot; views either from other views or from data sources (Physial/Metadata). 
&#x9;&#x9;c) generateLogicalViews()&#x9;&#x9;- This procedure is used for generating &quot;Business/Logical&quot; views either from the Formatting views.  
&#x9;&#x9;d) generateBusinessViews()&#x9;&#x9;- This procedure is used for generating &quot;Business/Business&quot; views from Logical Views.  
&#x9;&#x9;e) generateClientViews()&#x9;&#x9;- This procedure is used for generating &quot;Application/Views&quot; either from lower level views.  
&#x9;&#x9;f) generateClientPublished()&#x9;- This procedure is used for generating &quot;Application/Published&quot; views either from lower level views.  
&#x9;&#x9;g) generatePublishedResource()&#x9;- This procedure is used for generating LINKS into the Composite Database.
&#x9;&#x9;h) generateViews()&#x9;&#x9;&#x9;&#x9;- This procedure is used for generating any layer of &quot;Views&quot; either from other views or from data sources.  
&#x9;&#x9;i) generateCRUDOperation() &#x9;&#x9;- This procedure is used for generating Read/Write CRUD operation procedures.  In this context, CRUD includes 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;Create&quot;, &quot;Read&quot;, &quot;Retrieve Primary Key&quot;, &quot;Update&quot;, and &quot;Delete&quot;. 
&#x9;&#x9;j) generateTypeDefinitions()&#x9;- This procedure is used for generating &quot;Type Definitions&quot; for use by the Read/Write CRUD procedures.  

&#x9;&#x9;Note: generateTypeDefinitions - this is performed automatically when generateCRUDOperation() is executed.
&#x9;&#x9;&#x9;It is provided as an independent procedure as well.  Unless specified, this script will generate
&#x9;&#x9;&#x9;and overwrite any existing procedures named &quot;TypeDefinitionsGen&quot;.

&#x9;&#x9;Note: generateViews() - this is the generic form of the more specific generate-&quot;Layer&quot;-Views().  If 
&#x9;&#x9;&#x9;the generate-&quot;Layer&quot;-Views() is too confining for your purposes, then you can configure and use
&#x9;&#x9;&#x9;generateViews() in a more generic way.

&#x9;&#x9;k) generateDatasourceListCSV()&#x9;- This procedure is used for generating the Best Practices, Common Model spreadsheet as a CSV file.  The benefit
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;of this is that it provides a round-trip capability whereby, you can either start with the spreadsheet and generate the
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Formatting views or you can modify the Formatting views and generate the spreadsheet. 
&#x9;&#x9;l) generateDatasourceList()&#x9;&#x9;- This procedure is used for generating a list of columns either from a folder of views or from data sources (Physical/Metadata). 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;This can be very useful when you need to understand what all the columns are in your datasource.
&#x9;-----------------------------------------
&#x9;FOLDER CONTENTS: /shared/ASAssets/BestPractices
&#x9;-----------------------------------------
&#x9;/DataAbstraction_GENERIC_Template - a template used to create a new project based on the Best Practices.
&#x9;&#x9;The folder structure for a project includes the following:
&#x9;&#x9;/_scripts/
&#x9;&#x9;&#x9;/_Custom&#x9;&#x9;&#x9;&#x9;- a folder used to move custom procedures to when upgrading the Best Practices scripts.
&#x9;&#x9;&#x9;/Configure&#x9;&#x9;&#x9;&#x9;- configure the generation scripts with a list of folders (data source / views) to process.
&#x9;&#x9;&#x9;/Constants&#x9;&#x9;&#x9;&#x9;- contains default values and type definitions
&#x9;&#x9;&#x9;/Display&#x9;&#x9;&#x9;&#x9;- display data lineage for a resource or a listing of resources in a folder.
&#x9;&#x9;&#x9;/Documentation&#x9;&#x9;&#x9;- provides the ability to generate documentation for the project
&#x9;&#x9;&#x9;/Generate&#x9;&#x9;&#x9;&#x9;- generate views, CRUD operations or type definitions.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;- Dependency on 3 file system csv files located in D:\CompositeSoftware\BestPractices&#x9;&#x9;&#x9;&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Common_Model_v2_file1.csv, Common_Model_v2_file2.csv, Common_Model_v2_file3.csv
&#x9;&#x9;&#x9;/Rebind&#x9;&#x9;&#x9;&#x9;&#x9;- rebind all the views from one folder to a different folder.

&#x9;&#x9;/Application &#x9;&#x9;&#x9;- container to hold client mapping views and procedures
&#x9;&#x9;&#x9;/DefinitionSets&#x9;&#x9;- Provides a central location to contain the Schema, WSDL and SQL definition sets
&#x9;&#x9;&#x9;/Published&#x9;&#x9;&#x9;- application facing views and procedures that established a contract with the client application.
&#x9;&#x9;&#x9;/Services &#x9;&#x9;&#x9;- application procedures either generated or created here.  Additionally, CRUD procedures are generated here.
&#x9;&#x9;&#x9;/Views &#x9;&#x9;&#x9;&#x9;- application client facing views are created or generated here.

&#x9;&#x9;/Business&#x9; &#x9;&#x9;&#x9;- container to hold business logical views.
&#x9;&#x9;&#x9;/Business&#x9;&#x9;&#x9;- these views contain “where clauses” to create selective business-oriented views of data or aggregation of data.
&#x9;&#x9;&#x9;/Logical&#x9;&#x9;&#x9;- subject areas that are compliant with the customer logical/canonical data model.  These views contain no &quot;where clauses&quot;.

&#x9;&#x9;/Physical&#x9;&#x9;&#x9;&#x9;- container to hold physical sources and views.
&#x9;&#x9;&#x9;/Formatting&#x9;&#x9;&#x9;- physical to business logical formatting and transformation.
&#x9;&#x9;&#x9;&#x9;/Transformation - create XML to relational transformations here.  The formatting would use this folder as a source for XML sources.
&#x9;&#x9;&#x9;/Physical&#x9;&#x9;&#x9;- (DEPRECATED) abstraction of the physical sources providing a layer of insulation for rebinding and caching.
&#x9;&#x9;&#x9;/Metadata&#x9;&#x9;&#x9;- access to physical source structures (tables, files, web services etc.).
&#x9;&#x9;&#x9;&#x9;/SequenceGenerator&#x9;- container to hold the sequence generator facade.
&#x9;&#x9;&#x9;&#x9;&#x9;getUniqueID() &#x9;- a facade procedure which is used to invoke the true generator which is implementation specific.
&#x9;&#x9;
&#x9;/DataAbstractionSample - a running sample of the Best Practices featuring the following:
&#x9;&#x9;1) Best Practices Layering approach
&#x9;&#x9;2) View generation scripts
&#x9;&#x9;3) Create, Read, RetrievePK, Update, and Delete (CRUD) generation scripts

&#x9;&#x9;Dependencies:  
&#x9;&#x9;&#x9;1) Oracle SQL DDL scripts required to create the oracle demo tables
&#x9;&#x9;&#x9;2) File system csv files located in D:\CompositeSoftware\BestPractices
&#x9;&#x9;&#x9;&#x9;&#x9;Common_Model_v2_file1.csv
&#x9;&#x9;&#x9;&#x9;&#x9;Common_Model_v2_file2.csv
&#x9;&#x9;&#x9;&#x9;&#x9;Common_Model_v2_file3.csv
&#x9;&#x9;&#x9;3) RPAD was added to Composite Server in version 5.1.0.1.
&#x9;&#x9;&#x9;&#x9;&#x9;If you are using the BestPractices code samples prior to that version then
&#x9;&#x9;&#x9;&#x9;&#x9;you must check the box for RPAD in the custom functions and restart the server.

&#x9;/Procedures - The implementation of the generation scripts
&#x9;&#x9;Dependencies: /shared/ASAssets/Utilities is a common library of CIS utilities that must be installed first.

&#x9;-----------------------------------------
&#x9;CRUD Generation FOLDER CONTENTS:
&#x9;-----------------------------------------
&#x9;CRUD = Create, Read, Update, Delete
&#x9;The following details the folder structure that is generated when using the generateCRUDOperation().  
&#x9;CRUD operations are generated in &lt;basePath&gt;/&lt;clientServicePath&gt;/CRUD.
&#x9;An example can found in /shared/ASAssets/BestPractices/DataAbstractionSample/Application/Client_Services/CRUD

&#x9;&#x9;/CRUD &#x9;&#x9;&#x9;&#x9;- Default CRUD folder
&#x9;&#x9;&#x9;/Coordinate &#x9;- A coordinator (save) procedure is generated for every target view.
&#x9;&#x9;&#x9;&#x9;/test &#x9;&#x9;- A test harness procedure to invoke the Coordinator procedure.
&#x9;&#x9;&#x9;/Create &#x9;&#x9;- A create procedure is generated for every target view.
&#x9;&#x9;&#x9;&#x9;/Custom&#x9;&#x9;- A custom procedure that allows the user to modify the values prior to create.
&#x9;&#x9;&#x9;&#x9;/test &#x9;&#x9;- A test harness procedure to invoke the Create procedure.
&#x9;&#x9;&#x9;/Definitions&#x9;- A type definitions procedure is generated with the public types for each view
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Note:  if generating CRUD procedures, &quot;TypeDefinitionsGen()&quot; will be automatically generated and
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;will overwrite any existing procedure named &quot;TypeDefinitionsGen&quot;
&#x9;&#x9;&#x9;/Read &#x9;&#x9;&#x9;- A read procedure is generated for every target view.
&#x9;&#x9;&#x9;&#x9;/test &#x9;&#x9;- A test harness procedure to invoke the Read procedure.
&#x9;&#x9;&#x9;/RetrievePK &#x9;- A retrieve primary key procedure is generated for every target view.
&#x9;&#x9;&#x9;&#x9;/test &#x9;&#x9;- A test harness procedure to invoke the RetrievePK procedure.
&#x9;&#x9;&#x9;/Update &#x9;&#x9;- An update procedure is generated for every target view.
&#x9;&#x9;&#x9;&#x9;/Custom&#x9;&#x9;- A custom procedure that allows the user to modify the values prior to update.
&#x9;&#x9;&#x9;&#x9;/test &#x9;&#x9;- A test harness procedure to invoke the Update procedure.
&#x9;&#x9;&#x9;/Delete &#x9;&#x9;- A delete procedure is generated for every target view.
&#x9;&#x9;&#x9;&#x9;/test &#x9;&#x9;- A test harness procedure to invoke the Delete procedure.
&#x9;&#x9;&#x9;/Utility &#x9;&#x9;- A folder to place the custom utility procedures that may be needed for CRUD.
&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.
*/
PROCEDURE &quot;_HOW_TO_NOTE&quot;()BEGIN END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1513829976555</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
</metadata>