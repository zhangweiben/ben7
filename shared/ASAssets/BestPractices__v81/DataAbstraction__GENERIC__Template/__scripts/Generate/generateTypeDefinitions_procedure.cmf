<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:e931daa6-7fda-456a-badf-4cdb1c228a1a -->
<metadata name="generateTypeDefinitions" path="/shared/ASAssets/BestPractices_v81/DataAbstraction_GENERIC_Template/_scripts/Generate/generateTypeDefinitions" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>&lt;![CDATA[generateTypeDefinitions:
&#x9;-- Data Virtualization Best Practices --

&#x9;This procedure is used for generating &quot;Type Definitions&quot; for use by the Read/Write CRUD procedures.  
&#x9;According to the Best Practices, Type Definitions should be created against the layer of views that
&#x9;will be used to execute Create, RetrievePK, Update and Delete operations against.  Generally speaking,
&#x9;CRUD operations would be created against a layer of views that do not contain any new or derived columns.
&#x9;If a top-level view such as the Application Layer, Client Views serves this purpose then use it.  However,
&#x9;it may generally not as it or views in its lineage may contain new or dervied fields.  Therefore, it may
&#x9;be necessary to generate a physical views layer within the Application/Services/CRUD folder which will be
&#x9;guaranteed to be one-to-one with the physical source and not contain any new or derived columns.

&#x9;This procedure is provided as a separate executable procedure for convenience.   The functionality of
&#x9;generating Type Definitions is automatically performed within the context of executing &apos;generateCRUDOperations()&apos;.

&#x9;It should be noted that this procedure uses the &quot;Target&quot; folder in the ConfigureStartingFolders().
&#x9;
&#x9;This procedure is meant to be executed by a Data Architect within studio.

&#x9;Whether you have 10&apos;s, 100&apos;s or 1000&apos;s of relational tables that you want to map into a canonical
&#x9;format, this auto-generation utility will aid in the mapping of data abstraction layers either from
&#x9;other views or from physical data source tables. 

&#x9;-------
&#x9;Usage:
&#x9;-------
&#x9;1) Edit the /&lt;project-name&gt;/_scripts/Configure/ConfigureParams and ConfigureStartingFolders file to set up the processing
&#x9;&#x9;startingFolderVector - 
&#x9;&#x9;&#x9;defines which data source folders to process, 
&#x9;&#x9;&#x9;where the views get generated, 
&#x9;&#x9;&#x9;and whether the sub-folders are derived from the source or defined absolutely

&#x9;2) Refresh Studio to see the Views that were generated
&#x9;----------
&#x9;Cautions:
&#x9;----------
&#x9;   CAUTION(1): Overlapping sourceFolderPath definitions will result in duplicated views being produced
&#x9;&#x9;Take the 2 example source folder paths expressed below.  The 2nd one is a sub-directory of the first one.
&#x9;&#x9;This will result in the same source folders being processed twice which generates the same mapping views
&#x9;&#x9;but in different target folders.
&#x9;&#x9;(1,&apos;CV&apos;,&apos;A&apos;,&apos;/shared/BestPractices/DataAbstractionSample/Business/Logical&apos;,null,&apos;/shared/BestPractices/DataAbstractionSample/Application/Views&apos;);
&#x9;&#x9;(1,&apos;CV&apos;,&apos;A&apos;,&apos;/shared/BestPractices/DataAbstractionSample/Business/Logical/CISORADEMO&apos;,null,&apos;/shared/BestPractices/DataAbstractionSample/Application/Views/CISORADEMO&apos;);

&#x9;    CAUTION(2): Source Folder Path definitions are case sensitive and must match the actual source path that you
&#x9;&#x9;want to introspect to create mapping views from.

&#x9;    CAUTION(3): Only views and procedures that produces a cursor output is supported.  Procedures include, parameterized or customer procedures
&#x9;&#x9;&#x9;with cursor output, XSLT with cursor output, packaged queries with cursor output.

&#x9;Input:
&#x9;&#x9;&#x9;-- 0           - print the output to the cursor.  The cursor is bound by Composite Studio &quot;Fetch Row Size&quot; and &quot;Cursor Fetch Limit&quot;
&#x9;&#x9;&#x9;--               The cursor stops producing output when it hits those limits.  The limits are configured in Composite Studio
&#x9;&#x9;&#x9;--                  AdministrationConfigurationStudioDataFetch Rows Size and Cursor Fetch Limit.  
&#x9;&#x9;&#x9;--                  Modify the Cursor Fetch Limit to an arbitrary number such as 500
&#x9;&#x9;&#x9;-- 1 (default) - do not print the cursor output to the cursor but redirect to the console window.  The aforementioned limits do not apply.
&#x9;&#x9;generateViewsWrapper

&#x9;&#x9;&#x9;-- allows user to decide whether they want to overwrite an existing view or not.
&#x9;&#x9;&#x9;-- 0=&quot;FAIL_IF_EXISTS&quot;=do not overwrite the resource.  If the resource exists, raise an exception.
&#x9;&#x9;&#x9;-- 1=&quot;SKIP_IF_EXISTS&quot;=skip the resource if it exists and continue processing
&#x9;&#x9;&#x9;-- 2 (default)=&quot;OVERWRITE_IF_EXISTS&quot;=do overwrite the resource if it exists.
&#x9;&#x9;overwrite

&#x9;&#x9;&#x9;-- flag indicating the mode in which to copy privileges.  Privileges are only copied from the parent when creating new resources including folders.
&#x9;&#x9;&#x9;-- null (default) - do not set any privileges at all
&#x9;&#x9;&#x9;-- 0 - set mode to &quot;OVERWRITE_APPEND&quot; - merges and does not update privileges for users or groups not mentioned.
&#x9;&#x9;&#x9;-- 1 - set the mode to &quot;SET_EXACTLY&quot; - makes privileges look exactly like those provided in the call.
&#x9;&#x9;copyPrivilegeMode

&#x9;&#x9;&#x9;-- specifies how the source resource will be matched against the resource being interrogated
&#x9;&#x9;&#x9;--&#x9;0=fuzzy match - sourcePath + derivedFilterPath must simply be contained within resourcePath
&#x9;&#x9;&#x9;--&#x9;1 (default)=exact match - sourcePath + derivedFilterPath must match exactly in resourcePath
&#x9;&#x9;exactMatch

&#x9;&#x9;&#x9;-- The list &quot;derivedFilterPath&quot; is a comma-separated list of resources and may be used with either generateToFolder (option 1) to groupId (option 2) 
&#x9;&#x9;&#x9;-- The path is derived by concatenating the partial filter path with the source path either from the sourceResource or of the designated layer type and groupId.
&#x9;&#x9;&#x9;-- The layerType and the groupId are used to filter the rows from the configureStartingFolders.  The source path is
&#x9;&#x9;&#x9;--    defined in configureStartingFolders per the layerType and groupId combination.
&#x9;&#x9;&#x9;--   e.g. layerType=CP and sourceFolderPath=/shared/BestPractices/DataAbstractionAbstractionSample/Application/Views
&#x9;&#x9;&#x9;--        The derivedFilterPath list=&quot;Orders_Closed,/Orders/Customers,Orders/Product&quot;
&#x9;&#x9;&#x9;--        Even though there are several other views in the /Orders folder under the /Application/Views only the ones specified
&#x9;&#x9;&#x9;--&#x9;      will be generated to the Application/Published.  Views directly under the source path do not require any qualifying path except the view name.
&#x9;&#x9;&#x9;--        Lastly, a leading &apos;/&apos; is not required but may be present if desired.
&#x9;&#x9;&#x9;-- Correlate the groupId position with the derivedFilterPath position
&#x9;&#x9;&#x9;--&#x9;&#x9;derivedFilterPath=&quot;customers,orders&quot;,shippingmethods
&#x9;&#x9;&#x9;--                         |                     |
&#x9;&#x9;&#x9;--                         v                     v
&#x9;&#x9;&#x9;--&#x9;&#x9;          groupId=ds_inventory.tutorial,ds_orders.tutorial
&#x9;&#x9;&#x9;-- If null, generate views from all source folders as directed by the sourceResource or &quot;configure starting folders&quot; and the designated layer type.
&#x9;&#x9;derivedFilterPath

&#x9;&#x9;&#x9;-- name of the type definition procedure.  e.g. TypeDefinitions
&#x9;&#x9;&#x9;- If null, then the default name &apos;TypeDefinitions&apos; is used.
&#x9;&#x9;typeDefProcName

&#x9;&#x9;-- OPTION 1
 &#x9;&#x9;&#x9;-- The source folder in CIS to begin searching for views to publish to a Composite data source or to another folder
&#x9;&#x9;&#x9;-- or the specific source View or Procedure to publish to a Composite data source or to another folder
&#x9;&#x9;&#x9;-- If this is set it supercedes layerType, inGroupIDs and derivedFilterPath
&#x9;&#x9;sourceResource

&#x9;&#x9;&#x9;-- This is the full path to the folder in which to generate the views
&#x9;&#x9;&#x9;-- This is only required if option 1: targetResource is provided.
&#x9;&#x9;&#x9;-- If targetResource is not blank, then it is used and groupIds and derivedFilterPath are ignored
&#x9;&#x9;publishToFolder

&#x9;&#x9;-- OPTION 2
 &#x9;&#x9;&#x9;-- If sourceResource is blank, then groupIds must be set with derivedFilterPath being optional

&#x9;&#x9;&#x9;-- The actual input are defined as local variables with DEFAULT values.  Adjust those variables accordingly.
&#x9;&#x9;&#x9;-- Tells the generation script which starting folder (layer) to use to generate type definitions.
&#x9;&#x9;&#x9;-- PM=Physical Metadata - used by generateDasourceList
&#x9;&#x9;&#x9;-- CR=CRUD Target Folder Path - generateTypeDefinitions and generateCRUDOperations invokes generateViews
&#x9;&#x9;&#x9;-- PV=Physical Views - generatePhysicalViews invokes generateViews
&#x9;&#x9;&#x9;-- FV=Formatting Views - generateFormattingViews invokes generateViews
&#x9;&#x9;&#x9;-- BV=Business Views - generateBusinessViews invokes generateViews
&#x9;&#x9;&#x9;-- LV=Logical Views - generateLoicalViews invokes generateViews
&#x9;&#x9;&#x9;-- CV=Client Views - generateClientViews invokes generateViews
&#x9;&#x9;&#x9;-- CP=Client Published - generateClientPublished invokes generateViews
&#x9;&#x9;&#x9;-- DB=Database published link - generatePublishedResource invokes generateViews
&#x9;&#x9;layerType

&#x9;&#x9;&#x9;-- This is a comma separate list group ids to process. 
&#x9;&#x9;&#x9;-- This is a filter that allows the user to only generate for a specific group or list of groups
&#x9;&#x9;&#x9;--   found in the /_scripts/Configure/ConfigureStartingFolders.
&#x9;&#x9;&#x9;--   Pass in null to select all groupIds.
&#x9;&#x9;groupIds

&#x9;Output:
&#x9;&#x9;success&#x9;&#x9;&#x9;&#x9;BIT, &#x9;&#x9;- 1=success, 0=not successful
&#x9;&#x9;scripttext&#x9;&#x9;&#x9;LONGVARCHAR - The actual script text that is generated representing the Type Definition procedure

&#x9;Exceptions:  none

&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;CSW Version:&#x9;Reason:
&#x9;08/20/2010&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.1.0&#x9;&#x9;&#x9;Created new
&#x9;04/15/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.2.0&#x9;&#x9;&#x9;Updated for Best Practices 7.0
&#x9;05/02/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.2.0&#x9;&#x9;&#x9;Updated for Best Practices 7.1 - added overwrite, copyAnnotation, publishToFolder, targetResource
&#x9;07/31/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.0.0&#x9;&#x9;&#x9;Updated for Best Practices 7.3 - moved console output to /shared/BestPractices_vXX/Procedures/generateViews
&#x9;08/08/2014&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.2.6&#x9;&#x9;&#x9;B.P. 8.1.3: Added check for dependency views in target path.  Don&apos;t generate when 0 or 1.  Changed default overwrite=1 instead of 2.
&#x9;08/08/2014&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.2.5&#x9;&#x9;&#x9;B.P. 8.1.3: Modified ability generate cast statements under various conditions when generateMode=G or R and generateCast=0-5.
&#x9;&#x9;&#x9;Added generateCast=2,3,4,5 allowing for &quot;NO&quot; CAST around index columns and adding a CAST display column for index columns.
&#x9;&#x9;&#x9;--&#x9;0=Do not generate CAST statement.  Pass through column as is.  Default behavior.
&#x9;&#x9;&#x9;-- &#x9;1=Generate the CAST statement around the column
&#x9;&#x9;&#x9;--&#x9;2-Generate the CAST statement around the non-index columns only (No CAST on index columns)
&#x9;&#x9;&#x9;--&#x9;3-Generate the CAST statement around the non-index columns only and generate a &quot;display&quot; column for each index column.  (No CAST o nindex columns)
&#x9;&#x9;&#x9;--&#x9;4-Generate the CAST statement around the non-index columns and non-primary key index columns only (No CAST on primary key index columns)
&#x9;&#x9;&#x9;--&#x9;5-Generate the CAST statement around the non-index columns and non-primary key index columns only and generate a &quot;display&quot; column for each primary key index column.  (No CAST on primary key index columns)
&#x9;01/24/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;8.0.0&#x9;&#x9;&#x9;B.P. 2019.1: Added the ability to handle columnCaseRule, resourcePrefix, resourceSuffix and newColumnList for generateMode=&apos;G&apos;. 
&#x9;01/29/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;8.0.0&#x9;&#x9;&#x9;B.P. 2019.101: Fix bug so derivedFilterPath could be used with generateToFolder.
&#x9;03/14/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;B.P. 2019.102: Added scriptsPath for flexibility of the location of the _scripts folder.
&#x9;06/12/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;B.P. 2019.200: Modified to use XML based procedures in order to eliminate vector usage.

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.]]&gt;</annotation>
  <parameters>
    <parameter name="generateViewsWrapper" direction="IN" nullable="true">
      <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
    </parameter>
    <parameter name="overwrite" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="copyPrivilegeMode" direction="IN" nullable="true">
      <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
    </parameter>
    <parameter name="exactMatch" direction="IN" nullable="true">
      <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
    </parameter>
    <parameter name="derivedFilterPath" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="typeDefProcName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="sourceResource" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="generateToFolder" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="layerType" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="groupIds" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="result" direction="OUT" nullable="true">
      <datatype name="result" type="TABLE" refId="256">
        <element name="datasourceName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="projectFolderName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="greatGrandParentName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="grandParentName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="parentName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="containerName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="containerType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="name">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="logicalName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="logicalType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="logicalStatus">
          <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
        </element>
        <element name="containerPath">
          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
        </element>
        <element name="duration">
          <datatype name="IntervalDay" type="INTERVAL_DAY" intervalMode="INTERVAL_HOUR_TO_SECOND" intervalPrecision="2" fractionalSecondPrecision="6"/>
        </element>
      </datatype>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/util/SetEnvironment" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="variableName" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="PropertyName" type="STRING" maxLength="255"/>
      </element>
      <element name="value" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="PropertyValue" type="STRING" maxLength="4096"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/DataAbstraction_GENERIC_Template/_scripts/Constants/defaultValues" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="bestPracticesVersion_" direction="OUT">
        <datatype type="FLOAT" minValue="2.2250738585072014E-308" maxValue="1.7976931348623157E308"/>
      </element>
      <element name="basePath_" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="scriptsPath_" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="configureScriptsPath_" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="constantsScriptsPath_" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="generationScriptsPath_" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="documentationScriptsPath_" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="compositeDatabasePath_" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="applicationPublishedPath_" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="applicationServicesPath_" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="applicationViewsPath_" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="applicationViewsSubFolder_" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="crudPath_" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="typeDefinitionPath_" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="typeDefinitionProcName_" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="businessBusinessPath_" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="businessLogicalPath_" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="physicalFormattingPath_" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="physicalFormattingTransformationPath_" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="physicalViewsPath_" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="physicalMetadataPath_" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="genUniqueIDPath_" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="debugTime_" direction="OUT">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/generateViewsXML" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="ConfigParamsXML" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="layerType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="groupId" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="derivedFilterPath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="datasourceName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="projectFolderName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="greatGrandParentName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="grandParentName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="parentName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="containerName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="containerType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="columnName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="logicalColumnName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="logicalColumnType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="logicalStatus">
            <datatype type="STRING" maxLength="4000"/>
          </element>
          <element name="containerPath">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="duration">
            <datatype type="INTERVAL_DAY" intervalMode="INTERVAL_HOUR_TO_SECOND" intervalPrecision="2" fractionalSecondPrecision="6"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/getConfigureParamsXML" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="basePath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="generateMode" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="outputMode" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="generateViews" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="resourceCaseRule" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="columnCaseRule" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="useAliasRule" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="resourcePrefix" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceSuffix" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="generateWithSourceColumn" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="generateCast" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="generateIndexes" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="ConfigParamsXML" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* 
&#x9;generateTypeDefinitions:
&#x9;-- Data Virtualization Best Practices --

&#x9;This procedure is used for generating &quot;Type Definitions&quot; for use by the Read/Write CRUD procedures.  
&#x9;According to the Best Practices, Type Definitions should be created against the layer of views that
&#x9;will be used to execute Create, RetrievePK, Update and Delete operations against.  Generally speaking,
&#x9;CRUD operations would be created against a layer of views that do not contain any new or derived columns.
&#x9;If a top-level view such as the Application Layer, Client Views serves this purpose then use it.  However,
&#x9;it may generally not as it or views in its lineage may contain new or dervied fields.  Therefore, it may
&#x9;be necessary to generate a physical views layer within the Application/Services/CRUD folder which will be
&#x9;guaranteed to be one-to-one with the physical source and not contain any new or derived columns.

&#x9;This procedure is provided as a separate executable procedure for convenience.   The functionality of
&#x9;generating Type Definitions is automatically performed within the context of executing &apos;generateCRUDOperations()&apos;.

&#x9;It should be noted that this procedure uses the &quot;Target&quot; folder in the ConfigureStartingFolders().
&#x9;
&#x9;This procedure is meant to be executed by a Data Architect within studio.

&#x9;Whether you have 10&apos;s, 100&apos;s or 1000&apos;s of relational tables that you want to map into a canonical
&#x9;format, this auto-generation utility will aid in the mapping of data abstraction layers either from
&#x9;other views or from physical data source tables. 

&#x9;-------
&#x9;Usage:
&#x9;-------
&#x9;1) Edit the /&lt;project-name&gt;/_scripts/Configure/ConfigureParams and ConfigureStartingFolders file to set up the processing
&#x9;&#x9;startingFolderVector - 
&#x9;&#x9;&#x9;defines which data source folders to process, 
&#x9;&#x9;&#x9;where the views get generated, 
&#x9;&#x9;&#x9;and whether the sub-folders are derived from the source or defined absolutely

&#x9;2) Refresh Studio to see the Views that were generated
&#x9;----------
&#x9;Cautions:
&#x9;----------
&#x9;   CAUTION(1): Overlapping sourceFolderPath definitions will result in duplicated views being produced
&#x9;&#x9;Take the 2 example source folder paths expressed below.  The 2nd one is a sub-directory of the first one.
&#x9;&#x9;This will result in the same source folders being processed twice which generates the same mapping views
&#x9;&#x9;but in different target folders.
&#x9;&#x9;(1,&apos;CV&apos;,&apos;A&apos;,&apos;/shared/BestPractices/DataAbstractionSample/Business/Logical&apos;,null,&apos;/shared/BestPractices/DataAbstractionSample/Application/Views&apos;);
&#x9;&#x9;(1,&apos;CV&apos;,&apos;A&apos;,&apos;/shared/BestPractices/DataAbstractionSample/Business/Logical/CISORADEMO&apos;,null,&apos;/shared/BestPractices/DataAbstractionSample/Application/Views/CISORADEMO&apos;);

&#x9;    CAUTION(2): Source Folder Path definitions are case sensitive and must match the actual source path that you
&#x9;&#x9;want to introspect to create mapping views from.

&#x9;    CAUTION(3): Only views and procedures that produces a cursor output is supported.  Procedures include, parameterized or customer procedures
&#x9;&#x9;&#x9;with cursor output, XSLT with cursor output, packaged queries with cursor output.

&#x9;Input:
&#x9;&#x9;&#x9;-- 0           - print the output to the cursor.  The cursor is bound by Composite Studio &quot;Fetch Row Size&quot; and &quot;Cursor Fetch Limit&quot;
&#x9;&#x9;&#x9;--               The cursor stops producing output when it hits those limits.  The limits are configured in Composite Studio
&#x9;&#x9;&#x9;--                  AdministrationConfigurationStudioDataFetch Rows Size and Cursor Fetch Limit.  
&#x9;&#x9;&#x9;--                  Modify the Cursor Fetch Limit to an arbitrary number such as 500
&#x9;&#x9;&#x9;-- 1 (default) - do not print the cursor output to the cursor but redirect to the console window.  The aforementioned limits do not apply.
&#x9;&#x9;generateViewsWrapper

&#x9;&#x9;&#x9;-- allows user to decide whether they want to overwrite an existing view or not.
&#x9;&#x9;&#x9;-- 0=&quot;FAIL_IF_EXISTS&quot;=do not overwrite the resource.  If the resource exists, raise an exception.
&#x9;&#x9;&#x9;-- 1=&quot;SKIP_IF_EXISTS&quot;=skip the resource if it exists and continue processing
&#x9;&#x9;&#x9;-- 2 (default)=&quot;OVERWRITE_IF_EXISTS&quot;=do overwrite the resource if it exists.
&#x9;&#x9;overwrite

&#x9;&#x9;&#x9;-- flag indicating the mode in which to copy privileges.  Privileges are only copied from the parent when creating new resources including folders.
&#x9;&#x9;&#x9;-- null (default) - do not set any privileges at all
&#x9;&#x9;&#x9;-- 0 - set mode to &quot;OVERWRITE_APPEND&quot; - merges and does not update privileges for users or groups not mentioned.
&#x9;&#x9;&#x9;-- 1 - set the mode to &quot;SET_EXACTLY&quot; - makes privileges look exactly like those provided in the call.
&#x9;&#x9;copyPrivilegeMode

&#x9;&#x9;&#x9;-- specifies how the source resource will be matched against the resource being interrogated
&#x9;&#x9;&#x9;--&#x9;0=fuzzy match - sourcePath + derivedFilterPath must simply be contained within resourcePath
&#x9;&#x9;&#x9;--&#x9;1 (default)=exact match - sourcePath + derivedFilterPath must match exactly in resourcePath
&#x9;&#x9;exactMatch

&#x9;&#x9;&#x9;-- The list &quot;derivedFilterPath&quot; is a comma-separated list of resources and may be used with either generateToFolder (option 1) to groupId (option 2) 
&#x9;&#x9;&#x9;-- The path is derived by concatenating the partial filter path with the source path either from the sourceResource or of the designated layer type and groupId.
&#x9;&#x9;&#x9;-- The layerType and the groupId are used to filter the rows from the configureStartingFolders.  The source path is
&#x9;&#x9;&#x9;--    defined in configureStartingFolders per the layerType and groupId combination.
&#x9;&#x9;&#x9;--   e.g. layerType=CP and sourceFolderPath=/shared/BestPractices/DataAbstractionAbstractionSample/Application/Views
&#x9;&#x9;&#x9;--        The derivedFilterPath list=&quot;Orders_Closed,/Orders/Customers,Orders/Product&quot;
&#x9;&#x9;&#x9;--        Even though there are several other views in the /Orders folder under the /Application/Views only the ones specified
&#x9;&#x9;&#x9;--&#x9;      will be generated to the Application/Published.  Views directly under the source path do not require any qualifying path except the view name.
&#x9;&#x9;&#x9;--        Lastly, a leading &apos;/&apos; is not required but may be present if desired.
&#x9;&#x9;&#x9;-- Correlate the groupId position with the derivedFilterPath position
&#x9;&#x9;&#x9;--&#x9;&#x9;derivedFilterPath=&quot;customers,orders&quot;,shippingmethods
&#x9;&#x9;&#x9;--                         |                     |
&#x9;&#x9;&#x9;--                         v                     v
&#x9;&#x9;&#x9;--&#x9;&#x9;          groupId=ds_inventory.tutorial,ds_orders.tutorial
&#x9;&#x9;&#x9;-- If null, generate views from all source folders as directed by the sourceResource or &quot;configure starting folders&quot; and the designated layer type.
&#x9;&#x9;derivedFilterPath

&#x9;&#x9;&#x9;-- name of the type definition procedure.  e.g. TypeDefinitions
&#x9;&#x9;&#x9;- If null, then the default name &apos;TypeDefinitions&apos; is used.
&#x9;&#x9;typeDefProcName

&#x9;&#x9;-- OPTION 1
 &#x9;&#x9;&#x9;-- The source folder in CIS to begin searching for views to publish to a Composite data source or to another folder
&#x9;&#x9;&#x9;-- or the specific source View or Procedure to publish to a Composite data source or to another folder
&#x9;&#x9;&#x9;-- If this is set it supercedes layerType, inGroupIDs and derivedFilterPath
&#x9;&#x9;sourceResource

&#x9;&#x9;&#x9;-- This is the full path to the folder in which to generate the views
&#x9;&#x9;&#x9;-- This is only required if option 1: targetResource is provided.
&#x9;&#x9;&#x9;-- If targetResource is not blank, then it is used and groupIds and derivedFilterPath are ignored
&#x9;&#x9;publishToFolder

&#x9;&#x9;-- OPTION 2
 &#x9;&#x9;&#x9;-- If sourceResource is blank, then groupIds must be set with derivedFilterPath being optional

&#x9;&#x9;&#x9;-- The actual input are defined as local variables with DEFAULT values.  Adjust those variables accordingly.
&#x9;&#x9;&#x9;-- Tells the generation script which starting folder (layer) to use to generate type definitions.
&#x9;&#x9;&#x9;-- PM=Physical Metadata - used by generateDasourceList
&#x9;&#x9;&#x9;-- CR=CRUD Target Folder Path - generateTypeDefinitions and generateCRUDOperations invokes generateViews
&#x9;&#x9;&#x9;-- PV=Physical Views - generatePhysicalViews invokes generateViews
&#x9;&#x9;&#x9;-- FV=Formatting Views - generateFormattingViews invokes generateViews
&#x9;&#x9;&#x9;-- BV=Business Views - generateBusinessViews invokes generateViews
&#x9;&#x9;&#x9;-- LV=Logical Views - generateLoicalViews invokes generateViews
&#x9;&#x9;&#x9;-- CV=Client Views - generateClientViews invokes generateViews
&#x9;&#x9;&#x9;-- CP=Client Published - generateClientPublished invokes generateViews
&#x9;&#x9;&#x9;-- DB=Database published link - generatePublishedResource invokes generateViews
&#x9;&#x9;layerType

&#x9;&#x9;&#x9;-- This is a comma separate list group ids to process. 
&#x9;&#x9;&#x9;-- This is a filter that allows the user to only generate for a specific group or list of groups
&#x9;&#x9;&#x9;--   found in the /_scripts/Configure/ConfigureStartingFolders.
&#x9;&#x9;&#x9;--   Pass in null to select all groupIds.
&#x9;&#x9;groupIds

&#x9;Output:
&#x9;&#x9;success&#x9;&#x9;&#x9;&#x9;BIT, &#x9;&#x9;- 1=success, 0=not successful
&#x9;&#x9;scripttext&#x9;&#x9;&#x9;LONGVARCHAR - The actual script text that is generated representing the Type Definition procedure

&#x9;Exceptions:  none

&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;CSW Version:&#x9;Reason:
&#x9;08/20/2010&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.1.0&#x9;&#x9;&#x9;Created new
&#x9;04/15/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.2.0&#x9;&#x9;&#x9;Updated for Best Practices 7.0
&#x9;05/02/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.2.0&#x9;&#x9;&#x9;Updated for Best Practices 7.1 - added overwrite, copyAnnotation, publishToFolder, targetResource
&#x9;07/31/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.0.0&#x9;&#x9;&#x9;Updated for Best Practices 7.3 - moved console output to /shared/BestPractices_vXX/Procedures/generateViews
&#x9;08/08/2014&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.2.6&#x9;&#x9;&#x9;B.P. 8.1.3: Added check for dependency views in target path.  Don&apos;t generate when 0 or 1.  Changed default overwrite=1 instead of 2.
&#x9;08/08/2014&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.2.5&#x9;&#x9;&#x9;B.P. 8.1.3: Modified ability generate cast statements under various conditions when generateMode=G or R and generateCast=0-5.
&#x9;&#x9;&#x9;Added generateCast=2,3,4,5 allowing for &quot;NO&quot; CAST around index columns and adding a CAST display column for index columns.
&#x9;&#x9;&#x9;--&#x9;0=Do not generate CAST statement.  Pass through column as is.  Default behavior.
&#x9;&#x9;&#x9;-- &#x9;1=Generate the CAST statement around the column
&#x9;&#x9;&#x9;--&#x9;2-Generate the CAST statement around the non-index columns only (No CAST on index columns)
&#x9;&#x9;&#x9;--&#x9;3-Generate the CAST statement around the non-index columns only and generate a &quot;display&quot; column for each index column.  (No CAST o nindex columns)
&#x9;&#x9;&#x9;--&#x9;4-Generate the CAST statement around the non-index columns and non-primary key index columns only (No CAST on primary key index columns)
&#x9;&#x9;&#x9;--&#x9;5-Generate the CAST statement around the non-index columns and non-primary key index columns only and generate a &quot;display&quot; column for each primary key index column.  (No CAST on primary key index columns)
&#x9;01/24/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;8.0.0&#x9;&#x9;&#x9;B.P. 2019.1: Added the ability to handle columnCaseRule, resourcePrefix, resourceSuffix and newColumnList for generateMode=&apos;G&apos;. 
&#x9;01/29/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;8.0.0&#x9;&#x9;&#x9;B.P. 2019.101: Fix bug so derivedFilterPath could be used with generateToFolder.
&#x9;03/14/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;B.P. 2019.102: Added scriptsPath for flexibility of the location of the _scripts folder.
&#x9;06/12/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;B.P. 2019.200: Modified to use XML based procedures in order to eliminate vector usage.

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

*/
PROCEDURE generateTypeDefinitions(
&#x9;&#x9;-- 0           - print the output to the cursor.  The cursor is bound by Composite Studio &quot;Fetch Row Size&quot; and &quot;Cursor Fetch Limit&quot;
&#x9;&#x9;--               The cursor stops producing output when it hits those limits.  The limits are configured in Composite Studio
&#x9;&#x9;--                  AdministrationConfigurationStudioDataFetch Rows Size and Cursor Fetch Limit.  
&#x9;&#x9;--                  Modify the Cursor Fetch Limit to an arbitrary number such as 500
&#x9;&#x9;-- 1 (default) - do not print the cursor output to the cursor but redirect to the console window.  The aforementioned limits do not apply.
&#x9;IN generateViewsWrapper&#x9;&#x9;&#x9;BIT,

&#x9;&#x9;-- allows user to decide whether they want to overwrite an existing view or not.
&#x9;&#x9;-- 0=&quot;FAIL_IF_EXISTS&quot;=do not overwrite the resource.  If the resource exists, raise an exception.
&#x9;&#x9;-- 1=&quot;SKIP_IF_EXISTS&quot;=skip the resource if it exists and continue processing
&#x9;&#x9;-- 2 (default)=&quot;OVERWRITE_IF_EXISTS&quot;=do overwrite the resource if it exists.
&#x9;IN overwrite&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER,

&#x9;&#x9;-- flag indicating the mode in which to copy privileges.  Privileges are only copied from the parent when creating new resources including folders.
&#x9;&#x9;-- null (default) - do not set any privileges at all
&#x9;&#x9;-- 0 - set mode to &quot;OVERWRITE_APPEND&quot; - merges and does not update privileges for users or groups not mentioned.
&#x9;&#x9;-- 1 - set the mode to &quot;SET_EXACTLY&quot; - makes privileges look exactly like those provided in the call.
&#x9;IN copyPrivilegeMode&#x9;&#x9;&#x9;BIT,

&#x9;&#x9;-- specifies how the source resource will be matched against the resource being interrogated
&#x9;&#x9;-- 0=fuzzy match - sourcePath + derivedFilterPath must simply be contained within resourcePath
&#x9;&#x9;-- 1 (default)=exact match - sourcePath + derivedFilterPath must match exactly in resourcePath
&#x9;IN exactMatch&#x9;&#x9;&#x9;&#x9;&#x9;BIT,

&#x9;&#x9;-- The list &quot;derivedFilterPath&quot; is a comma-separated list of resources and may be used with either generateToFolder (option 1) to groupId (option 2) 
&#x9;&#x9;-- The path is derived by concatenating the partial filter path with the source path either from the sourceResource or of the designated layer type and groupId.
&#x9;&#x9;-- The layerType and the groupId are used to filter the rows from the configureStartingFolders.  The source path is
&#x9;&#x9;--    defined in configureStartingFolders per the layerType and groupId combination.
&#x9;&#x9;--   e.g. layerType=CP and sourceFolderPath=/shared/BestPractices/DataAbstractionAbstractionSample/Application/Views
&#x9;&#x9;--        The derivedFilterPath list=&quot;Orders_Closed,/Orders/Customers,Orders/Product&quot;
&#x9;&#x9;--        Even though there are several other views in the /Orders folder under the /Application/Views only the ones specified
&#x9;&#x9;--&#x9;      will be generated to the Application/Published.  Views directly under the source path do not require any qualifying path except the view name.
&#x9;&#x9;--        Lastly, a leading &apos;/&apos; is not required but may be present if desired.
&#x9;&#x9;-- Correlate the groupId position with the derivedFilterPath position
&#x9;&#x9;--&#x9;&#x9;derivedFilterPath=&quot;customers,orders&quot;,shippingmethods
&#x9;&#x9;--                         |                     |
&#x9;&#x9;--                         v                     v
&#x9;&#x9;--&#x9;&#x9;          groupId=ds_inventory.tutorial,ds_orders.tutorial
&#x9;&#x9;-- If null, generate views from all source folders as directed by the sourceResource or &quot;configure starting folders&quot; and the designated layer type.
&#x9;IN derivedFilterPath&#x9;&#x9;&#x9;LONGVARCHAR,

&#x9;&#x9;-- name of the type definition procedure.  e.g. TypeDefinitions
&#x9;&#x9;-- If null, then the default name &apos;TypeDefinitions&apos; is used.
&#x9;IN typeDefProcName&#x9;&#x9;&#x9;&#x9;VARCHAR,
&#x9;
&#x9;-- OPTION 1 - generate views is controlled by explicit folder settings for a source resource and the folder to generate views to.
&#x9;&#x9;-- &#x9;&#x9;  Use sourceResource and generateToFolder explicitly.   If blank then use layerType, groupIds and derivedFilterPath.
 &#x9;&#x9;-- The source folder in CIS to begin searching for views to generate CRUD procedures from
&#x9;&#x9;-- If this is set it supercedes the parameters set for layerType, groupIds and derivedFilterPath
&#x9;IN sourceResource&#x9;&#x9;&#x9;&#x9;LONGVARCHAR,

&#x9;&#x9;-- This is the full path to the folder in which to generate the views
&#x9;&#x9;-- This is only required if option 1: sourceResource is provided.
&#x9;IN generateToFolder&#x9;&#x9;&#x9;&#x9;LONGVARCHAR,

&#x9;-- OPTION 2 - generate views is controlled via layerType, groupIds and derivedFilter from the ConfigureStartingFolders
 &#x9;&#x9;-- If sourceResource is blank, then groupIds must be set with derivedFilterPath being optional
&#x9;&#x9;-- PM=Physical Metadata - used by generateDasourceList
&#x9;&#x9;-- CR=CRUD Target Folder Path - generateTypeDefinitions and generateCRUDOperations invokes generateViews
&#x9;&#x9;-- PV=Physical Views - generatePhysicalViews invokes generateViews
&#x9;&#x9;-- FV=Formatting Views - generateFormattingViews invokes generateViews
&#x9;&#x9;-- BV=Business Views - generateBusinessViews invokes generateViews
&#x9;&#x9;-- LV=Logical Views - generateLoicalViews invokes generateViews
&#x9;&#x9;-- CV=Client Views - generateClientViews invokes generateViews
&#x9;&#x9;-- CP=Client Published - generateClientPublished invokes generateViews
&#x9;&#x9;-- DB=Database published link - generatePublishedResource invokes generateViews
&#x9;IN layerType&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR,

&#x9;&#x9;-- This is a comma separate list group ids to process. 
&#x9;&#x9;-- This is a filter that allows the user to only generate for a specific group or list of groups
&#x9;&#x9;--   found in the /_scripts/Configure/ConfigureStartingFolders.
&#x9;&#x9;--   Pass in null to select all groupIds.
&#x9;IN groupIds&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR,

    OUT result CURSOR &#x9;&#x9;&#x9;&#x9;/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions.generateCRUDRow
)
BEGIN
-- *******************************************************************************************************
-- *  Default Profile for generating the &quot;Physical&quot; layer from the &quot;Physical_Metadata&quot; layer
-- *******************************************************************************************************
    &#x9;-- G=Generate the resource names 
&#x9;&#x9;-- R=Retrieve the resource name from a spreadsheet. (resources include PATH names, VIEW names AND COLUMN names)
    DECLARE generateMode&#x9;&#x9;&#x9;&#x9;CHAR(1) DEFAULT &apos;G&apos;;

    &#x9;-- A=Return All abstract columns, 
    &#x9;-- U=Return ONLY Unchanged/Dropped columns that were NOT found.
    DECLARE outputMode&#x9; &#x9;&#x9;&#x9;&#x9;CHAR(1) DEFAULT &apos;A&apos;;

 &#x9;&#x9;-- 0=Do not generate - (browse only) print out what will happen but don&apos;t perform the generation.
&#x9;&#x9;-- 1=Do generate [DEFAULT] - Perform the VIEW Generation with a column projection.
&#x9;&#x9;-- 2=Do generate           - Perform the VIEW Generation with a select * projection.
    DECLARE generateViews&#x9;&#x9;&#x9;&#x9;SMALLINT DEFAULT 1;

&#x9;&#x9;--  TABLES only.  This resourceCaseRule is only used for tables.
&#x9;&#x9;--&#x9; Assumption:  The original table name has to have separators (_) for this to work properly.
&#x9;&#x9;--&#x9;&#x9;&#x9;     If the original word has no separators then the case rule gets applied to the single word.
    &#x9;-- &#x9;j=javaCase - 1st word part is lower case, following word parts are 1st is letter is upper and remaining word part is lower with no separators
&#x9;&#x9;-- &#x9;C=CamelCase - 1st letter of each word part is upper case and remaining word part is lower with no separators
&#x9;&#x9;-- &#x9;T=Title_Case - 1st letter of each word part is upper case and remaining word part is lower with separators retained
&#x9;&#x9;-- &#x9;U=UPPER_CASE - All word parts are UPPER case with separtors retained
&#x9;&#x9;-- &#x9;l=lower_case - All word parts are lower case with separators retained
&#x9;&#x9;-- &#x9;O=Original_case - The word is not changed at all -- just pass it through as is
&#x9;DECLARE resourceCaseRule&#x9;&#x9;&#x9;CHAR(1) DEFAULT &apos;O&apos;; -- (used when generateMode=&apos;G&apos;)

&#x9;&#x9;--  COLUMNS only.  This columnCaseRule is only used for columns.
&#x9;&#x9;--&#x9; Assumption:  The original column name has to have separators (_) for this to work properly.
&#x9;&#x9;--&#x9;&#x9;&#x9;     If the original word has no separators then the case rule gets applied to the single word.
&#x9;&#x9;--&#x9;j=javaCase - 1st word part is lower case, following word parts are 1st is letter is upper and remaining word part is lower with no separators
&#x9;&#x9;--&#x9;C=CamelCase - 1st letter of each word part is upper case and remaining word part is lower with no separators
&#x9;&#x9;--&#x9;T=Title_Case - 1st letter of each word part is upper case and remaining word part is lower with separators retained
&#x9;&#x9;--&#x9;U=UPPER_CASE - All word parts are UPPER case with separtors retained
&#x9;&#x9;--&#x9;l=lower_case - All word parts are lower case with separators retained
&#x9;&#x9;--&#x9;O=Original_case - The word is not changed at all -- just pass it through as is
&#x9;DECLARE columnCaseRule&#x9;&#x9;&#x9;&#x9;CHAR(1) DEFAULT &apos;O&apos;; -- (used when generateMode=&apos;G&apos;)

    &#x9;-- 0=DO NOT perform alias rule lookup at all.  Word Part is passed through
&#x9;&#x9;-- 1=Use alias rule and MATCH CASE exactly
&#x9;&#x9;-- 2=Use alias rule and DO NOT MATCH CASE
&#x9;DECLARE useAliasRule&#x9;&#x9;&#x9;&#x9;SMALLINT DEFAULT 0;&#x9;-- (used when generateMode=&apos;G&apos;)

&#x9;&#x9;--  Any set of characters used to prefix a table or procedure name.  Include underscores with the suffix if applicable.
&#x9;&#x9;--&#x9;Example: V_ MY_TABLE or V_MY_TABLE &#x9;
&#x9;DECLARE resourcePrefix &#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT null; --(used when generateMode=&apos;G&apos;)

&#x9;&#x9;--  Any set of characters used to suffix a table or procedure name.  Include underscores with the suffix if applicable.
&#x9;&#x9;--&#x9;Example: _APP MY_TABLE or MY_TABLE_APP &#x9;
&#x9;DECLARE resourceSuffix &#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT null; --(used when generateMode=&apos;G&apos;)

&#x9;&#x9;-- A formatted list of new columns to add to the end of the view.  The column will not be added if it already exists.
&#x9;&#x9;-- The format is as follows:  column1&amp;&amp;type1&amp;&amp;value1//column2&amp;&amp;type2&amp;&amp;value2//column3&amp;&amp;type3&amp;&amp;value3
&#x9;DECLARE newColumnList&#x9;&#x9;&#x9;&#x9;LONGVARCHAR DEFAULT null; --(used when generateMode=&apos;G&apos;)

&#x9;&#x9;-- 0=Do NOT generate the view with the source column (no pass through)-logical status is DROPPED
    &#x9;-- 1=Generate the view with the source column (pass through)-logical status is UNCHANGED
    DECLARE generateWithSourceColumn &#x9;SMALLINT DEFAULT NULL;-- (used when generateMode=&apos;R&apos;)

&#x9;&#x9;-- &#x9;This parameter allows the user to control whether to generate the cast statement around the generated
&#x9;&#x9;--&#x9;   column or not.  It uses the column type from the source view.
&#x9;&#x9;--&#x9;0=Do not generate CAST statement.  Pass through column as is.  Default behavior.
&#x9;&#x9;-- &#x9;1=Generate the CAST statement around the column
&#x9;&#x9;--&#x9;2-Generate the CAST statement around the non-index columns only (No CAST on index columns)
&#x9;&#x9;--&#x9;3-Generate the CAST statement around the non-index columns only and generate a &quot;display&quot; CAST column for each index column.  (No CAST o nindex columns)
&#x9;&#x9;--&#x9;4-Generate the CAST statement around the non-index columns and non-primary key index columns only (No CAST on primary key index columns)
&#x9;&#x9;--&#x9;5-Generate the CAST statement around the non-index columns and non-primary key index columns only and generate a &quot;display&quot; CAST column for each primary key index column.  (No CAST on primary key index columns)
&#x9;DECLARE generateCast &#x9;&#x9;&#x9;&#x9;SMALLINT DEFAULT 0;-- (used when generateMode=&apos;G&apos; or &apos;R&apos;)

&#x9;&#x9;--&#x9;generateIndexes - This parameter allows the user to control whether to generate indexes on the target views as derived from the underlying resources
&#x9;&#x9;--&#x9;0=Do not generate indexes
&#x9;&#x9;-- &#x9;1=(default) Generate indexes
&#x9;DECLARE generateIndexes &#x9;&#x9;&#x9;SMALLINT DEFAULT 0;

&#x9;&#x9;-- comma separated list of resource paths or partials paths to exclude.  This may be useful when a data source has been moved and it&apos;s index or foreign keys
&#x9;&#x9;--&#x9;are pointing to another data source that does not exist anymore.  It may be necessary to exclude that path or paths.  If an exception is thrown during 
&#x9;&#x9;--&#x9;execution, try excluding those paths.
&#x9;&#x9;--&#x9;Values: /shared/MyPath/Physical/Metadata/MyDatasource
&#x9;DECLARE excludeDsPathsList&#x9;&#x9;&#x9;LONGVARCHAR DEFAULT null;

&#x9;&#x9;-- flag indicating whether to ignore or generate unsupported column types.  For example in Oracle an SDO spatial type gets imported into Composite as &apos;OTHER&apos;.
&#x9;&#x9;-- 0/null (default) - ignore column type = &apos;OTHER&apos; and do not generate that column
&#x9;&#x9;-- 1 - generate columns where the column type = &apos;OTHER&apos;
&#x9;DECLARE generateUnsupportedColumnType INTEGER DEFAULT 0;

&#x9;&#x9;-- Path to the base project directory.
    DECLARE basePath&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(4000);

&#x9;&#x9;-- Path to the scripts project directory.
&#x9;DECLARE scriptsPath&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(4000);

    DECLARE ConfigParamsXML&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE moduleName&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;generateTypeDefinitions&apos;;
&#x9;DECLARE i&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER DEFAULT 1;

&#x9;-----------------------------------------------------------------
&#x9;-- NOTE: Make sure the path is pointing to the correct project
&#x9;-----------------------------------------------------------------
&#x9;set basePath = /shared/ASAssets/BestPractices_v81/DataAbstraction_GENERIC_Template/&quot;_scripts&quot;/Constants/defaultValues.basePath;
&#x9;set scriptsPath = /shared/ASAssets/BestPractices_v81/DataAbstraction_GENERIC_Template/&quot;_scripts&quot;/Constants/defaultValues.scriptsPath;

&#x9;-- Set environment variables
&#x9;call /lib/util/SetEnvironment(&apos;best.practices.scriptsPath&apos;,scriptsPath);
&#x9;call /lib/util/SetEnvironment(&apos;best.practices.generateType&apos;,&apos;VIEW&apos;);
&#x9;call /lib/util/SetEnvironment(&apos;best.practices.generateViewsWrapper&apos;,CAST(generateViewsWrapper AS VARCHAR));
 &#x9;call /lib/util/SetEnvironment(&apos;best.practices.overwrite&apos;,CAST(overwrite AS VARCHAR));
&#x9;call /lib/util/SetEnvironment(&apos;best.practices.copyAnnotation&apos;,&apos;NULL&apos;);
&#x9;call /lib/util/SetEnvironment(&apos;best.practices.copyPrivilegeMode&apos;,CAST(copyPrivilegeMode AS VARCHAR));
&#x9;call /lib/util/SetEnvironment(&apos;best.practices.sourceResource&apos;,sourceResource);
  &#x9;call /lib/util/SetEnvironment(&apos;best.practices.generateToFolder&apos;,generateToFolder);
&#x9;call /lib/util/SetEnvironment(&apos;best.practices.exactMatch&apos;,CAST(exactMatch AS VARCHAR));
&#x9;call /lib/util/SetEnvironment(&apos;best.practices.executeModuleName&apos;,moduleName);
&#x9;call /lib/util/SetEnvironment(&apos;best.practices.typeDefinitionProcedureName&apos;,typeDefProcName);
&#x9;call /lib/util/SetEnvironment(&apos;best.practices.generateUnsupportedColumnType&apos;,CAST(generateUnsupportedColumnType AS VARCHAR));
 &#x9;call /lib/util/SetEnvironment(&apos;best.practices.excludeDsPathsList&apos;,excludeDsPathsList);
 &#x9;call /lib/util/SetEnvironment(&apos;best.practices.newColumnList&apos;,newColumnList);

    CALL /shared/ASAssets/BestPractices_v81/Procedures/getConfigureParamsXML(basePath, generateMode, outputMode, generateViews, resourceCaseRule, columnCaseRule, useAliasRule, resourcePrefix, resourceSuffix, generateWithSourceColumn, generateCast, generateIndexes, ConfigParamsXML);&#x9;    

&#x9;if (generateViewsWrapper is not null and generateViewsWrapper = 0) then
&#x9;&#x9;-- Invoke sending results to &quot;RESULT CURSOR TAB&quot;
 &#x9;&#x9;OPEN result FOR 
&#x9;&#x9;    SELECT * FROM /shared/ASAssets/BestPractices_v81/Procedures/generateViewsXML(ConfigParamsXML, NVL(layerType,&apos;CR&apos;), groupIds, derivedFilterPath);
&#x9;else
&#x9;&#x9;-- Invoke sending results to &quot;CONSOLE WINDOW TAB&quot;
&#x9;&#x9;for r as 
&#x9;&#x9;    SELECT * FROM /shared/ASAssets/BestPractices_v81/Procedures/generateViewsXML(ConfigParamsXML, NVL(layerType,&apos;CR&apos;), groupIds, derivedFilterPath) 
&#x9;&#x9;do
&#x9;&#x9;&#x9;set i = i + 1;
&#x9;&#x9;end for;
&#x9;end if; 
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1564598100031</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
</metadata>